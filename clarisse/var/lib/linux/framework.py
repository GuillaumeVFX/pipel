# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_framework')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_framework')
    _framework = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_framework', [dirname(__file__)])
        except ImportError:
            import _framework
            return _framework
        try:
            _mod = imp.load_module('_framework', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _framework = swig_import_helper()
    del swig_import_helper
else:
    import _framework
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import base
class ResourceData(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceData, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ResourceData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ResourceData
    __del__ = lambda self: None

    def get_memory_size(self):
        return _framework.ResourceData_get_memory_size(self)

    def get_import_data(self):
        return _framework.ResourceData_get_import_data(self)

    def set_import_data(self, data):
        return _framework.ResourceData_set_import_data(self, data)

    def get_hash_key(self):
        return _framework.ResourceData_get_hash_key(self)

    def is_serializable(self):
        return _framework.ResourceData_is_serializable(self)

    def serialize(self, serial_size):
        return _framework.ResourceData_serialize(self, serial_size)

    def deserialize(self, serial, serial_size):
        return _framework.ResourceData_deserialize(self, serial, serial_size)

    def advert_memory_changed(self):
        return _framework.ResourceData_advert_memory_changed(self)

    def is_protected(self):
        return _framework.ResourceData_is_protected(self)
    if _newclass:
        class_info = staticmethod(_framework.ResourceData_class_info)
    else:
        class_info = _framework.ResourceData_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ResourceData____class_destructor__)
    else:
        ___class_destructor__ = _framework.ResourceData____class_destructor__

    def get_class_info(self):
        return _framework.ResourceData_get_class_info(self)
ResourceData_swigregister = _framework.ResourceData_swigregister
ResourceData_swigregister(ResourceData)

def ResourceData_class_info():
    return _framework.ResourceData_class_info()
ResourceData_class_info = _framework.ResourceData_class_info

def ResourceData____class_destructor__(instance, is_array):
    return _framework.ResourceData____class_destructor__(instance, is_array)
ResourceData____class_destructor__ = _framework.ResourceData____class_destructor__

class ResourceUser(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceUser, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceUser, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_ResourceUser
    __del__ = lambda self: None

    def refresh(self):
        return _framework.ResourceUser_refresh(self)

    def on_resource_update(self, connection, data):
        return _framework.ResourceUser_on_resource_update(self, connection, data)

    def is_protected(self):
        return _framework.ResourceUser_is_protected(self)
    if _newclass:
        class_info = staticmethod(_framework.ResourceUser_class_info)
    else:
        class_info = _framework.ResourceUser_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ResourceUser____class_destructor__)
    else:
        ___class_destructor__ = _framework.ResourceUser____class_destructor__

    def get_class_info(self):
        return _framework.ResourceUser_get_class_info(self)
ResourceUser_swigregister = _framework.ResourceUser_swigregister
ResourceUser_swigregister(ResourceUser)

def ResourceUser_class_info():
    return _framework.ResourceUser_class_info()
ResourceUser_class_info = _framework.ResourceUser_class_info

def ResourceUser____class_destructor__(instance, is_array):
    return _framework.ResourceUser____class_destructor__(instance, is_array)
ResourceUser____class_destructor__ = _framework.ResourceUser____class_destructor__

class ResourceProperty(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceProperty, name)
    __repr__ = _swig_repr
    TYPE_INT_8 = _framework.ResourceProperty_TYPE_INT_8
    TYPE_UINT_8 = _framework.ResourceProperty_TYPE_UINT_8
    TYPE_INT_16 = _framework.ResourceProperty_TYPE_INT_16
    TYPE_UINT_16 = _framework.ResourceProperty_TYPE_UINT_16
    TYPE_INT_32 = _framework.ResourceProperty_TYPE_INT_32
    TYPE_UINT_32 = _framework.ResourceProperty_TYPE_UINT_32
    TYPE_INT_64 = _framework.ResourceProperty_TYPE_INT_64
    TYPE_UINT_64 = _framework.ResourceProperty_TYPE_UINT_64
    TYPE_FLOAT_16 = _framework.ResourceProperty_TYPE_FLOAT_16
    TYPE_FLOAT_32 = _framework.ResourceProperty_TYPE_FLOAT_32
    TYPE_FLOAT_64 = _framework.ResourceProperty_TYPE_FLOAT_64
    TYPE_CHAR = _framework.ResourceProperty_TYPE_CHAR
    TYPE_WCHAR = _framework.ResourceProperty_TYPE_WCHAR
    TYPE_COUNT = _framework.ResourceProperty_TYPE_COUNT
    if _newclass:
        get_type_size = staticmethod(_framework.ResourceProperty_get_type_size)
    else:
        get_type_size = _framework.ResourceProperty_get_type_size
    if _newclass:
        get_type_name = staticmethod(_framework.ResourceProperty_get_type_name)
    else:
        get_type_name = _framework.ResourceProperty_get_type_name

    def __init__(self, *args):
        this = _framework.new_ResourceProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ResourceProperty
    __del__ = lambda self: None

    def get_copy(self):
        return _framework.ResourceProperty_get_copy(self)

    def init(self, *args):
        return _framework.ResourceProperty_init(self, *args)

    def remap(self, item_value_count, item_count):
        return _framework.ResourceProperty_remap(self, item_value_count, item_count)

    def set_name(self, name):
        return _framework.ResourceProperty_set_name(self, name)

    def set_values(self, *args):
        return _framework.ResourceProperty_set_values(self, *args)

    def set_item_values(self, item_index, values, count=1):
        return _framework.ResourceProperty_set_item_values(self, item_index, values, count)

    def set_string(self, item_index, s):
        return _framework.ResourceProperty_set_string(self, item_index, s)

    def set_wstring(self, item_index, s):
        return _framework.ResourceProperty_set_wstring(self, item_index, s)

    def set_byte(self, *args):
        return _framework.ResourceProperty_set_byte(self, *args)

    def set_short(self, *args):
        return _framework.ResourceProperty_set_short(self, *args)

    def set_int(self, *args):
        return _framework.ResourceProperty_set_int(self, *args)

    def set_long(self, *args):
        return _framework.ResourceProperty_set_long(self, *args)

    def set_half(self, *args):
        return _framework.ResourceProperty_set_half(self, *args)

    def set_float(self, *args):
        return _framework.ResourceProperty_set_float(self, *args)

    def set_double(self, *args):
        return _framework.ResourceProperty_set_double(self, *args)

    def get_memory_size(self):
        return _framework.ResourceProperty_get_memory_size(self)

    def get_name(self):
        return _framework.ResourceProperty_get_name(self)

    def get_value_type(self):
        return _framework.ResourceProperty_get_value_type(self)

    def get_value_size(self):
        return _framework.ResourceProperty_get_value_size(self)

    def get_item_count(self):
        return _framework.ResourceProperty_get_item_count(self)

    def get_value_count(self):
        return _framework.ResourceProperty_get_value_count(self)

    def get_item_value_count(self, item_index):
        return _framework.ResourceProperty_get_item_value_count(self, item_index)

    def get_item_value_offset(self, item_index):
        return _framework.ResourceProperty_get_item_value_offset(self, item_index)

    def get_values(self):
        return _framework.ResourceProperty_get_values(self)

    def get_value(self, value_index):
        return _framework.ResourceProperty_get_value(self, value_index)

    def get_item_values(self, item_index):
        return _framework.ResourceProperty_get_item_values(self, item_index)

    def get_string(self, item_index):
        return _framework.ResourceProperty_get_string(self, item_index)

    def get_wstring(self, item_index):
        return _framework.ResourceProperty_get_wstring(self, item_index)

    def get_byte(self, item_index):
        return _framework.ResourceProperty_get_byte(self, item_index)

    def get_byte_value(self, item_index, rank=0):
        return _framework.ResourceProperty_get_byte_value(self, item_index, rank)

    def get_short(self, item_index):
        return _framework.ResourceProperty_get_short(self, item_index)

    def get_short_value(self, item_index, rank=0):
        return _framework.ResourceProperty_get_short_value(self, item_index, rank)

    def get_int(self, item_index):
        return _framework.ResourceProperty_get_int(self, item_index)

    def get_int_value(self, item_index, rank=0):
        return _framework.ResourceProperty_get_int_value(self, item_index, rank)

    def get_long(self, item_index):
        return _framework.ResourceProperty_get_long(self, item_index)

    def get_long_value(self, item_index, rank=0):
        return _framework.ResourceProperty_get_long_value(self, item_index, rank)

    def get_half(self, item_index):
        return _framework.ResourceProperty_get_half(self, item_index)

    def get_half_value(self, item_index, rank=0):
        return _framework.ResourceProperty_get_half_value(self, item_index, rank)

    def get_float(self, item_index):
        return _framework.ResourceProperty_get_float(self, item_index)

    def get_float_value(self, item_index, rank=0):
        return _framework.ResourceProperty_get_float_value(self, item_index, rank)

    def get_double(self, item_index):
        return _framework.ResourceProperty_get_double(self, item_index)

    def get_double_value(self, item_index, rank=0):
        return _framework.ResourceProperty_get_double_value(self, item_index, rank)

    def is_homogeneous(self):
        return _framework.ResourceProperty_is_homogeneous(self)

    def get_serial_size(self):
        return _framework.ResourceProperty_get_serial_size(self)

    def serialize(self, serial):
        return _framework.ResourceProperty_serialize(self, serial)

    def deserialize(self, serial):
        return _framework.ResourceProperty_deserialize(self, serial)

    def get_type_description(self):
        return _framework.ResourceProperty_get_type_description(self)
    if _newclass:
        class_info = staticmethod(_framework.ResourceProperty_class_info)
    else:
        class_info = _framework.ResourceProperty_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ResourceProperty____class_destructor__)
    else:
        ___class_destructor__ = _framework.ResourceProperty____class_destructor__

    def get_class_info(self):
        return _framework.ResourceProperty_get_class_info(self)
ResourceProperty_swigregister = _framework.ResourceProperty_swigregister
ResourceProperty_swigregister(ResourceProperty)

def ResourceProperty_get_type_size(type):
    return _framework.ResourceProperty_get_type_size(type)
ResourceProperty_get_type_size = _framework.ResourceProperty_get_type_size

def ResourceProperty_get_type_name(type):
    return _framework.ResourceProperty_get_type_name(type)
ResourceProperty_get_type_name = _framework.ResourceProperty_get_type_name

def ResourceProperty_class_info():
    return _framework.ResourceProperty_class_info()
ResourceProperty_class_info = _framework.ResourceProperty_class_info

def ResourceProperty____class_destructor__(instance, is_array):
    return _framework.ResourceProperty____class_destructor__(instance, is_array)
ResourceProperty____class_destructor__ = _framework.ResourceProperty____class_destructor__

class ResourcePropertyBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourcePropertyBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourcePropertyBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ResourcePropertyBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ResourcePropertyBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ResourcePropertyBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ResourcePropertyBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ResourcePropertyBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ResourcePropertyBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ResourcePropertyBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ResourcePropertyBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ResourcePropertyBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ResourcePropertyBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ResourcePropertyBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ResourcePropertyBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ResourcePropertyBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ResourcePropertyBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ResourcePropertyBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ResourcePropertyBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ResourcePropertyBasicArray_class_info)
    else:
        class_info = _framework.ResourcePropertyBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ResourcePropertyBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ResourcePropertyBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ResourcePropertyBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ResourcePropertyBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ResourcePropertyBasicArray_swigregister = _framework.ResourcePropertyBasicArray_swigregister
ResourcePropertyBasicArray_swigregister(ResourcePropertyBasicArray)

def ResourcePropertyBasicArray_class_info():
    return _framework.ResourcePropertyBasicArray_class_info()
ResourcePropertyBasicArray_class_info = _framework.ResourcePropertyBasicArray_class_info

def ResourcePropertyBasicArray____class_destructor__(instance, is_array):
    return _framework.ResourcePropertyBasicArray____class_destructor__(instance, is_array)
ResourcePropertyBasicArray____class_destructor__ = _framework.ResourcePropertyBasicArray____class_destructor__

class ResourcePropertyArray(ResourcePropertyBasicArray):
    __swig_setmethods__ = {}
    for _s in [ResourcePropertyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourcePropertyArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourcePropertyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourcePropertyArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ResourcePropertyArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ResourcePropertyArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ResourcePropertyArray_append(self, *args)

    def get_count(self):
        return _framework.ResourcePropertyArray_get_count(self)

    def remove_all(self):
        return _framework.ResourcePropertyArray_remove_all(self)

    def resize(self, *args):
        return _framework.ResourcePropertyArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ResourcePropertyArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ResourcePropertyArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ResourcePropertyArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ResourcePropertyArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ResourcePropertyArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ResourcePropertyArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ResourcePropertyArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ResourcePropertyArray_class_info)
    else:
        class_info = _framework.ResourcePropertyArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ResourcePropertyArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ResourcePropertyArray____class_destructor__
ResourcePropertyArray_swigregister = _framework.ResourcePropertyArray_swigregister
ResourcePropertyArray_swigregister(ResourcePropertyArray)

def ResourcePropertyArray_class_info():
    return _framework.ResourcePropertyArray_class_info()
ResourcePropertyArray_class_info = _framework.ResourcePropertyArray_class_info

def ResourcePropertyArray____class_destructor__(instance, is_array):
    return _framework.ResourcePropertyArray____class_destructor__(instance, is_array)
ResourcePropertyArray____class_destructor__ = _framework.ResourcePropertyArray____class_destructor__

class ResourcePropertyVector(ResourcePropertyBasicArray):
    __swig_setmethods__ = {}
    for _s in [ResourcePropertyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourcePropertyVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourcePropertyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourcePropertyVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ResourcePropertyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ResourcePropertyVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ResourcePropertyVector_append(self, *args)

    def add(self, *args):
        return _framework.ResourcePropertyVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ResourcePropertyVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ResourcePropertyVector_remove_last(self)

    def empty(self):
        return _framework.ResourcePropertyVector_empty(self)

    def remove_all(self):
        return _framework.ResourcePropertyVector_remove_all(self)

    def clear(self, *args):
        return _framework.ResourcePropertyVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ResourcePropertyVector_remove(self, *args)

    def is_empty(self):
        return _framework.ResourcePropertyVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ResourcePropertyVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ResourcePropertyVector_remove_items(self, item)

    def get_count(self):
        return _framework.ResourcePropertyVector_get_count(self)

    def get_capacity(self):
        return _framework.ResourcePropertyVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ResourcePropertyVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ResourcePropertyVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ResourcePropertyVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ResourcePropertyVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ResourcePropertyVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ResourcePropertyVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ResourcePropertyVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ResourcePropertyVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ResourcePropertyVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ResourcePropertyVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ResourcePropertyVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ResourcePropertyVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ResourcePropertyVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ResourcePropertyVector_item(self, *args)

    def get_data(self):
        return _framework.ResourcePropertyVector_get_data(self)

    def get_memory_size(self):
        return _framework.ResourcePropertyVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ResourcePropertyVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ResourcePropertyVector_class_info)
    else:
        class_info = _framework.ResourcePropertyVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ResourcePropertyVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ResourcePropertyVector____class_destructor__
ResourcePropertyVector_swigregister = _framework.ResourcePropertyVector_swigregister
ResourcePropertyVector_swigregister(ResourcePropertyVector)

def ResourcePropertyVector_class_info():
    return _framework.ResourcePropertyVector_class_info()
ResourcePropertyVector_class_info = _framework.ResourcePropertyVector_class_info

def ResourcePropertyVector____class_destructor__(instance, is_array):
    return _framework.ResourcePropertyVector____class_destructor__(instance, is_array)
ResourcePropertyVector____class_destructor__ = _framework.ResourcePropertyVector____class_destructor__

class ResourcePropertySet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourcePropertySet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourcePropertySet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ResourcePropertySet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ResourcePropertySet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ResourcePropertySet_get_count(self)

    def is_empty(self):
        return _framework.ResourcePropertySet_is_empty(self)

    def exists(self, *args):
        return _framework.ResourcePropertySet_exists(self, *args)

    def add(self, *args):
        return _framework.ResourcePropertySet_add(self, *args)

    def remove(self, index):
        return _framework.ResourcePropertySet_remove(self, index)

    def remove_item(self, item):
        return _framework.ResourcePropertySet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ResourcePropertySet_remove_set(self, set)

    def remove_all(self):
        return _framework.ResourcePropertySet_remove_all(self)

    def toggle(self, item):
        return _framework.ResourcePropertySet_toggle(self, item)

    def back(self, *args):
        return _framework.ResourcePropertySet_back(self, *args)

    def unite(self, set):
        return _framework.ResourcePropertySet_unite(self, set)

    def intersect(self, set):
        return _framework.ResourcePropertySet_intersect(self, set)

    def is_included(self, set):
        return _framework.ResourcePropertySet_is_included(self, set)

    def get_item(self, index):
        return _framework.ResourcePropertySet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ResourcePropertySet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ResourcePropertySet___ne__(self, set)

    def get_items(self):
        return _framework.ResourcePropertySet_get_items(self)

    def get_array(self, array):
        return _framework.ResourcePropertySet_get_array(self, array)

    def get_list(self, list):
        return _framework.ResourcePropertySet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ResourcePropertySet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ResourcePropertySet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ResourcePropertySet_begin(self, *args)

    def end(self, *args):
        return _framework.ResourcePropertySet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ResourcePropertySet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ResourcePropertySet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ResourcePropertySet_swigregister = _framework.ResourcePropertySet_swigregister
ResourcePropertySet_swigregister(ResourcePropertySet)

class PyOfObject(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyOfObject, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyOfObject, name)
    __repr__ = _swig_repr

    def __init__(self, object):
        this = _framework.new_PyOfObject(object)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_object"] = _framework.PyOfObject_m_object_set
    __swig_getmethods__["m_object"] = _framework.PyOfObject_m_object_get
    if _newclass:
        m_object = _swig_property(_framework.PyOfObject_m_object_get, _framework.PyOfObject_m_object_set)
    __swig_setmethods__["m_app"] = _framework.PyOfObject_m_app_set
    __swig_getmethods__["m_app"] = _framework.PyOfObject_m_app_get
    if _newclass:
        m_app = _swig_property(_framework.PyOfObject_m_app_get, _framework.PyOfObject_m_app_set)


    def __setattr__(self, name, value):
        attr = object.__getattribute__(self, "m_object")
        if attr != None:
            if not attr.__setattr__(name, value): raise

    def __getattr__(self, name):
        attr = object.__getattribute__(self, "m_object")
        if attr != None:
            found_attr = attr.__getattribute__(name)
            return found_attr
        else:
            print "attr not found: " + name
            return None

    def is_kindof(self, class_name):
        attr = object.__getattribute__(self, "m_object")
        if attr != None:
            return attr.is_kindof(class_name)
        else:
            return False
    def __eq__(self, other):
        if isinstance(other, PyOfObject):
            return self.m_object == other.m_object
        elif other is None:
            return self.m_object == None
        return NotImplemented

    def __ne__(self, other):
        result = self.__eq__(other)
        if result is NotImplemented:
            return result
        return not result

    def __dir__(self):
        if self.m_object == None:
            raise ValueError("Object is invalid (deleted?). Nothing to display.")
            return []
        else:
            return dir(self.m_object)



    def __str__(self):
        attr = object.__getattribute__(self, "m_object")
        if attr != None:
            return attr.get_full_name()
        else:
            return "None"
    def __repr__(self):
        attr = object.__getattribute__(self, "m_object")
        if attr != None:
            return attr.get_full_name()
        else:
            return "None"

    __swig_destroy__ = _framework.delete_PyOfObject
    __del__ = lambda self: None
PyOfObject_swigregister = _framework.PyOfObject_swigregister
PyOfObject_swigregister(PyOfObject)

class OfCommandData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfCommandData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfCommandData, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_OfCommandData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfCommandData
    __del__ = lambda self: None
OfCommandData_swigregister = _framework.OfCommandData_swigregister
OfCommandData_swigregister(OfCommandData)

class OfObjectFactory(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfObjectFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfObjectFactory, name)
    __repr__ = _swig_repr

    def __init__(self, application, module_path):
        this = _framework.new_OfObjectFactory(application, module_path)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfObjectFactory
    __del__ = lambda self: None

    def init_vars(self):
        return _framework.OfObjectFactory_init_vars(self)

    def init_root_context(self):
        return _framework.OfObjectFactory_init_root_context(self)

    def get_application(self):
        return _framework.OfObjectFactory_get_application(self)

    def load_project(self, file, options, loaded_object_count, loaded_context_count, progress_bar):
        return _framework.OfObjectFactory_load_project(self, file, options, loaded_object_count, loaded_context_count, progress_bar)

    def get_root(self, *args):
        return _framework.OfObjectFactory_get_root(self, *args)

    def get_default(self, *args):
        return _framework.OfObjectFactory_get_default(self, *args)

    def get_external_root(self, *args):
        return _framework.OfObjectFactory_get_external_root(self, *args)

    def get_context(self, full_name):
        return _framework.OfObjectFactory_get_context(self, full_name)

    def context_exists(self, full_name):
        return _framework.OfObjectFactory_context_exists(self, full_name)

    def add_generic_object(self, *args):
        return _framework.OfObjectFactory_add_generic_object(self, *args)

    def add_object(self, *args):
        return _framework.OfObjectFactory_add_object(self, *args)

    def add_instance(self, *args):
        return _framework.OfObjectFactory_add_instance(self, *args)

    def get_object(self, object_name):
        return _framework.OfObjectFactory_get_object(self, object_name)

    def object_exists(self, object_name):
        return _framework.OfObjectFactory_object_exists(self, object_name)

    def get_object_count(self):
        return _framework.OfObjectFactory_get_object_count(self)

    def remove_object(self, *args):
        return _framework.OfObjectFactory_remove_object(self, *args)

    def remove_all_objects(self):
        return _framework.OfObjectFactory_remove_all_objects(self)

    def add_enum(self, name, invalid_value=0):
        return _framework.OfObjectFactory_add_enum(self, name, invalid_value)

    def enum_exists(self, name):
        return _framework.OfObjectFactory_enum_exists(self, name)

    def get_enum_count(self):
        return _framework.OfObjectFactory_get_enum_count(self)

    def get_enum(self, *args):
        return _framework.OfObjectFactory_get_enum(self, *args)

    def remove_enum(self, *args):
        return _framework.OfObjectFactory_remove_enum(self, *args)

    def remove_all_enums(self):
        return _framework.OfObjectFactory_remove_all_enums(self)

    def reset(self):
        return _framework.OfObjectFactory_reset(self)

    def rename_object(self, *args):
        return _framework.OfObjectFactory_rename_object(self, *args)

    def find_attribute(self, *args):
        return _framework.OfObjectFactory_find_attribute(self, *args)

    def find_attribute_by_rule(self, *args):
        return _framework.OfObjectFactory_find_attribute_by_rule(self, *args)

    def is_attribute_matching_rule(self, prefix, attribute, matching_rule):
        return _framework.OfObjectFactory_is_attribute_matching_rule(self, prefix, attribute, matching_rule)

    def get_objects(self, *args):
        return _framework.OfObjectFactory_get_objects(self, *args)
    if _newclass:
        get_items_names = staticmethod(_framework.OfObjectFactory_get_items_names)
    else:
        get_items_names = _framework.OfObjectFactory_get_items_names

    def get_items(self, *args):
        return _framework.OfObjectFactory_get_items(self, *args)

    def get_all_objects(self, *args):
        return _framework.OfObjectFactory_get_all_objects(self, *args)

    def get_item(self, full_name):
        return _framework.OfObjectFactory_get_item(self, full_name)

    def item_exists(self, full_name):
        return _framework.OfObjectFactory_item_exists(self, full_name)

    def remove_item(self, full_name):
        return _framework.OfObjectFactory_remove_item(self, full_name)

    def remove_items(self, *args):
        return _framework.OfObjectFactory_remove_items(self, *args)

    def get_common_context(self, *args):
        return _framework.OfObjectFactory_get_common_context(self, *args)

    def filter_items(self, *args):
        return _framework.OfObjectFactory_filter_items(self, *args)

    def get_classes(self):
        return _framework.OfObjectFactory_get_classes(self)

    def get_vars(self):
        return _framework.OfObjectFactory_get_vars(self)

    def get_last_event_context(self):
        return _framework.OfObjectFactory_get_last_event_context(self)

    def get_last_event_object(self):
        return _framework.OfObjectFactory_get_last_event_object(self)

    def get_last_event_enum(self):
        return _framework.OfObjectFactory_get_last_event_enum(self)

    def get_resource_manager(self):
        return _framework.OfObjectFactory_get_resource_manager(self)

    def set_resource_manager(self, manager):
        return _framework.OfObjectFactory_set_resource_manager(self, manager)

    def get_time(self):
        return _framework.OfObjectFactory_get_time(self)

    def on_application_evaluation_interrupted(self, sender, event, data):
        return _framework.OfObjectFactory_on_application_evaluation_interrupted(self, sender, event, data)

    def flush(self):
        return _framework.OfObjectFactory_flush(self)

    def get_keyables(self):
        return _framework.OfObjectFactory_get_keyables(self)

    def set_key_to_keyables(self):
        return _framework.OfObjectFactory_set_key_to_keyables(self)

    def accept_keyables(self, flag):
        return _framework.OfObjectFactory_accept_keyables(self, flag)

    def get_command_count(self):
        return _framework.OfObjectFactory_get_command_count(self)

    def add_command(self, callback, data):
        return _framework.OfObjectFactory_add_command(self, callback, data)

    def begin_protection_change(self):
        return _framework.OfObjectFactory_begin_protection_change(self)

    def end_protection_change(self):
        return _framework.OfObjectFactory_end_protection_change(self)

    def is_object_protected(self, object):
        return _framework.OfObjectFactory_is_object_protected(self, object)

    def protect_objects(self, objects, protection_flag):
        return _framework.OfObjectFactory_protect_objects(self, objects, protection_flag)
    if _newclass:
        get_version = staticmethod(_framework.OfObjectFactory_get_version)
    else:
        get_version = _framework.OfObjectFactory_get_version

    def get_copy_buffer(self, copy_buffer, items_names, options=None, attach_resources=True):
        return _framework.OfObjectFactory_get_copy_buffer(self, copy_buffer, items_names, options, attach_resources)

    def get_copy_buffer_with_external_dependencies(self, copy_buffer, items_names, options, export_mode=False):
        return _framework.OfObjectFactory_get_copy_buffer_with_external_dependencies(self, copy_buffer, items_names, options, export_mode)

    def paste_copy_buffer(self, copy_buffer, target_context, created_items):
        return _framework.OfObjectFactory_paste_copy_buffer(self, copy_buffer, target_context, created_items)

    def get_statistics(self, stats):
        return _framework.OfObjectFactory_get_statistics(self, stats)
    if _newclass:
        register_directives = staticmethod(_framework.OfObjectFactory_register_directives)
    else:
        register_directives = _framework.OfObjectFactory_register_directives

    def register_protection_callback(self, cbk, data=None):
        return _framework.OfObjectFactory_register_protection_callback(self, cbk, data)

    def unregister_protection_callback(self, cbk, data=None):
        return _framework.OfObjectFactory_unregister_protection_callback(self, cbk, data)

    def is_visible_item(self, *args):
        return _framework.OfObjectFactory_is_visible_item(self, *args)

    def get_items_dependencies(self, objects, output_items, recursive=False):
        return _framework.OfObjectFactory_get_items_dependencies(self, objects, output_items, recursive)

    def get_items_inputs(self, objects, output_items, recursive=False):
        return _framework.OfObjectFactory_get_items_inputs(self, objects, output_items, recursive)

    def get_items_outputs(self, objects, output_items, recursive=False):
        return _framework.OfObjectFactory_get_items_outputs(self, objects, output_items, recursive)

    def get_items_instances(self, items, output_items, recursive=False):
        return _framework.OfObjectFactory_get_items_instances(self, items, output_items, recursive)

    def get_items_sources(self, items, output_items, recursive=False):
        return _framework.OfObjectFactory_get_items_sources(self, items, output_items, recursive)

    def begin_attr_change_batch(self):
        return _framework.OfObjectFactory_begin_attr_change_batch(self)

    def end_attr_change_batch(self):
        return _framework.OfObjectFactory_end_attr_change_batch(self)
    if _newclass:
        class_info = staticmethod(_framework.OfObjectFactory_class_info)
    else:
        class_info = _framework.OfObjectFactory_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfObjectFactory____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfObjectFactory____class_destructor__

    def get_class_info(self):
        return _framework.OfObjectFactory_get_class_info(self)
OfObjectFactory_swigregister = _framework.OfObjectFactory_swigregister
OfObjectFactory_swigregister(OfObjectFactory)

def OfObjectFactory_get_items_names(items, items_names):
    return _framework.OfObjectFactory_get_items_names(items, items_names)
OfObjectFactory_get_items_names = _framework.OfObjectFactory_get_items_names

def OfObjectFactory_get_version():
    return _framework.OfObjectFactory_get_version()
OfObjectFactory_get_version = _framework.OfObjectFactory_get_version

def OfObjectFactory_register_directives(app):
    return _framework.OfObjectFactory_register_directives(app)
OfObjectFactory_register_directives = _framework.OfObjectFactory_register_directives

def OfObjectFactory_class_info():
    return _framework.OfObjectFactory_class_info()
OfObjectFactory_class_info = _framework.OfObjectFactory_class_info

def OfObjectFactory____class_destructor__(instance, is_array):
    return _framework.OfObjectFactory____class_destructor__(instance, is_array)
OfObjectFactory____class_destructor__ = _framework.OfObjectFactory____class_destructor__

class OfClassFactory(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfClassFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfClassFactory, name)
    __repr__ = _swig_repr

    def __init__(self, objects, module_path):
        this = _framework.new_OfClassFactory(objects, module_path)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfClassFactory
    __del__ = lambda self: None

    def add_from_cid(self, cid):
        return _framework.OfClassFactory_add_from_cid(self, cid)

    def secure_declare(self, class_entry, application_key_id):
        return _framework.OfClassFactory_secure_declare(self, class_entry, application_key_id)

    def declare(self, buffer):
        return _framework.OfClassFactory_declare(self, buffer)

    def get(self, class_name):
        return _framework.OfClassFactory_get(self, class_name)

    def exists(self, class_name):
        return _framework.OfClassFactory_exists(self, class_name)

    def remove(self, class_name):
        return _framework.OfClassFactory_remove(self, class_name)

    def get_count(self):
        return _framework.OfClassFactory_get_count(self)

    def get_classes(self, *args):
        return _framework.OfClassFactory_get_classes(self, *args)

    def set_class_aliases(self, of_class, aliases):
        return _framework.OfClassFactory_set_class_aliases(self, of_class, aliases)

    def has_class_aliases(self, of_class):
        return _framework.OfClassFactory_has_class_aliases(self, of_class)

    def is_alias(self, class_name):
        return _framework.OfClassFactory_is_alias(self, class_name)

    def get_class_aliases(self, of_class, aliases):
        return _framework.OfClassFactory_get_class_aliases(self, of_class, aliases)

    def add_class_alias(self, alias, of_class):
        return _framework.OfClassFactory_add_class_alias(self, alias, of_class)

    def is_class_name_available(self, name):
        return _framework.OfClassFactory_is_class_name_available(self, name)

    def get_library_path(self):
        return _framework.OfClassFactory_get_library_path(self)

    def set_library_path(self, library_path):
        return _framework.OfClassFactory_set_library_path(self, library_path)

    def get_objects(self):
        return _framework.OfClassFactory_get_objects(self)

    def get_dso_exists(self, dso_filename):
        return _framework.OfClassFactory_get_dso_exists(self, dso_filename)

    def add_dso(self, dso_filename, dso_classes):
        return _framework.OfClassFactory_add_dso(self, dso_filename, dso_classes)

    def scan_modules(self):
        return _framework.OfClassFactory_scan_modules(self)

    def add_module(self, filename):
        return _framework.OfClassFactory_add_module(self, filename)

    def get_class_module_path(self, class_name):
        return _framework.OfClassFactory_get_class_module_path(self, class_name)
    if _newclass:
        category_separator = staticmethod(_framework.OfClassFactory_category_separator)
    else:
        category_separator = _framework.OfClassFactory_category_separator

    def get_root_category_name(self):
        return _framework.OfClassFactory_get_root_category_name(self)

    def get_category_classes(self, cat_path, cat_classes):
        return _framework.OfClassFactory_get_category_classes(self, cat_path, cat_classes)

    def get_category_classes_recursively(self, cat_path, cat_classes):
        return _framework.OfClassFactory_get_category_classes_recursively(self, cat_path, cat_classes)
    if _newclass:
        get_category_name = staticmethod(_framework.OfClassFactory_get_category_name)
    else:
        get_category_name = _framework.OfClassFactory_get_category_name

    def get_sub_categories_names(self, cat_path, sub_cat_names):
        return _framework.OfClassFactory_get_sub_categories_names(self, cat_path, sub_cat_names)

    def get_sub_categories_pathes(self, cat_path, sub_cat_pathes):
        return _framework.OfClassFactory_get_sub_categories_pathes(self, cat_path, sub_cat_pathes)

    def get_memory_size(self):
        return _framework.OfClassFactory_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_framework.OfClassFactory_class_info)
    else:
        class_info = _framework.OfClassFactory_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfClassFactory____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfClassFactory____class_destructor__

    def get_class_info(self):
        return _framework.OfClassFactory_get_class_info(self)

    def add_class(self, class_name, base_class):
        return _framework.OfClassFactory_add_class(self, class_name, base_class)

    def add_class_from_cid(self, cid):
        return _framework.OfClassFactory_add_class_from_cid(self, cid)

    def add(self, class_name, base_class):
        return self.add_class(class_name, base_class)
    def add_from_cid(self, cid):
        return self.add_class_from_cid(cid)

OfClassFactory_swigregister = _framework.OfClassFactory_swigregister
OfClassFactory_swigregister(OfClassFactory)
cvar = _framework.cvar
EVT_ID_CLASS_FACTORY_ADD_CLASS = cvar.EVT_ID_CLASS_FACTORY_ADD_CLASS

def OfClassFactory_category_separator():
    return _framework.OfClassFactory_category_separator()
OfClassFactory_category_separator = _framework.OfClassFactory_category_separator

def OfClassFactory_get_category_name(cat_path):
    return _framework.OfClassFactory_get_category_name(cat_path)
OfClassFactory_get_category_name = _framework.OfClassFactory_get_category_name

def OfClassFactory_class_info():
    return _framework.OfClassFactory_class_info()
OfClassFactory_class_info = _framework.OfClassFactory_class_info

def OfClassFactory____class_destructor__(instance, is_array):
    return _framework.OfClassFactory____class_destructor__(instance, is_array)
OfClassFactory____class_destructor__ = _framework.OfClassFactory____class_destructor__

class OfItem(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfItem, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfItem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    FLAG_NONE = _framework.OfItem_FLAG_NONE
    FLAG_READ_ONLY = _framework.OfItem_FLAG_READ_ONLY
    FLAG_PRIVATE = _framework.OfItem_FLAG_PRIVATE
    FLAG_STATIC = _framework.OfItem_FLAG_STATIC
    FLAG_REMOTE = _framework.OfItem_FLAG_REMOTE
    FLAG_CONTENT_LOCKED = _framework.OfItem_FLAG_CONTENT_LOCKED
    FLAG_USER_LOCKED = _framework.OfItem_FLAG_USER_LOCKED
    FLAG_PENDING = _framework.OfItem_FLAG_PENDING
    FLAG_OVERRIDEN = _framework.OfItem_FLAG_OVERRIDEN
    FLAG_EXTERNAL = _framework.OfItem_FLAG_EXTERNAL
    FLAG_DISABLED = _framework.OfItem_FLAG_DISABLED
    FLAG_PARENT_DISABLED = _framework.OfItem_FLAG_PARENT_DISABLED
    FLAG_SOURCE_DISABLED = _framework.OfItem_FLAG_SOURCE_DISABLED
    FLAG_UNDO_PROCESS = _framework.OfItem_FLAG_UNDO_PROCESS
    FLAG_ZOMBIE = _framework.OfItem_FLAG_ZOMBIE
    FLAG_COUNT = _framework.OfItem_FLAG_COUNT
    CAPS_NONE = _framework.OfItem_CAPS_NONE
    CAPS_DELETE = _framework.OfItem_CAPS_DELETE
    CAPS_RENAME = _framework.OfItem_CAPS_RENAME
    CAPS_COPY = _framework.OfItem_CAPS_COPY
    CAPS_PASTE = _framework.OfItem_CAPS_PASTE
    CAPS_MOVE = _framework.OfItem_CAPS_MOVE
    CAPS_INSTANTIATE = _framework.OfItem_CAPS_INSTANTIATE
    CAPS_LOCALIZE = _framework.OfItem_CAPS_LOCALIZE
    CAPS_DISPLAY = _framework.OfItem_CAPS_DISPLAY
    CAPS_LOCALIZE_ATTRIBUTES = _framework.OfItem_CAPS_LOCALIZE_ATTRIBUTES
    CAPS_ALL = _framework.OfItem_CAPS_ALL
    CAPS_COUNT = _framework.OfItem_CAPS_COUNT
    STATE_LIVE = _framework.OfItem_STATE_LIVE
    STATE_NEW = _framework.OfItem_STATE_NEW
    STATE_DELETE = _framework.OfItem_STATE_DELETE
    STATE_DESERIALIZE = _framework.OfItem_STATE_DESERIALIZE

    def clear_caps(self):
        return _framework.OfItem_clear_caps(self)

    def is_cap_delete(self):
        return _framework.OfItem_is_cap_delete(self)

    def is_cap_rename(self):
        return _framework.OfItem_is_cap_rename(self)

    def is_cap_copy(self):
        return _framework.OfItem_is_cap_copy(self)

    def is_cap_paste(self):
        return _framework.OfItem_is_cap_paste(self)

    def is_cap_move(self):
        return _framework.OfItem_is_cap_move(self)

    def is_cap_instantiate(self):
        return _framework.OfItem_is_cap_instantiate(self)

    def is_cap_localize(self):
        return _framework.OfItem_is_cap_localize(self)

    def is_cap_localize_attributes(self):
        return _framework.OfItem_is_cap_localize_attributes(self)

    def is_cap_display(self):
        return _framework.OfItem_is_cap_display(self)

    def set_cap_delete(self, is_active):
        return _framework.OfItem_set_cap_delete(self, is_active)

    def set_cap_rename(self, is_active):
        return _framework.OfItem_set_cap_rename(self, is_active)

    def set_cap_copy(self, is_active):
        return _framework.OfItem_set_cap_copy(self, is_active)

    def set_cap_paste(self, is_active):
        return _framework.OfItem_set_cap_paste(self, is_active)

    def set_cap_move(self, is_active):
        return _framework.OfItem_set_cap_move(self, is_active)

    def set_cap_instantiate(self, is_active):
        return _framework.OfItem_set_cap_instantiate(self, is_active)

    def set_cap_localize(self, is_active):
        return _framework.OfItem_set_cap_localize(self, is_active)

    def set_cap_localize_attributes(self, is_active):
        return _framework.OfItem_set_cap_localize_attributes(self, is_active)

    def set_cap_display(self, is_active):
        return _framework.OfItem_set_cap_display(self, is_active)

    def get_flag_is_active(self, flag):
        return _framework.OfItem_get_flag_is_active(self, flag)
    __swig_setmethods__["empty_flags_mask"] = _framework.OfItem_empty_flags_mask_set
    __swig_getmethods__["empty_flags_mask"] = _framework.OfItem_empty_flags_mask_get
    if _newclass:
        empty_flags_mask = _swig_property(_framework.OfItem_empty_flags_mask_get, _framework.OfItem_empty_flags_mask_set)
    __swig_setmethods__["enabled_flags_mask"] = _framework.OfItem_enabled_flags_mask_set
    __swig_getmethods__["enabled_flags_mask"] = _framework.OfItem_enabled_flags_mask_get
    if _newclass:
        enabled_flags_mask = _swig_property(_framework.OfItem_enabled_flags_mask_get, _framework.OfItem_enabled_flags_mask_set)
    __swig_setmethods__["enabled_but_static_flags_mask"] = _framework.OfItem_enabled_but_static_flags_mask_set
    __swig_getmethods__["enabled_but_static_flags_mask"] = _framework.OfItem_enabled_but_static_flags_mask_get
    if _newclass:
        enabled_but_static_flags_mask = _swig_property(_framework.OfItem_enabled_but_static_flags_mask_get, _framework.OfItem_enabled_but_static_flags_mask_set)
    __swig_setmethods__["enabled_but_private_flags_mask"] = _framework.OfItem_enabled_but_private_flags_mask_set
    __swig_getmethods__["enabled_but_private_flags_mask"] = _framework.OfItem_enabled_but_private_flags_mask_get
    if _newclass:
        enabled_but_private_flags_mask = _swig_property(_framework.OfItem_enabled_but_private_flags_mask_get, _framework.OfItem_enabled_but_private_flags_mask_set)
    __swig_setmethods__["enabled_but_static_and_private_flags_mask"] = _framework.OfItem_enabled_but_static_and_private_flags_mask_set
    __swig_getmethods__["enabled_but_static_and_private_flags_mask"] = _framework.OfItem_enabled_but_static_and_private_flags_mask_get
    if _newclass:
        enabled_but_static_and_private_flags_mask = _swig_property(_framework.OfItem_enabled_but_static_and_private_flags_mask_get, _framework.OfItem_enabled_but_static_and_private_flags_mask_set)
    __swig_setmethods__["enabled_but_static_and_read_only_flags_mask"] = _framework.OfItem_enabled_but_static_and_read_only_flags_mask_set
    __swig_getmethods__["enabled_but_static_and_read_only_flags_mask"] = _framework.OfItem_enabled_but_static_and_read_only_flags_mask_get
    if _newclass:
        enabled_but_static_and_read_only_flags_mask = _swig_property(_framework.OfItem_enabled_but_static_and_read_only_flags_mask_get, _framework.OfItem_enabled_but_static_and_read_only_flags_mask_set)
    __swig_setmethods__["no_static_and_read_only_flags_mask"] = _framework.OfItem_no_static_and_read_only_flags_mask_set
    __swig_getmethods__["no_static_and_read_only_flags_mask"] = _framework.OfItem_no_static_and_read_only_flags_mask_get
    if _newclass:
        no_static_and_read_only_flags_mask = _swig_property(_framework.OfItem_no_static_and_read_only_flags_mask_get, _framework.OfItem_no_static_and_read_only_flags_mask_set)

    def get_flags(self):
        return _framework.OfItem_get_flags(self)

    def clear_flags(self):
        return _framework.OfItem_clear_flags(self)

    def is_private(self):
        return _framework.OfItem_is_private(self)

    def is_static(self):
        return _framework.OfItem_is_static(self)

    def is_remote(self):
        return _framework.OfItem_is_remote(self)

    def is_content_locked(self):
        return _framework.OfItem_is_content_locked(self)

    def is_user_locked(self):
        return _framework.OfItem_is_user_locked(self)

    def is_pending(self):
        return _framework.OfItem_is_pending(self)

    def is_zombie(self):
        return _framework.OfItem_is_zombie(self)

    def is_overriden(self):
        return _framework.OfItem_is_overriden(self)

    def is_external(self):
        return _framework.OfItem_is_external(self)

    def is_enabled(self):
        return _framework.OfItem_is_enabled(self)

    def is_disabled(self):
        return _framework.OfItem_is_disabled(self)

    def is_read_only(self):
        return _framework.OfItem_is_read_only(self)

    def is_in_undo_process(self):
        return _framework.OfItem_is_in_undo_process(self)

    def set_in_undo_process(self, flag):
        return _framework.OfItem_set_in_undo_process(self, flag)
    RO_USER_LOCKED_MASK = _framework.OfItem_RO_USER_LOCKED_MASK

    def is_editable(self, *args):
        return _framework.OfItem_is_editable(self, *args)

    def set_read_only(self, value):
        return _framework.OfItem_set_read_only(self, value)

    def set_private(self, value):
        return _framework.OfItem_set_private(self, value)

    def set_static(self, value):
        return _framework.OfItem_set_static(self, value)

    def set_remote(self, value):
        return _framework.OfItem_set_remote(self, value)

    def set_content_locked(self, value):
        return _framework.OfItem_set_content_locked(self, value)

    def set_user_locked(self, value):
        return _framework.OfItem_set_user_locked(self, value)

    def set_zombie(self, value):
        return _framework.OfItem_set_zombie(self, value)

    def set_pending(self, value):
        return _framework.OfItem_set_pending(self, value)

    def set_external(self, value):
        return _framework.OfItem_set_external(self, value)
    if _newclass:
        set_disabled = staticmethod(_framework.OfItem_set_disabled)
    else:
        set_disabled = _framework.OfItem_set_disabled

    def set_parent_disabled(self, value):
        return _framework.OfItem_set_parent_disabled(self, value)

    def set_source_disabled(self, value):
        return _framework.OfItem_set_source_disabled(self, value)

    def set_overriden(self, value):
        return _framework.OfItem_set_overriden(self, value)

    def get_can_delete(self):
        return _framework.OfItem_get_can_delete(self)

    def get_can_copy(self):
        return _framework.OfItem_get_can_copy(self)

    def get_can_paste(self):
        return _framework.OfItem_get_can_paste(self)

    def get_can_move(self):
        return _framework.OfItem_get_can_move(self)

    def get_can_instantiate(self):
        return _framework.OfItem_get_can_instantiate(self)

    def get_can_localize(self):
        return _framework.OfItem_get_can_localize(self)

    def get_can_rename(self):
        return _framework.OfItem_get_can_rename(self)
    __swig_destroy__ = _framework.delete_OfItem
    __del__ = lambda self: None

    def set_name_dirty(self):
        return _framework.OfItem_set_name_dirty(self)

    def set_name(self, new_name):
        return _framework.OfItem_set_name(self, new_name)

    def is_name_dirty(self):
        return _framework.OfItem_is_name_dirty(self)

    def get_full_name(self):
        return _framework.OfItem_get_full_name(self)

    def get_name(self):
        return _framework.OfItem_get_name(self)

    def rename(self, name):
        return _framework.OfItem_rename(self, name)

    def get_item_icon(self):
        return _framework.OfItem_get_item_icon(self)
    if _newclass:
        make_creation_params = staticmethod(_framework.OfItem_make_creation_params)
    else:
        make_creation_params = _framework.OfItem_make_creation_params
    if _newclass:
        extract_creation_params = staticmethod(_framework.OfItem_extract_creation_params)
    else:
        extract_creation_params = _framework.OfItem_extract_creation_params

    def add_attribute(self, *args):
        return _framework.OfItem_add_attribute(self, *args)

    def get_attribute(self, *args):
        return _framework.OfItem_get_attribute(self, *args)

    def attribute_exists(self, *args):
        return _framework.OfItem_attribute_exists(self, *args)

    def get_attribute_count(self):
        return _framework.OfItem_get_attribute_count(self)

    def find_attribute_index(self, *args):
        return _framework.OfItem_find_attribute_index(self, *args)

    def set_attribute_index(self, attr, new_index):
        return _framework.OfItem_set_attribute_index(self, attr, new_index)

    def remove_all_attributes(self):
        return _framework.OfItem_remove_all_attributes(self)

    def remove_attribute(self, *args):
        return _framework.OfItem_remove_attribute(self, *args)

    def reset_attributes(self):
        return _framework.OfItem_reset_attributes(self)

    def get_factory(self):
        return _framework.OfItem_get_factory(self)

    def get_channel_manager(self):
        return _framework.OfItem_get_channel_manager(self)

    def get_application(self):
        return _framework.OfItem_get_application(self)

    def get_as_string(self, *args):
        return _framework.OfItem_get_as_string(self, *args)

    def send_event(self, event):
        return _framework.OfItem_send_event(self, event)

    def has_position(self, pos_slot):
        return _framework.OfItem_has_position(self, pos_slot)

    def get_nodal_properties(self):
        return _framework.OfItem_get_nodal_properties(self)

    def set_position(self, *args):
        return _framework.OfItem_set_position(self, *args)

    def get_position(self, *args):
        return _framework.OfItem_get_position(self, *args)

    def get_nodal_property(self, pos_slot, value):
        return _framework.OfItem_get_nodal_property(self, pos_slot, value)

    def set_nodal_property(self, pos_slot, value):
        return _framework.OfItem_set_nodal_property(self, pos_slot, value)

    def remove_position(self, position_slot):
        return _framework.OfItem_remove_position(self, position_slot)

    def get_last_changed_position(self):
        return _framework.OfItem_get_last_changed_position(self)

    def serialize_positions(self, group):
        return _framework.OfItem_serialize_positions(self, group)

    def deserialize_positions(self, group):
        return _framework.OfItem_deserialize_positions(self, group)

    def get_creation_date(self):
        return _framework.OfItem_get_creation_date(self)

    def get_modified_date(self):
        return _framework.OfItem_get_modified_date(self)

    def is_instance(self):
        return _framework.OfItem_is_instance(self)

    def is_source(self):
        return _framework.OfItem_is_source(self)

    def is_object(self):
        return _framework.OfItem_is_object(self)

    def is_context(self):
        return _framework.OfItem_is_context(self)

    def to_object(self, *args):
        return _framework.OfItem_to_object(self, *args)

    def to_context(self, *args):
        return _framework.OfItem_to_context(self, *args)

    def get_memory_size(self):
        return _framework.OfItem_get_memory_size(self)

    def get_parent_item(self):
        return _framework.OfItem_get_parent_item(self)

    def get_context(self, *args):
        return _framework.OfItem_get_context(self, *args)

    def get_source(self):
        return _framework.OfItem_get_source(self)

    def get_state(self):
        return _framework.OfItem_get_state(self)

    def set_state(self, new_state):
        return _framework.OfItem_set_state(self, new_state)

    def set_comment(self, comment):
        return _framework.OfItem_set_comment(self, comment)

    def get_comment(self):
        return _framework.OfItem_get_comment(self)

    def set_colortag(self, tag):
        return _framework.OfItem_set_colortag(self, tag)

    def get_colortag(self):
        return _framework.OfItem_get_colortag(self)
    if _newclass:
        class_info = staticmethod(_framework.OfItem_class_info)
    else:
        class_info = _framework.OfItem_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfItem____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfItem____class_destructor__

    def get_class_info(self):
        return _framework.OfItem_get_class_info(self)

    def __instancecheck__(self, instance):
        if type(instance) is api.PyOfObject:
            return True
        elif type(instance) is api.OfObject:
            return True
        elif type(instance) is api.OfContext:
            return True
        elif type(instance) is api.OfItem:
            return True
        return False
    def __str__(self): return self.get_full_name()
    def __repr__(self): return self.get_full_name()

OfItem_swigregister = _framework.OfItem_swigregister
OfItem_swigregister(OfItem)
EVT_ID_OF_ITEM_STATE_CHANGE = cvar.EVT_ID_OF_ITEM_STATE_CHANGE
EVT_ID_OF_ITEM_COMMENT_PRE_CHANGE = cvar.EVT_ID_OF_ITEM_COMMENT_PRE_CHANGE
EVT_ID_OF_ITEM_COMMENT_CHANGE = cvar.EVT_ID_OF_ITEM_COMMENT_CHANGE
EVT_ID_OF_ITEM_COLORTAG_PRE_CHANGE = cvar.EVT_ID_OF_ITEM_COLORTAG_PRE_CHANGE
EVT_ID_OF_ITEM_LOCK = cvar.EVT_ID_OF_ITEM_LOCK

def OfItem_set_disabled(*args):
    return _framework.OfItem_set_disabled(*args)
OfItem_set_disabled = _framework.OfItem_set_disabled

def OfItem_make_creation_params(creation_params, additionnal_params, additionnal_params_values):
    return _framework.OfItem_make_creation_params(creation_params, additionnal_params, additionnal_params_values)
OfItem_make_creation_params = _framework.OfItem_make_creation_params

def OfItem_extract_creation_params(additionnal_params, additionnal_params_values, creation_params):
    return _framework.OfItem_extract_creation_params(additionnal_params, additionnal_params_values, creation_params)
OfItem_extract_creation_params = _framework.OfItem_extract_creation_params

def OfItem_class_info():
    return _framework.OfItem_class_info()
OfItem_class_info = _framework.OfItem_class_info

def OfItem____class_destructor__(instance, is_array):
    return _framework.OfItem____class_destructor__(instance, is_array)
OfItem____class_destructor__ = _framework.OfItem____class_destructor__

class OfAttrPreset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAttrPreset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfAttrPreset, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _framework.OfAttrPreset_label_set
    __swig_getmethods__["label"] = _framework.OfAttrPreset_label_get
    if _newclass:
        label = _swig_property(_framework.OfAttrPreset_label_get, _framework.OfAttrPreset_label_set)
    __swig_setmethods__["value"] = _framework.OfAttrPreset_value_set
    __swig_getmethods__["value"] = _framework.OfAttrPreset_value_get
    if _newclass:
        value = _swig_property(_framework.OfAttrPreset_value_get, _framework.OfAttrPreset_value_set)
    __swig_setmethods__["icon"] = _framework.OfAttrPreset_icon_set
    __swig_getmethods__["icon"] = _framework.OfAttrPreset_icon_get
    if _newclass:
        icon = _swig_property(_framework.OfAttrPreset_icon_get, _framework.OfAttrPreset_icon_set)

    def __init__(self):
        this = _framework.new_OfAttrPreset()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfAttrPreset
    __del__ = lambda self: None
OfAttrPreset_swigregister = _framework.OfAttrPreset_swigregister
OfAttrPreset_swigregister(OfAttrPreset)

class OfAttrEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAttrEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfAttrEvent, name)
    __repr__ = _swig_repr
    if _newclass:
        driven_requester = staticmethod(_framework.OfAttrEvent_driven_requester)
    else:
        driven_requester = _framework.OfAttrEvent_driven_requester
    TYPE_SET_VALUE = _framework.OfAttrEvent_TYPE_SET_VALUE
    TYPE_ADD_VALUE = _framework.OfAttrEvent_TYPE_ADD_VALUE
    TYPE_REMOVE_VALUE = _framework.OfAttrEvent_TYPE_REMOVE_VALUE
    TYPE_MOVE_VALUE = _framework.OfAttrEvent_TYPE_MOVE_VALUE
    TYPE_PERMUTE_VALUE = _framework.OfAttrEvent_TYPE_PERMUTE_VALUE
    TYPE_REMOVE_ALL = _framework.OfAttrEvent_TYPE_REMOVE_ALL
    TYPE_SET_COUNT = _framework.OfAttrEvent_TYPE_SET_COUNT
    TYPE_TEXTURE = _framework.OfAttrEvent_TYPE_TEXTURE
    TYPE_ANIMATE = _framework.OfAttrEvent_TYPE_ANIMATE
    TYPE_LOCALIZE = _framework.OfAttrEvent_TYPE_LOCALIZE
    TYPE_LOCKED = _framework.OfAttrEvent_TYPE_LOCKED
    TYPE_SETTINGS = _framework.OfAttrEvent_TYPE_SETTINGS
    TYPE_OVERRIDEN = _framework.OfAttrEvent_TYPE_OVERRIDEN
    TYPE_READ_ONLY = _framework.OfAttrEvent_TYPE_READ_ONLY
    TYPE_PRESET = _framework.OfAttrEvent_TYPE_PRESET
    TYPE_HIDDEN = _framework.OfAttrEvent_TYPE_HIDDEN
    TYPE_PROMOTE_ATTRIBUTE = _framework.OfAttrEvent_TYPE_PROMOTE_ATTRIBUTE
    TYPE_PROPAGATE = _framework.OfAttrEvent_TYPE_PROPAGATE
    TYPE_UNKNOWN = _framework.OfAttrEvent_TYPE_UNKNOWN
    TYPE_COUNT = _framework.OfAttrEvent_TYPE_COUNT
    FLAG_NONE = _framework.OfAttrEvent_FLAG_NONE
    FLAG_CHANGING = _framework.OfAttrEvent_FLAG_CHANGING
    FLAG_DRIVEN = _framework.OfAttrEvent_FLAG_DRIVEN
    FLAG_DISABLED = _framework.OfAttrEvent_FLAG_DISABLED
    FLAG_OVERRIDEN = _framework.OfAttrEvent_FLAG_OVERRIDEN
    FLAG_INSTANCE = _framework.OfAttrEvent_FLAG_INSTANCE
    FLAG_VALUE_ONLY = _framework.OfAttrEvent_FLAG_VALUE_ONLY
    FLAG_REVERT = _framework.OfAttrEvent_FLAG_REVERT
    FLAG_COUNT = _framework.OfAttrEvent_FLAG_COUNT

    def get_type_name(self, *args):
        return _framework.OfAttrEvent_get_type_name(self, *args)
    __swig_setmethods__["type"] = _framework.OfAttrEvent_type_set
    __swig_getmethods__["type"] = _framework.OfAttrEvent_type_get
    if _newclass:
        type = _swig_property(_framework.OfAttrEvent_type_get, _framework.OfAttrEvent_type_set)
    __swig_setmethods__["indices"] = _framework.OfAttrEvent_indices_set
    __swig_getmethods__["indices"] = _framework.OfAttrEvent_indices_get
    if _newclass:
        indices = _swig_property(_framework.OfAttrEvent_indices_get, _framework.OfAttrEvent_indices_set)
    __swig_setmethods__["keys"] = _framework.OfAttrEvent_keys_set
    __swig_getmethods__["keys"] = _framework.OfAttrEvent_keys_get
    if _newclass:
        keys = _swig_property(_framework.OfAttrEvent_keys_get, _framework.OfAttrEvent_keys_set)
    __swig_setmethods__["count"] = _framework.OfAttrEvent_count_set
    __swig_getmethods__["count"] = _framework.OfAttrEvent_count_get
    if _newclass:
        count = _swig_property(_framework.OfAttrEvent_count_get, _framework.OfAttrEvent_count_set)
    __swig_setmethods__["requester"] = _framework.OfAttrEvent_requester_set
    __swig_getmethods__["requester"] = _framework.OfAttrEvent_requester_get
    if _newclass:
        requester = _swig_property(_framework.OfAttrEvent_requester_get, _framework.OfAttrEvent_requester_set)
    __swig_setmethods__["flags"] = _framework.OfAttrEvent_flags_set
    __swig_getmethods__["flags"] = _framework.OfAttrEvent_flags_get
    if _newclass:
        flags = _swig_property(_framework.OfAttrEvent_flags_get, _framework.OfAttrEvent_flags_set)

    def add_dg_info(self, info):
        return _framework.OfAttrEvent_add_dg_info(self, info)

    def get_dg_info(self, class_info):
        return _framework.OfAttrEvent_get_dg_info(self, class_info)

    def __init__(self, *args):
        this = _framework.new_OfAttrEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfAttrEvent
    __del__ = lambda self: None
OfAttrEvent_swigregister = _framework.OfAttrEvent_swigregister
OfAttrEvent_swigregister(OfAttrEvent)

def OfAttrEvent_driven_requester():
    return _framework.OfAttrEvent_driven_requester()
OfAttrEvent_driven_requester = _framework.OfAttrEvent_driven_requester

class OfDirtinessEventInfo(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfDirtinessEventInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfDirtinessEventInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_OfDirtinessEventInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfDirtinessEventInfo
    __del__ = lambda self: None
    if _newclass:
        class_info = staticmethod(_framework.OfDirtinessEventInfo_class_info)
    else:
        class_info = _framework.OfDirtinessEventInfo_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfDirtinessEventInfo____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfDirtinessEventInfo____class_destructor__

    def get_class_info(self):
        return _framework.OfDirtinessEventInfo_get_class_info(self)
OfDirtinessEventInfo_swigregister = _framework.OfDirtinessEventInfo_swigregister
OfDirtinessEventInfo_swigregister(OfDirtinessEventInfo)

def OfDirtinessEventInfo_class_info():
    return _framework.OfDirtinessEventInfo_class_info()
OfDirtinessEventInfo_class_info = _framework.OfDirtinessEventInfo_class_info

def OfDirtinessEventInfo____class_destructor__(instance, is_array):
    return _framework.OfDirtinessEventInfo____class_destructor__(instance, is_array)
OfDirtinessEventInfo____class_destructor__ = _framework.OfDirtinessEventInfo____class_destructor__

class OfAttr(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAttr, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfAttr, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    TYPE_BOOL = _framework.OfAttr_TYPE_BOOL
    TYPE_LONG = _framework.OfAttr_TYPE_LONG
    TYPE_DOUBLE = _framework.OfAttr_TYPE_DOUBLE
    TYPE_STRING = _framework.OfAttr_TYPE_STRING
    TYPE_FILE = _framework.OfAttr_TYPE_FILE
    TYPE_REFERENCE = _framework.OfAttr_TYPE_REFERENCE
    TYPE_OBJECT = _framework.OfAttr_TYPE_OBJECT
    TYPE_CURVE = _framework.OfAttr_TYPE_CURVE
    TYPE_ACTION = _framework.OfAttr_TYPE_ACTION
    TYPE_COUNT = _framework.OfAttr_TYPE_COUNT
    CONTAINER_SINGLE = _framework.OfAttr_CONTAINER_SINGLE
    CONTAINER_ARRAY = _framework.OfAttr_CONTAINER_ARRAY
    CONTAINER_LIST = _framework.OfAttr_CONTAINER_LIST
    CONTAINER_COUNT = _framework.OfAttr_CONTAINER_COUNT
    VALUE_PAGE_CURRENT = _framework.OfAttr_VALUE_PAGE_CURRENT
    VALUE_PAGE_PREVIOUS = _framework.OfAttr_VALUE_PAGE_PREVIOUS
    VALUE_PAGE_COUNT = _framework.OfAttr_VALUE_PAGE_COUNT
    VISUAL_HINT_ENUM = _framework.OfAttr_VISUAL_HINT_ENUM
    VISUAL_HINT_COLOR = _framework.OfAttr_VISUAL_HINT_COLOR
    VISUAL_HINT_FILENAME_SAVE = _framework.OfAttr_VISUAL_HINT_FILENAME_SAVE
    VISUAL_HINT_FILENAME_OPEN = _framework.OfAttr_VISUAL_HINT_FILENAME_OPEN
    VISUAL_HINT_FOLDER = _framework.OfAttr_VISUAL_HINT_FOLDER
    VISUAL_HINT_PERCENTAGE = _framework.OfAttr_VISUAL_HINT_PERCENTAGE
    VISUAL_HINT_SCALE = _framework.OfAttr_VISUAL_HINT_SCALE
    VISUAL_HINT_DISTANCE = _framework.OfAttr_VISUAL_HINT_DISTANCE
    VISUAL_HINT_ANGLE = _framework.OfAttr_VISUAL_HINT_ANGLE
    VISUAL_HINT_FREQUENCY = _framework.OfAttr_VISUAL_HINT_FREQUENCY
    VISUAL_HINT_TIME = _framework.OfAttr_VISUAL_HINT_TIME
    VISUAL_HINT_FRAME = _framework.OfAttr_VISUAL_HINT_FRAME
    VISUAL_HINT_SUBFRAME = _framework.OfAttr_VISUAL_HINT_SUBFRAME
    VISUAL_HINT_SECOND = _framework.OfAttr_VISUAL_HINT_SECOND
    VISUAL_HINT_AREA = _framework.OfAttr_VISUAL_HINT_AREA
    VISUAL_HINT_WATT = _framework.OfAttr_VISUAL_HINT_WATT
    VISUAL_HINT_SAMPLE = _framework.OfAttr_VISUAL_HINT_SAMPLE
    VISUAL_HINT_SUBSAMPLE = _framework.OfAttr_VISUAL_HINT_SUBSAMPLE
    VISUAL_HINT_SAMPLE_PER_PIXEL = _framework.OfAttr_VISUAL_HINT_SAMPLE_PER_PIXEL
    VISUAL_HINT_SUBPIXEL = _framework.OfAttr_VISUAL_HINT_SUBPIXEL
    VISUAL_HINT_PIXEL = _framework.OfAttr_VISUAL_HINT_PIXEL
    VISUAL_HINT_PARENT_REFERENCE = _framework.OfAttr_VISUAL_HINT_PARENT_REFERENCE
    VISUAL_HINT_CONTEXT = _framework.OfAttr_VISUAL_HINT_CONTEXT
    VISUAL_HINT_L = _framework.OfAttr_VISUAL_HINT_L
    VISUAL_HINT_LA = _framework.OfAttr_VISUAL_HINT_LA
    VISUAL_HINT_RGB = _framework.OfAttr_VISUAL_HINT_RGB
    VISUAL_HINT_RGBA = _framework.OfAttr_VISUAL_HINT_RGBA
    VISUAL_HINT_GRADIENT = _framework.OfAttr_VISUAL_HINT_GRADIENT
    VISUAL_HINT_MEMSIZE = _framework.OfAttr_VISUAL_HINT_MEMSIZE
    VISUAL_HINT_TAG = _framework.OfAttr_VISUAL_HINT_TAG
    VISUAL_HINT_TAG_MENU = _framework.OfAttr_VISUAL_HINT_TAG_MENU
    VISUAL_HINT_SCRIPT = _framework.OfAttr_VISUAL_HINT_SCRIPT
    VISUAL_HINT_MULTILINE = _framework.OfAttr_VISUAL_HINT_MULTILINE
    VISUAL_HINT_GROUP = _framework.OfAttr_VISUAL_HINT_GROUP
    VISUAL_HINT_CUSTOM_UI = _framework.OfAttr_VISUAL_HINT_CUSTOM_UI
    VISUAL_HINT_DEFAULT = _framework.OfAttr_VISUAL_HINT_DEFAULT
    VISUAL_HINT_COUNT = _framework.OfAttr_VISUAL_HINT_COUNT
    FLAG_PRIVATE = _framework.OfAttr_FLAG_PRIVATE
    FLAG_HIDDEN = _framework.OfAttr_FLAG_HIDDEN
    FLAG_SAVEABLE = _framework.OfAttr_FLAG_SAVEABLE
    FLAG_TEXTURABLE = _framework.OfAttr_FLAG_TEXTURABLE
    FLAG_ANIMATABLE = _framework.OfAttr_FLAG_ANIMATABLE
    FLAG_SLIDER = _framework.OfAttr_FLAG_SLIDER
    FLAG_NUMERIC_RANGE = _framework.OfAttr_FLAG_NUMERIC_RANGE
    FLAG_UI_RANGE = _framework.OfAttr_FLAG_UI_RANGE
    FLAG_DG_ACTIVE = _framework.OfAttr_FLAG_DG_ACTIVE
    FLAG_DG_CYCLIC = _framework.OfAttr_FLAG_DG_CYCLIC
    FLAG_DIRTINESS_PASS_THROUGH = _framework.OfAttr_FLAG_DIRTINESS_PASS_THROUGH
    FLAG_READ_ONLY = _framework.OfAttr_FLAG_READ_ONLY
    FLAG_SHADING_VARIABLE = _framework.OfAttr_FLAG_SHADING_VARIABLE
    FLAG_EXPERIMENTAL = _framework.OfAttr_FLAG_EXPERIMENTAL
    FLAG_ADVANCED = _framework.OfAttr_FLAG_ADVANCED
    FLAG_OVERRIDEN = _framework.OfAttr_FLAG_OVERRIDEN
    FLAG_PROMOTE_ATTRIBUTE = _framework.OfAttr_FLAG_PROMOTE_ATTRIBUTE
    FLAG_ALLOW_EXPRESSION = _framework.OfAttr_FLAG_ALLOW_EXPRESSION
    FLAG_COUNT = _framework.OfAttr_FLAG_COUNT
    TEXTURE_MODE_REPLACE = _framework.OfAttr_TEXTURE_MODE_REPLACE
    TEXTURE_MODE_MULTIPLY = _framework.OfAttr_TEXTURE_MODE_MULTIPLY
    TEXTURE_MODE_ADD = _framework.OfAttr_TEXTURE_MODE_ADD
    TEXTURE_MODE_ALPHA_BLEND = _framework.OfAttr_TEXTURE_MODE_ALPHA_BLEND
    TEXTURE_MODE_COUNT = _framework.OfAttr_TEXTURE_MODE_COUNT
    DIRTINESS_NONE = _framework.OfAttr_DIRTINESS_NONE
    DIRTINESS_MOTION_TRANSLATE = _framework.OfAttr_DIRTINESS_MOTION_TRANSLATE
    DIRTINESS_MOTION_ROTATE = _framework.OfAttr_DIRTINESS_MOTION_ROTATE
    DIRTINESS_MOTION_SCALE = _framework.OfAttr_DIRTINESS_MOTION_SCALE
    DIRTINESS_MOTION = _framework.OfAttr_DIRTINESS_MOTION
    DIRTINESS_PARENTING = _framework.OfAttr_DIRTINESS_PARENTING
    DIRTINESS_SHADING_MATERIAL = _framework.OfAttr_DIRTINESS_SHADING_MATERIAL
    DIRTINESS_SHADING_LIGHT = _framework.OfAttr_DIRTINESS_SHADING_LIGHT
    DIRTINESS_SHADING_GROUP_MATERIAL = _framework.OfAttr_DIRTINESS_SHADING_GROUP_MATERIAL
    DIRTINESS_SHADING_GROUP_VISIBILITY = _framework.OfAttr_DIRTINESS_SHADING_GROUP_VISIBILITY
    DIRTINESS_SHADING_GROUP = _framework.OfAttr_DIRTINESS_SHADING_GROUP
    DIRTINESS_SHADING_VARIABLE = _framework.OfAttr_DIRTINESS_SHADING_VARIABLE
    DIRTINESS_SHADING = _framework.OfAttr_DIRTINESS_SHADING
    DIRTINESS_GEOMETRY_BASE = _framework.OfAttr_DIRTINESS_GEOMETRY_BASE
    DIRTINESS_GEOMETRY_DEFORMED = _framework.OfAttr_DIRTINESS_GEOMETRY_DEFORMED
    DIRTINESS_GEOMETRY = _framework.OfAttr_DIRTINESS_GEOMETRY
    DIRTINESS_IMAGE = _framework.OfAttr_DIRTINESS_IMAGE
    DIRTINESS_GL = _framework.OfAttr_DIRTINESS_GL
    DIRTINESS_MOTION_BLUR = _framework.OfAttr_DIRTINESS_MOTION_BLUR
    DIRTINESS_ALL = _framework.OfAttr_DIRTINESS_ALL
    DIRTINESS_COUNT = _framework.OfAttr_DIRTINESS_COUNT
    DIRTINESS_FLAG_NONE = _framework.OfAttr_DIRTINESS_FLAG_NONE
    DIRTINESS_FLAG_LOCALIZE = _framework.OfAttr_DIRTINESS_FLAG_LOCALIZE
    DIRTINESS_FLAG_DESERIALIZE = _framework.OfAttr_DIRTINESS_FLAG_DESERIALIZE
    DIRTINESS_FLAG_GRAPH = _framework.OfAttr_DIRTINESS_FLAG_GRAPH
    DIRTINESS_FLAG_AOV = _framework.OfAttr_DIRTINESS_FLAG_AOV
    DIRTINESS_FLAG_CHANGE = _framework.OfAttr_DIRTINESS_FLAG_CHANGE
    DIRTINESS_FLAG_COUNT = _framework.OfAttr_DIRTINESS_FLAG_COUNT
    CYCLIC_CHECK_AND_WARN = _framework.OfAttr_CYCLIC_CHECK_AND_WARN
    CYCLIC_CHECK_ONLY = _framework.OfAttr_CYCLIC_CHECK_ONLY
    CYCLIC_CHECK_NONE = _framework.OfAttr_CYCLIC_CHECK_NONE
    if _newclass:
        get_type_name = staticmethod(_framework.OfAttr_get_type_name)
    else:
        get_type_name = _framework.OfAttr_get_type_name
    if _newclass:
        get_type_min = staticmethod(_framework.OfAttr_get_type_min)
    else:
        get_type_min = _framework.OfAttr_get_type_min
    if _newclass:
        get_type_max = staticmethod(_framework.OfAttr_get_type_max)
    else:
        get_type_max = _framework.OfAttr_get_type_max
    if _newclass:
        get_container_name = staticmethod(_framework.OfAttr_get_container_name)
    else:
        get_container_name = _framework.OfAttr_get_container_name
    if _newclass:
        get_container_from_name = staticmethod(_framework.OfAttr_get_container_from_name)
    else:
        get_container_from_name = _framework.OfAttr_get_container_from_name
    if _newclass:
        get_visual_hint_name = staticmethod(_framework.OfAttr_get_visual_hint_name)
    else:
        get_visual_hint_name = _framework.OfAttr_get_visual_hint_name
    if _newclass:
        get_visual_hint_from_name = staticmethod(_framework.OfAttr_get_visual_hint_from_name)
    else:
        get_visual_hint_from_name = _framework.OfAttr_get_visual_hint_from_name
    if _newclass:
        get_flag_name = staticmethod(_framework.OfAttr_get_flag_name)
    else:
        get_flag_name = _framework.OfAttr_get_flag_name

    def get_flags_names(self):
        return _framework.OfAttr_get_flags_names(self)
    if _newclass:
        get_flag_default_value = staticmethod(_framework.OfAttr_get_flag_default_value)
    else:
        get_flag_default_value = _framework.OfAttr_get_flag_default_value
    if _newclass:
        get_flag = staticmethod(_framework.OfAttr_get_flag)
    else:
        get_flag = _framework.OfAttr_get_flag
    if _newclass:
        get_texture_mode_name = staticmethod(_framework.OfAttr_get_texture_mode_name)
    else:
        get_texture_mode_name = _framework.OfAttr_get_texture_mode_name
    if _newclass:
        get_dirtiness = staticmethod(_framework.OfAttr_get_dirtiness)
    else:
        get_dirtiness = _framework.OfAttr_get_dirtiness
    if _newclass:
        get_dirtiness_name = staticmethod(_framework.OfAttr_get_dirtiness_name)
    else:
        get_dirtiness_name = _framework.OfAttr_get_dirtiness_name
    if _newclass:
        get_info_from_visual_hint = staticmethod(_framework.OfAttr_get_info_from_visual_hint)
    else:
        get_info_from_visual_hint = _framework.OfAttr_get_info_from_visual_hint
    if _newclass:
        get_dirtinesses = staticmethod(_framework.OfAttr_get_dirtinesses)
    else:
        get_dirtinesses = _framework.OfAttr_get_dirtinesses
    if _newclass:
        get_dirtiness_names = staticmethod(_framework.OfAttr_get_dirtiness_names)
    else:
        get_dirtiness_names = _framework.OfAttr_get_dirtiness_names
    if _newclass:
        get_unit_from_visual_hint = staticmethod(_framework.OfAttr_get_unit_from_visual_hint)
    else:
        get_unit_from_visual_hint = _framework.OfAttr_get_unit_from_visual_hint
    if _newclass:
        get_visual_hint_from_unit = staticmethod(_framework.OfAttr_get_visual_hint_from_unit)
    else:
        get_visual_hint_from_unit = _framework.OfAttr_get_visual_hint_from_unit

    def is_custom(self):
        return _framework.OfAttr_is_custom(self)

    def is_custom_root(self):
        return _framework.OfAttr_is_custom_root(self)

    def is_custom_instance(self):
        return _framework.OfAttr_is_custom_instance(self)

    def get_flags(self):
        return _framework.OfAttr_get_flags(self)

    def set_flags(self, flags):
        return _framework.OfAttr_set_flags(self, flags)

    def get_group_name(self):
        return _framework.OfAttr_get_group_name(self)

    def get_dependency_count(self):
        return _framework.OfAttr_get_dependency_count(self)

    def get_dependency(self, index):
        return _framework.OfAttr_get_dependency(self, index)

    def add_dependency(self, attr_name):
        return _framework.OfAttr_add_dependency(self, attr_name)

    def remove_dependency(self, attr_name):
        return _framework.OfAttr_remove_dependency(self, attr_name)

    def get_application(self):
        return _framework.OfAttr_get_application(self)

    def get_factory(self):
        return _framework.OfAttr_get_factory(self)

    def get_context(self):
        return _framework.OfAttr_get_context(self)

    def get_parent_object(self):
        return _framework.OfAttr_get_parent_object(self)

    def get_parent_attribute(self):
        return _framework.OfAttr_get_parent_attribute(self)

    def get_top_object(self):
        return _framework.OfAttr_get_top_object(self)

    def get_type(self):
        return _framework.OfAttr_get_type(self)

    def get_visual_hint(self):
        return _framework.OfAttr_get_visual_hint(self)

    def get_proto(self):
        return _framework.OfAttr_get_proto(self)

    def get_container(self):
        return _framework.OfAttr_get_container(self)

    def set_container(self, container):
        return _framework.OfAttr_set_container(self, container)

    def is_single(self):
        return _framework.OfAttr_is_single(self)

    def is_array(self):
        return _framework.OfAttr_is_array(self)

    def is_list(self):
        return _framework.OfAttr_is_list(self)

    def is_numeric_type(self):
        return _framework.OfAttr_is_numeric_type(self)

    def get_doc(self):
        return _framework.OfAttr_get_doc(self)

    def add_preset(self, preset_label, preset_value, icon=None):
        return _framework.OfAttr_add_preset(self, preset_label, preset_value, icon)

    def remove_preset(self, *args):
        return _framework.OfAttr_remove_preset(self, *args)

    def remove_all_presets(self):
        return _framework.OfAttr_remove_all_presets(self)

    def has_preset(self):
        return _framework.OfAttr_has_preset(self)

    def get_preset_count(self):
        return _framework.OfAttr_get_preset_count(self)

    def get_preset_label(self, preset_index):
        return _framework.OfAttr_get_preset_label(self, preset_index)

    def get_preset_icon(self, preset_index):
        return _framework.OfAttr_get_preset_icon(self, preset_index)

    def get_preset_value(self, *args):
        return _framework.OfAttr_get_preset_value(self, *args)

    def get_preset_index(self, preset_label):
        return _framework.OfAttr_get_preset_index(self, preset_label)

    def set_preset_label(self, preset_index, preset_label):
        return _framework.OfAttr_set_preset_label(self, preset_index, preset_label)

    def set_preset_value(self, *args):
        return _framework.OfAttr_set_preset_value(self, *args)

    def apply_preset(self, *args):
        return _framework.OfAttr_apply_preset(self, *args)

    def get_applied_preset_index(self):
        return _framework.OfAttr_get_applied_preset_index(self)

    def get_applied_preset_label(self):
        return _framework.OfAttr_get_applied_preset_label(self)

    def get_preset_hints(self, hints):
        return _framework.OfAttr_get_preset_hints(self, hints)

    def get_null_label(self):
        return _framework.OfAttr_get_null_label(self)

    def set_null_label(self, label):
        return _framework.OfAttr_set_null_label(self, label)

    def get_null_value(self):
        return _framework.OfAttr_get_null_value(self)

    def set_null_value(self, value):
        return _framework.OfAttr_set_null_value(self, value)

    def add_action(self, name):
        return _framework.OfAttr_add_action(self, name)

    def has_actions(self):
        return _framework.OfAttr_has_actions(self)

    def get_actions(self):
        return _framework.OfAttr_get_actions(self)
    __swig_destroy__ = _framework.delete_OfAttr
    __del__ = lambda self: None

    def get_name(self):
        return _framework.OfAttr_get_name(self)

    def get_full_name(self):
        return _framework.OfAttr_get_full_name(self)

    def localize(self, flag, requester=None):
        return _framework.OfAttr_localize(self, flag, requester)

    def reset(self):
        return _framework.OfAttr_reset(self)

    def get_source(self, *args):
        return _framework.OfAttr_get_source(self, *args)

    def get_serialized_source(self, *args):
        return _framework.OfAttr_get_serialized_source(self, *args)

    def set_value_count(self, count, requester=None):
        return _framework.OfAttr_set_value_count(self, count, requester)

    def remove_item(self, *args):
        return _framework.OfAttr_remove_item(self, *args)

    def remove_all(self, requester=None):
        return _framework.OfAttr_remove_all(self, requester)

    def move_item(self, arg2, to, requester=None):
        return _framework.OfAttr_move_item(self, arg2, to, requester)

    def permute(self, *args):
        return _framework.OfAttr_permute(self, *args)

    def get_serialized_value_count(self):
        return _framework.OfAttr_get_serialized_value_count(self)

    def get_value_count(self, consider_disabled=True):
        return _framework.OfAttr_get_value_count(self, consider_disabled)

    def is_vec3d(self):
        return _framework.OfAttr_is_vec3d(self)

    def is_vec4d(self):
        return _framework.OfAttr_is_vec4d(self)

    def drive_bool(self, value, index=0, requester=None):
        return _framework.OfAttr_drive_bool(self, value, index, requester)

    def set_bool(self, *args):
        return _framework.OfAttr_set_bool(self, *args)

    def change_bool(self, *args):
        return _framework.OfAttr_change_bool(self, *args)

    def add_bool(self, value, requester=None):
        return _framework.OfAttr_add_bool(self, value, requester)

    def toggle_bool(self, index=0, requester=None):
        return _framework.OfAttr_toggle_bool(self, index, requester)

    def get_bool(self, *args):
        return _framework.OfAttr_get_bool(self, *args)

    def get_raw_bool(self, *args):
        return _framework.OfAttr_get_raw_bool(self, *args)

    def get_serialized_bool(self, *args):
        return _framework.OfAttr_get_serialized_bool(self, *args)

    def set_long(self, *args):
        return _framework.OfAttr_set_long(self, *args)

    def change_long(self, *args):
        return _framework.OfAttr_change_long(self, *args)

    def add_long(self, value, requester=None):
        return _framework.OfAttr_add_long(self, value, requester)

    def inc_long(self, value, index=0, requester=None):
        return _framework.OfAttr_inc_long(self, value, index, requester)

    def get_long(self, *args):
        return _framework.OfAttr_get_long(self, *args)

    def get_raw_long(self, *args):
        return _framework.OfAttr_get_raw_long(self, *args)

    def get_serialized_long(self, *args):
        return _framework.OfAttr_get_serialized_long(self, *args)

    def set_double(self, *args):
        return _framework.OfAttr_set_double(self, *args)

    def change_double(self, *args):
        return _framework.OfAttr_change_double(self, *args)

    def set_vec3d(self, vec, requester=None):
        return _framework.OfAttr_set_vec3d(self, vec, requester)

    def change_vec3d(self, vec, requester=None):
        return _framework.OfAttr_change_vec3d(self, vec, requester)

    def set_vec4d(self, vec, requester=None):
        return _framework.OfAttr_set_vec4d(self, vec, requester)

    def change_vec4d(self, vec, requester=None):
        return _framework.OfAttr_change_vec4d(self, vec, requester)

    def add_double(self, value, requester=None):
        return _framework.OfAttr_add_double(self, value, requester)

    def inc_double(self, value, index=0, requester=None):
        return _framework.OfAttr_inc_double(self, value, index, requester)

    def get_double(self, *args):
        return _framework.OfAttr_get_double(self, *args)

    def get_vec2d(self, *args):
        return _framework.OfAttr_get_vec2d(self, *args)

    def get_vec3d(self, *args):
        return _framework.OfAttr_get_vec3d(self, *args)

    def get_vec4d(self, *args):
        return _framework.OfAttr_get_vec4d(self, *args)

    def get_raw_double(self, *args):
        return _framework.OfAttr_get_raw_double(self, *args)

    def get_raw_vec2d(self, *args):
        return _framework.OfAttr_get_raw_vec2d(self, *args)

    def get_raw_vec3d(self, *args):
        return _framework.OfAttr_get_raw_vec3d(self, *args)

    def get_raw_vec4d(self, *args):
        return _framework.OfAttr_get_raw_vec4d(self, *args)

    def get_serialized_double(self, *args):
        return _framework.OfAttr_get_serialized_double(self, *args)

    def get_serialized_vec2d(self, *args):
        return _framework.OfAttr_get_serialized_vec2d(self, *args)

    def get_serialized_vec3d(self, *args):
        return _framework.OfAttr_get_serialized_vec3d(self, *args)

    def get_serialized_vec4d(self, *args):
        return _framework.OfAttr_get_serialized_vec4d(self, *args)

    def set_string(self, *args):
        return _framework.OfAttr_set_string(self, *args)

    def change_string(self, *args):
        return _framework.OfAttr_change_string(self, *args)

    def get_string(self, *args):
        return _framework.OfAttr_get_string(self, *args)

    def get_raw_string(self, *args):
        return _framework.OfAttr_get_raw_string(self, *args)

    def get_serialized_string(self, *args):
        return _framework.OfAttr_get_serialized_string(self, *args)

    def set_object(self, *args):
        return _framework.OfAttr_set_object(self, *args)

    def add_object(self, *args):
        return _framework.OfAttr_add_object(self, *args)

    def add_string(self, *args):
        return _framework.OfAttr_add_string(self, *args)

    def add_entry(self, *args):
        return _framework.OfAttr_add_entry(self, *args)

    def remove_object(self, object, requester=None):
        return _framework.OfAttr_remove_object(self, object, requester)

    def get_object(self, *args):
        return _framework.OfAttr_get_object(self, *args)

    def get_values(self, *args):
        return _framework.OfAttr_get_values(self, *args)

    def get_group(self, *args):
        return _framework.OfAttr_get_group(self, *args)

    def get_raw_object(self, *args):
        return _framework.OfAttr_get_raw_object(self, *args)

    def get_raw_values(self, *args):
        return _framework.OfAttr_get_raw_values(self, *args)

    def get_serialized_object(self, *args):
        return _framework.OfAttr_get_serialized_object(self, *args)

    def get_serialized_values(self, *args):
        return _framework.OfAttr_get_serialized_values(self, *args)

    def get_serialized_group(self, *args):
        return _framework.OfAttr_get_serialized_group(self, *args)

    def set_curve(self, curve, index, requester=None):
        return _framework.OfAttr_set_curve(self, curve, index, requester)

    def change_curve(self, curve, index, requester=None):
        return _framework.OfAttr_change_curve(self, curve, index, requester)

    def add_curve_key(self, *args):
        return _framework.OfAttr_add_curve_key(self, *args)

    def remove_curve_key(self, *args):
        return _framework.OfAttr_remove_curve_key(self, *args)

    def set_curve_key_type(self, *args):
        return _framework.OfAttr_set_curve_key_type(self, *args)

    def set_curve_key_x(self, *args):
        return _framework.OfAttr_set_curve_key_x(self, *args)

    def change_curve_key_x(self, *args):
        return _framework.OfAttr_change_curve_key_x(self, *args)

    def set_curve_key_y(self, *args):
        return _framework.OfAttr_set_curve_key_y(self, *args)

    def change_curve_key_y(self, *args):
        return _framework.OfAttr_change_curve_key_y(self, *args)

    def get_curve(self, *args):
        return _framework.OfAttr_get_curve(self, *args)

    def get_curve_double(self, *args):
        return _framework.OfAttr_get_curve_double(self, *args)

    def get_double_at(self, time, index=0):
        return _framework.OfAttr_get_double_at(self, time, index)

    def get_curve_values(self, *args):
        return _framework.OfAttr_get_curve_values(self, *args)

    def get_curve_vec2d(self, *args):
        return _framework.OfAttr_get_curve_vec2d(self, *args)

    def get_vec3d_at(self, time):
        return _framework.OfAttr_get_vec3d_at(self, time)

    def get_curve_vec3d(self, *args):
        return _framework.OfAttr_get_curve_vec3d(self, *args)

    def get_vec4d_at(self, time):
        return _framework.OfAttr_get_vec4d_at(self, time)

    def get_curve_vec4d(self, *args):
        return _framework.OfAttr_get_curve_vec4d(self, *args)

    def get_serialized_curve(self, *args):
        return _framework.OfAttr_get_serialized_curve(self, *args)

    def get_serialized_curve_double(self, *args):
        return _framework.OfAttr_get_serialized_curve_double(self, *args)

    def get_serialized_double_at(self, time, index=0):
        return _framework.OfAttr_get_serialized_double_at(self, time, index)

    def get_serialized_curve_values(self, *args):
        return _framework.OfAttr_get_serialized_curve_values(self, *args)

    def get_serialized_curve_vec2d(self, *args):
        return _framework.OfAttr_get_serialized_curve_vec2d(self, *args)

    def get_serialized_vec3d_at(self, time):
        return _framework.OfAttr_get_serialized_vec3d_at(self, time)

    def get_serialized_curve_vec3d(self, *args):
        return _framework.OfAttr_get_serialized_curve_vec3d(self, *args)

    def get_serialized_vec4d_at(self, time):
        return _framework.OfAttr_get_serialized_vec4d_at(self, time)

    def get_serialized_curve_vec4d(self, *args):
        return _framework.OfAttr_get_serialized_curve_vec4d(self, *args)

    def is_animatable(self):
        return _framework.OfAttr_is_animatable(self)

    def set_animatable(self, flag):
        return _framework.OfAttr_set_animatable(self, flag)

    def set_time(self, time):
        return _framework.OfAttr_set_time(self, time)

    def add_fcurve_with_key(self, index, requester=None):
        return _framework.OfAttr_add_fcurve_with_key(self, index, requester)

    def add_fcurve(self, *args):
        return _framework.OfAttr_add_fcurve(self, *args)

    def set_key(self, time, index=-1, requester=None):
        return _framework.OfAttr_set_key(self, time, index, requester)

    def remove_anim(self, index=-1, requester=None):
        return _framework.OfAttr_remove_anim(self, index, requester)

    def remove_fcurve(self, index=-1, requester=None):
        return _framework.OfAttr_remove_fcurve(self, index, requester)

    def is_animated(self, index=-1):
        return _framework.OfAttr_is_animated(self, index)

    def is_driver_anim_fcurve(self, index):
        return _framework.OfAttr_is_driver_anim_fcurve(self, index)

    def is_serialized_driver_anim_fcurve(self, index):
        return _framework.OfAttr_is_serialized_driver_anim_fcurve(self, index)

    def has_fcurve(self, index=-1):
        return _framework.OfAttr_has_fcurve(self, index)

    def get_fcurve(self, index):
        return _framework.OfAttr_get_fcurve(self, index)

    def is_serialized_animated(self, index=-1):
        return _framework.OfAttr_is_serialized_animated(self, index)

    def has_serialized_fcurve(self, index=-1):
        return _framework.OfAttr_has_serialized_fcurve(self, index)

    def get_serialized_fcurve(self, index):
        return _framework.OfAttr_get_serialized_fcurve(self, index)

    def is_texturable(self):
        return _framework.OfAttr_is_texturable(self)

    def set_texturable(self, flag):
        return _framework.OfAttr_set_texturable(self, flag)

    def get_texture_mode(self):
        return _framework.OfAttr_get_texture_mode(self)

    def set_texture_mode(self, mode):
        return _framework.OfAttr_set_texture_mode(self, mode)

    def set_texture(self, texture, requester=None):
        return _framework.OfAttr_set_texture(self, texture, requester)

    def set_texture_channel_group(self, channel_group_index, requester=None):
        return _framework.OfAttr_set_texture_channel_group(self, channel_group_index, requester)

    def is_textured(self, consider_disabled=True):
        return _framework.OfAttr_is_textured(self, consider_disabled)

    def get_texture_channel_group(self):
        return _framework.OfAttr_get_texture_channel_group(self)

    def get_texture(self, consider_disabled=True):
        return _framework.OfAttr_get_texture(self, consider_disabled)

    def is_serialized_textured(self):
        return _framework.OfAttr_is_serialized_textured(self)

    def get_serialized_texture_channel_group(self):
        return _framework.OfAttr_get_serialized_texture_channel_group(self)

    def get_serialized_texture(self):
        return _framework.OfAttr_get_serialized_texture(self)

    def is_shading_variable_enabled(self):
        return _framework.OfAttr_is_shading_variable_enabled(self)

    def enable_shading_variable(self, enable):
        return _framework.OfAttr_enable_shading_variable(self, enable)

    def activate_shading_variable(self, flag, requester=None):
        return _framework.OfAttr_activate_shading_variable(self, flag, requester)

    def bind_shading_variable(self, variable, requester=None):
        return _framework.OfAttr_bind_shading_variable(self, variable, requester)

    def unbind_shading_variable(self, requester=None):
        return _framework.OfAttr_unbind_shading_variable(self, requester)

    def is_shading_variable_activated(self):
        return _framework.OfAttr_is_shading_variable_activated(self)

    def is_bound_to_shading_variable(self):
        return _framework.OfAttr_is_bound_to_shading_variable(self)

    def get_bound_shading_variable(self):
        return _framework.OfAttr_get_bound_shading_variable(self)

    def is_serialized_shading_variable_activated(self):
        return _framework.OfAttr_is_serialized_shading_variable_activated(self)

    def is_serialized_bound_to_shading_variable(self):
        return _framework.OfAttr_is_serialized_bound_to_shading_variable(self)

    def get_serialized_bound_shading_variable(self):
        return _framework.OfAttr_get_serialized_bound_shading_variable(self)

    def is_shading_dependent(self):
        return _framework.OfAttr_is_shading_dependent(self)

    def enable_expression(self, enable):
        return _framework.OfAttr_enable_expression(self, enable)

    def is_expression_enabled(self):
        return _framework.OfAttr_is_expression_enabled(self)

    def can_manage_expression(self):
        return _framework.OfAttr_can_manage_expression(self)

    def is_expression_bound(self, value_index=0):
        return _framework.OfAttr_is_expression_bound(self, value_index)

    def is_serialized_expression_bound(self, value_index=0):
        return _framework.OfAttr_is_serialized_expression_bound(self, value_index)

    def is_any_expression_bound(self):
        return _framework.OfAttr_is_any_expression_bound(self)

    def is_any_serialized_expression_bound(self):
        return _framework.OfAttr_is_any_serialized_expression_bound(self)

    def is_expression_activated(self, value_index=0):
        return _framework.OfAttr_is_expression_activated(self, value_index)

    def is_serialized_expression_activated(self, value_index=0):
        return _framework.OfAttr_is_serialized_expression_activated(self, value_index)

    def get_expression(self, value_index=0):
        return _framework.OfAttr_get_expression(self, value_index)

    def get_serialized_expression(self, value_index=0):
        return _framework.OfAttr_get_serialized_expression(self, value_index)

    def activate_expression(self, *args):
        return _framework.OfAttr_activate_expression(self, *args)

    def set_expression(self, *args):
        return _framework.OfAttr_set_expression(self, *args)

    def is_slider(self):
        return _framework.OfAttr_is_slider(self)

    def set_slider(self, flag):
        return _framework.OfAttr_set_slider(self, flag)

    def enable_range(self, flag):
        return _framework.OfAttr_enable_range(self, flag)

    def is_range_enabled(self):
        return _framework.OfAttr_is_range_enabled(self)

    def set_numeric_range(self, min, max):
        return _framework.OfAttr_set_numeric_range(self, min, max)

    def get_numeric_range(self, min, max):
        return _framework.OfAttr_get_numeric_range(self, min, max)

    def set_numeric_range_min(self, min, auto_set_max=False):
        return _framework.OfAttr_set_numeric_range_min(self, min, auto_set_max)

    def set_numeric_range_max(self, max, auto_set_min=False):
        return _framework.OfAttr_set_numeric_range_max(self, max, auto_set_min)

    def get_numeric_range_min(self):
        return _framework.OfAttr_get_numeric_range_min(self)

    def get_numeric_range_max(self):
        return _framework.OfAttr_get_numeric_range_max(self)

    def enable_ui_range(self, flag):
        return _framework.OfAttr_enable_ui_range(self, flag)

    def is_ui_range_enabled(self):
        return _framework.OfAttr_is_ui_range_enabled(self)

    def set_numeric_ui_range(self, min, max):
        return _framework.OfAttr_set_numeric_ui_range(self, min, max)

    def get_numeric_ui_range(self, min, max):
        return _framework.OfAttr_get_numeric_ui_range(self, min, max)

    def get_ui_range_min(self):
        return _framework.OfAttr_get_ui_range_min(self)

    def get_ui_range_max(self):
        return _framework.OfAttr_get_ui_range_max(self)

    def set_ui_range_min(self, min, auto_set_max=False):
        return _framework.OfAttr_set_ui_range_min(self, min, auto_set_max)

    def set_ui_range_max(self, max, auto_set_min=False):
        return _framework.OfAttr_set_ui_range_max(self, max, auto_set_min)

    def add_validator(self, *args):
        return _framework.OfAttr_add_validator(self, *args)

    def remove_all_validators(self):
        return _framework.OfAttr_remove_all_validators(self)

    def remove_validator(self, *args):
        return _framework.OfAttr_remove_validator(self, *args)

    def enable_all_validators(self):
        return _framework.OfAttr_enable_all_validators(self)

    def enable_validator(self, *args):
        return _framework.OfAttr_enable_validator(self, *args)

    def disable_all_validators(self):
        return _framework.OfAttr_disable_all_validators(self)

    def disable_validator(self, *args):
        return _framework.OfAttr_disable_validator(self, *args)

    def get_object_filter(self):
        return _framework.OfAttr_get_object_filter(self)

    def get_object_filters(self):
        return _framework.OfAttr_get_object_filters(self)

    def set_object_filters(self, filters, requester=None):
        return _framework.OfAttr_set_object_filters(self, filters, requester)

    def get_context_filter(self):
        return _framework.OfAttr_get_context_filter(self)

    def set_context_filter(self, filter):
        return _framework.OfAttr_set_context_filter(self, filter)

    def get_group_filter(self):
        return _framework.OfAttr_get_group_filter(self)

    def set_group_filter(self, filter):
        return _framework.OfAttr_set_group_filter(self, filter)

    def set_enum_type(self, type):
        return _framework.OfAttr_set_enum_type(self, type)

    def get_enum_type(self):
        return _framework.OfAttr_get_enum_type(self)

    def get_enum(self):
        return _framework.OfAttr_get_enum(self)

    def get_scripting_filter(self):
        return _framework.OfAttr_get_scripting_filter(self)

    def set_scripting_filter(self, filter):
        return _framework.OfAttr_set_scripting_filter(self, filter)

    def get_filename_extensions(self):
        return _framework.OfAttr_get_filename_extensions(self)

    def set_filename_extensions(self, extensions):
        return _framework.OfAttr_set_filename_extensions(self, extensions)

    def set_tag_candidate_callback(self, callback):
        return _framework.OfAttr_set_tag_candidate_callback(self, callback)

    def get_tag_candidate_callback(self):
        return _framework.OfAttr_get_tag_candidate_callback(self)

    def get_tag_candidates(self, candidates, preset_hints):
        return _framework.OfAttr_get_tag_candidates(self, candidates, preset_hints)

    def is_depending_on_variable(self, variable_name):
        return _framework.OfAttr_is_depending_on_variable(self, variable_name)

    def add_settings(self, settings_key, settings, requester=None):
        return _framework.OfAttr_add_settings(self, settings_key, settings, requester)

    def remove_settings(self, settings_key, requester=None):
        return _framework.OfAttr_remove_settings(self, settings_key, requester)

    def remove_all_settings(self, requester=None):
        return _framework.OfAttr_remove_all_settings(self, requester)

    def get_settings_count(self):
        return _framework.OfAttr_get_settings_count(self)

    def settings_exists(self, settings_key):
        return _framework.OfAttr_settings_exists(self, settings_key)

    def get_settings(self, settings_key):
        return _framework.OfAttr_get_settings(self, settings_key)

    def get_settings_keys(self, keys):
        return _framework.OfAttr_get_settings_keys(self, keys)

    def get_serialized_settings_count(self):
        return _framework.OfAttr_get_serialized_settings_count(self)

    def serialized_settings_exists(self, settings_key):
        return _framework.OfAttr_serialized_settings_exists(self, settings_key)

    def get_serialized_settings(self, settings_key):
        return _framework.OfAttr_get_serialized_settings(self, settings_key)

    def get_serialized_settings_keys(self, keys):
        return _framework.OfAttr_get_serialized_settings_keys(self, keys)

    def notify_object_disabled(self, dependency_type, requester=None):
        return _framework.OfAttr_notify_object_disabled(self, dependency_type, requester)

    def asleep(self):
        return _framework.OfAttr_asleep(self)

    def awake(self, silent=False):
        return _framework.OfAttr_awake(self, silent)

    def is_asleep(self):
        return _framework.OfAttr_is_asleep(self)

    def is_awake(self):
        return _framework.OfAttr_is_awake(self)

    def is_dg_active(self):
        return _framework.OfAttr_is_dg_active(self)

    def set_dg_active(self, flag):
        return _framework.OfAttr_set_dg_active(self, flag)

    def is_dg_cyclic(self):
        return _framework.OfAttr_is_dg_cyclic(self)

    def set_dg_cyclic(self, flag):
        return _framework.OfAttr_set_dg_cyclic(self, flag)

    def set_output_dirtiness(self, dirtiness):
        return _framework.OfAttr_set_output_dirtiness(self, dirtiness)

    def get_output_dirtiness(self):
        return _framework.OfAttr_get_output_dirtiness(self)

    def set_input_dirtiness(self, dirtiness):
        return _framework.OfAttr_set_input_dirtiness(self, dirtiness)

    def get_input_dirtiness(self):
        return _framework.OfAttr_get_input_dirtiness(self)

    def get_event_info(self):
        return _framework.OfAttr_get_event_info(self)

    def get_event_infos(self):
        return _framework.OfAttr_get_event_infos(self)

    def is_local(self):
        return _framework.OfAttr_is_local(self)

    def is_instance(self):
        return _framework.OfAttr_is_instance(self)

    def is_proto(self):
        return _framework.OfAttr_is_proto(self)

    def is_synchronized(self):
        return _framework.OfAttr_is_synchronized(self)

    def is_value_proto(self):
        return _framework.OfAttr_is_value_proto(self)

    def is_default_value(self):
        return _framework.OfAttr_is_default_value(self)

    def is_private(self):
        return _framework.OfAttr_is_private(self)

    def is_hidden(self):
        return _framework.OfAttr_is_hidden(self)

    def is_read_only(self):
        return _framework.OfAttr_is_read_only(self)
    RO_PARENT_MASK = _framework.OfAttr_RO_PARENT_MASK
    RO_SOURCE_MASK = _framework.OfAttr_RO_SOURCE_MASK
    RO_EXT_REF_MASK = _framework.OfAttr_RO_EXT_REF_MASK
    RO_MUTE_MASK = _framework.OfAttr_RO_MUTE_MASK
    RO_OVERRIDE_MASK = _framework.OfAttr_RO_OVERRIDE_MASK
    RO_LOCK_MASK = _framework.OfAttr_RO_LOCK_MASK

    def is_editable(self, *args):
        return _framework.OfAttr_is_editable(self, *args)

    def is_saveable(self):
        return _framework.OfAttr_is_saveable(self)

    def is_experimental(self):
        return _framework.OfAttr_is_experimental(self)

    def is_advanced(self):
        return _framework.OfAttr_is_advanced(self)

    def is_overriden(self):
        return _framework.OfAttr_is_overriden(self)

    def is_promoted(self):
        return _framework.OfAttr_is_promoted(self)

    def set_hidden(self, flag):
        return _framework.OfAttr_set_hidden(self, flag)

    def set_read_only(self, flag):
        return _framework.OfAttr_set_read_only(self, flag)

    def set_saveable(self, flag):
        return _framework.OfAttr_set_saveable(self, flag)

    def set_overriden(self, flag):
        return _framework.OfAttr_set_overriden(self, flag)

    def set_private(self, flag):
        return _framework.OfAttr_set_private(self, flag)

    def set_promoted(self, flag):
        return _framework.OfAttr_set_promoted(self, flag)

    def set_weak_referencing(self, weak, requester=None):
        return _framework.OfAttr_set_weak_referencing(self, weak, requester)

    def is_weak_referencing(self):
        return _framework.OfAttr_is_weak_referencing(self)

    def set_locked(self, locked, requester=None):
        return _framework.OfAttr_set_locked(self, locked, requester)

    def is_locked(self):
        return _framework.OfAttr_is_locked(self)

    def set_value_locked(self, *args):
        return _framework.OfAttr_set_value_locked(self, *args)

    def is_value_locked(self, value_index):
        return _framework.OfAttr_is_value_locked(self, value_index)

    def is_serialized_value_locked(self, value_index):
        return _framework.OfAttr_is_serialized_value_locked(self, value_index)

    def is_any_serialized_value_locked(self):
        return _framework.OfAttr_is_any_serialized_value_locked(self)

    def can_mute_local_value(self):
        return _framework.OfAttr_can_mute_local_value(self)

    def set_can_mute_local_value(self, enable):
        return _framework.OfAttr_set_can_mute_local_value(self, enable)

    def mute_local_value(self, flag):
        return _framework.OfAttr_mute_local_value(self, flag)

    def is_local_muted(self):
        return _framework.OfAttr_is_local_muted(self)

    def can_disable(self):
        return _framework.OfAttr_can_disable(self)

    def set_can_disable(self, enable):
        return _framework.OfAttr_set_can_disable(self, enable)

    def is_disabled(self):
        return _framework.OfAttr_is_disabled(self)

    def set_disabled(self, disable):
        return _framework.OfAttr_set_disabled(self, disable)

    def set_value_disabled(self, *args):
        return _framework.OfAttr_set_value_disabled(self, *args)

    def set_disabled_values(self, value_indices, requester=None):
        return _framework.OfAttr_set_disabled_values(self, value_indices, requester)

    def is_value_disabled(self, value_index):
        return _framework.OfAttr_is_value_disabled(self, value_index)

    def is_any_value_disabled(self):
        return _framework.OfAttr_is_any_value_disabled(self)

    def is_serialized_value_disabled(self, value_index):
        return _framework.OfAttr_is_serialized_value_disabled(self, value_index)

    def is_any_serialized_value_disabled(self):
        return _framework.OfAttr_is_any_serialized_value_disabled(self)

    def is_value_equal_to(self, attr, consider_disabled=True):
        return _framework.OfAttr_is_value_equal_to(self, attr, consider_disabled)

    def is_serialized_value_equal_to(self, attr):
        return _framework.OfAttr_is_serialized_value_equal_to(self, attr)
    if _newclass:
        get_path_attrs = staticmethod(_framework.OfAttr_get_path_attrs)
    else:
        get_path_attrs = _framework.OfAttr_get_path_attrs

    def add_to_path_attrs(self):
        return _framework.OfAttr_add_to_path_attrs(self)

    def remove_from_path_attrs(self):
        return _framework.OfAttr_remove_from_path_attrs(self)

    def raise_object_attr_changed(self):
        return _framework.OfAttr_raise_object_attr_changed(self)

    def get_statistics(self, stats):
        return _framework.OfAttr_get_statistics(self, stats)

    def can_revert(self):
        return _framework.OfAttr_can_revert(self)

    def get_revert(self):
        return _framework.OfAttr_get_revert(self)

    def release_revert(self):
        return _framework.OfAttr_release_revert(self)

    def is_revert_dirty(self):
        return _framework.OfAttr_is_revert_dirty(self)

    def dirty_revert(self, dirty=True):
        return _framework.OfAttr_dirty_revert(self, dirty)

    def update_revert(self, force=False, state=None):
        return _framework.OfAttr_update_revert(self, force, state)

    def revert(self, state=None, auto_delete_state=True):
        return _framework.OfAttr_revert(self, state, auto_delete_state)
    if _newclass:
        is_revert_event_info = staticmethod(_framework.OfAttr_is_revert_event_info)
    else:
        is_revert_event_info = _framework.OfAttr_is_revert_event_info
    if _newclass:
        is_override_flag_change_event = staticmethod(_framework.OfAttr_is_override_flag_change_event)
    else:
        is_override_flag_change_event = _framework.OfAttr_is_override_flag_change_event

    def print_revert_state(self):
        return _framework.OfAttr_print_revert_state(self)

    def save_state(self, page):
        return _framework.OfAttr_save_state(self, page)

    def restore_state(self, state, auto_delete_state=False):
        return _framework.OfAttr_restore_state(self, state, auto_delete_state)
    if _newclass:
        delete_state = staticmethod(_framework.OfAttr_delete_state)
    else:
        delete_state = _framework.OfAttr_delete_state

    def serialize(self, *args):
        return _framework.OfAttr_serialize(self, *args)

    def deserialize(self, *args):
        return _framework.OfAttr_deserialize(self, *args)

    def set_ui_data(self, key, value):
        return _framework.OfAttr_set_ui_data(self, key, value)

    def get_ui_data(self, key):
        return _framework.OfAttr_get_ui_data(self, key)

    def clear_ui_data(self, *args):
        return _framework.OfAttr_clear_ui_data(self, *args)

    def has_ui_data(self):
        return _framework.OfAttr_has_ui_data(self)

    def set_overridable(self, enable):
        return _framework.OfAttr_set_overridable(self, enable)

    def can_use_override(self, *args):
        return _framework.OfAttr_can_use_override(self, *args)

    def override(self, overrider, requester=None):
        return _framework.OfAttr_override(self, overrider, requester)

    def remove_override(self, requester=None):
        return _framework.OfAttr_remove_override(self, requester)

    def get_override(self):
        return _framework.OfAttr_get_override(self)

    def is_using_override(self):
        return _framework.OfAttr_is_using_override(self)

    def is_override(self):
        return _framework.OfAttr_is_override(self)

    def get_override_users(self, users):
        return _framework.OfAttr_get_override_users(self, users)

    def is_override_user_protected(self):
        return _framework.OfAttr_is_override_user_protected(self)
    if _newclass:
        class_info = staticmethod(_framework.OfAttr_class_info)
    else:
        class_info = _framework.OfAttr_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfAttr____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfAttr____class_destructor__

    def get_class_info(self):
        return _framework.OfAttr_get_class_info(self)

    def __str__(self): return self.get_full_name()
    def __repr__(self): return self.get_full_name()
    def __nonzero__(self): return True


    def __len__(self):
        return _framework.OfAttr___len__(self)

    def __setitem__(self, index, value):
        return _framework.OfAttr___setitem__(self, index, value)

    def __getitem__(self, index):
        return _framework.OfAttr___getitem__(self, index)
OfAttr_swigregister = _framework.OfAttr_swigregister
OfAttr_swigregister(OfAttr)

def OfAttr_get_type_name(type):
    return _framework.OfAttr_get_type_name(type)
OfAttr_get_type_name = _framework.OfAttr_get_type_name

def OfAttr_get_type_min(type, min):
    return _framework.OfAttr_get_type_min(type, min)
OfAttr_get_type_min = _framework.OfAttr_get_type_min

def OfAttr_get_type_max(type, max):
    return _framework.OfAttr_get_type_max(type, max)
OfAttr_get_type_max = _framework.OfAttr_get_type_max

def OfAttr_get_container_name(type):
    return _framework.OfAttr_get_container_name(type)
OfAttr_get_container_name = _framework.OfAttr_get_container_name

def OfAttr_get_container_from_name(container):
    return _framework.OfAttr_get_container_from_name(container)
OfAttr_get_container_from_name = _framework.OfAttr_get_container_from_name

def OfAttr_get_visual_hint_name(visual_hint):
    return _framework.OfAttr_get_visual_hint_name(visual_hint)
OfAttr_get_visual_hint_name = _framework.OfAttr_get_visual_hint_name

def OfAttr_get_visual_hint_from_name(visual_hint):
    return _framework.OfAttr_get_visual_hint_from_name(visual_hint)
OfAttr_get_visual_hint_from_name = _framework.OfAttr_get_visual_hint_from_name

def OfAttr_get_flag_name(flag):
    return _framework.OfAttr_get_flag_name(flag)
OfAttr_get_flag_name = _framework.OfAttr_get_flag_name

def OfAttr_get_flag_default_value(flag):
    return _framework.OfAttr_get_flag_default_value(flag)
OfAttr_get_flag_default_value = _framework.OfAttr_get_flag_default_value

def OfAttr_get_flag(index):
    return _framework.OfAttr_get_flag(index)
OfAttr_get_flag = _framework.OfAttr_get_flag

def OfAttr_get_texture_mode_name(mode):
    return _framework.OfAttr_get_texture_mode_name(mode)
OfAttr_get_texture_mode_name = _framework.OfAttr_get_texture_mode_name

def OfAttr_get_dirtiness(index):
    return _framework.OfAttr_get_dirtiness(index)
OfAttr_get_dirtiness = _framework.OfAttr_get_dirtiness

def OfAttr_get_dirtiness_name(dirtiness):
    return _framework.OfAttr_get_dirtiness_name(dirtiness)
OfAttr_get_dirtiness_name = _framework.OfAttr_get_dirtiness_name

def OfAttr_get_info_from_visual_hint(visual_hint, type, container, fixed_value_count, value_count):
    return _framework.OfAttr_get_info_from_visual_hint(visual_hint, type, container, fixed_value_count, value_count)
OfAttr_get_info_from_visual_hint = _framework.OfAttr_get_info_from_visual_hint

def OfAttr_get_dirtinesses(dirtinesses, dirtiness):
    return _framework.OfAttr_get_dirtinesses(dirtinesses, dirtiness)
OfAttr_get_dirtinesses = _framework.OfAttr_get_dirtinesses

def OfAttr_get_dirtiness_names(names, dirtiness):
    return _framework.OfAttr_get_dirtiness_names(names, dirtiness)
OfAttr_get_dirtiness_names = _framework.OfAttr_get_dirtiness_names

def OfAttr_get_unit_from_visual_hint(of_attr_visual_hint):
    return _framework.OfAttr_get_unit_from_visual_hint(of_attr_visual_hint)
OfAttr_get_unit_from_visual_hint = _framework.OfAttr_get_unit_from_visual_hint

def OfAttr_get_visual_hint_from_unit(of_attr_unit):
    return _framework.OfAttr_get_visual_hint_from_unit(of_attr_unit)
OfAttr_get_visual_hint_from_unit = _framework.OfAttr_get_visual_hint_from_unit

def OfAttr_get_path_attrs():
    return _framework.OfAttr_get_path_attrs()
OfAttr_get_path_attrs = _framework.OfAttr_get_path_attrs

def OfAttr_is_revert_event_info(event):
    return _framework.OfAttr_is_revert_event_info(event)
OfAttr_is_revert_event_info = _framework.OfAttr_is_revert_event_info

def OfAttr_is_override_flag_change_event(event):
    return _framework.OfAttr_is_override_flag_change_event(event)
OfAttr_is_override_flag_change_event = _framework.OfAttr_is_override_flag_change_event

def OfAttr_delete_state(state):
    return _framework.OfAttr_delete_state(state)
OfAttr_delete_state = _framework.OfAttr_delete_state

def OfAttr_class_info():
    return _framework.OfAttr_class_info()
OfAttr_class_info = _framework.OfAttr_class_info

def OfAttr____class_destructor__(instance, is_array):
    return _framework.OfAttr____class_destructor__(instance, is_array)
OfAttr____class_destructor__ = _framework.OfAttr____class_destructor__

class OfObject(OfItem):
    __swig_setmethods__ = {}
    for _s in [OfItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OfItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_OfObject
    __del__ = lambda self: None
    if _newclass:
        pre_delete = staticmethod(_framework.OfObject_pre_delete)
    else:
        pre_delete = _framework.OfObject_pre_delete
    if _newclass:
        pre_delete_already_gathered = staticmethod(_framework.OfObject_pre_delete_already_gathered)
    else:
        pre_delete_already_gathered = _framework.OfObject_pre_delete_already_gathered

    def get_context(self):
        return _framework.OfObject_get_context(self)

    def set_context(self, context):
        return _framework.OfObject_set_context(self, context)

    def get_full_name(self):
        return _framework.OfObject_get_full_name(self)

    def get_contextual_name(self):
        return _framework.OfObject_get_contextual_name(self)

    def set_name_dirty(self):
        return _framework.OfObject_set_name_dirty(self)

    def set_content_locked(self, value):
        return _framework.OfObject_set_content_locked(self, value)

    def set_remote(self, value):
        return _framework.OfObject_set_remote(self, value)

    def get_class(self):
        return _framework.OfObject_get_class(self)

    def is_kindof(self, *args):
        return _framework.OfObject_is_kindof(self, *args)

    def get_class_name(self):
        return _framework.OfObject_get_class_name(self)

    def is_within(self, context, recursive):
        return _framework.OfObject_is_within(self, context, recursive)

    def is_external_dependency(self, context):
        return _framework.OfObject_is_external_dependency(self, context)

    def is_child_of(self, parent_contexts):
        return _framework.OfObject_is_child_of(self, parent_contexts)

    def is_embedded_child_of(self, parent_objects):
        return _framework.OfObject_is_embedded_child_of(self, parent_objects)

    def get_item_icon(self):
        return _framework.OfObject_get_item_icon(self)

    def make_local(self):
        return _framework.OfObject_make_local(self)

    def make_instance(self, source):
        return _framework.OfObject_make_instance(self, source)

    def call_action(self, name, data=None):
        return _framework.OfObject_call_action(self, name, data)

    def add_attribute(self, *args):
        return _framework.OfObject_add_attribute(self, *args)

    def get_attribute(self, *args):
        return _framework.OfObject_get_attribute(self, *args)

    def attribute_exists(self, *args):
        return _framework.OfObject_attribute_exists(self, *args)

    def get_attribute_count(self):
        return _framework.OfObject_get_attribute_count(self)

    def find_attribute_index(self, *args):
        return _framework.OfObject_find_attribute_index(self, *args)

    def set_attribute_index(self, attr, new_index):
        return _framework.OfObject_set_attribute_index(self, attr, new_index)

    def remove_all_attributes(self):
        return _framework.OfObject_remove_all_attributes(self)

    def remove_attribute(self, *args):
        return _framework.OfObject_remove_attribute(self, *args)

    def reset_attributes(self):
        return _framework.OfObject_reset_attributes(self)

    def get_group_attributes(self, group_name):
        return _framework.OfObject_get_group_attributes(self, group_name)

    def get_module(self):
        return _framework.OfObject_get_module(self)

    def get_module_data(self):
        return _framework.OfObject_get_module_data(self)

    def get_as_string(self, *args):
        return _framework.OfObject_get_as_string(self, *args)
    if _newclass:
        should_serialize_attribute = staticmethod(_framework.OfObject_should_serialize_attribute)
    else:
        should_serialize_attribute = _framework.OfObject_should_serialize_attribute

    def serialize(self, *args):
        return _framework.OfObject_serialize(self, *args)

    def deserialize(self, *args):
        return _framework.OfObject_deserialize(self, *args)

    def pre_deserialize(self, group):
        return _framework.OfObject_pre_deserialize(self, group)

    def pre_process_override(self, overrides, obj_key):
        return _framework.OfObject_pre_process_override(self, overrides, obj_key)

    def asleep(self):
        return _framework.OfObject_asleep(self)

    def awake(self, silent=False):
        return _framework.OfObject_awake(self, silent)

    def propagate_dirtiness(self, dirtiness, dirtiness_flags, attr=None):
        return _framework.OfObject_propagate_dirtiness(self, dirtiness, dirtiness_flags, attr)

    def dirty_attributes_revert(self, dirty=True):
        return _framework.OfObject_dirty_attributes_revert(self, dirty)

    def get_source(self):
        return _framework.OfObject_get_source(self)

    def has_local_attrs(self):
        return _framework.OfObject_has_local_attrs(self)

    def has_public_local_attrs(self):
        return _framework.OfObject_has_public_local_attrs(self)

    def has_saveable_local_attrs(self):
        return _framework.OfObject_has_saveable_local_attrs(self)

    def is_instance(self, *args):
        return _framework.OfObject_is_instance(self, *args)

    def is_local(self):
        return _framework.OfObject_is_local(self)

    def is_source(self, *args):
        return _framework.OfObject_is_source(self, *args)

    def is_proto(self):
        return _framework.OfObject_is_proto(self)

    def is_embedded(self):
        return _framework.OfObject_is_embedded(self)

    def is_parent(self, object):
        return _framework.OfObject_is_parent(self, object)

    def get_factory_id(self):
        return _framework.OfObject_get_factory_id(self)

    def get_parent_attribute(self):
        return _framework.OfObject_get_parent_attribute(self)

    def get_parent_attribute_index(self):
        return _framework.OfObject_get_parent_attribute_index(self)

    def get_top_object(self):
        return _framework.OfObject_get_top_object(self)

    def get_dependency_count(self):
        return _framework.OfObject_get_dependency_count(self)

    def get_dependency(self, index):
        return _framework.OfObject_get_dependency(self, index)

    def get_dependency_objects(self, dep_objects, recurse=False):
        return _framework.OfObject_get_dependency_objects(self, dep_objects, recurse)

    def is_weak_reference_dependency(self, index):
        return _framework.OfObject_is_weak_reference_dependency(self, index)

    def get_first_dependency(self):
        return _framework.OfObject_get_first_dependency(self)

    def get_next_dependency(self, dep_id):
        return _framework.OfObject_get_next_dependency(self, dep_id)

    def get_dependency_attr(self, dep_id):
        return _framework.OfObject_get_dependency_attr(self, dep_id)

    def get_dependency_attr_value_index(self, *args):
        return _framework.OfObject_get_dependency_attr_value_index(self, *args)

    def get_changing_attr(self):
        return _framework.OfObject_get_changing_attr(self)

    def get_localization(self):
        return _framework.OfObject_get_localization(self)

    def get_dirtiness(self):
        return _framework.OfObject_get_dirtiness(self)

    def get_dirtiness_flags(self):
        return _framework.OfObject_get_dirtiness_flags(self)

    def get_overrides(self, *args):
        return _framework.OfObject_get_overrides(self, *args)

    def is_override(self):
        return _framework.OfObject_is_override(self)

    def get_instance_count(self):
        return _framework.OfObject_get_instance_count(self)

    def get_instance(self, index):
        return _framework.OfObject_get_instance(self, index)

    def get_all_instances(self, instances, recurse=False):
        return _framework.OfObject_get_all_instances(self, instances, recurse)

    def rename(self, name):
        return _framework.OfObject_rename(self, name)

    def is_cyclic_reference(self, attr):
        return _framework.OfObject_is_cyclic_reference(self, attr)

    def diagnostic_cyclic_reference(self, attr, cycle_path):
        return _framework.OfObject_diagnostic_cyclic_reference(self, attr, cycle_path)

    def get_paths(self, paths):
        return _framework.OfObject_get_paths(self, paths)

    def localize(self, path):
        return _framework.OfObject_localize(self, path)

    def unlocalize(self):
        return _framework.OfObject_unlocalize(self)
    if _newclass:
        get_path_name = staticmethod(_framework.OfObject_get_path_name)
    else:
        get_path_name = _framework.OfObject_get_path_name

    def compute_referenced_objects(self, referenced_objects, include_disabled=False):
        return _framework.OfObject_compute_referenced_objects(self, referenced_objects, include_disabled)

    def get_referenced_objects(self):
        return _framework.OfObject_get_referenced_objects(self)

    def gather_branch(self, objects, stop_on_class=None):
        return _framework.OfObject_gather_branch(self, objects, stop_on_class)

    def protect(self, enable):
        return _framework.OfObject_protect(self, enable)

    def is_protected(self):
        return _framework.OfObject_is_protected(self)

    def has_protection_flag(self):
        return _framework.OfObject_has_protection_flag(self)

    def get_parent(self):
        return _framework.OfObject_get_parent(self)

    def add_embedded_object(self, *args):
        return _framework.OfObject_add_embedded_object(self, *args)

    def remove_embedded_object(self, *args):
        return _framework.OfObject_remove_embedded_object(self, *args)

    def remove_all_embedded_objects(self):
        return _framework.OfObject_remove_all_embedded_objects(self)

    def embedded_object_exists(self, name, flags):
        return _framework.OfObject_embedded_object_exists(self, name, flags)

    def get_embedded_objects(self, *args):
        return _framework.OfObject_get_embedded_objects(self, *args)

    def get_embedded_object_count(self):
        return _framework.OfObject_get_embedded_object_count(self)

    def get_embedded_object(self, *args):
        return _framework.OfObject_get_embedded_object(self, *args)

    def is_object(self):
        return _framework.OfObject_is_object(self)

    def is_context(self):
        return _framework.OfObject_is_context(self)

    def to_object(self, *args):
        return _framework.OfObject_to_object(self, *args)

    def to_context(self, *args):
        return _framework.OfObject_to_context(self, *args)

    def get_local_variables(self):
        return _framework.OfObject_get_local_variables(self)

    def bind_local_variable(self, var_name, expression):
        return _framework.OfObject_bind_local_variable(self, var_name, expression)

    def unbind_local_variable(self, local_variable, expression):
        return _framework.OfObject_unbind_local_variable(self, local_variable, expression)

    def get_statistics(self, stats):
        return _framework.OfObject_get_statistics(self, stats)

    def allow_custom_attributes(self, *args):
        return _framework.OfObject_allow_custom_attributes(self, *args)

    def replace_dependencies(self, object):
        return _framework.OfObject_replace_dependencies(self, object)

    def has_enabled_shading_variable(self, recurse_on_inputs):
        return _framework.OfObject_has_enabled_shading_variable(self, recurse_on_inputs)

    def set_disabled(self, value):
        return _framework.OfObject_set_disabled(self, value)

    def set_parent_disabled(self, value):
        return _framework.OfObject_set_parent_disabled(self, value)

    def set_source_disabled(self, value):
        return _framework.OfObject_set_source_disabled(self, value)
    if _newclass:
        class_info = staticmethod(_framework.OfObject_class_info)
    else:
        class_info = _framework.OfObject_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfObject____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfObject____class_destructor__

    def get_class_info(self):
        return _framework.OfObject_get_class_info(self)

    def get_attrs(self):
        return _framework.OfObject_get_attrs(self)

    def __instancecheck__(self, instance):
        if type(instance) is api.PyOfObject:
            return True
        elif type(instance) is api.OfObject:
            return True
        return False

    __swig_getmethods__["attrs"] = get_attrs
    if _newclass: attrs = property(get_attrs, None)

OfObject_swigregister = _framework.OfObject_swigregister
OfObject_swigregister(OfObject)

def OfObject_pre_delete(objects, count=1):
    return _framework.OfObject_pre_delete(objects, count)
OfObject_pre_delete = _framework.OfObject_pre_delete

def OfObject_pre_delete_already_gathered(objects, count):
    return _framework.OfObject_pre_delete_already_gathered(objects, count)
OfObject_pre_delete_already_gathered = _framework.OfObject_pre_delete_already_gathered

def OfObject_should_serialize_attribute(*args):
    return _framework.OfObject_should_serialize_attribute(*args)
OfObject_should_serialize_attribute = _framework.OfObject_should_serialize_attribute

def OfObject_get_path_name(path, context):
    return _framework.OfObject_get_path_name(path, context)
OfObject_get_path_name = _framework.OfObject_get_path_name

def OfObject_class_info():
    return _framework.OfObject_class_info()
OfObject_class_info = _framework.OfObject_class_info

def OfObject____class_destructor__(instance, is_array):
    return _framework.OfObject____class_destructor__(instance, is_array)
OfObject____class_destructor__ = _framework.OfObject____class_destructor__

class OfContext(OfItem):
    __swig_setmethods__ = {}
    for _s in [OfItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfContext, name, value)
    __swig_getmethods__ = {}
    for _s in [OfItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfContext, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        get_object_name = staticmethod(_framework.OfContext_get_object_name)
    else:
        get_object_name = _framework.OfContext_get_object_name
    if _newclass:
        get_global_context_name = staticmethod(_framework.OfContext_get_global_context_name)
    else:
        get_global_context_name = _framework.OfContext_get_global_context_name
    if _newclass:
        get_default_context_name = staticmethod(_framework.OfContext_get_default_context_name)
    else:
        get_default_context_name = _framework.OfContext_get_default_context_name
    __swig_destroy__ = _framework.delete_OfContext
    __del__ = lambda self: None

    def get_full_name(self):
        return _framework.OfContext_get_full_name(self)

    def rename(self, name):
        return _framework.OfContext_rename(self, name)

    def propagate_rename_event(self, old_name):
        return _framework.OfContext_propagate_rename_event(self, old_name)

    def get_parent(self):
        return _framework.OfContext_get_parent(self)

    def is_root(self):
        return _framework.OfContext_is_root(self)

    def set_parent(self, parent):
        return _framework.OfContext_set_parent(self, parent)

    def get_source(self):
        return _framework.OfContext_get_source(self)

    def is_instance(self):
        return _framework.OfContext_is_instance(self)

    def is_source(self):
        return _framework.OfContext_is_source(self)

    def is_empty(self):
        return _framework.OfContext_is_empty(self)

    def set_read_only(self, value):
        return _framework.OfContext_set_read_only(self, value)

    def set_user_locked(self, value):
        return _framework.OfContext_set_user_locked(self, value)

    def set_remote(self, value):
        return _framework.OfContext_set_remote(self, value)

    def is_content_locked(self):
        return _framework.OfContext_is_content_locked(self)

    def is_writable(self):
        return _framework.OfContext_is_writable(self)

    def copy_content_from(self, source, recursive=False, clear_content=True):
        return _framework.OfContext_copy_content_from(self, source, recursive, clear_content)

    def copy_content_to(self, target_contexts, recursive=False, clear_content=True):
        return _framework.OfContext_copy_content_to(self, target_contexts, recursive, clear_content)

    def add_copy(self, *args):
        return _framework.OfContext_add_copy(self, *args)

    def get_item_path(self, item):
        return _framework.OfContext_get_item_path(self, item)

    def get_context_path(self, context):
        return _framework.OfContext_get_context_path(self, context)

    def get_object_path(self, *args):
        return _framework.OfContext_get_object_path(self, *args)

    def add_context(self, *args):
        return _framework.OfContext_add_context(self, *args)

    def remove_context(self, *args):
        return _framework.OfContext_remove_context(self, *args)

    def remove_all_contexts(self, *args):
        return _framework.OfContext_remove_all_contexts(self, *args)

    def item_exists(self, name):
        return _framework.OfContext_item_exists(self, name)

    def get_item(self, *args):
        return _framework.OfContext_get_item(self, *args)

    def find_item_index(self, item):
        return _framework.OfContext_find_item_index(self, item)

    def find_item_neighbour(self, item, previous_neighbour=True):
        return _framework.OfContext_find_item_neighbour(self, item, previous_neighbour)

    def move_item_index(self, old_index, new_index):
        return _framework.OfContext_move_item_index(self, old_index, new_index)

    def move_item_indices(self, items, tgt_item, add_after=True):
        return _framework.OfContext_move_item_indices(self, items, tgt_item, add_after)

    def get_context_count(self, *args):
        return _framework.OfContext_get_context_count(self, *args)

    def get_all_contexts_count(self, *args):
        return _framework.OfContext_get_all_contexts_count(self, *args)

    def get_context(self, *args):
        return _framework.OfContext_get_context(self, *args)

    def context_exists(self, name):
        return _framework.OfContext_context_exists(self, name)

    def get_contexts(self, *args):
        return _framework.OfContext_get_contexts(self, *args)

    def add_generic_object(self, *args):
        return _framework.OfContext_add_generic_object(self, *args)

    def add_object(self, *args):
        return _framework.OfContext_add_object(self, *args)

    def add_instance(self, *args):
        return _framework.OfContext_add_instance(self, *args)

    def resolve_contexts(self, *args):
        return _framework.OfContext_resolve_contexts(self, *args)

    def resolve_all_contexts(self, *args):
        return _framework.OfContext_resolve_all_contexts(self, *args)

    def get_object(self, object_name):
        return _framework.OfContext_get_object(self, object_name)

    def object_exists(self, object_name):
        return _framework.OfContext_object_exists(self, object_name)

    def get_object_count(self, *args):
        return _framework.OfContext_get_object_count(self, *args)

    def get_all_objects_count(self, *args):
        return _framework.OfContext_get_all_objects_count(self, *args)

    def remove_object(self, *args):
        return _framework.OfContext_remove_object(self, *args)

    def remove_all_objects(self):
        return _framework.OfContext_remove_all_objects(self)

    def get_attribute_path(self, attr):
        return _framework.OfContext_get_attribute_path(self, attr)

    def clear(self):
        return _framework.OfContext_clear(self)

    def rename_object(self, *args):
        return _framework.OfContext_rename_object(self, *args)

    def add_attribute(self, *args):
        return _framework.OfContext_add_attribute(self, *args)

    def get_attribute(self, *args):
        return _framework.OfContext_get_attribute(self, *args)

    def attribute_exists(self, *args):
        return _framework.OfContext_attribute_exists(self, *args)

    def get_attribute_count(self):
        return _framework.OfContext_get_attribute_count(self)

    def find_attribute_index(self, *args):
        return _framework.OfContext_find_attribute_index(self, *args)

    def set_attribute_index(self, attr, new_index):
        return _framework.OfContext_set_attribute_index(self, attr, new_index)

    def remove_all_attributes(self):
        return _framework.OfContext_remove_all_attributes(self)

    def remove_attribute(self, *args):
        return _framework.OfContext_remove_attribute(self, *args)

    def reset_attributes(self):
        return _framework.OfContext_reset_attributes(self)
    if _newclass:
        get_cam_group_name = staticmethod(_framework.OfContext_get_cam_group_name)
    else:
        get_cam_group_name = _framework.OfContext_get_cam_group_name

    def add_cam(self, *args):
        return _framework.OfContext_add_cam(self, *args)

    def find_cam(self, *args):
        return _framework.OfContext_find_cam(self, *args)

    def remove_cam(self, *args):
        return _framework.OfContext_remove_cam(self, *args)

    def retarget_cam(self, *args):
        return _framework.OfContext_retarget_cam(self, *args)

    def untarget_cam(self, *args):
        return _framework.OfContext_untarget_cam(self, *args)

    def remove_all_cams(self, remove_attr=True):
        return _framework.OfContext_remove_all_cams(self, remove_attr)

    def disable_cam(self, index, disabled):
        return _framework.OfContext_disable_cam(self, index, disabled)

    def is_cam_disabled(self, index):
        return _framework.OfContext_is_cam_disabled(self, index)

    def set_cam_builtin(self, index, is_builtin):
        return _framework.OfContext_set_cam_builtin(self, index, is_builtin)

    def is_cam_builtin(self, index):
        return _framework.OfContext_is_cam_builtin(self, index)
    if _newclass:
        check_cam_rule = staticmethod(_framework.OfContext_check_cam_rule)
    else:
        check_cam_rule = _framework.OfContext_check_cam_rule
    if _newclass:
        check_cam_exclusion_rule = staticmethod(_framework.OfContext_check_cam_exclusion_rule)
    else:
        check_cam_exclusion_rule = _framework.OfContext_check_cam_exclusion_rule
    if _newclass:
        is_cam_type_managed = staticmethod(_framework.OfContext_is_cam_type_managed)
    else:
        is_cam_type_managed = _framework.OfContext_is_cam_type_managed

    def get_cam_count(self):
        return _framework.OfContext_get_cam_count(self)

    def get_cam_rule(self, index):
        return _framework.OfContext_get_cam_rule(self, index)

    def get_cam_exclusion_rule(self, index):
        return _framework.OfContext_get_cam_exclusion_rule(self, index)

    def get_cam_attribute(self, index):
        return _framework.OfContext_get_cam_attribute(self, index)

    def create_empty_CAM_set(self):
        return _framework.OfContext_create_empty_CAM_set(self)

    def create_CAM_set(self, target_cam_set):
        return _framework.OfContext_create_CAM_set(self, target_cam_set)

    def load_CAM_set(self, target_cam_set):
        return _framework.OfContext_load_CAM_set(self, target_cam_set)
    if _newclass:
        parse_attribute = staticmethod(_framework.OfContext_parse_attribute)
    else:
        parse_attribute = _framework.OfContext_parse_attribute

    def find_attribute(self, *args):
        return _framework.OfContext_find_attribute(self, *args)

    def find_attributes(self, attrs, name, class_name):
        return _framework.OfContext_find_attributes(self, attrs, name, class_name)

    def get_objects(self, *args):
        return _framework.OfContext_get_objects(self, *args)

    def get_items(self, *args):
        return _framework.OfContext_get_items(self, *args)

    def get_all_objects(self, *args):
        return _framework.OfContext_get_all_objects(self, *args)

    def get_all_items(self, *args):
        return _framework.OfContext_get_all_items(self, *args)

    def get_all_instances(self, *args):
        return _framework.OfContext_get_all_instances(self, *args)

    def get_instance_count(self, *args):
        return _framework.OfContext_get_instance_count(self, *args)

    def get_instance(self, *args):
        return _framework.OfContext_get_instance(self, *args)

    def get_last_event_item(self):
        return _framework.OfContext_get_last_event_item(self)

    def get_last_event_object(self):
        return _framework.OfContext_get_last_event_object(self)

    def get_last_event_context(self):
        return _framework.OfContext_get_last_event_context(self)

    def add_pending_context(self, name):
        return _framework.OfContext_add_pending_context(self, name)

    def add_pending_context2(self, ctx_path):
        return _framework.OfContext_add_pending_context2(self, ctx_path)

    def add_pending_object(self, object_name, class_name):
        return _framework.OfContext_add_pending_object(self, object_name, class_name)

    def get_as_string(self, *args):
        return _framework.OfContext_get_as_string(self, *args)

    def serialize(self, *args):
        return _framework.OfContext_serialize(self, *args)

    def deserialize(self, *args):
        return _framework.OfContext_deserialize(self, *args)

    def paste_items(self, *args):
        return _framework.OfContext_paste_items(self, *args)
    if _newclass:
        serialize_cam = staticmethod(_framework.OfContext_serialize_cam)
    else:
        serialize_cam = _framework.OfContext_serialize_cam

    def deserialize_cam(self, *args):
        return _framework.OfContext_deserialize_cam(self, *args)

    def serialize_cams(self, into_group):
        return _framework.OfContext_serialize_cams(self, into_group)

    def deserialize_cams(self, cam_group, added_cams):
        return _framework.OfContext_deserialize_cams(self, cam_group, added_cams)

    def protect(self, enable):
        return _framework.OfContext_protect(self, enable)

    def is_protected(self):
        return _framework.OfContext_is_protected(self)

    def is_object(self):
        return _framework.OfContext_is_object(self)

    def is_context(self):
        return _framework.OfContext_is_context(self)

    def to_object(self, *args):
        return _framework.OfContext_to_object(self, *args)

    def to_context(self, *args):
        return _framework.OfContext_to_context(self, *args)

    def get_level(self):
        return _framework.OfContext_get_level(self)
    if _newclass:
        get_name_from_filename = staticmethod(_framework.OfContext_get_name_from_filename)
    else:
        get_name_from_filename = _framework.OfContext_get_name_from_filename

    def import_project(self, filename, serial_mode, variable_mode, aov_mode, items):
        return _framework.OfContext_import_project(self, filename, serial_mode, variable_mode, aov_mode, items)

    def export_project(self, filename):
        return _framework.OfContext_export_project(self, filename)

    def reference_file(self, *args):
        return _framework.OfContext_reference_file(self, *args)

    def is_reference(self):
        return _framework.OfContext_is_reference(self)

    def is_override(self):
        return _framework.OfContext_is_override(self)

    def get_external_dependencies(self, *args):
        return _framework.OfContext_get_external_dependencies(self, *args)

    def get_statistics(self, stats):
        return _framework.OfContext_get_statistics(self, stats)

    def get_engine(self, *args):
        return _framework.OfContext_get_engine(self, *args)

    def set_engine(self, *args):
        return _framework.OfContext_set_engine(self, *args)

    def get_protected_object_count(self):
        return _framework.OfContext_get_protected_object_count(self)
    if _newclass:
        is_valid_serial = staticmethod(_framework.OfContext_is_valid_serial)
    else:
        is_valid_serial = _framework.OfContext_is_valid_serial
    if _newclass:
        is_valid_serial_name = staticmethod(_framework.OfContext_is_valid_serial_name)
    else:
        is_valid_serial_name = _framework.OfContext_is_valid_serial_name

    def is_import_point(self):
        return _framework.OfContext_is_import_point(self)

    def set_import_point(self, flag):
        return _framework.OfContext_set_import_point(self, flag)

    def get_item_icon(self):
        return _framework.OfContext_get_item_icon(self)
    if _newclass:
        get_default_icon = staticmethod(_framework.OfContext_get_default_icon)
    else:
        get_default_icon = _framework.OfContext_get_default_icon
    if _newclass:
        get_context_cap = staticmethod(_framework.OfContext_get_context_cap)
    else:
        get_context_cap = _framework.OfContext_get_context_cap

    def set_disabled(self, value):
        return _framework.OfContext_set_disabled(self, value)

    def set_parent_disabled(self, value):
        return _framework.OfContext_set_parent_disabled(self, value)

    def set_source_disabled(self, value):
        return _framework.OfContext_set_source_disabled(self, value)
    if _newclass:
        is_observed_context = staticmethod(_framework.OfContext_is_observed_context)
    else:
        is_observed_context = _framework.OfContext_is_observed_context
    if _newclass:
        is_same_or_source = staticmethod(_framework.OfContext_is_same_or_source)
    else:
        is_same_or_source = _framework.OfContext_is_same_or_source
    if _newclass:
        is_child_of_source = staticmethod(_framework.OfContext_is_child_of_source)
    else:
        is_child_of_source = _framework.OfContext_is_child_of_source
    if _newclass:
        get_options_object_name = staticmethod(_framework.OfContext_get_options_object_name)
    else:
        get_options_object_name = _framework.OfContext_get_options_object_name

    def options_exists(self):
        return _framework.OfContext_options_exists(self)

    def is_options(self, object):
        return _framework.OfContext_is_options(self, object)

    def get_options(self):
        return _framework.OfContext_get_options(self)
    if _newclass:
        gather_items_to_remove = staticmethod(_framework.OfContext_gather_items_to_remove)
    else:
        gather_items_to_remove = _framework.OfContext_gather_items_to_remove
    if _newclass:
        do_remove_items = staticmethod(_framework.OfContext_do_remove_items)
    else:
        do_remove_items = _framework.OfContext_do_remove_items
    if _newclass:
        remove_items = staticmethod(_framework.OfContext_remove_items)
    else:
        remove_items = _framework.OfContext_remove_items

    def is_child_of(self, *args):
        return _framework.OfContext_is_child_of(self, *args)

    def set_name_dirty(self):
        return _framework.OfContext_set_name_dirty(self)

    def send_event(self, event):
        return _framework.OfContext_send_event(self, event)

    def _set_disabled(self, value, attrs_to_notify, dependency_types):
        return _framework.OfContext__set_disabled(self, value, attrs_to_notify, dependency_types)

    def _set_parent_disabled(self, value, attrs_to_notify, dependency_types):
        return _framework.OfContext__set_parent_disabled(self, value, attrs_to_notify, dependency_types)

    def _set_source_disabled(self, value, attrs_to_notify, dependency_types):
        return _framework.OfContext__set_source_disabled(self, value, attrs_to_notify, dependency_types)

    def forward_disable_state(self, old_value, new_value, attrs_to_notify, dependency_types):
        return _framework.OfContext_forward_disable_state(self, old_value, new_value, attrs_to_notify, dependency_types)

    def activate_instance_flag(self, flag):
        return _framework.OfContext_activate_instance_flag(self, flag)

    def desactivate_instance_flag(self, flag):
        return _framework.OfContext_desactivate_instance_flag(self, flag)

    def set_instance_flags(self, flag):
        return _framework.OfContext_set_instance_flags(self, flag)

    def activate_flag(self, flag):
        return _framework.OfContext_activate_flag(self, flag)

    def desactivate_flag(self, flag):
        return _framework.OfContext_desactivate_flag(self, flag)

    def set_flags(self, flag):
        return _framework.OfContext_set_flags(self, flag)

    def _add_cam(self, attr_serial, rule, exclusion_rule, disabled, builtin):
        return _framework.OfContext__add_cam(self, attr_serial, rule, exclusion_rule, disabled, builtin)

    def _resolve_cam_rule(self, inclusive_rules, exclusion_rules, retrieved_attrs):
        return _framework.OfContext__resolve_cam_rule(self, inclusive_rules, exclusion_rules, retrieved_attrs)
    if _newclass:
        _is_matching_cam_rule = staticmethod(_framework.OfContext__is_matching_cam_rule)
    else:
        _is_matching_cam_rule = _framework.OfContext__is_matching_cam_rule
    if _newclass:
        _unapply_cams = staticmethod(_framework.OfContext__unapply_cams)
    else:
        _unapply_cams = _framework.OfContext__unapply_cams
    if _newclass:
        _apply_cams = staticmethod(_framework.OfContext__apply_cams)
    else:
        _apply_cams = _framework.OfContext__apply_cams

    def _recreate_engine(self, creation_cb, engine_settings):
        return _framework.OfContext__recreate_engine(self, creation_cb, engine_settings)
    if _newclass:
        clear_cam_cb = staticmethod(_framework.OfContext_clear_cam_cb)
    else:
        clear_cam_cb = _framework.OfContext_clear_cam_cb
    if _newclass:
        save_cam_set_cb = staticmethod(_framework.OfContext_save_cam_set_cb)
    else:
        save_cam_set_cb = _framework.OfContext_save_cam_set_cb
    if _newclass:
        load_cam_set_cb = staticmethod(_framework.OfContext_load_cam_set_cb)
    else:
        load_cam_set_cb = _framework.OfContext_load_cam_set_cb
    if _newclass:
        import_cam_set_cb = staticmethod(_framework.OfContext_import_cam_set_cb)
    else:
        import_cam_set_cb = _framework.OfContext_import_cam_set_cb
    if _newclass:
        process_gather_context_to_remove = staticmethod(_framework.OfContext_process_gather_context_to_remove)
    else:
        process_gather_context_to_remove = _framework.OfContext_process_gather_context_to_remove
    if _newclass:
        process_gather_object_to_remove = staticmethod(_framework.OfContext_process_gather_object_to_remove)
    else:
        process_gather_object_to_remove = _framework.OfContext_process_gather_object_to_remove
    if _newclass:
        process_gather_embedded_to_remove = staticmethod(_framework.OfContext_process_gather_embedded_to_remove)
    else:
        process_gather_embedded_to_remove = _framework.OfContext_process_gather_embedded_to_remove

    def process_copy_paste(self, contexts_to_copy, objects_to_copy, created_items):
        return _framework.OfContext_process_copy_paste(self, contexts_to_copy, objects_to_copy, created_items)
    if _newclass:
        class_info = staticmethod(_framework.OfContext_class_info)
    else:
        class_info = _framework.OfContext_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfContext____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfContext____class_destructor__

    def get_class_info(self):
        return _framework.OfContext_get_class_info(self)

    def add_objects(self, *args):
        return _framework.OfContext_add_objects(self, *args)
OfContext_swigregister = _framework.OfContext_swigregister
OfContext_swigregister(OfContext)

def OfContext_get_object_name(full_path):
    return _framework.OfContext_get_object_name(full_path)
OfContext_get_object_name = _framework.OfContext_get_object_name

def OfContext_get_global_context_name():
    return _framework.OfContext_get_global_context_name()
OfContext_get_global_context_name = _framework.OfContext_get_global_context_name

def OfContext_get_default_context_name():
    return _framework.OfContext_get_default_context_name()
OfContext_get_default_context_name = _framework.OfContext_get_default_context_name

def OfContext_get_cam_group_name():
    return _framework.OfContext_get_cam_group_name()
OfContext_get_cam_group_name = _framework.OfContext_get_cam_group_name

def OfContext_check_cam_rule(rule, error_message):
    return _framework.OfContext_check_cam_rule(rule, error_message)
OfContext_check_cam_rule = _framework.OfContext_check_cam_rule

def OfContext_check_cam_exclusion_rule(exclusion_rule, error_message):
    return _framework.OfContext_check_cam_exclusion_rule(exclusion_rule, error_message)
OfContext_check_cam_exclusion_rule = _framework.OfContext_check_cam_exclusion_rule

def OfContext_is_cam_type_managed(type, hint):
    return _framework.OfContext_is_cam_type_managed(type, hint)
OfContext_is_cam_type_managed = _framework.OfContext_is_cam_type_managed

def OfContext_parse_attribute(str, name, index, is_array, index_specified):
    return _framework.OfContext_parse_attribute(str, name, index, is_array, index_specified)
OfContext_parse_attribute = _framework.OfContext_parse_attribute

def OfContext_serialize_cam(*args):
    return _framework.OfContext_serialize_cam(*args)
OfContext_serialize_cam = _framework.OfContext_serialize_cam

def OfContext_get_name_from_filename(filename):
    return _framework.OfContext_get_name_from_filename(filename)
OfContext_get_name_from_filename = _framework.OfContext_get_name_from_filename

def OfContext_is_valid_serial(serial):
    return _framework.OfContext_is_valid_serial(serial)
OfContext_is_valid_serial = _framework.OfContext_is_valid_serial

def OfContext_is_valid_serial_name(serial_name):
    return _framework.OfContext_is_valid_serial_name(serial_name)
OfContext_is_valid_serial_name = _framework.OfContext_is_valid_serial_name

def OfContext_get_default_icon():
    return _framework.OfContext_get_default_icon()
OfContext_get_default_icon = _framework.OfContext_get_default_icon

def OfContext_get_context_cap(context):
    return _framework.OfContext_get_context_cap(context)
OfContext_get_context_cap = _framework.OfContext_get_context_cap

def OfContext_is_observed_context(observed_context, event_context):
    return _framework.OfContext_is_observed_context(observed_context, event_context)
OfContext_is_observed_context = _framework.OfContext_is_observed_context

def OfContext_is_same_or_source(context_1, context_2):
    return _framework.OfContext_is_same_or_source(context_1, context_2)
OfContext_is_same_or_source = _framework.OfContext_is_same_or_source

def OfContext_is_child_of_source(context_1, context_2):
    return _framework.OfContext_is_child_of_source(context_1, context_2)
OfContext_is_child_of_source = _framework.OfContext_is_child_of_source

def OfContext_get_options_object_name():
    return _framework.OfContext_get_options_object_name()
OfContext_get_options_object_name = _framework.OfContext_get_options_object_name

def OfContext_gather_items_to_remove(context_to_process, objects_to_process, explicit_embedded, contexts_to_remove, objects_to_remove, embedded_to_remove):
    return _framework.OfContext_gather_items_to_remove(context_to_process, objects_to_process, explicit_embedded, contexts_to_remove, objects_to_remove, embedded_to_remove)
OfContext_gather_items_to_remove = _framework.OfContext_gather_items_to_remove

def OfContext_do_remove_items(factory, gathered_contexts, gathered_objects, contexts_to_remove, objects_to_remove, embedded_to_remove, progress_bar):
    return _framework.OfContext_do_remove_items(factory, gathered_contexts, gathered_objects, contexts_to_remove, objects_to_remove, embedded_to_remove, progress_bar)
OfContext_do_remove_items = _framework.OfContext_do_remove_items

def OfContext_remove_items(*args):
    return _framework.OfContext_remove_items(*args)
OfContext_remove_items = _framework.OfContext_remove_items

def OfContext__is_matching_cam_rule(factory, ctx_name, attr, inclusive_rules, exclusion_rules):
    return _framework.OfContext__is_matching_cam_rule(factory, ctx_name, attr, inclusive_rules, exclusion_rules)
OfContext__is_matching_cam_rule = _framework.OfContext__is_matching_cam_rule

def OfContext__unapply_cams(*args):
    return _framework.OfContext__unapply_cams(*args)
OfContext__unapply_cams = _framework.OfContext__unapply_cams

def OfContext__apply_cams(*args):
    return _framework.OfContext__apply_cams(*args)
OfContext__apply_cams = _framework.OfContext__apply_cams

def OfContext_clear_cam_cb(action, object, data):
    return _framework.OfContext_clear_cam_cb(action, object, data)
OfContext_clear_cam_cb = _framework.OfContext_clear_cam_cb

def OfContext_save_cam_set_cb(action, object, data):
    return _framework.OfContext_save_cam_set_cb(action, object, data)
OfContext_save_cam_set_cb = _framework.OfContext_save_cam_set_cb

def OfContext_load_cam_set_cb(action, object, data):
    return _framework.OfContext_load_cam_set_cb(action, object, data)
OfContext_load_cam_set_cb = _framework.OfContext_load_cam_set_cb

def OfContext_import_cam_set_cb(action, object, data):
    return _framework.OfContext_import_cam_set_cb(action, object, data)
OfContext_import_cam_set_cb = _framework.OfContext_import_cam_set_cb

def OfContext_process_gather_context_to_remove(context, context_to_process, objects_to_process):
    return _framework.OfContext_process_gather_context_to_remove(context, context_to_process, objects_to_process)
OfContext_process_gather_context_to_remove = _framework.OfContext_process_gather_context_to_remove

def OfContext_process_gather_object_to_remove(object, objects_to_process):
    return _framework.OfContext_process_gather_object_to_remove(object, objects_to_process)
OfContext_process_gather_object_to_remove = _framework.OfContext_process_gather_object_to_remove

def OfContext_process_gather_embedded_to_remove(object, objects_to_process):
    return _framework.OfContext_process_gather_embedded_to_remove(object, objects_to_process)
OfContext_process_gather_embedded_to_remove = _framework.OfContext_process_gather_embedded_to_remove

def OfContext_class_info():
    return _framework.OfContext_class_info()
OfContext_class_info = _framework.OfContext_class_info

def OfContext____class_destructor__(instance, is_array):
    return _framework.OfContext____class_destructor__(instance, is_array)
OfContext____class_destructor__ = _framework.OfContext____class_destructor__

class OfContextEngine(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfContextEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfContextEngine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_content_dirty(self, dirty_sub_contexts=False):
        return _framework.OfContextEngine_set_content_dirty(self, dirty_sub_contexts)
    if _newclass:
        get_descriptor = staticmethod(_framework.OfContextEngine_get_descriptor)
    else:
        get_descriptor = _framework.OfContextEngine_get_descriptor

    def is_unknown_engine(self):
        return _framework.OfContextEngine_is_unknown_engine(self)

    def is_project_engine(self):
        return _framework.OfContextEngine_is_project_engine(self)

    def is_override_engine(self):
        return _framework.OfContextEngine_is_override_engine(self)

    def is_file_reference_engine(self):
        return _framework.OfContextEngine_is_file_reference_engine(self)

    def get_context(self, *args):
        return _framework.OfContextEngine_get_context(self, *args)
    if _newclass:
        set_icon = staticmethod(_framework.OfContextEngine_set_icon)
    else:
        set_icon = _framework.OfContextEngine_set_icon

    def get_icon(self):
        return _framework.OfContextEngine_get_icon(self)

    def get_settings(self):
        return _framework.OfContextEngine_get_settings(self)

    def init(self, settings=None):
        return _framework.OfContextEngine_init(self, settings)
    __swig_destroy__ = _framework.delete_OfContextEngine
    __del__ = lambda self: None
    if _newclass:
        class_info = staticmethod(_framework.OfContextEngine_class_info)
    else:
        class_info = _framework.OfContextEngine_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfContextEngine____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfContextEngine____class_destructor__

    def get_class_info(self):
        return _framework.OfContextEngine_get_class_info(self)
OfContextEngine_swigregister = _framework.OfContextEngine_swigregister
OfContextEngine_swigregister(OfContextEngine)

def OfContextEngine_get_descriptor():
    return _framework.OfContextEngine_get_descriptor()
OfContextEngine_get_descriptor = _framework.OfContextEngine_get_descriptor

def OfContextEngine_set_icon(*args):
    return _framework.OfContextEngine_set_icon(*args)
OfContextEngine_set_icon = _framework.OfContextEngine_set_icon

def OfContextEngine_class_info():
    return _framework.OfContextEngine_class_info()
OfContextEngine_class_info = _framework.OfContextEngine_class_info

def OfContextEngine____class_destructor__(instance, is_array):
    return _framework.OfContextEngine____class_destructor__(instance, is_array)
OfContextEngine____class_destructor__ = _framework.OfContextEngine____class_destructor__

class OfProjectContextEngine(OfContextEngine):
    __swig_setmethods__ = {}
    for _s in [OfContextEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfProjectContextEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [OfContextEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfProjectContextEngine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        get_descriptor = staticmethod(_framework.OfProjectContextEngine_get_descriptor)
    else:
        get_descriptor = _framework.OfProjectContextEngine_get_descriptor
    __swig_destroy__ = _framework.delete_OfProjectContextEngine
    __del__ = lambda self: None
    if _newclass:
        class_info = staticmethod(_framework.OfProjectContextEngine_class_info)
    else:
        class_info = _framework.OfProjectContextEngine_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfProjectContextEngine____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfProjectContextEngine____class_destructor__

    def get_class_info(self):
        return _framework.OfProjectContextEngine_get_class_info(self)
OfProjectContextEngine_swigregister = _framework.OfProjectContextEngine_swigregister
OfProjectContextEngine_swigregister(OfProjectContextEngine)

def OfProjectContextEngine_get_descriptor():
    return _framework.OfProjectContextEngine_get_descriptor()
OfProjectContextEngine_get_descriptor = _framework.OfProjectContextEngine_get_descriptor

def OfProjectContextEngine_class_info():
    return _framework.OfProjectContextEngine_class_info()
OfProjectContextEngine_class_info = _framework.OfProjectContextEngine_class_info

def OfProjectContextEngine____class_destructor__(instance, is_array):
    return _framework.OfProjectContextEngine____class_destructor__(instance, is_array)
OfProjectContextEngine____class_destructor__ = _framework.OfProjectContextEngine____class_destructor__

class OfUnknownContextEngine(OfContextEngine):
    __swig_setmethods__ = {}
    for _s in [OfContextEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfUnknownContextEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [OfContextEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfUnknownContextEngine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        get_descriptor = staticmethod(_framework.OfUnknownContextEngine_get_descriptor)
    else:
        get_descriptor = _framework.OfUnknownContextEngine_get_descriptor
    __swig_destroy__ = _framework.delete_OfUnknownContextEngine
    __del__ = lambda self: None

    def get_serial_name(self):
        return _framework.OfUnknownContextEngine_get_serial_name(self)
    if _newclass:
        class_info = staticmethod(_framework.OfUnknownContextEngine_class_info)
    else:
        class_info = _framework.OfUnknownContextEngine_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfUnknownContextEngine____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfUnknownContextEngine____class_destructor__

    def get_class_info(self):
        return _framework.OfUnknownContextEngine_get_class_info(self)
OfUnknownContextEngine_swigregister = _framework.OfUnknownContextEngine_swigregister
OfUnknownContextEngine_swigregister(OfUnknownContextEngine)

def OfUnknownContextEngine_get_descriptor():
    return _framework.OfUnknownContextEngine_get_descriptor()
OfUnknownContextEngine_get_descriptor = _framework.OfUnknownContextEngine_get_descriptor

def OfUnknownContextEngine_class_info():
    return _framework.OfUnknownContextEngine_class_info()
OfUnknownContextEngine_class_info = _framework.OfUnknownContextEngine_class_info

def OfUnknownContextEngine____class_destructor__(instance, is_array):
    return _framework.OfUnknownContextEngine____class_destructor__(instance, is_array)
OfUnknownContextEngine____class_destructor__ = _framework.OfUnknownContextEngine____class_destructor__

class OfOverridesContextEngine(OfContextEngine):
    __swig_setmethods__ = {}
    for _s in [OfContextEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfOverridesContextEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [OfContextEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfOverridesContextEngine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def clear_overrides(self):
        return _framework.OfOverridesContextEngine_clear_overrides(self)

    def clear_items_overrides(self, items_paths):
        return _framework.OfOverridesContextEngine_clear_items_overrides(self, items_paths)

    def clear_sub_items_overrides(self, path_filters):
        return _framework.OfOverridesContextEngine_clear_sub_items_overrides(self, path_filters)

    def clear_attributes_overrides(self, attr_paths):
        return _framework.OfOverridesContextEngine_clear_attributes_overrides(self, attr_paths)

    def cleanup_overrides(self, *args):
        return _framework.OfOverridesContextEngine_cleanup_overrides(self, *args)

    def create_override_set(self):
        return _framework.OfOverridesContextEngine_create_override_set(self)

    def get_override_set_count(self):
        return _framework.OfOverridesContextEngine_get_override_set_count(self)

    def get_override_set(self, index):
        return _framework.OfOverridesContextEngine_get_override_set(self, index)

    def get_overrides_as_text(self):
        return _framework.OfOverridesContextEngine_get_overrides_as_text(self)

    def set_overrides_from_text(self, text):
        return _framework.OfOverridesContextEngine_set_overrides_from_text(self, text)

    def get_overrides(self):
        return _framework.OfOverridesContextEngine_get_overrides(self)

    def do_create_override_set(self, undo_data, override_set_name):
        return _framework.OfOverridesContextEngine_do_create_override_set(self, undo_data, override_set_name)

    def do_clear_overrides(self, undo_data):
        return _framework.OfOverridesContextEngine_do_clear_overrides(self, undo_data)

    def do_cleanup_overrides(self, undo_data):
        return _framework.OfOverridesContextEngine_do_cleanup_overrides(self, undo_data)

    def undo_clear_overrides(self, undo_data):
        return _framework.OfOverridesContextEngine_undo_clear_overrides(self, undo_data)

    def do_clear_items_overrides(self, item_paths):
        return _framework.OfOverridesContextEngine_do_clear_items_overrides(self, item_paths)

    def do_clear_sub_items_overrides(self, path_filters):
        return _framework.OfOverridesContextEngine_do_clear_sub_items_overrides(self, path_filters)

    def do_clear_attribute_overrides(self, attr_paths):
        return _framework.OfOverridesContextEngine_do_clear_attribute_overrides(self, attr_paths)
    __swig_destroy__ = _framework.delete_OfOverridesContextEngine
    __del__ = lambda self: None

    def is_top_level_reference(self):
        return _framework.OfOverridesContextEngine_is_top_level_reference(self)

    def set_content_dirty(self, dirty_sub_contexts=False):
        return _framework.OfOverridesContextEngine_set_content_dirty(self, dirty_sub_contexts)

    def reset_content_dirty(self):
        return _framework.OfOverridesContextEngine_reset_content_dirty(self)

    def is_content_dirty(self):
        return _framework.OfOverridesContextEngine_is_content_dirty(self)

    def can_update_content(self):
        return _framework.OfOverridesContextEngine_can_update_content(self)

    def update_content(self, *args):
        return _framework.OfOverridesContextEngine_update_content(self, *args)

    def get_override_kind(self, object, attr_name):
        return _framework.OfOverridesContextEngine_get_override_kind(self, object, attr_name)

    def update_content_and_clean(self, *args):
        return _framework.OfOverridesContextEngine_update_content_and_clean(self, *args)
    if _newclass:
        class_info = staticmethod(_framework.OfOverridesContextEngine_class_info)
    else:
        class_info = _framework.OfOverridesContextEngine_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfOverridesContextEngine____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfOverridesContextEngine____class_destructor__

    def get_class_info(self):
        return _framework.OfOverridesContextEngine_get_class_info(self)
OfOverridesContextEngine_swigregister = _framework.OfOverridesContextEngine_swigregister
OfOverridesContextEngine_swigregister(OfOverridesContextEngine)

def OfOverridesContextEngine_class_info():
    return _framework.OfOverridesContextEngine_class_info()
OfOverridesContextEngine_class_info = _framework.OfOverridesContextEngine_class_info

def OfOverridesContextEngine____class_destructor__(instance, is_array):
    return _framework.OfOverridesContextEngine____class_destructor__(instance, is_array)
OfOverridesContextEngine____class_destructor__ = _framework.OfOverridesContextEngine____class_destructor__

class OfFileReferenceContextEngine(OfOverridesContextEngine):
    __swig_setmethods__ = {}
    for _s in [OfOverridesContextEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfFileReferenceContextEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [OfOverridesContextEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfFileReferenceContextEngine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set_filename(self, filename):
        return _framework.OfFileReferenceContextEngine_set_filename(self, filename)

    def get_filename(self):
        return _framework.OfFileReferenceContextEngine_get_filename(self)

    def set_filenames(self, filename):
        return _framework.OfFileReferenceContextEngine_set_filenames(self, filename)

    def get_filenames(self):
        return _framework.OfFileReferenceContextEngine_get_filenames(self)

    def get_expressions(self):
        return _framework.OfFileReferenceContextEngine_get_expressions(self)

    def supports_file_list(self):
        return _framework.OfFileReferenceContextEngine_supports_file_list(self)

    def supports_localize(self):
        return _framework.OfFileReferenceContextEngine_supports_localize(self)
    if _newclass:
        add_file_format = staticmethod(_framework.OfFileReferenceContextEngine_add_file_format)
    else:
        add_file_format = _framework.OfFileReferenceContextEngine_add_file_format
    if _newclass:
        get_file_format_extensions = staticmethod(_framework.OfFileReferenceContextEngine_get_file_format_extensions)
    else:
        get_file_format_extensions = _framework.OfFileReferenceContextEngine_get_file_format_extensions
    if _newclass:
        can_manage_file_format = staticmethod(_framework.OfFileReferenceContextEngine_can_manage_file_format)
    else:
        can_manage_file_format = _framework.OfFileReferenceContextEngine_can_manage_file_format
    if _newclass:
        file_format_supports_file_list = staticmethod(_framework.OfFileReferenceContextEngine_file_format_supports_file_list)
    else:
        file_format_supports_file_list = _framework.OfFileReferenceContextEngine_file_format_supports_file_list
    if _newclass:
        file_format_supports_localize = staticmethod(_framework.OfFileReferenceContextEngine_file_format_supports_localize)
    else:
        file_format_supports_localize = _framework.OfFileReferenceContextEngine_file_format_supports_localize
    if _newclass:
        load_all = staticmethod(_framework.OfFileReferenceContextEngine_load_all)
    else:
        load_all = _framework.OfFileReferenceContextEngine_load_all

    def load(self, load_sub_references):
        return _framework.OfFileReferenceContextEngine_load(self, load_sub_references)

    def unload(self):
        return _framework.OfFileReferenceContextEngine_unload(self)

    def reload(self):
        return _framework.OfFileReferenceContextEngine_reload(self)
    STATE_UNLOADED = _framework.OfFileReferenceContextEngine_STATE_UNLOADED
    STATE_LOADING = _framework.OfFileReferenceContextEngine_STATE_LOADING
    STATE_LOADED = _framework.OfFileReferenceContextEngine_STATE_LOADED
    STATE_UNLOADING = _framework.OfFileReferenceContextEngine_STATE_UNLOADING

    def get_loading_state(self):
        return _framework.OfFileReferenceContextEngine_get_loading_state(self)

    def is_loaded(self):
        return _framework.OfFileReferenceContextEngine_is_loaded(self)

    def is_loading(self):
        return _framework.OfFileReferenceContextEngine_is_loading(self)

    def is_reloading(self):
        return _framework.OfFileReferenceContextEngine_is_reloading(self)

    def do_set_filename(self, filename, undo_data):
        return _framework.OfFileReferenceContextEngine_do_set_filename(self, filename, undo_data)

    def do_set_filenames(self, indices, filenames, undo_data):
        return _framework.OfFileReferenceContextEngine_do_set_filenames(self, indices, filenames, undo_data)

    def do_remove_filename(self, indices, undo_data):
        return _framework.OfFileReferenceContextEngine_do_remove_filename(self, indices, undo_data)

    def do_add_filename(self, filenames, undo_data):
        return _framework.OfFileReferenceContextEngine_do_add_filename(self, filenames, undo_data)

    def do_permute_reference_filename(self, permutations, undo_data):
        return _framework.OfFileReferenceContextEngine_do_permute_reference_filename(self, permutations, undo_data)

    def undo_cmd_filename(self, undo_data):
        return _framework.OfFileReferenceContextEngine_undo_cmd_filename(self, undo_data)
    __swig_destroy__ = _framework.delete_OfFileReferenceContextEngine
    __del__ = lambda self: None

    def init(self, filename):
        return _framework.OfFileReferenceContextEngine_init(self, filename)
    if _newclass:
        get_descriptor = staticmethod(_framework.OfFileReferenceContextEngine_get_descriptor)
    else:
        get_descriptor = _framework.OfFileReferenceContextEngine_get_descriptor

    def get_override_kind(self, object, attr_name):
        return _framework.OfFileReferenceContextEngine_get_override_kind(self, object, attr_name)

    def change_override_root_path(self, old_path, new_root_ctx):
        return _framework.OfFileReferenceContextEngine_change_override_root_path(self, old_path, new_root_ctx)

    def get_import_variable_mode(self):
        return _framework.OfFileReferenceContextEngine_get_import_variable_mode(self)

    def set_import_variable_mode(self, variable_mode):
        return _framework.OfFileReferenceContextEngine_set_import_variable_mode(self, variable_mode)

    def get_import_aov_mode(self):
        return _framework.OfFileReferenceContextEngine_get_import_aov_mode(self)

    def set_import_aov_mode(self, aov_mode):
        return _framework.OfFileReferenceContextEngine_set_import_aov_mode(self, aov_mode)
    if _newclass:
        class_info = staticmethod(_framework.OfFileReferenceContextEngine_class_info)
    else:
        class_info = _framework.OfFileReferenceContextEngine_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfFileReferenceContextEngine____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfFileReferenceContextEngine____class_destructor__

    def get_class_info(self):
        return _framework.OfFileReferenceContextEngine_get_class_info(self)
OfFileReferenceContextEngine_swigregister = _framework.OfFileReferenceContextEngine_swigregister
OfFileReferenceContextEngine_swigregister(OfFileReferenceContextEngine)

def OfFileReferenceContextEngine_add_file_format(engine, extension, cb, supports_file_list=False, supports_localize=True):
    return _framework.OfFileReferenceContextEngine_add_file_format(engine, extension, cb, supports_file_list, supports_localize)
OfFileReferenceContextEngine_add_file_format = _framework.OfFileReferenceContextEngine_add_file_format

def OfFileReferenceContextEngine_get_file_format_extensions(*args):
    return _framework.OfFileReferenceContextEngine_get_file_format_extensions(*args)
OfFileReferenceContextEngine_get_file_format_extensions = _framework.OfFileReferenceContextEngine_get_file_format_extensions

def OfFileReferenceContextEngine_can_manage_file_format(engine, extension):
    return _framework.OfFileReferenceContextEngine_can_manage_file_format(engine, extension)
OfFileReferenceContextEngine_can_manage_file_format = _framework.OfFileReferenceContextEngine_can_manage_file_format

def OfFileReferenceContextEngine_file_format_supports_file_list(engine, extension):
    return _framework.OfFileReferenceContextEngine_file_format_supports_file_list(engine, extension)
OfFileReferenceContextEngine_file_format_supports_file_list = _framework.OfFileReferenceContextEngine_file_format_supports_file_list

def OfFileReferenceContextEngine_file_format_supports_localize(engine, extension):
    return _framework.OfFileReferenceContextEngine_file_format_supports_localize(engine, extension)
OfFileReferenceContextEngine_file_format_supports_localize = _framework.OfFileReferenceContextEngine_file_format_supports_localize

def OfFileReferenceContextEngine_load_all(application):
    return _framework.OfFileReferenceContextEngine_load_all(application)
OfFileReferenceContextEngine_load_all = _framework.OfFileReferenceContextEngine_load_all

def OfFileReferenceContextEngine_get_descriptor():
    return _framework.OfFileReferenceContextEngine_get_descriptor()
OfFileReferenceContextEngine_get_descriptor = _framework.OfFileReferenceContextEngine_get_descriptor

def OfFileReferenceContextEngine_class_info():
    return _framework.OfFileReferenceContextEngine_class_info()
OfFileReferenceContextEngine_class_info = _framework.OfFileReferenceContextEngine_class_info

def OfFileReferenceContextEngine____class_destructor__(instance, is_array):
    return _framework.OfFileReferenceContextEngine____class_destructor__(instance, is_array)
OfFileReferenceContextEngine____class_destructor__ = _framework.OfFileReferenceContextEngine____class_destructor__

class OfClassCallbacks(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfClassCallbacks, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfClassCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_OfClassCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfClassCallbacks
    __del__ = lambda self: None

    def init_parent_callbacks(self, base_class):
        return _framework.OfClassCallbacks_init_parent_callbacks(self, base_class)

    def init_callbacks(self, cb):
        return _framework.OfClassCallbacks_init_callbacks(self, cb)
    __swig_setmethods__["cb_create_module"] = _framework.OfClassCallbacks_cb_create_module_set
    __swig_getmethods__["cb_create_module"] = _framework.OfClassCallbacks_cb_create_module_get
    if _newclass:
        cb_create_module = _swig_property(_framework.OfClassCallbacks_cb_create_module_get, _framework.OfClassCallbacks_cb_create_module_set)
    __swig_setmethods__["cb_destroy_module"] = _framework.OfClassCallbacks_cb_destroy_module_set
    __swig_getmethods__["cb_destroy_module"] = _framework.OfClassCallbacks_cb_destroy_module_get
    if _newclass:
        cb_destroy_module = _swig_property(_framework.OfClassCallbacks_cb_destroy_module_get, _framework.OfClassCallbacks_cb_destroy_module_set)
    __swig_setmethods__["cb_module_constructor"] = _framework.OfClassCallbacks_cb_module_constructor_set
    __swig_getmethods__["cb_module_constructor"] = _framework.OfClassCallbacks_cb_module_constructor_get
    if _newclass:
        cb_module_constructor = _swig_property(_framework.OfClassCallbacks_cb_module_constructor_get, _framework.OfClassCallbacks_cb_module_constructor_set)
    __swig_setmethods__["cb_module_destructor"] = _framework.OfClassCallbacks_cb_module_destructor_set
    __swig_getmethods__["cb_module_destructor"] = _framework.OfClassCallbacks_cb_module_destructor_get
    if _newclass:
        cb_module_destructor = _swig_property(_framework.OfClassCallbacks_cb_module_destructor_get, _framework.OfClassCallbacks_cb_module_destructor_set)
    __swig_setmethods__["cb_create_module_data"] = _framework.OfClassCallbacks_cb_create_module_data_set
    __swig_getmethods__["cb_create_module_data"] = _framework.OfClassCallbacks_cb_create_module_data_get
    if _newclass:
        cb_create_module_data = _swig_property(_framework.OfClassCallbacks_cb_create_module_data_get, _framework.OfClassCallbacks_cb_create_module_data_set)
    __swig_setmethods__["cb_destroy_module_data"] = _framework.OfClassCallbacks_cb_destroy_module_data_set
    __swig_getmethods__["cb_destroy_module_data"] = _framework.OfClassCallbacks_cb_destroy_module_data_get
    if _newclass:
        cb_destroy_module_data = _swig_property(_framework.OfClassCallbacks_cb_destroy_module_data_get, _framework.OfClassCallbacks_cb_destroy_module_data_set)
    __swig_setmethods__["cb_on_attribute_change"] = _framework.OfClassCallbacks_cb_on_attribute_change_set
    __swig_getmethods__["cb_on_attribute_change"] = _framework.OfClassCallbacks_cb_on_attribute_change_get
    if _newclass:
        cb_on_attribute_change = _swig_property(_framework.OfClassCallbacks_cb_on_attribute_change_get, _framework.OfClassCallbacks_cb_on_attribute_change_set)
    __swig_setmethods__["cb_on_send_event"] = _framework.OfClassCallbacks_cb_on_send_event_set
    __swig_getmethods__["cb_on_send_event"] = _framework.OfClassCallbacks_cb_on_send_event_get
    if _newclass:
        cb_on_send_event = _swig_property(_framework.OfClassCallbacks_cb_on_send_event_get, _framework.OfClassCallbacks_cb_on_send_event_set)
    __swig_setmethods__["cb_on_serialize_object"] = _framework.OfClassCallbacks_cb_on_serialize_object_set
    __swig_getmethods__["cb_on_serialize_object"] = _framework.OfClassCallbacks_cb_on_serialize_object_get
    if _newclass:
        cb_on_serialize_object = _swig_property(_framework.OfClassCallbacks_cb_on_serialize_object_get, _framework.OfClassCallbacks_cb_on_serialize_object_set)
    __swig_setmethods__["cb_on_deserialize_object"] = _framework.OfClassCallbacks_cb_on_deserialize_object_set
    __swig_getmethods__["cb_on_deserialize_object"] = _framework.OfClassCallbacks_cb_on_deserialize_object_get
    if _newclass:
        cb_on_deserialize_object = _swig_property(_framework.OfClassCallbacks_cb_on_deserialize_object_get, _framework.OfClassCallbacks_cb_on_deserialize_object_set)
    __swig_setmethods__["cb_on_pre_deserialize"] = _framework.OfClassCallbacks_cb_on_pre_deserialize_set
    __swig_getmethods__["cb_on_pre_deserialize"] = _framework.OfClassCallbacks_cb_on_pre_deserialize_get
    if _newclass:
        cb_on_pre_deserialize = _swig_property(_framework.OfClassCallbacks_cb_on_pre_deserialize_get, _framework.OfClassCallbacks_cb_on_pre_deserialize_set)
    __swig_setmethods__["cb_on_pre_deserialize_object"] = _framework.OfClassCallbacks_cb_on_pre_deserialize_object_set
    __swig_getmethods__["cb_on_pre_deserialize_object"] = _framework.OfClassCallbacks_cb_on_pre_deserialize_object_get
    if _newclass:
        cb_on_pre_deserialize_object = _swig_property(_framework.OfClassCallbacks_cb_on_pre_deserialize_object_get, _framework.OfClassCallbacks_cb_on_pre_deserialize_object_set)
    __swig_setmethods__["cb_serialize_user_data"] = _framework.OfClassCallbacks_cb_serialize_user_data_set
    __swig_getmethods__["cb_serialize_user_data"] = _framework.OfClassCallbacks_cb_serialize_user_data_get
    if _newclass:
        cb_serialize_user_data = _swig_property(_framework.OfClassCallbacks_cb_serialize_user_data_get, _framework.OfClassCallbacks_cb_serialize_user_data_set)
    __swig_setmethods__["cb_deserialize_user_data"] = _framework.OfClassCallbacks_cb_deserialize_user_data_set
    __swig_getmethods__["cb_deserialize_user_data"] = _framework.OfClassCallbacks_cb_deserialize_user_data_get
    if _newclass:
        cb_deserialize_user_data = _swig_property(_framework.OfClassCallbacks_cb_deserialize_user_data_get, _framework.OfClassCallbacks_cb_deserialize_user_data_set)
    __swig_setmethods__["cb_pre_process_override"] = _framework.OfClassCallbacks_cb_pre_process_override_set
    __swig_getmethods__["cb_pre_process_override"] = _framework.OfClassCallbacks_cb_pre_process_override_get
    if _newclass:
        cb_pre_process_override = _swig_property(_framework.OfClassCallbacks_cb_pre_process_override_get, _framework.OfClassCallbacks_cb_pre_process_override_set)
OfClassCallbacks_swigregister = _framework.OfClassCallbacks_swigregister
OfClassCallbacks_swigregister(OfClassCallbacks)

class OfAttrNameDirtiness(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAttrNameDirtiness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfAttrNameDirtiness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfAttrNameDirtiness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["attr"] = _framework.OfAttrNameDirtiness_attr_set
    __swig_getmethods__["attr"] = _framework.OfAttrNameDirtiness_attr_get
    if _newclass:
        attr = _swig_property(_framework.OfAttrNameDirtiness_attr_get, _framework.OfAttrNameDirtiness_attr_set)
    __swig_setmethods__["dirtiness"] = _framework.OfAttrNameDirtiness_dirtiness_set
    __swig_getmethods__["dirtiness"] = _framework.OfAttrNameDirtiness_dirtiness_get
    if _newclass:
        dirtiness = _swig_property(_framework.OfAttrNameDirtiness_dirtiness_get, _framework.OfAttrNameDirtiness_dirtiness_set)
    __swig_destroy__ = _framework.delete_OfAttrNameDirtiness
    __del__ = lambda self: None
OfAttrNameDirtiness_swigregister = _framework.OfAttrNameDirtiness_swigregister
OfAttrNameDirtiness_swigregister(OfAttrNameDirtiness)

class OfAttrDirtiness(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAttrDirtiness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfAttrDirtiness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfAttrDirtiness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfAttrDirtiness___eq__(self, other)

    __swig_setmethods__["attr"] = _framework.OfAttrDirtiness_attr_set
    __swig_getmethods__["attr"] = _framework.OfAttrDirtiness_attr_get
    if _newclass:
        attr = _swig_property(_framework.OfAttrDirtiness_attr_get, _framework.OfAttrDirtiness_attr_set)
    __swig_setmethods__["dirtiness"] = _framework.OfAttrDirtiness_dirtiness_set
    __swig_getmethods__["dirtiness"] = _framework.OfAttrDirtiness_dirtiness_get
    if _newclass:
        dirtiness = _swig_property(_framework.OfAttrDirtiness_dirtiness_get, _framework.OfAttrDirtiness_dirtiness_set)
    __swig_destroy__ = _framework.delete_OfAttrDirtiness
    __del__ = lambda self: None
OfAttrDirtiness_swigregister = _framework.OfAttrDirtiness_swigregister
OfAttrDirtiness_swigregister(OfAttrDirtiness)

class OfAttrPtrDirtiness(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAttrPtrDirtiness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfAttrPtrDirtiness, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfAttrPtrDirtiness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfAttrPtrDirtiness___eq__(self, other)

    __swig_setmethods__["attr"] = _framework.OfAttrPtrDirtiness_attr_set
    __swig_getmethods__["attr"] = _framework.OfAttrPtrDirtiness_attr_get
    if _newclass:
        attr = _swig_property(_framework.OfAttrPtrDirtiness_attr_get, _framework.OfAttrPtrDirtiness_attr_set)
    __swig_setmethods__["dirtiness"] = _framework.OfAttrPtrDirtiness_dirtiness_set
    __swig_getmethods__["dirtiness"] = _framework.OfAttrPtrDirtiness_dirtiness_get
    if _newclass:
        dirtiness = _swig_property(_framework.OfAttrPtrDirtiness_dirtiness_get, _framework.OfAttrPtrDirtiness_dirtiness_set)
    __swig_destroy__ = _framework.delete_OfAttrPtrDirtiness
    __del__ = lambda self: None
OfAttrPtrDirtiness_swigregister = _framework.OfAttrPtrDirtiness_swigregister
OfAttrPtrDirtiness_swigregister(OfAttrPtrDirtiness)

class OfClass(base.CoreCustomData):
    __swig_setmethods__ = {}
    for _s in [base.CoreCustomData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfClass, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreCustomData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfClass, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    FLAG_ABSTRACT = _framework.OfClass_FLAG_ABSTRACT
    FLAG_EMBEDDED_ONLY = _framework.OfClass_FLAG_EMBEDDED_ONLY
    FLAG_COUNT = _framework.OfClass_FLAG_COUNT
    RELEASE_STAGE_DO_NOT_RELEASE = _framework.OfClass_RELEASE_STAGE_DO_NOT_RELEASE
    RELEASE_STAGE_PROTOTYPE = _framework.OfClass_RELEASE_STAGE_PROTOTYPE
    RELEASE_STAGE_ALPHA = _framework.OfClass_RELEASE_STAGE_ALPHA
    RELEASE_STAGE_BETA = _framework.OfClass_RELEASE_STAGE_BETA
    RELEASE_STAGE_CANDIDATE = _framework.OfClass_RELEASE_STAGE_CANDIDATE
    RELEASE_STAGE_RELEASE = _framework.OfClass_RELEASE_STAGE_RELEASE
    RELEASE_STAGE_DEPRECATED = _framework.OfClass_RELEASE_STAGE_DEPRECATED
    RELEASE_STAGE_OBSOLETE = _framework.OfClass_RELEASE_STAGE_OBSOLETE
    RELEASE_STAGE_COUNT = _framework.OfClass_RELEASE_STAGE_COUNT
    if _newclass:
        get_flag_name = staticmethod(_framework.OfClass_get_flag_name)
    else:
        get_flag_name = _framework.OfClass_get_flag_name
    if _newclass:
        get_flag = staticmethod(_framework.OfClass_get_flag)
    else:
        get_flag = _framework.OfClass_get_flag
    if _newclass:
        get_flag_default_value = staticmethod(_framework.OfClass_get_flag_default_value)
    else:
        get_flag_default_value = _framework.OfClass_get_flag_default_value
    if _newclass:
        get_release_stage_name = staticmethod(_framework.OfClass_get_release_stage_name)
    else:
        get_release_stage_name = _framework.OfClass_get_release_stage_name
    __swig_destroy__ = _framework.delete_OfClass
    __del__ = lambda self: None

    def get_dso(self):
        return _framework.OfClass_get_dso(self)

    def get_dso_filename(self):
        return _framework.OfClass_get_dso_filename(self)

    def resolve_callback(self, callback):
        return _framework.OfClass_resolve_callback(self, callback)

    def get_name(self):
        return _framework.OfClass_get_name(self)

    def matches_name(self, *args):
        return _framework.OfClass_matches_name(self, *args)

    def get_ui_name(self):
        return _framework.OfClass_get_ui_name(self)

    def get_object_default_name(self):
        return _framework.OfClass_get_object_default_name(self)

    def get_base_name(self):
        return _framework.OfClass_get_base_name(self)

    def get_category(self):
        return _framework.OfClass_get_category(self)

    def set_category(self, category):
        return _framework.OfClass_set_category(self, category)

    def is_kindof(self, *args):
        return _framework.OfClass_is_kindof(self, *args)

    def is_abstract(self):
        return _framework.OfClass_is_abstract(self)

    def is_embedded_only(self):
        return _framework.OfClass_is_embedded_only(self)

    def is_under_licensed(self):
        return _framework.OfClass_is_under_licensed(self)

    def get_flags(self):
        return _framework.OfClass_get_flags(self)

    def set_default_object_name(self, name):
        return _framework.OfClass_set_default_object_name(self, name)

    def get_factory(self):
        return _framework.OfClass_get_factory(self)

    def get_base_class(self):
        return _framework.OfClass_get_base_class(self)

    def get_children(self, *args):
        return _framework.OfClass_get_children(self, *args)

    def get_objects(self):
        return _framework.OfClass_get_objects(self)

    def get_embedded_objects(self):
        return _framework.OfClass_get_embedded_objects(self)

    def get_proto(self):
        return _framework.OfClass_get_proto(self)

    def get_icon(self):
        return _framework.OfClass_get_icon(self)

    def set_icon(self, icon):
        return _framework.OfClass_set_icon(self, icon)

    def get_icon_file(self):
        return _framework.OfClass_get_icon_file(self)

    def add_attribute(self, *args):
        return _framework.OfClass_add_attribute(self, *args)

    def get_attribute(self, *args):
        return _framework.OfClass_get_attribute(self, *args)

    def attribute_exists(self, *args):
        return _framework.OfClass_attribute_exists(self, *args)

    def get_attribute_count(self):
        return _framework.OfClass_get_attribute_count(self)

    def remove_all_attributes(self):
        return _framework.OfClass_remove_all_attributes(self)

    def remove_attribute(self, *args):
        return _framework.OfClass_remove_attribute(self, *args)

    def sync_children_attr(self, *args):
        return _framework.OfClass_sync_children_attr(self, *args)

    def add_resource(self, *args):
        return _framework.OfClass_add_resource(self, *args)

    def set_resource_attrs(self, *args):
        return _framework.OfClass_set_resource_attrs(self, *args)

    def set_resource_deps(self, id, resources):
        return _framework.OfClass_set_resource_deps(self, id, resources)

    def share_resource(self, id, target_id):
        return _framework.OfClass_share_resource(self, id, target_id)

    def get_resources(self):
        return _framework.OfClass_get_resources(self)

    def serialize(self):
        return _framework.OfClass_serialize(self)

    def get_version(self):
        return _framework.OfClass_get_version(self)

    def get_factory_id(self):
        return _framework.OfClass_get_factory_id(self)

    def get_class_doc(self, recursive=True):
        return _framework.OfClass_get_class_doc(self, recursive)

    def get_group_doc(self, group_name, recursive=True):
        return _framework.OfClass_get_group_doc(self, group_name, recursive)

    def get_attr_doc(self, attr_name, recursive=True):
        return _framework.OfClass_get_attr_doc(self, attr_name, recursive)

    def get_unit_base(self, attr_name, recursive=True):
        return _framework.OfClass_get_unit_base(self, attr_name, recursive)

    def get_unit_system(self, attr_name, recursive=True):
        return _framework.OfClass_get_unit_system(self, attr_name, recursive)

    def get_aliases(self):
        return _framework.OfClass_get_aliases(self)

    def get_ui_weight(self):
        return _framework.OfClass_get_ui_weight(self)

    def is_group_ui_collapsed(self, group_name, recursive=True):
        return _framework.OfClass_is_group_ui_collapsed(self, group_name, recursive)

    def set_group_ui_collapsed(self, group_name, collapsed):
        return _framework.OfClass_set_group_ui_collapsed(self, group_name, collapsed)

    def unset_group_ui_collapsed(self, group_name):
        return _framework.OfClass_unset_group_ui_collapsed(self, group_name)

    def is_group_ui_weighted(self, group_name, weight, recursive=True):
        return _framework.OfClass_is_group_ui_weighted(self, group_name, weight, recursive)

    def set_group_ui_weight(self, group_name, weight):
        return _framework.OfClass_set_group_ui_weight(self, group_name, weight)

    def unset_group_ui_weight(self, group_name):
        return _framework.OfClass_unset_group_ui_weight(self, group_name)

    def set_ui_creatable(self, state):
        return _framework.OfClass_set_ui_creatable(self, state)

    def is_ui_creatable(self):
        return _framework.OfClass_is_ui_creatable(self)

    def get_memory_size(self):
        return _framework.OfClass_get_memory_size(self)

    def set_attr_doc(self, attr, doc):
        return _framework.OfClass_set_attr_doc(self, attr, doc)

    def is_attr_doc_exists(self, attr):
        return _framework.OfClass_is_attr_doc_exists(self, attr)

    def get_callbacks(self):
        return _framework.OfClass_get_callbacks(self)

    def set_callbacks(self, clbks):
        return _framework.OfClass_set_callbacks(self, clbks)
    if _newclass:
        class_info = staticmethod(_framework.OfClass_class_info)
    else:
        class_info = _framework.OfClass_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfClass____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfClass____class_destructor__

    def get_class_info(self):
        return _framework.OfClass_get_class_info(self)
OfClass_swigregister = _framework.OfClass_swigregister
OfClass_swigregister(OfClass)

def OfClass_get_flag_name(flag):
    return _framework.OfClass_get_flag_name(flag)
OfClass_get_flag_name = _framework.OfClass_get_flag_name

def OfClass_get_flag(index):
    return _framework.OfClass_get_flag(index)
OfClass_get_flag = _framework.OfClass_get_flag

def OfClass_get_flag_default_value(flag):
    return _framework.OfClass_get_flag_default_value(flag)
OfClass_get_flag_default_value = _framework.OfClass_get_flag_default_value

def OfClass_get_release_stage_name(stage):
    return _framework.OfClass_get_release_stage_name(stage)
OfClass_get_release_stage_name = _framework.OfClass_get_release_stage_name

def OfClass_class_info():
    return _framework.OfClass_class_info()
OfClass_class_info = _framework.OfClass_class_info

def OfClass____class_destructor__(instance, is_array):
    return _framework.OfClass____class_destructor__(instance, is_array)
OfClass____class_destructor__ = _framework.OfClass____class_destructor__

class OfVars(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfVars, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfVars, name)
    __repr__ = _swig_repr
    TYPE_SYSTEM = _framework.OfVars_TYPE_SYSTEM
    TYPE_BUILTIN = _framework.OfVars_TYPE_BUILTIN
    TYPE_CUSTOM = _framework.OfVars_TYPE_CUSTOM
    TYPE_APP_PREFS = _framework.OfVars_TYPE_APP_PREFS
    TYPE_PROJECT_PREFS = _framework.OfVars_TYPE_PROJECT_PREFS
    TYPE_COUNT = _framework.OfVars_TYPE_COUNT
    EVENT_ID_ADD_VARIABLE = _framework.OfVars_EVENT_ID_ADD_VARIABLE
    EVENT_ID_REMOVE_VARIABLE = _framework.OfVars_EVENT_ID_REMOVE_VARIABLE
    EVENT_ID_REMOVE_ALL = _framework.OfVars_EVENT_ID_REMOVE_ALL
    EVENT_ID_VARIABLE_CHANGED = _framework.OfVars_EVENT_ID_VARIABLE_CHANGED
    EVENT_ID_COUNT = _framework.OfVars_EVENT_ID_COUNT
    if _newclass:
        get_type_name = staticmethod(_framework.OfVars_get_type_name)
    else:
        get_type_name = _framework.OfVars_get_type_name
    if _newclass:
        get_ui_type_name = staticmethod(_framework.OfVars_get_ui_type_name)
    else:
        get_ui_type_name = _framework.OfVars_get_ui_type_name

    def __init__(self, m_factory):
        this = _framework.new_OfVars(m_factory)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfVars
    __del__ = lambda self: None

    def get_event_variable(self):
        return _framework.OfVars_get_event_variable(self)

    def get_event_variable_type(self):
        return _framework.OfVars_get_event_variable_type(self)

    def add(self, *args):
        return _framework.OfVars_add(self, *args)

    def remove(self, name):
        return _framework.OfVars_remove(self, name)

    def remove_all(self, *args):
        return _framework.OfVars_remove_all(self, *args)

    def exists(self, name):
        return _framework.OfVars_exists(self, name)

    def get(self, name):
        return _framework.OfVars_get(self, name)

    def get_type(self, name):
        return _framework.OfVars_get_type(self, name)

    def get_by_index(self, type, index):
        return _framework.OfVars_get_by_index(self, type, index)

    def get_count(self, *args):
        return _framework.OfVars_get_count(self, *args)

    def get_app_prefs(self):
        return _framework.OfVars_get_app_prefs(self)

    def get_project_prefs(self):
        return _framework.OfVars_get_project_prefs(self)

    def get_memory_size(self):
        return _framework.OfVars_get_memory_size(self)

    def serialize(self, group):
        return _framework.OfVars_serialize(self, group)

    def deserialize(self, group, replace_existing=True):
        return _framework.OfVars_deserialize(self, group, replace_existing)
    if _newclass:
        class_info = staticmethod(_framework.OfVars_class_info)
    else:
        class_info = _framework.OfVars_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfVars____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfVars____class_destructor__

    def get_class_info(self):
        return _framework.OfVars_get_class_info(self)
OfVars_swigregister = _framework.OfVars_swigregister
OfVars_swigregister(OfVars)
EVT_ID_VARS_VARIABLE_CHANGED = cvar.EVT_ID_VARS_VARIABLE_CHANGED
EVT_ID_VARS_ADD_VARIABLE = cvar.EVT_ID_VARS_ADD_VARIABLE
EVT_ID_VARS_REMOVE_VARIABLE = cvar.EVT_ID_VARS_REMOVE_VARIABLE
EVT_ID_VARS_REMOVE_ALL = cvar.EVT_ID_VARS_REMOVE_ALL

def OfVars_get_type_name(type):
    return _framework.OfVars_get_type_name(type)
OfVars_get_type_name = _framework.OfVars_get_type_name

def OfVars_get_ui_type_name(type):
    return _framework.OfVars_get_ui_type_name(type)
OfVars_get_ui_type_name = _framework.OfVars_get_ui_type_name

def OfVars_class_info():
    return _framework.OfVars_class_info()
OfVars_class_info = _framework.OfVars_class_info

def OfVars____class_destructor__(instance, is_array):
    return _framework.OfVars____class_destructor__(instance, is_array)
OfVars____class_destructor__ = _framework.OfVars____class_destructor__

class OfVarsItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfVarsItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfVarsItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attr"] = _framework.OfVarsItem_attr_set
    __swig_getmethods__["attr"] = _framework.OfVarsItem_attr_get
    if _newclass:
        attr = _swig_property(_framework.OfVarsItem_attr_get, _framework.OfVarsItem_attr_set)
    __swig_setmethods__["type"] = _framework.OfVarsItem_type_set
    __swig_getmethods__["type"] = _framework.OfVarsItem_type_get
    if _newclass:
        type = _swig_property(_framework.OfVarsItem_type_get, _framework.OfVarsItem_type_set)

    def __init__(self):
        this = _framework.new_OfVarsItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfVarsItem
    __del__ = lambda self: None
OfVarsItem_swigregister = _framework.OfVarsItem_swigregister
OfVarsItem_swigregister(OfVarsItem)

class OfAction(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAction, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfAction
    __del__ = lambda self: None

    def get_name(self):
        return _framework.OfAction_get_name(self)

    def get_ui_name(self):
        return _framework.OfAction_get_ui_name(self)

    def set_ui_name(self, ui_name):
        return _framework.OfAction_set_ui_name(self, ui_name)

    def is_state(self):
        return _framework.OfAction_is_state(self)

    def set_state(self):
        return _framework.OfAction_set_state(self)

    def set_callback(self, cb):
        return _framework.OfAction_set_callback(self, cb)

    def get_callback(self):
        return _framework.OfAction_get_callback(self)

    def call(self, object, data):
        return _framework.OfAction_call(self, object, data)
    if _newclass:
        make_callback_name = staticmethod(_framework.OfAction_make_callback_name)
    else:
        make_callback_name = _framework.OfAction_make_callback_name

    def get_memory_size(self):
        return _framework.OfAction_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_framework.OfAction_class_info)
    else:
        class_info = _framework.OfAction_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfAction____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfAction____class_destructor__

    def get_class_info(self):
        return _framework.OfAction_get_class_info(self)
OfAction_swigregister = _framework.OfAction_swigregister
OfAction_swigregister(OfAction)

def OfAction_make_callback_name(name, attr, action):
    return _framework.OfAction_make_callback_name(name, attr, action)
OfAction_make_callback_name = _framework.OfAction_make_callback_name

def OfAction_class_info():
    return _framework.OfAction_class_info()
OfAction_class_info = _framework.OfAction_class_info

def OfAction____class_destructor__(instance, is_array):
    return _framework.OfAction____class_destructor__(instance, is_array)
OfAction____class_destructor__ = _framework.OfAction____class_destructor__

class OfTime(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfTime, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfTime, name)
    __repr__ = _swig_repr

    def __init__(self, factory):
        this = _framework.new_OfTime(factory)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfTime
    __del__ = lambda self: None

    def get_fps(self):
        return _framework.OfTime_get_fps(self)

    def set_fps(self, fps):
        return _framework.OfTime_set_fps(self, fps)

    def get_spf(self):
        return _framework.OfTime_get_spf(self)

    def get_current(self):
        return _framework.OfTime_get_current(self)

    def set_current(self, time):
        return _framework.OfTime_set_current(self, time)

    def get_current_frame(self):
        return _framework.OfTime_get_current_frame(self)

    def set_current_frame(self, frame):
        return _framework.OfTime_set_current_frame(self, frame)

    def is_subframe_enabled(self):
        return _framework.OfTime_is_subframe_enabled(self)

    def set_subframe_enabled(self, enabled):
        return _framework.OfTime_set_subframe_enabled(self, enabled)

    def get_current_floating_frame(self):
        return _framework.OfTime_get_current_floating_frame(self)

    def frame_to_time(self, frame):
        return _framework.OfTime_frame_to_time(self, frame)

    def time_to_frame(self, time):
        return _framework.OfTime_time_to_frame(self, time)

    def add_object(self, object):
        return _framework.OfTime_add_object(self, object)

    def remove_object(self, object):
        return _framework.OfTime_remove_object(self, object)

    def get_memory_size(self):
        return _framework.OfTime_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_framework.OfTime_class_info)
    else:
        class_info = _framework.OfTime_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfTime____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfTime____class_destructor__

    def get_class_info(self):
        return _framework.OfTime_get_class_info(self)
OfTime_swigregister = _framework.OfTime_swigregister
OfTime_swigregister(OfTime)
EVT_ID_TIME_CURRENT_CHANGED = cvar.EVT_ID_TIME_CURRENT_CHANGED
EVT_ID_TIME_FPS_CHANGED = cvar.EVT_ID_TIME_FPS_CHANGED
EVT_ID_TIME_UI_SUBFRAME_CHANGED = cvar.EVT_ID_TIME_UI_SUBFRAME_CHANGED

def OfTime_class_info():
    return _framework.OfTime_class_info()
OfTime_class_info = _framework.OfTime_class_info

def OfTime____class_destructor__(instance, is_array):
    return _framework.OfTime____class_destructor__(instance, is_array)
OfTime____class_destructor__ = _framework.OfTime____class_destructor__

class OfModuleId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfModuleId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfModuleId, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_OfModuleId()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_module(self):
        return _framework.OfModuleId_get_module(self)

    def update_module(self, module):
        return _framework.OfModuleId_update_module(self, module)

    def get_id(self):
        return _framework.OfModuleId_get_id(self)

    def update_id(self, id):
        return _framework.OfModuleId_update_id(self, id)
    __swig_destroy__ = _framework.delete_OfModuleId
    __del__ = lambda self: None
OfModuleId_swigregister = _framework.OfModuleId_swigregister
OfModuleId_swigregister(OfModuleId)

class OfModule(ResourceUser):
    __swig_setmethods__ = {}
    for _s in [ResourceUser]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfModule, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceUser]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_OfModule
    __del__ = lambda self: None

    def get_object(self):
        return _framework.OfModule_get_object(self)

    def set_object(self, object):
        return _framework.OfModule_set_object(self, object)

    def is_protected(self):
        return _framework.OfModule_is_protected(self)

    def get_object_name(self):
        return _framework.OfModule_get_object_name(self)

    def get_memory_size(self):
        return _framework.OfModule_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_framework.OfModule_class_info)
    else:
        class_info = _framework.OfModule_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfModule____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfModule____class_destructor__

    def get_class_info(self):
        return _framework.OfModule_get_class_info(self)
OfModule_swigregister = _framework.OfModule_swigregister
OfModule_swigregister(OfModule)

def OfModule_class_info():
    return _framework.OfModule_class_info()
OfModule_class_info = _framework.OfModule_class_info

def OfModule____class_destructor__(instance, is_array):
    return _framework.OfModule____class_destructor__(instance, is_array)
OfModule____class_destructor__ = _framework.OfModule____class_destructor__

class OfEnum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfEnum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfEnum, name)
    __repr__ = _swig_repr

    def __init__(self, factory, name, invalid_value=0):
        this = _framework.new_OfEnum(factory, name, invalid_value)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfEnum
    __del__ = lambda self: None

    def get_name(self):
        return _framework.OfEnum_get_name(self)

    def add_values(self, labels, values):
        return _framework.OfEnum_add_values(self, labels, values)

    def add_value(self, label, value):
        return _framework.OfEnum_add_value(self, label, value)

    def set_value(self, label, value):
        return _framework.OfEnum_set_value(self, label, value)

    def get_value_count(self):
        return _framework.OfEnum_get_value_count(self)

    def get_label(self, index):
        return _framework.OfEnum_get_label(self, index)

    def get_value(self, *args):
        return _framework.OfEnum_get_value(self, *args)

    def remove_value(self, *args):
        return _framework.OfEnum_remove_value(self, *args)

    def remove_all_values(self):
        return _framework.OfEnum_remove_all_values(self)

    def add_alias(self, *args):
        return _framework.OfEnum_add_alias(self, *args)

    def find_value_index(self, value):
        return _framework.OfEnum_find_value_index(self, value)

    def find_label_index(self, label):
        return _framework.OfEnum_find_label_index(self, label)

    def get_invalid_value(self):
        return _framework.OfEnum_get_invalid_value(self)
    if _newclass:
        get_value_from_label = staticmethod(_framework.OfEnum_get_value_from_label)
    else:
        get_value_from_label = _framework.OfEnum_get_value_from_label
    if _newclass:
        get_label_from_value = staticmethod(_framework.OfEnum_get_label_from_value)
    else:
        get_label_from_value = _framework.OfEnum_get_label_from_value
    if _newclass:
        validate_label = staticmethod(_framework.OfEnum_validate_label)
    else:
        validate_label = _framework.OfEnum_validate_label
    if _newclass:
        get_invalid_value_enum_not_exists = staticmethod(_framework.OfEnum_get_invalid_value_enum_not_exists)
    else:
        get_invalid_value_enum_not_exists = _framework.OfEnum_get_invalid_value_enum_not_exists
    if _newclass:
        get_invalid_label = staticmethod(_framework.OfEnum_get_invalid_label)
    else:
        get_invalid_label = _framework.OfEnum_get_invalid_label

    def get_separator(self):
        return _framework.OfEnum_get_separator(self)

    def set_separator(self, separator):
        return _framework.OfEnum_set_separator(self, separator)

    def asleep(self):
        return _framework.OfEnum_asleep(self)

    def awake(self, send_event=True):
        return _framework.OfEnum_awake(self, send_event)
OfEnum_swigregister = _framework.OfEnum_swigregister
OfEnum_swigregister(OfEnum)

def OfEnum_get_value_from_label(label, enum_ptr):
    return _framework.OfEnum_get_value_from_label(label, enum_ptr)
OfEnum_get_value_from_label = _framework.OfEnum_get_value_from_label

def OfEnum_get_label_from_value(label, value, enum_ptr):
    return _framework.OfEnum_get_label_from_value(label, value, enum_ptr)
OfEnum_get_label_from_value = _framework.OfEnum_get_label_from_value

def OfEnum_validate_label(label, enum_ptr):
    return _framework.OfEnum_validate_label(label, enum_ptr)
OfEnum_validate_label = _framework.OfEnum_validate_label

def OfEnum_get_invalid_value_enum_not_exists():
    return _framework.OfEnum_get_invalid_value_enum_not_exists()
OfEnum_get_invalid_value_enum_not_exists = _framework.OfEnum_get_invalid_value_enum_not_exists

def OfEnum_get_invalid_label():
    return _framework.OfEnum_get_invalid_label()
OfEnum_get_invalid_label = _framework.OfEnum_get_invalid_label

TIME_EPSILON = _framework.TIME_EPSILON
class FCurve(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurve, name)
    __repr__ = _swig_repr
    if _newclass:
        prop_key_free_tangents_length = staticmethod(_framework.FCurve_prop_key_free_tangents_length)
    else:
        prop_key_free_tangents_length = _framework.FCurve_prop_key_free_tangents_length
    if _newclass:
        prop_key_linked_tangents_length = staticmethod(_framework.FCurve_prop_key_linked_tangents_length)
    else:
        prop_key_linked_tangents_length = _framework.FCurve_prop_key_linked_tangents_length
    if _newclass:
        prop_key_linked_tangents_angle = staticmethod(_framework.FCurve_prop_key_linked_tangents_angle)
    else:
        prop_key_linked_tangents_angle = _framework.FCurve_prop_key_linked_tangents_angle
    if _newclass:
        prop_key_auto_tangents = staticmethod(_framework.FCurve_prop_key_auto_tangents)
    else:
        prop_key_auto_tangents = _framework.FCurve_prop_key_auto_tangents
    if _newclass:
        prop_key_flat_tangents = staticmethod(_framework.FCurve_prop_key_flat_tangents)
    else:
        prop_key_flat_tangents = _framework.FCurve_prop_key_flat_tangents
    if _newclass:
        prop_key_value = staticmethod(_framework.FCurve_prop_key_value)
    else:
        prop_key_value = _framework.FCurve_prop_key_value
    if _newclass:
        prop_key_time = staticmethod(_framework.FCurve_prop_key_time)
    else:
        prop_key_time = _framework.FCurve_prop_key_time
    if _newclass:
        prop_key_tangent1 = staticmethod(_framework.FCurve_prop_key_tangent1)
    else:
        prop_key_tangent1 = _framework.FCurve_prop_key_tangent1
    if _newclass:
        prop_key_tangent2 = staticmethod(_framework.FCurve_prop_key_tangent2)
    else:
        prop_key_tangent2 = _framework.FCurve_prop_key_tangent2
    if _newclass:
        prop_key_type = staticmethod(_framework.FCurve_prop_key_type)
    else:
        prop_key_type = _framework.FCurve_prop_key_type
    if _newclass:
        prop_key_tcb = staticmethod(_framework.FCurve_prop_key_tcb)
    else:
        prop_key_tcb = _framework.FCurve_prop_key_tcb
    if _newclass:
        get_time_offset = staticmethod(_framework.FCurve_get_time_offset)
    else:
        get_time_offset = _framework.FCurve_get_time_offset
    if _newclass:
        get_min_rotation_angle = staticmethod(_framework.FCurve_get_min_rotation_angle)
    else:
        get_min_rotation_angle = _framework.FCurve_get_min_rotation_angle
    VIRTUAL_KEY_TYPE_DEFAULT = _framework.FCurve_VIRTUAL_KEY_TYPE_DEFAULT
    VIRTUAL_KEY_TYPE_NEXT_KEY = _framework.FCurve_VIRTUAL_KEY_TYPE_NEXT_KEY
    VIRTUAL_KEY_TYPE_PREVIOUS_KEY = _framework.FCurve_VIRTUAL_KEY_TYPE_PREVIOUS_KEY
    VIRTUAL_KEY_TYPE_COUNT = _framework.FCurve_VIRTUAL_KEY_TYPE_COUNT
    if _newclass:
        get_virtual_key_type = staticmethod(_framework.FCurve_get_virtual_key_type)
    else:
        get_virtual_key_type = _framework.FCurve_get_virtual_key_type

    def __init__(self, *args):
        this = _framework.new_FCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurve
    __del__ = lambda self: None

    def clear(self):
        return _framework.FCurve_clear(self)
    BEHAVIOR_RESET = _framework.FCurve_BEHAVIOR_RESET
    BEHAVIOR_CONSTANT = _framework.FCurve_BEHAVIOR_CONSTANT
    BEHAVIOR_REPEAT = _framework.FCurve_BEHAVIOR_REPEAT
    BEHAVIOR_OSCILLATE = _framework.FCurve_BEHAVIOR_OSCILLATE
    BEHAVIOR_OFFSET_REPEAT = _framework.FCurve_BEHAVIOR_OFFSET_REPEAT
    BEHAVIOR_LINEAR = _framework.FCurve_BEHAVIOR_LINEAR
    if _newclass:
        compute_bezier = staticmethod(_framework.FCurve_compute_bezier)
    else:
        compute_bezier = _framework.FCurve_compute_bezier

    def get_key_count(self):
        return _framework.FCurve_get_key_count(self)

    def set_key(self, *args):
        return _framework.FCurve_set_key(self, *args)

    def add_key(self, time, value, type):
        return _framework.FCurve_add_key(self, time, value, type)

    def remove_key(self, id):
        return _framework.FCurve_remove_key(self, id)

    def remove_keys(self, key_ids):
        return _framework.FCurve_remove_keys(self, key_ids)

    def remove_all_keys(self):
        return _framework.FCurve_remove_all_keys(self)

    def set_virtual_key(self, time, value, type):
        return _framework.FCurve_set_virtual_key(self, time, value, type)

    def remove_virtual_key(self):
        return _framework.FCurve_remove_virtual_key(self)

    def get_virtual_key_id(self):
        return _framework.FCurve_get_virtual_key_id(self)

    def set_key_value(self, id, value):
        return _framework.FCurve_set_key_value(self, id, value)

    def set_key_time(self, id, time):
        return _framework.FCurve_set_key_time(self, id, time)

    def set_key_type(self, id, type):
        return _framework.FCurve_set_key_type(self, id, type)

    def update_key_tangents(self, id):
        return _framework.FCurve_update_key_tangents(self, id)

    def init_key_tangent1(self, id):
        return _framework.FCurve_init_key_tangent1(self, id)

    def init_key_tangent2(self, id):
        return _framework.FCurve_init_key_tangent2(self, id)

    def update_key_tangent(self, origin_key, target_key, tx, ty):
        return _framework.FCurve_update_key_tangent(self, origin_key, target_key, tx, ty)

    def compute_key_auto_tangents(self, key):
        return _framework.FCurve_compute_key_auto_tangents(self, key)

    def set_key_tangent1(self, id, x, y):
        return _framework.FCurve_set_key_tangent1(self, id, x, y)

    def set_key_tangent2(self, id, x, y):
        return _framework.FCurve_set_key_tangent2(self, id, x, y)

    def set_keys_types(self, ids, type):
        return _framework.FCurve_set_keys_types(self, ids, type)

    def set_keys_times(self, key_ids, key_times):
        return _framework.FCurve_set_keys_times(self, key_ids, key_times)

    def set_keys_values(self, key_ids, key_values):
        return _framework.FCurve_set_keys_values(self, key_ids, key_values)

    def set_keys_times_and_values(self, key_ids, key_times, key_values):
        return _framework.FCurve_set_keys_times_and_values(self, key_ids, key_times, key_values)

    def set_key_tcb_values(self, key_id, t, c, b):
        return _framework.FCurve_set_key_tcb_values(self, key_id, t, c, b)

    def set_keys_tcb_values(self, key_ids, values):
        return _framework.FCurve_set_keys_tcb_values(self, key_ids, values)

    def set_keys_free_tangents_length(self, ids, values):
        return _framework.FCurve_set_keys_free_tangents_length(self, ids, values)

    def set_keys_linked_tangents_length(self, ids, values):
        return _framework.FCurve_set_keys_linked_tangents_length(self, ids, values)

    def set_keys_linked_tangents_angle(self, key_ids, values):
        return _framework.FCurve_set_keys_linked_tangents_angle(self, key_ids, values)

    def set_keys_auto_tangents(self, ids, values):
        return _framework.FCurve_set_keys_auto_tangents(self, ids, values)

    def set_keys_flat_tangents(self, key_ids, values):
        return _framework.FCurve_set_keys_flat_tangents(self, key_ids, values)

    def set_key_auto_tangents(self, key_id, value):
        return _framework.FCurve_set_key_auto_tangents(self, key_id, value)

    def set_key_flat_tangents(self, key_id, value):
        return _framework.FCurve_set_key_flat_tangents(self, key_id, value)

    def get_key_property_value(self, id, property_name, property_value):
        return _framework.FCurve_get_key_property_value(self, id, property_name, property_value)

    def set_keys_property_values(self, ids, property_name, property_values):
        return _framework.FCurve_set_keys_property_values(self, ids, property_name, property_values)

    def get_key_at(self, time):
        return _framework.FCurve_get_key_at(self, time)

    def get_key_value(self, id):
        return _framework.FCurve_get_key_value(self, id)

    def get_key_time(self, id):
        return _framework.FCurve_get_key_time(self, id)

    def get_key_type(self, id):
        return _framework.FCurve_get_key_type(self, id)

    def get_key_index(self, key_id):
        return _framework.FCurve_get_key_index(self, key_id)

    def get_key_id(self, key_index):
        return _framework.FCurve_get_key_id(self, key_index)

    def get_key_tcb_tension(self, id):
        return _framework.FCurve_get_key_tcb_tension(self, id)

    def get_key_tcb_continuity(self, id):
        return _framework.FCurve_get_key_tcb_continuity(self, id)

    def get_key_tcb_bias(self, id):
        return _framework.FCurve_get_key_tcb_bias(self, id)

    def get_key_tangent1(self, key_id):
        return _framework.FCurve_get_key_tangent1(self, key_id)

    def get_key_tangent2(self, key_id):
        return _framework.FCurve_get_key_tangent2(self, key_id)

    def get_key_linked_tangents_angle(self, key_id):
        return _framework.FCurve_get_key_linked_tangents_angle(self, key_id)

    def get_key_linked_tangents_length(self, key_id):
        return _framework.FCurve_get_key_linked_tangents_length(self, key_id)

    def get_key_free_tangents_length(self, key_id):
        return _framework.FCurve_get_key_free_tangents_length(self, key_id)

    def get_key_flat_tangents(self, key_id):
        return _framework.FCurve_get_key_flat_tangents(self, key_id)

    def get_key_auto_tangents(self, key_id):
        return _framework.FCurve_get_key_auto_tangents(self, key_id)

    def get_first_key_after(self, time):
        return _framework.FCurve_get_first_key_after(self, time)

    def get_first_key_before(self, time):
        return _framework.FCurve_get_first_key_before(self, time)

    def get_key(self, id):
        return _framework.FCurve_get_key(self, id)

    def get_first_key(self):
        return _framework.FCurve_get_first_key(self)

    def get_last_key(self):
        return _framework.FCurve_get_last_key(self)

    def eval(self, time):
        return _framework.FCurve_eval(self, time)

    def lut_eval(self, time):
        return _framework.FCurve_lut_eval(self, time)

    def serialize(self):
        return _framework.FCurve_serialize(self)

    def deserialize(self, entry):
        return _framework.FCurve_deserialize(self, entry)

    def get_next_key_type(self, time):
        return _framework.FCurve_get_next_key_type(self, time)

    def get_previous_key_type(self, time):
        return _framework.FCurve_get_previous_key_type(self, time)

    def _on_curve_modified(self):
        return _framework.FCurve__on_curve_modified(self)

    def on_curve_modified(self):
        return _framework.FCurve_on_curve_modified(self)

    def __eq__(self, curve):

        if not isinstance(obj, type(self)):
            return False


        return _framework.FCurve___eq__(self, curve)


    def __ne__(self, curve):
        return _framework.FCurve___ne__(self, curve)

    def __call__(self, time):
        return _framework.FCurve___call__(self, time)

    def get_memory_size(self):
        return _framework.FCurve_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_framework.FCurve_class_info)
    else:
        class_info = _framework.FCurve_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.FCurve____class_destructor__)
    else:
        ___class_destructor__ = _framework.FCurve____class_destructor__

    def get_class_info(self):
        return _framework.FCurve_get_class_info(self)
FCurve_swigregister = _framework.FCurve_swigregister
FCurve_swigregister(FCurve)
EVT_ID_CURVE_MODIFIED = cvar.EVT_ID_CURVE_MODIFIED
EVT_ID_CURVE_VIRTUAL_KEY_MODIFIED = cvar.EVT_ID_CURVE_VIRTUAL_KEY_MODIFIED
EVT_ID_KEY_TYPE_MODIFIED = cvar.EVT_ID_KEY_TYPE_MODIFIED

def FCurve_prop_key_free_tangents_length():
    return _framework.FCurve_prop_key_free_tangents_length()
FCurve_prop_key_free_tangents_length = _framework.FCurve_prop_key_free_tangents_length

def FCurve_prop_key_linked_tangents_length():
    return _framework.FCurve_prop_key_linked_tangents_length()
FCurve_prop_key_linked_tangents_length = _framework.FCurve_prop_key_linked_tangents_length

def FCurve_prop_key_linked_tangents_angle():
    return _framework.FCurve_prop_key_linked_tangents_angle()
FCurve_prop_key_linked_tangents_angle = _framework.FCurve_prop_key_linked_tangents_angle

def FCurve_prop_key_auto_tangents():
    return _framework.FCurve_prop_key_auto_tangents()
FCurve_prop_key_auto_tangents = _framework.FCurve_prop_key_auto_tangents

def FCurve_prop_key_flat_tangents():
    return _framework.FCurve_prop_key_flat_tangents()
FCurve_prop_key_flat_tangents = _framework.FCurve_prop_key_flat_tangents

def FCurve_prop_key_value():
    return _framework.FCurve_prop_key_value()
FCurve_prop_key_value = _framework.FCurve_prop_key_value

def FCurve_prop_key_time():
    return _framework.FCurve_prop_key_time()
FCurve_prop_key_time = _framework.FCurve_prop_key_time

def FCurve_prop_key_tangent1():
    return _framework.FCurve_prop_key_tangent1()
FCurve_prop_key_tangent1 = _framework.FCurve_prop_key_tangent1

def FCurve_prop_key_tangent2():
    return _framework.FCurve_prop_key_tangent2()
FCurve_prop_key_tangent2 = _framework.FCurve_prop_key_tangent2

def FCurve_prop_key_type():
    return _framework.FCurve_prop_key_type()
FCurve_prop_key_type = _framework.FCurve_prop_key_type

def FCurve_prop_key_tcb():
    return _framework.FCurve_prop_key_tcb()
FCurve_prop_key_tcb = _framework.FCurve_prop_key_tcb

def FCurve_get_time_offset():
    return _framework.FCurve_get_time_offset()
FCurve_get_time_offset = _framework.FCurve_get_time_offset

def FCurve_get_min_rotation_angle():
    return _framework.FCurve_get_min_rotation_angle()
FCurve_get_min_rotation_angle = _framework.FCurve_get_min_rotation_angle

def FCurve_get_virtual_key_type(value):
    return _framework.FCurve_get_virtual_key_type(value)
FCurve_get_virtual_key_type = _framework.FCurve_get_virtual_key_type

def FCurve_compute_bezier(p1, t1, p2, t2, time):
    return _framework.FCurve_compute_bezier(p1, t1, p2, t2, time)
FCurve_compute_bezier = _framework.FCurve_compute_bezier

def FCurve_class_info():
    return _framework.FCurve_class_info()
FCurve_class_info = _framework.FCurve_class_info

def FCurve____class_destructor__(instance, is_array):
    return _framework.FCurve____class_destructor__(instance, is_array)
FCurve____class_destructor__ = _framework.FCurve____class_destructor__

class FCurveKeyId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveKeyId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveKeyId, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_FCurveKeyId(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        get_invalid_key = staticmethod(_framework.FCurveKeyId_get_invalid_key)
    else:
        get_invalid_key = _framework.FCurveKeyId_get_invalid_key

    def __eq__(self, *args):

        if not isinstance(obj, type(self)):
            return False


        return _framework.FCurveKeyId___eq__(self, *args)


    def __ne__(self, key_id):
        return _framework.FCurveKeyId___ne__(self, key_id)

    def __gt__(self, *args):
        return _framework.FCurveKeyId___gt__(self, *args)

    def __lt__(self, *args):
        return _framework.FCurveKeyId___lt__(self, *args)

    def get_value(self):
        return _framework.FCurveKeyId_get_value(self)

    def is_valid(self):
        return _framework.FCurveKeyId_is_valid(self)

    def set_invalid(self):
        return _framework.FCurveKeyId_set_invalid(self)
    __swig_destroy__ = _framework.delete_FCurveKeyId
    __del__ = lambda self: None
FCurveKeyId_swigregister = _framework.FCurveKeyId_swigregister
FCurveKeyId_swigregister(FCurveKeyId)

def FCurveKeyId_get_invalid_key():
    return _framework.FCurveKeyId_get_invalid_key()
FCurveKeyId_get_invalid_key = _framework.FCurveKeyId_get_invalid_key

class FCurveKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveKey, name)
    __repr__ = _swig_repr
    KEY_TYPE_LINEAR = _framework.FCurveKey_KEY_TYPE_LINEAR
    KEY_TYPE_STEP = _framework.FCurveKey_KEY_TYPE_STEP
    KEY_TYPE_TCB = _framework.FCurveKey_KEY_TYPE_TCB
    KEY_TYPE_HERMITE = _framework.FCurveKey_KEY_TYPE_HERMITE
    KEY_TYPE_BEZIER = _framework.FCurveKey_KEY_TYPE_BEZIER
    KEY_TYPE_COUNT = _framework.FCurveKey_KEY_TYPE_COUNT
    if _newclass:
        get_key_type_ui_name = staticmethod(_framework.FCurveKey_get_key_type_ui_name)
    else:
        get_key_type_ui_name = _framework.FCurveKey_get_key_type_ui_name
    if _newclass:
        get_invalid_tangent = staticmethod(_framework.FCurveKey_get_invalid_tangent)
    else:
        get_invalid_tangent = _framework.FCurveKey_get_invalid_tangent

    def __init__(self, *args):
        this = _framework.new_FCurveKey(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_time(self):
        return _framework.FCurveKey_get_time(self)

    def get_value(self):
        return _framework.FCurveKey_get_value(self)

    def get_id(self):
        return _framework.FCurveKey_get_id(self)

    def get_type(self):
        return _framework.FCurveKey_get_type(self)

    def set_time(self, time):
        return _framework.FCurveKey_set_time(self, time)

    def set_value(self, value):
        return _framework.FCurveKey_set_value(self, value)

    def set_id(self, id):
        return _framework.FCurveKey_set_id(self, id)

    def set_type(self, type):
        return _framework.FCurveKey_set_type(self, type)

    def get_tcb_tension(self):
        return _framework.FCurveKey_get_tcb_tension(self)

    def get_tcb_continuity(self):
        return _framework.FCurveKey_get_tcb_continuity(self)

    def get_tcb_bias(self):
        return _framework.FCurveKey_get_tcb_bias(self)

    def set_tcb_tension(self, tension):
        return _framework.FCurveKey_set_tcb_tension(self, tension)

    def set_tcb_continuity(self, continuity):
        return _framework.FCurveKey_set_tcb_continuity(self, continuity)

    def set_tcb_bias(self, bias):
        return _framework.FCurveKey_set_tcb_bias(self, bias)

    def set_tangent1(self, *args):
        return _framework.FCurveKey_set_tangent1(self, *args)

    def set_tangent2(self, *args):
        return _framework.FCurveKey_set_tangent2(self, *args)

    def has_tangent1(self):
        return _framework.FCurveKey_has_tangent1(self)

    def has_tangent2(self):
        return _framework.FCurveKey_has_tangent2(self)

    def get_tangent1(self):
        return _framework.FCurveKey_get_tangent1(self)

    def get_tangent2(self):
        return _framework.FCurveKey_get_tangent2(self)

    def get_linked_tangents_length(self):
        return _framework.FCurveKey_get_linked_tangents_length(self)

    def get_linked_tangents_angle(self):
        return _framework.FCurveKey_get_linked_tangents_angle(self)

    def set_linked_tangents_length(self, value):
        return _framework.FCurveKey_set_linked_tangents_length(self, value)

    def set_linked_tangents_angle(self, value):
        return _framework.FCurveKey_set_linked_tangents_angle(self, value)

    def __eq__(self, key):

        if not isinstance(obj, type(self)):
            return False


        return _framework.FCurveKey___eq__(self, key)


    def __ne__(self, key):
        return _framework.FCurveKey___ne__(self, key)
    KEY_AUTO_TANGENTS_NONE = _framework.FCurveKey_KEY_AUTO_TANGENTS_NONE
    KEY_AUTO_TANGENTS_FLAT = _framework.FCurveKey_KEY_AUTO_TANGENTS_FLAT
    KEY_AUTO_TANGENTS_AUTO = _framework.FCurveKey_KEY_AUTO_TANGENTS_AUTO

    def set_tangents_flat(self, value):
        return _framework.FCurveKey_set_tangents_flat(self, value)

    def set_tangents_auto(self, value):
        return _framework.FCurveKey_set_tangents_auto(self, value)

    def set_tangents_none(self):
        return _framework.FCurveKey_set_tangents_none(self)

    def set_free_tangents_length(self, value):
        return _framework.FCurveKey_set_free_tangents_length(self, value)

    def get_tangents_flat(self):
        return _framework.FCurveKey_get_tangents_flat(self)

    def get_tangents_auto(self):
        return _framework.FCurveKey_get_tangents_auto(self)

    def get_tangents_none(self):
        return _framework.FCurveKey_get_tangents_none(self)

    def get_free_tangents_length(self):
        return _framework.FCurveKey_get_free_tangents_length(self)

    def get_memory_size(self):
        return _framework.FCurveKey_get_memory_size(self)
    __swig_destroy__ = _framework.delete_FCurveKey
    __del__ = lambda self: None
FCurveKey_swigregister = _framework.FCurveKey_swigregister
FCurveKey_swigregister(FCurveKey)

def FCurveKey_get_key_type_ui_name(value):
    return _framework.FCurveKey_get_key_type_ui_name(value)
FCurveKey_get_key_type_ui_name = _framework.FCurveKey_get_key_type_ui_name

def FCurveKey_get_invalid_tangent():
    return _framework.FCurveKey_get_invalid_tangent()
FCurveKey_get_invalid_tangent = _framework.FCurveKey_get_invalid_tangent

class AnimFCurve(FCurve):
    __swig_setmethods__ = {}
    for _s in [FCurve]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimFCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [FCurve]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimFCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_AnimFCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AnimFCurve
    __del__ = lambda self: None

    def on_curve_modified(self):
        return _framework.AnimFCurve_on_curve_modified(self)
    if _newclass:
        class_info = staticmethod(_framework.AnimFCurve_class_info)
    else:
        class_info = _framework.AnimFCurve_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AnimFCurve____class_destructor__)
    else:
        ___class_destructor__ = _framework.AnimFCurve____class_destructor__

    def get_class_info(self):
        return _framework.AnimFCurve_get_class_info(self)
AnimFCurve_swigregister = _framework.AnimFCurve_swigregister
AnimFCurve_swigregister(AnimFCurve)

def AnimFCurve_class_info():
    return _framework.AnimFCurve_class_info()
AnimFCurve_class_info = _framework.AnimFCurve_class_info

def AnimFCurve____class_destructor__(instance, is_array):
    return _framework.AnimFCurve____class_destructor__(instance, is_array)
AnimFCurve____class_destructor__ = _framework.AnimFCurve____class_destructor__


class OfAttrValueHelper:
    def __init__(self, attr):
        self.attr = attr

    def __repr__(self):
        res = '['
        value_count = len(self.attr)
        end_index = value_count - 1
        for i in range(value_count):
            res += str(self.attr[i])
            if i < end_index: res += ', '
        res += ']'
        return res

    def __len__(self):
        return len(self.attr)

    def __nonzero__(self): return True

    def __getitem__(self, index):
        return self.attr[index]

    def __setitem__(self, index, val):
        self.attr[index] = val

class OfAttrs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAttrs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfAttrs, name)
    __repr__ = _swig_repr

    def __locate_attribute__(self, name):
        return _framework.OfAttrs___locate_attribute__(self, name)

    def __setattr_wrapped__(self, attr, value):
        return _framework.OfAttrs___setattr_wrapped__(self, attr, value)

    def __setattr__(self, name, value):
        if not self.__setattr_wrapped__(self.__locate_attribute__(name), value):
            print "error setting value " + str(value) + " of attr " + name
            raise
    def __getattr__(self, name):
        return OfAttrValueHelper(self.__locate_attribute__(name))


    def __init__(self, object):
        this = _framework.new_OfAttrs(object)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfAttrs
    __del__ = lambda self: None
OfAttrs_swigregister = _framework.OfAttrs_swigregister
OfAttrs_swigregister(OfAttrs)

class OfItemBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfItemBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfItemBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.OfItemBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_OfItemBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfItemBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfItemBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.OfItemBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.OfItemBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.OfItemBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.OfItemBasicArray_back(self, *args)

    def sub(self, index, count):
        return _framework.OfItemBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.OfItemBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfItemBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfItemBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.OfItemBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.OfItemBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfItemBasicArray_class_info)
    else:
        class_info = _framework.OfItemBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfItemBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfItemBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.OfItemBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfItemBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True


    def exists(self, *args):
        return _framework.OfItemBasicArray_exists(self, *args)

    def get_index(self, *args):
        return _framework.OfItemBasicArray_get_index(self, *args)
OfItemBasicArray_swigregister = _framework.OfItemBasicArray_swigregister
OfItemBasicArray_swigregister(OfItemBasicArray)

def OfItemBasicArray_class_info():
    return _framework.OfItemBasicArray_class_info()
OfItemBasicArray_class_info = _framework.OfItemBasicArray_class_info

def OfItemBasicArray____class_destructor__(instance, is_array):
    return _framework.OfItemBasicArray____class_destructor__(instance, is_array)
OfItemBasicArray____class_destructor__ = _framework.OfItemBasicArray____class_destructor__

class OfItemArray(OfItemBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfItemBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfItemArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OfItemBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfItemArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfItemArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfItemArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfItemArray_append(self, *args)

    def get_count(self):
        return _framework.OfItemArray_get_count(self)

    def remove_all(self):
        return _framework.OfItemArray_remove_all(self)

    def resize(self, *args):
        return _framework.OfItemArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.OfItemArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfItemArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfItemArray_get_list(self, list)

    def set_list(self, list):
        return _framework.OfItemArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.OfItemArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfItemArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfItemArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfItemArray_class_info)
    else:
        class_info = _framework.OfItemArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfItemArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfItemArray____class_destructor__
OfItemArray_swigregister = _framework.OfItemArray_swigregister
OfItemArray_swigregister(OfItemArray)

def OfItemArray_class_info():
    return _framework.OfItemArray_class_info()
OfItemArray_class_info = _framework.OfItemArray_class_info

def OfItemArray____class_destructor__(instance, is_array):
    return _framework.OfItemArray____class_destructor__(instance, is_array)
OfItemArray____class_destructor__ = _framework.OfItemArray____class_destructor__

class OfItemVector(OfItemBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfItemBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfItemVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OfItemBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfItemVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfItemVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfItemVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfItemVector_append(self, *args)

    def remove_last(self):
        return _framework.OfItemVector_remove_last(self)

    def empty(self):
        return _framework.OfItemVector_empty(self)

    def remove_all(self):
        return _framework.OfItemVector_remove_all(self)

    def clear(self, *args):
        return _framework.OfItemVector_clear(self, *args)

    def remove(self, *args):
        return _framework.OfItemVector_remove(self, *args)

    def is_empty(self):
        return _framework.OfItemVector_is_empty(self)

    def get_count(self):
        return _framework.OfItemVector_get_count(self)

    def get_capacity(self):
        return _framework.OfItemVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.OfItemVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.OfItemVector_set_capacity(self, *args)

    def refit(self):
        return _framework.OfItemVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.OfItemVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.OfItemVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.OfItemVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.OfItemVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfItemVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfItemVector_get_list(self, list)

    def set_list(self, list):
        return _framework.OfItemVector_set_list(self, list)

    def get_array(self, array):
        return _framework.OfItemVector_get_array(self, array)

    def set_array(self, array):
        return _framework.OfItemVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.OfItemVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.OfItemVector_item(self, *args)

    def get_data(self):
        return _framework.OfItemVector_get_data(self)

    def get_memory_size(self):
        return _framework.OfItemVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfItemVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfItemVector_class_info)
    else:
        class_info = _framework.OfItemVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfItemVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfItemVector____class_destructor__

    def add(self, *args):
        return _framework.OfItemVector_add(self, *args)

    def insert(self, *args):
        return _framework.OfItemVector_insert(self, *args)

    def remove_item(self, *args):
        return _framework.OfItemVector_remove_item(self, *args)

    def remove_items(self, *args):
        return _framework.OfItemVector_remove_items(self, *args)
OfItemVector_swigregister = _framework.OfItemVector_swigregister
OfItemVector_swigregister(OfItemVector)

def OfItemVector_class_info():
    return _framework.OfItemVector_class_info()
OfItemVector_class_info = _framework.OfItemVector_class_info

def OfItemVector____class_destructor__(instance, is_array):
    return _framework.OfItemVector____class_destructor__(instance, is_array)
OfItemVector____class_destructor__ = _framework.OfItemVector____class_destructor__

class OfItemSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfItemSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfItemSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfItemSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfItemSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfItemSet_get_count(self)

    def is_empty(self):
        return _framework.OfItemSet_is_empty(self)

    def remove(self, index):
        return _framework.OfItemSet_remove(self, index)

    def remove_set(self, set):
        return _framework.OfItemSet_remove_set(self, set)

    def remove_all(self):
        return _framework.OfItemSet_remove_all(self)

    def back(self, *args):
        return _framework.OfItemSet_back(self, *args)

    def unite(self, set):
        return _framework.OfItemSet_unite(self, set)

    def intersect(self, set):
        return _framework.OfItemSet_intersect(self, set)

    def is_included(self, set):
        return _framework.OfItemSet_is_included(self, set)

    def get_item(self, index):
        return _framework.OfItemSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfItemSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.OfItemSet___ne__(self, set)

    def get_items(self):
        return _framework.OfItemSet_get_items(self)

    def get_array(self, array):
        return _framework.OfItemSet_get_array(self, array)

    def get_list(self, list):
        return _framework.OfItemSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.OfItemSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.OfItemSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfItemSet_begin(self, *args)

    def end(self, *args):
        return _framework.OfItemSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.OfItemSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfItemSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True


    def add(self, *args):
        return _framework.OfItemSet_add(self, *args)

    def exists(self, *args):
        return _framework.OfItemSet_exists(self, *args)

    def remove_item(self, *args):
        return _framework.OfItemSet_remove_item(self, *args)

    def toggle(self, *args):
        return _framework.OfItemSet_toggle(self, *args)
OfItemSet_swigregister = _framework.OfItemSet_swigregister
OfItemSet_swigregister(OfItemSet)

class OfContextBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfContextBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfContextBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.OfContextBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_OfContextBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfContextBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfContextBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.OfContextBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.OfContextBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.OfContextBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.OfContextBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.OfContextBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.OfContextBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.OfContextBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.OfContextBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfContextBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfContextBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.OfContextBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.OfContextBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfContextBasicArray_class_info)
    else:
        class_info = _framework.OfContextBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfContextBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfContextBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.OfContextBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfContextBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfContextBasicArray_swigregister = _framework.OfContextBasicArray_swigregister
OfContextBasicArray_swigregister(OfContextBasicArray)

def OfContextBasicArray_class_info():
    return _framework.OfContextBasicArray_class_info()
OfContextBasicArray_class_info = _framework.OfContextBasicArray_class_info

def OfContextBasicArray____class_destructor__(instance, is_array):
    return _framework.OfContextBasicArray____class_destructor__(instance, is_array)
OfContextBasicArray____class_destructor__ = _framework.OfContextBasicArray____class_destructor__

class OfContextArray(OfContextBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfContextBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfContextArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OfContextBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfContextArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfContextArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfContextArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfContextArray_append(self, *args)

    def get_count(self):
        return _framework.OfContextArray_get_count(self)

    def remove_all(self):
        return _framework.OfContextArray_remove_all(self)

    def resize(self, *args):
        return _framework.OfContextArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.OfContextArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfContextArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfContextArray_get_list(self, list)

    def set_list(self, list):
        return _framework.OfContextArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.OfContextArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfContextArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfContextArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfContextArray_class_info)
    else:
        class_info = _framework.OfContextArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfContextArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfContextArray____class_destructor__
OfContextArray_swigregister = _framework.OfContextArray_swigregister
OfContextArray_swigregister(OfContextArray)

def OfContextArray_class_info():
    return _framework.OfContextArray_class_info()
OfContextArray_class_info = _framework.OfContextArray_class_info

def OfContextArray____class_destructor__(instance, is_array):
    return _framework.OfContextArray____class_destructor__(instance, is_array)
OfContextArray____class_destructor__ = _framework.OfContextArray____class_destructor__

class OfContextVector(OfContextBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfContextBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfContextVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OfContextBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfContextVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfContextVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfContextVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfContextVector_append(self, *args)

    def add(self, *args):
        return _framework.OfContextVector_add(self, *args)

    def insert(self, element, index):
        return _framework.OfContextVector_insert(self, element, index)

    def remove_last(self):
        return _framework.OfContextVector_remove_last(self)

    def empty(self):
        return _framework.OfContextVector_empty(self)

    def remove_all(self):
        return _framework.OfContextVector_remove_all(self)

    def clear(self, *args):
        return _framework.OfContextVector_clear(self, *args)

    def remove(self, *args):
        return _framework.OfContextVector_remove(self, *args)

    def is_empty(self):
        return _framework.OfContextVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.OfContextVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.OfContextVector_remove_items(self, item)

    def get_count(self):
        return _framework.OfContextVector_get_count(self)

    def get_capacity(self):
        return _framework.OfContextVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.OfContextVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.OfContextVector_set_capacity(self, *args)

    def refit(self):
        return _framework.OfContextVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.OfContextVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.OfContextVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.OfContextVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.OfContextVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfContextVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfContextVector_get_list(self, list)

    def set_list(self, list):
        return _framework.OfContextVector_set_list(self, list)

    def get_array(self, array):
        return _framework.OfContextVector_get_array(self, array)

    def set_array(self, array):
        return _framework.OfContextVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.OfContextVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.OfContextVector_item(self, *args)

    def get_data(self):
        return _framework.OfContextVector_get_data(self)

    def get_memory_size(self):
        return _framework.OfContextVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfContextVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfContextVector_class_info)
    else:
        class_info = _framework.OfContextVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfContextVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfContextVector____class_destructor__
OfContextVector_swigregister = _framework.OfContextVector_swigregister
OfContextVector_swigregister(OfContextVector)

def OfContextVector_class_info():
    return _framework.OfContextVector_class_info()
OfContextVector_class_info = _framework.OfContextVector_class_info

def OfContextVector____class_destructor__(instance, is_array):
    return _framework.OfContextVector____class_destructor__(instance, is_array)
OfContextVector____class_destructor__ = _framework.OfContextVector____class_destructor__

class OfContextSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfContextSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfContextSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfContextSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfContextSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfContextSet_get_count(self)

    def is_empty(self):
        return _framework.OfContextSet_is_empty(self)

    def exists(self, *args):
        return _framework.OfContextSet_exists(self, *args)

    def add(self, *args):
        return _framework.OfContextSet_add(self, *args)

    def remove(self, index):
        return _framework.OfContextSet_remove(self, index)

    def remove_item(self, item):
        return _framework.OfContextSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.OfContextSet_remove_set(self, set)

    def remove_all(self):
        return _framework.OfContextSet_remove_all(self)

    def toggle(self, item):
        return _framework.OfContextSet_toggle(self, item)

    def back(self, *args):
        return _framework.OfContextSet_back(self, *args)

    def unite(self, set):
        return _framework.OfContextSet_unite(self, set)

    def intersect(self, set):
        return _framework.OfContextSet_intersect(self, set)

    def is_included(self, set):
        return _framework.OfContextSet_is_included(self, set)

    def get_item(self, index):
        return _framework.OfContextSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfContextSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.OfContextSet___ne__(self, set)

    def get_items(self):
        return _framework.OfContextSet_get_items(self)

    def get_array(self, array):
        return _framework.OfContextSet_get_array(self, array)

    def get_list(self, list):
        return _framework.OfContextSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.OfContextSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.OfContextSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfContextSet_begin(self, *args)

    def end(self, *args):
        return _framework.OfContextSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.OfContextSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfContextSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfContextSet_swigregister = _framework.OfContextSet_swigregister
OfContextSet_swigregister(OfContextSet)

class OfContextEngineBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfContextEngineBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfContextEngineBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.OfContextEngineBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_OfContextEngineBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfContextEngineBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfContextEngineBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.OfContextEngineBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.OfContextEngineBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.OfContextEngineBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.OfContextEngineBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.OfContextEngineBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.OfContextEngineBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.OfContextEngineBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.OfContextEngineBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfContextEngineBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfContextEngineBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.OfContextEngineBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.OfContextEngineBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfContextEngineBasicArray_class_info)
    else:
        class_info = _framework.OfContextEngineBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfContextEngineBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfContextEngineBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.OfContextEngineBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfContextEngineBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfContextEngineBasicArray_swigregister = _framework.OfContextEngineBasicArray_swigregister
OfContextEngineBasicArray_swigregister(OfContextEngineBasicArray)

def OfContextEngineBasicArray_class_info():
    return _framework.OfContextEngineBasicArray_class_info()
OfContextEngineBasicArray_class_info = _framework.OfContextEngineBasicArray_class_info

def OfContextEngineBasicArray____class_destructor__(instance, is_array):
    return _framework.OfContextEngineBasicArray____class_destructor__(instance, is_array)
OfContextEngineBasicArray____class_destructor__ = _framework.OfContextEngineBasicArray____class_destructor__

class OfContextEngineArray(OfContextEngineBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfContextEngineBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfContextEngineArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OfContextEngineBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfContextEngineArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfContextEngineArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfContextEngineArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfContextEngineArray_append(self, *args)

    def get_count(self):
        return _framework.OfContextEngineArray_get_count(self)

    def remove_all(self):
        return _framework.OfContextEngineArray_remove_all(self)

    def resize(self, *args):
        return _framework.OfContextEngineArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.OfContextEngineArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfContextEngineArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfContextEngineArray_get_list(self, list)

    def set_list(self, list):
        return _framework.OfContextEngineArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.OfContextEngineArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfContextEngineArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfContextEngineArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfContextEngineArray_class_info)
    else:
        class_info = _framework.OfContextEngineArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfContextEngineArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfContextEngineArray____class_destructor__
OfContextEngineArray_swigregister = _framework.OfContextEngineArray_swigregister
OfContextEngineArray_swigregister(OfContextEngineArray)

def OfContextEngineArray_class_info():
    return _framework.OfContextEngineArray_class_info()
OfContextEngineArray_class_info = _framework.OfContextEngineArray_class_info

def OfContextEngineArray____class_destructor__(instance, is_array):
    return _framework.OfContextEngineArray____class_destructor__(instance, is_array)
OfContextEngineArray____class_destructor__ = _framework.OfContextEngineArray____class_destructor__

class OfContextEngineVector(OfContextEngineBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfContextEngineBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfContextEngineVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OfContextEngineBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfContextEngineVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfContextEngineVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfContextEngineVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfContextEngineVector_append(self, *args)

    def add(self, *args):
        return _framework.OfContextEngineVector_add(self, *args)

    def insert(self, element, index):
        return _framework.OfContextEngineVector_insert(self, element, index)

    def remove_last(self):
        return _framework.OfContextEngineVector_remove_last(self)

    def empty(self):
        return _framework.OfContextEngineVector_empty(self)

    def remove_all(self):
        return _framework.OfContextEngineVector_remove_all(self)

    def clear(self, *args):
        return _framework.OfContextEngineVector_clear(self, *args)

    def remove(self, *args):
        return _framework.OfContextEngineVector_remove(self, *args)

    def is_empty(self):
        return _framework.OfContextEngineVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.OfContextEngineVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.OfContextEngineVector_remove_items(self, item)

    def get_count(self):
        return _framework.OfContextEngineVector_get_count(self)

    def get_capacity(self):
        return _framework.OfContextEngineVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.OfContextEngineVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.OfContextEngineVector_set_capacity(self, *args)

    def refit(self):
        return _framework.OfContextEngineVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.OfContextEngineVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.OfContextEngineVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.OfContextEngineVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.OfContextEngineVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfContextEngineVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfContextEngineVector_get_list(self, list)

    def set_list(self, list):
        return _framework.OfContextEngineVector_set_list(self, list)

    def get_array(self, array):
        return _framework.OfContextEngineVector_get_array(self, array)

    def set_array(self, array):
        return _framework.OfContextEngineVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.OfContextEngineVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.OfContextEngineVector_item(self, *args)

    def get_data(self):
        return _framework.OfContextEngineVector_get_data(self)

    def get_memory_size(self):
        return _framework.OfContextEngineVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfContextEngineVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfContextEngineVector_class_info)
    else:
        class_info = _framework.OfContextEngineVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfContextEngineVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfContextEngineVector____class_destructor__
OfContextEngineVector_swigregister = _framework.OfContextEngineVector_swigregister
OfContextEngineVector_swigregister(OfContextEngineVector)

def OfContextEngineVector_class_info():
    return _framework.OfContextEngineVector_class_info()
OfContextEngineVector_class_info = _framework.OfContextEngineVector_class_info

def OfContextEngineVector____class_destructor__(instance, is_array):
    return _framework.OfContextEngineVector____class_destructor__(instance, is_array)
OfContextEngineVector____class_destructor__ = _framework.OfContextEngineVector____class_destructor__

class OfContextEngineSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfContextEngineSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfContextEngineSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfContextEngineSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfContextEngineSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfContextEngineSet_get_count(self)

    def is_empty(self):
        return _framework.OfContextEngineSet_is_empty(self)

    def exists(self, *args):
        return _framework.OfContextEngineSet_exists(self, *args)

    def add(self, *args):
        return _framework.OfContextEngineSet_add(self, *args)

    def remove(self, index):
        return _framework.OfContextEngineSet_remove(self, index)

    def remove_item(self, item):
        return _framework.OfContextEngineSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.OfContextEngineSet_remove_set(self, set)

    def remove_all(self):
        return _framework.OfContextEngineSet_remove_all(self)

    def toggle(self, item):
        return _framework.OfContextEngineSet_toggle(self, item)

    def back(self, *args):
        return _framework.OfContextEngineSet_back(self, *args)

    def unite(self, set):
        return _framework.OfContextEngineSet_unite(self, set)

    def intersect(self, set):
        return _framework.OfContextEngineSet_intersect(self, set)

    def is_included(self, set):
        return _framework.OfContextEngineSet_is_included(self, set)

    def get_item(self, index):
        return _framework.OfContextEngineSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfContextEngineSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.OfContextEngineSet___ne__(self, set)

    def get_items(self):
        return _framework.OfContextEngineSet_get_items(self)

    def get_array(self, array):
        return _framework.OfContextEngineSet_get_array(self, array)

    def get_list(self, list):
        return _framework.OfContextEngineSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.OfContextEngineSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.OfContextEngineSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfContextEngineSet_begin(self, *args)

    def end(self, *args):
        return _framework.OfContextEngineSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.OfContextEngineSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfContextEngineSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfContextEngineSet_swigregister = _framework.OfContextEngineSet_swigregister
OfContextEngineSet_swigregister(OfContextEngineSet)

class OfProjectContextEngineBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfProjectContextEngineBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfProjectContextEngineBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.OfProjectContextEngineBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_OfProjectContextEngineBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfProjectContextEngineBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfProjectContextEngineBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.OfProjectContextEngineBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.OfProjectContextEngineBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.OfProjectContextEngineBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.OfProjectContextEngineBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.OfProjectContextEngineBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.OfProjectContextEngineBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.OfProjectContextEngineBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.OfProjectContextEngineBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfProjectContextEngineBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfProjectContextEngineBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.OfProjectContextEngineBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.OfProjectContextEngineBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfProjectContextEngineBasicArray_class_info)
    else:
        class_info = _framework.OfProjectContextEngineBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfProjectContextEngineBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfProjectContextEngineBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.OfProjectContextEngineBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfProjectContextEngineBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfProjectContextEngineBasicArray_swigregister = _framework.OfProjectContextEngineBasicArray_swigregister
OfProjectContextEngineBasicArray_swigregister(OfProjectContextEngineBasicArray)

def OfProjectContextEngineBasicArray_class_info():
    return _framework.OfProjectContextEngineBasicArray_class_info()
OfProjectContextEngineBasicArray_class_info = _framework.OfProjectContextEngineBasicArray_class_info

def OfProjectContextEngineBasicArray____class_destructor__(instance, is_array):
    return _framework.OfProjectContextEngineBasicArray____class_destructor__(instance, is_array)
OfProjectContextEngineBasicArray____class_destructor__ = _framework.OfProjectContextEngineBasicArray____class_destructor__

class OfProjectContextEngineArray(OfProjectContextEngineBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfProjectContextEngineBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfProjectContextEngineArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OfProjectContextEngineBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfProjectContextEngineArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfProjectContextEngineArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfProjectContextEngineArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfProjectContextEngineArray_append(self, *args)

    def get_count(self):
        return _framework.OfProjectContextEngineArray_get_count(self)

    def remove_all(self):
        return _framework.OfProjectContextEngineArray_remove_all(self)

    def resize(self, *args):
        return _framework.OfProjectContextEngineArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.OfProjectContextEngineArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfProjectContextEngineArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfProjectContextEngineArray_get_list(self, list)

    def set_list(self, list):
        return _framework.OfProjectContextEngineArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.OfProjectContextEngineArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfProjectContextEngineArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfProjectContextEngineArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfProjectContextEngineArray_class_info)
    else:
        class_info = _framework.OfProjectContextEngineArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfProjectContextEngineArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfProjectContextEngineArray____class_destructor__
OfProjectContextEngineArray_swigregister = _framework.OfProjectContextEngineArray_swigregister
OfProjectContextEngineArray_swigregister(OfProjectContextEngineArray)

def OfProjectContextEngineArray_class_info():
    return _framework.OfProjectContextEngineArray_class_info()
OfProjectContextEngineArray_class_info = _framework.OfProjectContextEngineArray_class_info

def OfProjectContextEngineArray____class_destructor__(instance, is_array):
    return _framework.OfProjectContextEngineArray____class_destructor__(instance, is_array)
OfProjectContextEngineArray____class_destructor__ = _framework.OfProjectContextEngineArray____class_destructor__

class OfProjectContextEngineVector(OfProjectContextEngineBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfProjectContextEngineBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfProjectContextEngineVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OfProjectContextEngineBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfProjectContextEngineVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfProjectContextEngineVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfProjectContextEngineVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfProjectContextEngineVector_append(self, *args)

    def add(self, *args):
        return _framework.OfProjectContextEngineVector_add(self, *args)

    def insert(self, element, index):
        return _framework.OfProjectContextEngineVector_insert(self, element, index)

    def remove_last(self):
        return _framework.OfProjectContextEngineVector_remove_last(self)

    def empty(self):
        return _framework.OfProjectContextEngineVector_empty(self)

    def remove_all(self):
        return _framework.OfProjectContextEngineVector_remove_all(self)

    def clear(self, *args):
        return _framework.OfProjectContextEngineVector_clear(self, *args)

    def remove(self, *args):
        return _framework.OfProjectContextEngineVector_remove(self, *args)

    def is_empty(self):
        return _framework.OfProjectContextEngineVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.OfProjectContextEngineVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.OfProjectContextEngineVector_remove_items(self, item)

    def get_count(self):
        return _framework.OfProjectContextEngineVector_get_count(self)

    def get_capacity(self):
        return _framework.OfProjectContextEngineVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.OfProjectContextEngineVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.OfProjectContextEngineVector_set_capacity(self, *args)

    def refit(self):
        return _framework.OfProjectContextEngineVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.OfProjectContextEngineVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.OfProjectContextEngineVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.OfProjectContextEngineVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.OfProjectContextEngineVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfProjectContextEngineVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfProjectContextEngineVector_get_list(self, list)

    def set_list(self, list):
        return _framework.OfProjectContextEngineVector_set_list(self, list)

    def get_array(self, array):
        return _framework.OfProjectContextEngineVector_get_array(self, array)

    def set_array(self, array):
        return _framework.OfProjectContextEngineVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.OfProjectContextEngineVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.OfProjectContextEngineVector_item(self, *args)

    def get_data(self):
        return _framework.OfProjectContextEngineVector_get_data(self)

    def get_memory_size(self):
        return _framework.OfProjectContextEngineVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfProjectContextEngineVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfProjectContextEngineVector_class_info)
    else:
        class_info = _framework.OfProjectContextEngineVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfProjectContextEngineVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfProjectContextEngineVector____class_destructor__
OfProjectContextEngineVector_swigregister = _framework.OfProjectContextEngineVector_swigregister
OfProjectContextEngineVector_swigregister(OfProjectContextEngineVector)

def OfProjectContextEngineVector_class_info():
    return _framework.OfProjectContextEngineVector_class_info()
OfProjectContextEngineVector_class_info = _framework.OfProjectContextEngineVector_class_info

def OfProjectContextEngineVector____class_destructor__(instance, is_array):
    return _framework.OfProjectContextEngineVector____class_destructor__(instance, is_array)
OfProjectContextEngineVector____class_destructor__ = _framework.OfProjectContextEngineVector____class_destructor__

class OfProjectContextEngineSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfProjectContextEngineSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfProjectContextEngineSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfProjectContextEngineSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfProjectContextEngineSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfProjectContextEngineSet_get_count(self)

    def is_empty(self):
        return _framework.OfProjectContextEngineSet_is_empty(self)

    def exists(self, *args):
        return _framework.OfProjectContextEngineSet_exists(self, *args)

    def add(self, *args):
        return _framework.OfProjectContextEngineSet_add(self, *args)

    def remove(self, index):
        return _framework.OfProjectContextEngineSet_remove(self, index)

    def remove_item(self, item):
        return _framework.OfProjectContextEngineSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.OfProjectContextEngineSet_remove_set(self, set)

    def remove_all(self):
        return _framework.OfProjectContextEngineSet_remove_all(self)

    def toggle(self, item):
        return _framework.OfProjectContextEngineSet_toggle(self, item)

    def back(self, *args):
        return _framework.OfProjectContextEngineSet_back(self, *args)

    def unite(self, set):
        return _framework.OfProjectContextEngineSet_unite(self, set)

    def intersect(self, set):
        return _framework.OfProjectContextEngineSet_intersect(self, set)

    def is_included(self, set):
        return _framework.OfProjectContextEngineSet_is_included(self, set)

    def get_item(self, index):
        return _framework.OfProjectContextEngineSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfProjectContextEngineSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.OfProjectContextEngineSet___ne__(self, set)

    def get_items(self):
        return _framework.OfProjectContextEngineSet_get_items(self)

    def get_array(self, array):
        return _framework.OfProjectContextEngineSet_get_array(self, array)

    def get_list(self, list):
        return _framework.OfProjectContextEngineSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.OfProjectContextEngineSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.OfProjectContextEngineSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfProjectContextEngineSet_begin(self, *args)

    def end(self, *args):
        return _framework.OfProjectContextEngineSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.OfProjectContextEngineSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfProjectContextEngineSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfProjectContextEngineSet_swigregister = _framework.OfProjectContextEngineSet_swigregister
OfProjectContextEngineSet_swigregister(OfProjectContextEngineSet)

class OfUnknownContextEngineBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfUnknownContextEngineBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfUnknownContextEngineBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.OfUnknownContextEngineBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_OfUnknownContextEngineBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfUnknownContextEngineBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfUnknownContextEngineBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.OfUnknownContextEngineBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.OfUnknownContextEngineBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.OfUnknownContextEngineBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.OfUnknownContextEngineBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.OfUnknownContextEngineBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.OfUnknownContextEngineBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.OfUnknownContextEngineBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.OfUnknownContextEngineBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfUnknownContextEngineBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfUnknownContextEngineBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.OfUnknownContextEngineBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.OfUnknownContextEngineBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfUnknownContextEngineBasicArray_class_info)
    else:
        class_info = _framework.OfUnknownContextEngineBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfUnknownContextEngineBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfUnknownContextEngineBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.OfUnknownContextEngineBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfUnknownContextEngineBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfUnknownContextEngineBasicArray_swigregister = _framework.OfUnknownContextEngineBasicArray_swigregister
OfUnknownContextEngineBasicArray_swigregister(OfUnknownContextEngineBasicArray)

def OfUnknownContextEngineBasicArray_class_info():
    return _framework.OfUnknownContextEngineBasicArray_class_info()
OfUnknownContextEngineBasicArray_class_info = _framework.OfUnknownContextEngineBasicArray_class_info

def OfUnknownContextEngineBasicArray____class_destructor__(instance, is_array):
    return _framework.OfUnknownContextEngineBasicArray____class_destructor__(instance, is_array)
OfUnknownContextEngineBasicArray____class_destructor__ = _framework.OfUnknownContextEngineBasicArray____class_destructor__

class OfUnknownContextEngineArray(OfUnknownContextEngineBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfUnknownContextEngineBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfUnknownContextEngineArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OfUnknownContextEngineBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfUnknownContextEngineArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfUnknownContextEngineArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfUnknownContextEngineArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfUnknownContextEngineArray_append(self, *args)

    def get_count(self):
        return _framework.OfUnknownContextEngineArray_get_count(self)

    def remove_all(self):
        return _framework.OfUnknownContextEngineArray_remove_all(self)

    def resize(self, *args):
        return _framework.OfUnknownContextEngineArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.OfUnknownContextEngineArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfUnknownContextEngineArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfUnknownContextEngineArray_get_list(self, list)

    def set_list(self, list):
        return _framework.OfUnknownContextEngineArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.OfUnknownContextEngineArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfUnknownContextEngineArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfUnknownContextEngineArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfUnknownContextEngineArray_class_info)
    else:
        class_info = _framework.OfUnknownContextEngineArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfUnknownContextEngineArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfUnknownContextEngineArray____class_destructor__
OfUnknownContextEngineArray_swigregister = _framework.OfUnknownContextEngineArray_swigregister
OfUnknownContextEngineArray_swigregister(OfUnknownContextEngineArray)

def OfUnknownContextEngineArray_class_info():
    return _framework.OfUnknownContextEngineArray_class_info()
OfUnknownContextEngineArray_class_info = _framework.OfUnknownContextEngineArray_class_info

def OfUnknownContextEngineArray____class_destructor__(instance, is_array):
    return _framework.OfUnknownContextEngineArray____class_destructor__(instance, is_array)
OfUnknownContextEngineArray____class_destructor__ = _framework.OfUnknownContextEngineArray____class_destructor__

class OfUnknownContextEngineVector(OfUnknownContextEngineBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfUnknownContextEngineBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfUnknownContextEngineVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OfUnknownContextEngineBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfUnknownContextEngineVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfUnknownContextEngineVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfUnknownContextEngineVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfUnknownContextEngineVector_append(self, *args)

    def add(self, *args):
        return _framework.OfUnknownContextEngineVector_add(self, *args)

    def insert(self, element, index):
        return _framework.OfUnknownContextEngineVector_insert(self, element, index)

    def remove_last(self):
        return _framework.OfUnknownContextEngineVector_remove_last(self)

    def empty(self):
        return _framework.OfUnknownContextEngineVector_empty(self)

    def remove_all(self):
        return _framework.OfUnknownContextEngineVector_remove_all(self)

    def clear(self, *args):
        return _framework.OfUnknownContextEngineVector_clear(self, *args)

    def remove(self, *args):
        return _framework.OfUnknownContextEngineVector_remove(self, *args)

    def is_empty(self):
        return _framework.OfUnknownContextEngineVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.OfUnknownContextEngineVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.OfUnknownContextEngineVector_remove_items(self, item)

    def get_count(self):
        return _framework.OfUnknownContextEngineVector_get_count(self)

    def get_capacity(self):
        return _framework.OfUnknownContextEngineVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.OfUnknownContextEngineVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.OfUnknownContextEngineVector_set_capacity(self, *args)

    def refit(self):
        return _framework.OfUnknownContextEngineVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.OfUnknownContextEngineVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.OfUnknownContextEngineVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.OfUnknownContextEngineVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.OfUnknownContextEngineVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfUnknownContextEngineVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfUnknownContextEngineVector_get_list(self, list)

    def set_list(self, list):
        return _framework.OfUnknownContextEngineVector_set_list(self, list)

    def get_array(self, array):
        return _framework.OfUnknownContextEngineVector_get_array(self, array)

    def set_array(self, array):
        return _framework.OfUnknownContextEngineVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.OfUnknownContextEngineVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.OfUnknownContextEngineVector_item(self, *args)

    def get_data(self):
        return _framework.OfUnknownContextEngineVector_get_data(self)

    def get_memory_size(self):
        return _framework.OfUnknownContextEngineVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfUnknownContextEngineVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfUnknownContextEngineVector_class_info)
    else:
        class_info = _framework.OfUnknownContextEngineVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfUnknownContextEngineVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfUnknownContextEngineVector____class_destructor__
OfUnknownContextEngineVector_swigregister = _framework.OfUnknownContextEngineVector_swigregister
OfUnknownContextEngineVector_swigregister(OfUnknownContextEngineVector)

def OfUnknownContextEngineVector_class_info():
    return _framework.OfUnknownContextEngineVector_class_info()
OfUnknownContextEngineVector_class_info = _framework.OfUnknownContextEngineVector_class_info

def OfUnknownContextEngineVector____class_destructor__(instance, is_array):
    return _framework.OfUnknownContextEngineVector____class_destructor__(instance, is_array)
OfUnknownContextEngineVector____class_destructor__ = _framework.OfUnknownContextEngineVector____class_destructor__

class OfUnknownContextEngineSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfUnknownContextEngineSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfUnknownContextEngineSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfUnknownContextEngineSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfUnknownContextEngineSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfUnknownContextEngineSet_get_count(self)

    def is_empty(self):
        return _framework.OfUnknownContextEngineSet_is_empty(self)

    def exists(self, *args):
        return _framework.OfUnknownContextEngineSet_exists(self, *args)

    def add(self, *args):
        return _framework.OfUnknownContextEngineSet_add(self, *args)

    def remove(self, index):
        return _framework.OfUnknownContextEngineSet_remove(self, index)

    def remove_item(self, item):
        return _framework.OfUnknownContextEngineSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.OfUnknownContextEngineSet_remove_set(self, set)

    def remove_all(self):
        return _framework.OfUnknownContextEngineSet_remove_all(self)

    def toggle(self, item):
        return _framework.OfUnknownContextEngineSet_toggle(self, item)

    def back(self, *args):
        return _framework.OfUnknownContextEngineSet_back(self, *args)

    def unite(self, set):
        return _framework.OfUnknownContextEngineSet_unite(self, set)

    def intersect(self, set):
        return _framework.OfUnknownContextEngineSet_intersect(self, set)

    def is_included(self, set):
        return _framework.OfUnknownContextEngineSet_is_included(self, set)

    def get_item(self, index):
        return _framework.OfUnknownContextEngineSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfUnknownContextEngineSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.OfUnknownContextEngineSet___ne__(self, set)

    def get_items(self):
        return _framework.OfUnknownContextEngineSet_get_items(self)

    def get_array(self, array):
        return _framework.OfUnknownContextEngineSet_get_array(self, array)

    def get_list(self, list):
        return _framework.OfUnknownContextEngineSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.OfUnknownContextEngineSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.OfUnknownContextEngineSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfUnknownContextEngineSet_begin(self, *args)

    def end(self, *args):
        return _framework.OfUnknownContextEngineSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.OfUnknownContextEngineSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfUnknownContextEngineSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfUnknownContextEngineSet_swigregister = _framework.OfUnknownContextEngineSet_swigregister
OfUnknownContextEngineSet_swigregister(OfUnknownContextEngineSet)

class OfOverridesContextEngineBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfOverridesContextEngineBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfOverridesContextEngineBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.OfOverridesContextEngineBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_OfOverridesContextEngineBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfOverridesContextEngineBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfOverridesContextEngineBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.OfOverridesContextEngineBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.OfOverridesContextEngineBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.OfOverridesContextEngineBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.OfOverridesContextEngineBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.OfOverridesContextEngineBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.OfOverridesContextEngineBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.OfOverridesContextEngineBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.OfOverridesContextEngineBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfOverridesContextEngineBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfOverridesContextEngineBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.OfOverridesContextEngineBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.OfOverridesContextEngineBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfOverridesContextEngineBasicArray_class_info)
    else:
        class_info = _framework.OfOverridesContextEngineBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfOverridesContextEngineBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfOverridesContextEngineBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.OfOverridesContextEngineBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfOverridesContextEngineBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfOverridesContextEngineBasicArray_swigregister = _framework.OfOverridesContextEngineBasicArray_swigregister
OfOverridesContextEngineBasicArray_swigregister(OfOverridesContextEngineBasicArray)

def OfOverridesContextEngineBasicArray_class_info():
    return _framework.OfOverridesContextEngineBasicArray_class_info()
OfOverridesContextEngineBasicArray_class_info = _framework.OfOverridesContextEngineBasicArray_class_info

def OfOverridesContextEngineBasicArray____class_destructor__(instance, is_array):
    return _framework.OfOverridesContextEngineBasicArray____class_destructor__(instance, is_array)
OfOverridesContextEngineBasicArray____class_destructor__ = _framework.OfOverridesContextEngineBasicArray____class_destructor__

class OfOverridesContextEngineArray(OfOverridesContextEngineBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfOverridesContextEngineBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfOverridesContextEngineArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OfOverridesContextEngineBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfOverridesContextEngineArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfOverridesContextEngineArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfOverridesContextEngineArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfOverridesContextEngineArray_append(self, *args)

    def get_count(self):
        return _framework.OfOverridesContextEngineArray_get_count(self)

    def remove_all(self):
        return _framework.OfOverridesContextEngineArray_remove_all(self)

    def resize(self, *args):
        return _framework.OfOverridesContextEngineArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.OfOverridesContextEngineArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfOverridesContextEngineArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfOverridesContextEngineArray_get_list(self, list)

    def set_list(self, list):
        return _framework.OfOverridesContextEngineArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.OfOverridesContextEngineArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfOverridesContextEngineArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfOverridesContextEngineArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfOverridesContextEngineArray_class_info)
    else:
        class_info = _framework.OfOverridesContextEngineArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfOverridesContextEngineArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfOverridesContextEngineArray____class_destructor__
OfOverridesContextEngineArray_swigregister = _framework.OfOverridesContextEngineArray_swigregister
OfOverridesContextEngineArray_swigregister(OfOverridesContextEngineArray)

def OfOverridesContextEngineArray_class_info():
    return _framework.OfOverridesContextEngineArray_class_info()
OfOverridesContextEngineArray_class_info = _framework.OfOverridesContextEngineArray_class_info

def OfOverridesContextEngineArray____class_destructor__(instance, is_array):
    return _framework.OfOverridesContextEngineArray____class_destructor__(instance, is_array)
OfOverridesContextEngineArray____class_destructor__ = _framework.OfOverridesContextEngineArray____class_destructor__

class OfOverridesContextEngineVector(OfOverridesContextEngineBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfOverridesContextEngineBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfOverridesContextEngineVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OfOverridesContextEngineBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfOverridesContextEngineVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfOverridesContextEngineVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfOverridesContextEngineVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfOverridesContextEngineVector_append(self, *args)

    def add(self, *args):
        return _framework.OfOverridesContextEngineVector_add(self, *args)

    def insert(self, element, index):
        return _framework.OfOverridesContextEngineVector_insert(self, element, index)

    def remove_last(self):
        return _framework.OfOverridesContextEngineVector_remove_last(self)

    def empty(self):
        return _framework.OfOverridesContextEngineVector_empty(self)

    def remove_all(self):
        return _framework.OfOverridesContextEngineVector_remove_all(self)

    def clear(self, *args):
        return _framework.OfOverridesContextEngineVector_clear(self, *args)

    def remove(self, *args):
        return _framework.OfOverridesContextEngineVector_remove(self, *args)

    def is_empty(self):
        return _framework.OfOverridesContextEngineVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.OfOverridesContextEngineVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.OfOverridesContextEngineVector_remove_items(self, item)

    def get_count(self):
        return _framework.OfOverridesContextEngineVector_get_count(self)

    def get_capacity(self):
        return _framework.OfOverridesContextEngineVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.OfOverridesContextEngineVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.OfOverridesContextEngineVector_set_capacity(self, *args)

    def refit(self):
        return _framework.OfOverridesContextEngineVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.OfOverridesContextEngineVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.OfOverridesContextEngineVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.OfOverridesContextEngineVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.OfOverridesContextEngineVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfOverridesContextEngineVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfOverridesContextEngineVector_get_list(self, list)

    def set_list(self, list):
        return _framework.OfOverridesContextEngineVector_set_list(self, list)

    def get_array(self, array):
        return _framework.OfOverridesContextEngineVector_get_array(self, array)

    def set_array(self, array):
        return _framework.OfOverridesContextEngineVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.OfOverridesContextEngineVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.OfOverridesContextEngineVector_item(self, *args)

    def get_data(self):
        return _framework.OfOverridesContextEngineVector_get_data(self)

    def get_memory_size(self):
        return _framework.OfOverridesContextEngineVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfOverridesContextEngineVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfOverridesContextEngineVector_class_info)
    else:
        class_info = _framework.OfOverridesContextEngineVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfOverridesContextEngineVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfOverridesContextEngineVector____class_destructor__
OfOverridesContextEngineVector_swigregister = _framework.OfOverridesContextEngineVector_swigregister
OfOverridesContextEngineVector_swigregister(OfOverridesContextEngineVector)

def OfOverridesContextEngineVector_class_info():
    return _framework.OfOverridesContextEngineVector_class_info()
OfOverridesContextEngineVector_class_info = _framework.OfOverridesContextEngineVector_class_info

def OfOverridesContextEngineVector____class_destructor__(instance, is_array):
    return _framework.OfOverridesContextEngineVector____class_destructor__(instance, is_array)
OfOverridesContextEngineVector____class_destructor__ = _framework.OfOverridesContextEngineVector____class_destructor__

class OfOverridesContextEngineSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfOverridesContextEngineSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfOverridesContextEngineSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfOverridesContextEngineSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfOverridesContextEngineSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfOverridesContextEngineSet_get_count(self)

    def is_empty(self):
        return _framework.OfOverridesContextEngineSet_is_empty(self)

    def exists(self, *args):
        return _framework.OfOverridesContextEngineSet_exists(self, *args)

    def add(self, *args):
        return _framework.OfOverridesContextEngineSet_add(self, *args)

    def remove(self, index):
        return _framework.OfOverridesContextEngineSet_remove(self, index)

    def remove_item(self, item):
        return _framework.OfOverridesContextEngineSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.OfOverridesContextEngineSet_remove_set(self, set)

    def remove_all(self):
        return _framework.OfOverridesContextEngineSet_remove_all(self)

    def toggle(self, item):
        return _framework.OfOverridesContextEngineSet_toggle(self, item)

    def back(self, *args):
        return _framework.OfOverridesContextEngineSet_back(self, *args)

    def unite(self, set):
        return _framework.OfOverridesContextEngineSet_unite(self, set)

    def intersect(self, set):
        return _framework.OfOverridesContextEngineSet_intersect(self, set)

    def is_included(self, set):
        return _framework.OfOverridesContextEngineSet_is_included(self, set)

    def get_item(self, index):
        return _framework.OfOverridesContextEngineSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfOverridesContextEngineSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.OfOverridesContextEngineSet___ne__(self, set)

    def get_items(self):
        return _framework.OfOverridesContextEngineSet_get_items(self)

    def get_array(self, array):
        return _framework.OfOverridesContextEngineSet_get_array(self, array)

    def get_list(self, list):
        return _framework.OfOverridesContextEngineSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.OfOverridesContextEngineSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.OfOverridesContextEngineSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfOverridesContextEngineSet_begin(self, *args)

    def end(self, *args):
        return _framework.OfOverridesContextEngineSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.OfOverridesContextEngineSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfOverridesContextEngineSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfOverridesContextEngineSet_swigregister = _framework.OfOverridesContextEngineSet_swigregister
OfOverridesContextEngineSet_swigregister(OfOverridesContextEngineSet)

class OfFileReferenceContextEngineBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfFileReferenceContextEngineBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfFileReferenceContextEngineBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.OfFileReferenceContextEngineBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_OfFileReferenceContextEngineBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfFileReferenceContextEngineBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfFileReferenceContextEngineBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.OfFileReferenceContextEngineBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.OfFileReferenceContextEngineBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.OfFileReferenceContextEngineBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.OfFileReferenceContextEngineBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.OfFileReferenceContextEngineBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.OfFileReferenceContextEngineBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.OfFileReferenceContextEngineBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.OfFileReferenceContextEngineBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfFileReferenceContextEngineBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfFileReferenceContextEngineBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.OfFileReferenceContextEngineBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.OfFileReferenceContextEngineBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfFileReferenceContextEngineBasicArray_class_info)
    else:
        class_info = _framework.OfFileReferenceContextEngineBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfFileReferenceContextEngineBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfFileReferenceContextEngineBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.OfFileReferenceContextEngineBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfFileReferenceContextEngineBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfFileReferenceContextEngineBasicArray_swigregister = _framework.OfFileReferenceContextEngineBasicArray_swigregister
OfFileReferenceContextEngineBasicArray_swigregister(OfFileReferenceContextEngineBasicArray)

def OfFileReferenceContextEngineBasicArray_class_info():
    return _framework.OfFileReferenceContextEngineBasicArray_class_info()
OfFileReferenceContextEngineBasicArray_class_info = _framework.OfFileReferenceContextEngineBasicArray_class_info

def OfFileReferenceContextEngineBasicArray____class_destructor__(instance, is_array):
    return _framework.OfFileReferenceContextEngineBasicArray____class_destructor__(instance, is_array)
OfFileReferenceContextEngineBasicArray____class_destructor__ = _framework.OfFileReferenceContextEngineBasicArray____class_destructor__

class OfFileReferenceContextEngineArray(OfFileReferenceContextEngineBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfFileReferenceContextEngineBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfFileReferenceContextEngineArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OfFileReferenceContextEngineBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfFileReferenceContextEngineArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfFileReferenceContextEngineArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfFileReferenceContextEngineArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfFileReferenceContextEngineArray_append(self, *args)

    def get_count(self):
        return _framework.OfFileReferenceContextEngineArray_get_count(self)

    def remove_all(self):
        return _framework.OfFileReferenceContextEngineArray_remove_all(self)

    def resize(self, *args):
        return _framework.OfFileReferenceContextEngineArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.OfFileReferenceContextEngineArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfFileReferenceContextEngineArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfFileReferenceContextEngineArray_get_list(self, list)

    def set_list(self, list):
        return _framework.OfFileReferenceContextEngineArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.OfFileReferenceContextEngineArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfFileReferenceContextEngineArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfFileReferenceContextEngineArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfFileReferenceContextEngineArray_class_info)
    else:
        class_info = _framework.OfFileReferenceContextEngineArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfFileReferenceContextEngineArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfFileReferenceContextEngineArray____class_destructor__
OfFileReferenceContextEngineArray_swigregister = _framework.OfFileReferenceContextEngineArray_swigregister
OfFileReferenceContextEngineArray_swigregister(OfFileReferenceContextEngineArray)

def OfFileReferenceContextEngineArray_class_info():
    return _framework.OfFileReferenceContextEngineArray_class_info()
OfFileReferenceContextEngineArray_class_info = _framework.OfFileReferenceContextEngineArray_class_info

def OfFileReferenceContextEngineArray____class_destructor__(instance, is_array):
    return _framework.OfFileReferenceContextEngineArray____class_destructor__(instance, is_array)
OfFileReferenceContextEngineArray____class_destructor__ = _framework.OfFileReferenceContextEngineArray____class_destructor__

class OfFileReferenceContextEngineVector(OfFileReferenceContextEngineBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfFileReferenceContextEngineBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfFileReferenceContextEngineVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OfFileReferenceContextEngineBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfFileReferenceContextEngineVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfFileReferenceContextEngineVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfFileReferenceContextEngineVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfFileReferenceContextEngineVector_append(self, *args)

    def add(self, *args):
        return _framework.OfFileReferenceContextEngineVector_add(self, *args)

    def insert(self, element, index):
        return _framework.OfFileReferenceContextEngineVector_insert(self, element, index)

    def remove_last(self):
        return _framework.OfFileReferenceContextEngineVector_remove_last(self)

    def empty(self):
        return _framework.OfFileReferenceContextEngineVector_empty(self)

    def remove_all(self):
        return _framework.OfFileReferenceContextEngineVector_remove_all(self)

    def clear(self, *args):
        return _framework.OfFileReferenceContextEngineVector_clear(self, *args)

    def remove(self, *args):
        return _framework.OfFileReferenceContextEngineVector_remove(self, *args)

    def is_empty(self):
        return _framework.OfFileReferenceContextEngineVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.OfFileReferenceContextEngineVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.OfFileReferenceContextEngineVector_remove_items(self, item)

    def get_count(self):
        return _framework.OfFileReferenceContextEngineVector_get_count(self)

    def get_capacity(self):
        return _framework.OfFileReferenceContextEngineVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.OfFileReferenceContextEngineVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.OfFileReferenceContextEngineVector_set_capacity(self, *args)

    def refit(self):
        return _framework.OfFileReferenceContextEngineVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.OfFileReferenceContextEngineVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.OfFileReferenceContextEngineVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.OfFileReferenceContextEngineVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.OfFileReferenceContextEngineVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfFileReferenceContextEngineVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfFileReferenceContextEngineVector_get_list(self, list)

    def set_list(self, list):
        return _framework.OfFileReferenceContextEngineVector_set_list(self, list)

    def get_array(self, array):
        return _framework.OfFileReferenceContextEngineVector_get_array(self, array)

    def set_array(self, array):
        return _framework.OfFileReferenceContextEngineVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.OfFileReferenceContextEngineVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.OfFileReferenceContextEngineVector_item(self, *args)

    def get_data(self):
        return _framework.OfFileReferenceContextEngineVector_get_data(self)

    def get_memory_size(self):
        return _framework.OfFileReferenceContextEngineVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfFileReferenceContextEngineVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfFileReferenceContextEngineVector_class_info)
    else:
        class_info = _framework.OfFileReferenceContextEngineVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfFileReferenceContextEngineVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfFileReferenceContextEngineVector____class_destructor__
OfFileReferenceContextEngineVector_swigregister = _framework.OfFileReferenceContextEngineVector_swigregister
OfFileReferenceContextEngineVector_swigregister(OfFileReferenceContextEngineVector)

def OfFileReferenceContextEngineVector_class_info():
    return _framework.OfFileReferenceContextEngineVector_class_info()
OfFileReferenceContextEngineVector_class_info = _framework.OfFileReferenceContextEngineVector_class_info

def OfFileReferenceContextEngineVector____class_destructor__(instance, is_array):
    return _framework.OfFileReferenceContextEngineVector____class_destructor__(instance, is_array)
OfFileReferenceContextEngineVector____class_destructor__ = _framework.OfFileReferenceContextEngineVector____class_destructor__

class OfFileReferenceContextEngineSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfFileReferenceContextEngineSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfFileReferenceContextEngineSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfFileReferenceContextEngineSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfFileReferenceContextEngineSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfFileReferenceContextEngineSet_get_count(self)

    def is_empty(self):
        return _framework.OfFileReferenceContextEngineSet_is_empty(self)

    def exists(self, *args):
        return _framework.OfFileReferenceContextEngineSet_exists(self, *args)

    def add(self, *args):
        return _framework.OfFileReferenceContextEngineSet_add(self, *args)

    def remove(self, index):
        return _framework.OfFileReferenceContextEngineSet_remove(self, index)

    def remove_item(self, item):
        return _framework.OfFileReferenceContextEngineSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.OfFileReferenceContextEngineSet_remove_set(self, set)

    def remove_all(self):
        return _framework.OfFileReferenceContextEngineSet_remove_all(self)

    def toggle(self, item):
        return _framework.OfFileReferenceContextEngineSet_toggle(self, item)

    def back(self, *args):
        return _framework.OfFileReferenceContextEngineSet_back(self, *args)

    def unite(self, set):
        return _framework.OfFileReferenceContextEngineSet_unite(self, set)

    def intersect(self, set):
        return _framework.OfFileReferenceContextEngineSet_intersect(self, set)

    def is_included(self, set):
        return _framework.OfFileReferenceContextEngineSet_is_included(self, set)

    def get_item(self, index):
        return _framework.OfFileReferenceContextEngineSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfFileReferenceContextEngineSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.OfFileReferenceContextEngineSet___ne__(self, set)

    def get_items(self):
        return _framework.OfFileReferenceContextEngineSet_get_items(self)

    def get_array(self, array):
        return _framework.OfFileReferenceContextEngineSet_get_array(self, array)

    def get_list(self, list):
        return _framework.OfFileReferenceContextEngineSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.OfFileReferenceContextEngineSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.OfFileReferenceContextEngineSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfFileReferenceContextEngineSet_begin(self, *args)

    def end(self, *args):
        return _framework.OfFileReferenceContextEngineSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.OfFileReferenceContextEngineSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfFileReferenceContextEngineSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfFileReferenceContextEngineSet_swigregister = _framework.OfFileReferenceContextEngineSet_swigregister
OfFileReferenceContextEngineSet_swigregister(OfFileReferenceContextEngineSet)

class OfReferenceOverrideSetBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfReferenceOverrideSetBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfReferenceOverrideSetBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.OfReferenceOverrideSetBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_OfReferenceOverrideSetBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfReferenceOverrideSetBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfReferenceOverrideSetBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.OfReferenceOverrideSetBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.OfReferenceOverrideSetBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.OfReferenceOverrideSetBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.OfReferenceOverrideSetBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.OfReferenceOverrideSetBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.OfReferenceOverrideSetBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.OfReferenceOverrideSetBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.OfReferenceOverrideSetBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfReferenceOverrideSetBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfReferenceOverrideSetBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.OfReferenceOverrideSetBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.OfReferenceOverrideSetBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfReferenceOverrideSetBasicArray_class_info)
    else:
        class_info = _framework.OfReferenceOverrideSetBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfReferenceOverrideSetBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfReferenceOverrideSetBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.OfReferenceOverrideSetBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfReferenceOverrideSetBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfReferenceOverrideSetBasicArray_swigregister = _framework.OfReferenceOverrideSetBasicArray_swigregister
OfReferenceOverrideSetBasicArray_swigregister(OfReferenceOverrideSetBasicArray)

def OfReferenceOverrideSetBasicArray_class_info():
    return _framework.OfReferenceOverrideSetBasicArray_class_info()
OfReferenceOverrideSetBasicArray_class_info = _framework.OfReferenceOverrideSetBasicArray_class_info

def OfReferenceOverrideSetBasicArray____class_destructor__(instance, is_array):
    return _framework.OfReferenceOverrideSetBasicArray____class_destructor__(instance, is_array)
OfReferenceOverrideSetBasicArray____class_destructor__ = _framework.OfReferenceOverrideSetBasicArray____class_destructor__

class OfReferenceOverrideSetArray(OfReferenceOverrideSetBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfReferenceOverrideSetBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfReferenceOverrideSetArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OfReferenceOverrideSetBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfReferenceOverrideSetArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfReferenceOverrideSetArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfReferenceOverrideSetArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfReferenceOverrideSetArray_append(self, *args)

    def get_count(self):
        return _framework.OfReferenceOverrideSetArray_get_count(self)

    def remove_all(self):
        return _framework.OfReferenceOverrideSetArray_remove_all(self)

    def resize(self, *args):
        return _framework.OfReferenceOverrideSetArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.OfReferenceOverrideSetArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfReferenceOverrideSetArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfReferenceOverrideSetArray_get_list(self, list)

    def set_list(self, list):
        return _framework.OfReferenceOverrideSetArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.OfReferenceOverrideSetArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfReferenceOverrideSetArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfReferenceOverrideSetArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfReferenceOverrideSetArray_class_info)
    else:
        class_info = _framework.OfReferenceOverrideSetArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfReferenceOverrideSetArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfReferenceOverrideSetArray____class_destructor__
OfReferenceOverrideSetArray_swigregister = _framework.OfReferenceOverrideSetArray_swigregister
OfReferenceOverrideSetArray_swigregister(OfReferenceOverrideSetArray)

def OfReferenceOverrideSetArray_class_info():
    return _framework.OfReferenceOverrideSetArray_class_info()
OfReferenceOverrideSetArray_class_info = _framework.OfReferenceOverrideSetArray_class_info

def OfReferenceOverrideSetArray____class_destructor__(instance, is_array):
    return _framework.OfReferenceOverrideSetArray____class_destructor__(instance, is_array)
OfReferenceOverrideSetArray____class_destructor__ = _framework.OfReferenceOverrideSetArray____class_destructor__

class OfReferenceOverrideSetVector(OfReferenceOverrideSetBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfReferenceOverrideSetBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfReferenceOverrideSetVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OfReferenceOverrideSetBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfReferenceOverrideSetVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfReferenceOverrideSetVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfReferenceOverrideSetVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfReferenceOverrideSetVector_append(self, *args)

    def add(self, *args):
        return _framework.OfReferenceOverrideSetVector_add(self, *args)

    def insert(self, element, index):
        return _framework.OfReferenceOverrideSetVector_insert(self, element, index)

    def remove_last(self):
        return _framework.OfReferenceOverrideSetVector_remove_last(self)

    def empty(self):
        return _framework.OfReferenceOverrideSetVector_empty(self)

    def remove_all(self):
        return _framework.OfReferenceOverrideSetVector_remove_all(self)

    def clear(self, *args):
        return _framework.OfReferenceOverrideSetVector_clear(self, *args)

    def remove(self, *args):
        return _framework.OfReferenceOverrideSetVector_remove(self, *args)

    def is_empty(self):
        return _framework.OfReferenceOverrideSetVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.OfReferenceOverrideSetVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.OfReferenceOverrideSetVector_remove_items(self, item)

    def get_count(self):
        return _framework.OfReferenceOverrideSetVector_get_count(self)

    def get_capacity(self):
        return _framework.OfReferenceOverrideSetVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.OfReferenceOverrideSetVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.OfReferenceOverrideSetVector_set_capacity(self, *args)

    def refit(self):
        return _framework.OfReferenceOverrideSetVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.OfReferenceOverrideSetVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.OfReferenceOverrideSetVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.OfReferenceOverrideSetVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.OfReferenceOverrideSetVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfReferenceOverrideSetVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfReferenceOverrideSetVector_get_list(self, list)

    def set_list(self, list):
        return _framework.OfReferenceOverrideSetVector_set_list(self, list)

    def get_array(self, array):
        return _framework.OfReferenceOverrideSetVector_get_array(self, array)

    def set_array(self, array):
        return _framework.OfReferenceOverrideSetVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.OfReferenceOverrideSetVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.OfReferenceOverrideSetVector_item(self, *args)

    def get_data(self):
        return _framework.OfReferenceOverrideSetVector_get_data(self)

    def get_memory_size(self):
        return _framework.OfReferenceOverrideSetVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfReferenceOverrideSetVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfReferenceOverrideSetVector_class_info)
    else:
        class_info = _framework.OfReferenceOverrideSetVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfReferenceOverrideSetVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfReferenceOverrideSetVector____class_destructor__
OfReferenceOverrideSetVector_swigregister = _framework.OfReferenceOverrideSetVector_swigregister
OfReferenceOverrideSetVector_swigregister(OfReferenceOverrideSetVector)

def OfReferenceOverrideSetVector_class_info():
    return _framework.OfReferenceOverrideSetVector_class_info()
OfReferenceOverrideSetVector_class_info = _framework.OfReferenceOverrideSetVector_class_info

def OfReferenceOverrideSetVector____class_destructor__(instance, is_array):
    return _framework.OfReferenceOverrideSetVector____class_destructor__(instance, is_array)
OfReferenceOverrideSetVector____class_destructor__ = _framework.OfReferenceOverrideSetVector____class_destructor__

class OfReferenceOverrideSetSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfReferenceOverrideSetSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfReferenceOverrideSetSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfReferenceOverrideSetSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfReferenceOverrideSetSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfReferenceOverrideSetSet_get_count(self)

    def is_empty(self):
        return _framework.OfReferenceOverrideSetSet_is_empty(self)

    def exists(self, *args):
        return _framework.OfReferenceOverrideSetSet_exists(self, *args)

    def add(self, *args):
        return _framework.OfReferenceOverrideSetSet_add(self, *args)

    def remove(self, index):
        return _framework.OfReferenceOverrideSetSet_remove(self, index)

    def remove_item(self, item):
        return _framework.OfReferenceOverrideSetSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.OfReferenceOverrideSetSet_remove_set(self, set)

    def remove_all(self):
        return _framework.OfReferenceOverrideSetSet_remove_all(self)

    def toggle(self, item):
        return _framework.OfReferenceOverrideSetSet_toggle(self, item)

    def back(self, *args):
        return _framework.OfReferenceOverrideSetSet_back(self, *args)

    def unite(self, set):
        return _framework.OfReferenceOverrideSetSet_unite(self, set)

    def intersect(self, set):
        return _framework.OfReferenceOverrideSetSet_intersect(self, set)

    def is_included(self, set):
        return _framework.OfReferenceOverrideSetSet_is_included(self, set)

    def get_item(self, index):
        return _framework.OfReferenceOverrideSetSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfReferenceOverrideSetSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.OfReferenceOverrideSetSet___ne__(self, set)

    def get_items(self):
        return _framework.OfReferenceOverrideSetSet_get_items(self)

    def get_array(self, array):
        return _framework.OfReferenceOverrideSetSet_get_array(self, array)

    def get_list(self, list):
        return _framework.OfReferenceOverrideSetSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.OfReferenceOverrideSetSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.OfReferenceOverrideSetSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfReferenceOverrideSetSet_begin(self, *args)

    def end(self, *args):
        return _framework.OfReferenceOverrideSetSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.OfReferenceOverrideSetSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfReferenceOverrideSetSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfReferenceOverrideSetSet_swigregister = _framework.OfReferenceOverrideSetSet_swigregister
OfReferenceOverrideSetSet_swigregister(OfReferenceOverrideSetSet)

class OfObjectBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfObjectBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfObjectBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.OfObjectBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_OfObjectBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfObjectBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfObjectBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.OfObjectBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.OfObjectBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.OfObjectBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.OfObjectBasicArray_back(self, *args)

    def sub(self, index, count):
        return _framework.OfObjectBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.OfObjectBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfObjectBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfObjectBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.OfObjectBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.OfObjectBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfObjectBasicArray_class_info)
    else:
        class_info = _framework.OfObjectBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfObjectBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfObjectBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.OfObjectBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfObjectBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True


    def exists(self, *args):
        return _framework.OfObjectBasicArray_exists(self, *args)

    def get_index(self, *args):
        return _framework.OfObjectBasicArray_get_index(self, *args)
OfObjectBasicArray_swigregister = _framework.OfObjectBasicArray_swigregister
OfObjectBasicArray_swigregister(OfObjectBasicArray)

def OfObjectBasicArray_class_info():
    return _framework.OfObjectBasicArray_class_info()
OfObjectBasicArray_class_info = _framework.OfObjectBasicArray_class_info

def OfObjectBasicArray____class_destructor__(instance, is_array):
    return _framework.OfObjectBasicArray____class_destructor__(instance, is_array)
OfObjectBasicArray____class_destructor__ = _framework.OfObjectBasicArray____class_destructor__

class OfObjectArray(OfObjectBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfObjectBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfObjectArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OfObjectBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfObjectArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfObjectArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfObjectArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfObjectArray_append(self, *args)

    def get_count(self):
        return _framework.OfObjectArray_get_count(self)

    def remove_all(self):
        return _framework.OfObjectArray_remove_all(self)

    def resize(self, *args):
        return _framework.OfObjectArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.OfObjectArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfObjectArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfObjectArray_get_list(self, list)

    def set_list(self, list):
        return _framework.OfObjectArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.OfObjectArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfObjectArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfObjectArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfObjectArray_class_info)
    else:
        class_info = _framework.OfObjectArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfObjectArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfObjectArray____class_destructor__
OfObjectArray_swigregister = _framework.OfObjectArray_swigregister
OfObjectArray_swigregister(OfObjectArray)

def OfObjectArray_class_info():
    return _framework.OfObjectArray_class_info()
OfObjectArray_class_info = _framework.OfObjectArray_class_info

def OfObjectArray____class_destructor__(instance, is_array):
    return _framework.OfObjectArray____class_destructor__(instance, is_array)
OfObjectArray____class_destructor__ = _framework.OfObjectArray____class_destructor__

class OfObjectVector(OfObjectBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfObjectBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfObjectVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OfObjectBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfObjectVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfObjectVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfObjectVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfObjectVector_append(self, *args)

    def remove_last(self):
        return _framework.OfObjectVector_remove_last(self)

    def empty(self):
        return _framework.OfObjectVector_empty(self)

    def remove_all(self):
        return _framework.OfObjectVector_remove_all(self)

    def clear(self, *args):
        return _framework.OfObjectVector_clear(self, *args)

    def remove(self, *args):
        return _framework.OfObjectVector_remove(self, *args)

    def is_empty(self):
        return _framework.OfObjectVector_is_empty(self)

    def get_count(self):
        return _framework.OfObjectVector_get_count(self)

    def get_capacity(self):
        return _framework.OfObjectVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.OfObjectVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.OfObjectVector_set_capacity(self, *args)

    def refit(self):
        return _framework.OfObjectVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.OfObjectVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.OfObjectVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.OfObjectVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.OfObjectVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfObjectVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfObjectVector_get_list(self, list)

    def set_list(self, list):
        return _framework.OfObjectVector_set_list(self, list)

    def get_array(self, array):
        return _framework.OfObjectVector_get_array(self, array)

    def set_array(self, array):
        return _framework.OfObjectVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.OfObjectVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.OfObjectVector_item(self, *args)

    def get_data(self):
        return _framework.OfObjectVector_get_data(self)

    def get_memory_size(self):
        return _framework.OfObjectVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfObjectVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfObjectVector_class_info)
    else:
        class_info = _framework.OfObjectVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfObjectVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfObjectVector____class_destructor__

    def add(self, *args):
        return _framework.OfObjectVector_add(self, *args)

    def insert(self, *args):
        return _framework.OfObjectVector_insert(self, *args)

    def remove_item(self, *args):
        return _framework.OfObjectVector_remove_item(self, *args)

    def remove_items(self, *args):
        return _framework.OfObjectVector_remove_items(self, *args)
OfObjectVector_swigregister = _framework.OfObjectVector_swigregister
OfObjectVector_swigregister(OfObjectVector)

def OfObjectVector_class_info():
    return _framework.OfObjectVector_class_info()
OfObjectVector_class_info = _framework.OfObjectVector_class_info

def OfObjectVector____class_destructor__(instance, is_array):
    return _framework.OfObjectVector____class_destructor__(instance, is_array)
OfObjectVector____class_destructor__ = _framework.OfObjectVector____class_destructor__

class OfObjectSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfObjectSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfObjectSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfObjectSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfObjectSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfObjectSet_get_count(self)

    def is_empty(self):
        return _framework.OfObjectSet_is_empty(self)

    def remove(self, index):
        return _framework.OfObjectSet_remove(self, index)

    def remove_set(self, set):
        return _framework.OfObjectSet_remove_set(self, set)

    def remove_all(self):
        return _framework.OfObjectSet_remove_all(self)

    def back(self, *args):
        return _framework.OfObjectSet_back(self, *args)

    def unite(self, set):
        return _framework.OfObjectSet_unite(self, set)

    def intersect(self, set):
        return _framework.OfObjectSet_intersect(self, set)

    def is_included(self, set):
        return _framework.OfObjectSet_is_included(self, set)

    def get_item(self, index):
        return _framework.OfObjectSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfObjectSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.OfObjectSet___ne__(self, set)

    def get_items(self):
        return _framework.OfObjectSet_get_items(self)

    def get_array(self, array):
        return _framework.OfObjectSet_get_array(self, array)

    def get_list(self, list):
        return _framework.OfObjectSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.OfObjectSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.OfObjectSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfObjectSet_begin(self, *args)

    def end(self, *args):
        return _framework.OfObjectSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.OfObjectSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfObjectSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True


    def add(self, *args):
        return _framework.OfObjectSet_add(self, *args)

    def exists(self, *args):
        return _framework.OfObjectSet_exists(self, *args)

    def remove_item(self, *args):
        return _framework.OfObjectSet_remove_item(self, *args)

    def toggle(self, *args):
        return _framework.OfObjectSet_toggle(self, *args)
OfObjectSet_swigregister = _framework.OfObjectSet_swigregister
OfObjectSet_swigregister(OfObjectSet)

class OfAttrBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAttrBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfAttrBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.OfAttrBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_OfAttrBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfAttrBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfAttrBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.OfAttrBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.OfAttrBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.OfAttrBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.OfAttrBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.OfAttrBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.OfAttrBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.OfAttrBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.OfAttrBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfAttrBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfAttrBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.OfAttrBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.OfAttrBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfAttrBasicArray_class_info)
    else:
        class_info = _framework.OfAttrBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfAttrBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfAttrBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.OfAttrBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfAttrBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfAttrBasicArray_swigregister = _framework.OfAttrBasicArray_swigregister
OfAttrBasicArray_swigregister(OfAttrBasicArray)

def OfAttrBasicArray_class_info():
    return _framework.OfAttrBasicArray_class_info()
OfAttrBasicArray_class_info = _framework.OfAttrBasicArray_class_info

def OfAttrBasicArray____class_destructor__(instance, is_array):
    return _framework.OfAttrBasicArray____class_destructor__(instance, is_array)
OfAttrBasicArray____class_destructor__ = _framework.OfAttrBasicArray____class_destructor__

class OfAttrArray(OfAttrBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfAttrBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAttrArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OfAttrBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfAttrArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfAttrArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfAttrArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfAttrArray_append(self, *args)

    def get_count(self):
        return _framework.OfAttrArray_get_count(self)

    def remove_all(self):
        return _framework.OfAttrArray_remove_all(self)

    def resize(self, *args):
        return _framework.OfAttrArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.OfAttrArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfAttrArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfAttrArray_get_list(self, list)

    def set_list(self, list):
        return _framework.OfAttrArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.OfAttrArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfAttrArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfAttrArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfAttrArray_class_info)
    else:
        class_info = _framework.OfAttrArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfAttrArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfAttrArray____class_destructor__
OfAttrArray_swigregister = _framework.OfAttrArray_swigregister
OfAttrArray_swigregister(OfAttrArray)

def OfAttrArray_class_info():
    return _framework.OfAttrArray_class_info()
OfAttrArray_class_info = _framework.OfAttrArray_class_info

def OfAttrArray____class_destructor__(instance, is_array):
    return _framework.OfAttrArray____class_destructor__(instance, is_array)
OfAttrArray____class_destructor__ = _framework.OfAttrArray____class_destructor__

class OfAttrVector(OfAttrBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfAttrBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAttrVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OfAttrBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfAttrVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfAttrVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfAttrVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfAttrVector_append(self, *args)

    def add(self, *args):
        return _framework.OfAttrVector_add(self, *args)

    def insert(self, element, index):
        return _framework.OfAttrVector_insert(self, element, index)

    def remove_last(self):
        return _framework.OfAttrVector_remove_last(self)

    def empty(self):
        return _framework.OfAttrVector_empty(self)

    def remove_all(self):
        return _framework.OfAttrVector_remove_all(self)

    def clear(self, *args):
        return _framework.OfAttrVector_clear(self, *args)

    def remove(self, *args):
        return _framework.OfAttrVector_remove(self, *args)

    def is_empty(self):
        return _framework.OfAttrVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.OfAttrVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.OfAttrVector_remove_items(self, item)

    def get_count(self):
        return _framework.OfAttrVector_get_count(self)

    def get_capacity(self):
        return _framework.OfAttrVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.OfAttrVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.OfAttrVector_set_capacity(self, *args)

    def refit(self):
        return _framework.OfAttrVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.OfAttrVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.OfAttrVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.OfAttrVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.OfAttrVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfAttrVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfAttrVector_get_list(self, list)

    def set_list(self, list):
        return _framework.OfAttrVector_set_list(self, list)

    def get_array(self, array):
        return _framework.OfAttrVector_get_array(self, array)

    def set_array(self, array):
        return _framework.OfAttrVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.OfAttrVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.OfAttrVector_item(self, *args)

    def get_data(self):
        return _framework.OfAttrVector_get_data(self)

    def get_memory_size(self):
        return _framework.OfAttrVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfAttrVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfAttrVector_class_info)
    else:
        class_info = _framework.OfAttrVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfAttrVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfAttrVector____class_destructor__
OfAttrVector_swigregister = _framework.OfAttrVector_swigregister
OfAttrVector_swigregister(OfAttrVector)

def OfAttrVector_class_info():
    return _framework.OfAttrVector_class_info()
OfAttrVector_class_info = _framework.OfAttrVector_class_info

def OfAttrVector____class_destructor__(instance, is_array):
    return _framework.OfAttrVector____class_destructor__(instance, is_array)
OfAttrVector____class_destructor__ = _framework.OfAttrVector____class_destructor__

class OfAttrSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfAttrSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfAttrSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfAttrSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfAttrSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfAttrSet_get_count(self)

    def is_empty(self):
        return _framework.OfAttrSet_is_empty(self)

    def exists(self, *args):
        return _framework.OfAttrSet_exists(self, *args)

    def add(self, *args):
        return _framework.OfAttrSet_add(self, *args)

    def remove(self, index):
        return _framework.OfAttrSet_remove(self, index)

    def remove_item(self, item):
        return _framework.OfAttrSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.OfAttrSet_remove_set(self, set)

    def remove_all(self):
        return _framework.OfAttrSet_remove_all(self)

    def toggle(self, item):
        return _framework.OfAttrSet_toggle(self, item)

    def back(self, *args):
        return _framework.OfAttrSet_back(self, *args)

    def unite(self, set):
        return _framework.OfAttrSet_unite(self, set)

    def intersect(self, set):
        return _framework.OfAttrSet_intersect(self, set)

    def is_included(self, set):
        return _framework.OfAttrSet_is_included(self, set)

    def get_item(self, index):
        return _framework.OfAttrSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfAttrSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.OfAttrSet___ne__(self, set)

    def get_items(self):
        return _framework.OfAttrSet_get_items(self)

    def get_array(self, array):
        return _framework.OfAttrSet_get_array(self, array)

    def get_list(self, list):
        return _framework.OfAttrSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.OfAttrSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.OfAttrSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfAttrSet_begin(self, *args)

    def end(self, *args):
        return _framework.OfAttrSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.OfAttrSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfAttrSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfAttrSet_swigregister = _framework.OfAttrSet_swigregister
OfAttrSet_swigregister(OfAttrSet)

class OfClassBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfClassBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfClassBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.OfClassBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_OfClassBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfClassBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfClassBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.OfClassBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.OfClassBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.OfClassBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.OfClassBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.OfClassBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.OfClassBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.OfClassBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.OfClassBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfClassBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfClassBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.OfClassBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.OfClassBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfClassBasicArray_class_info)
    else:
        class_info = _framework.OfClassBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfClassBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfClassBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.OfClassBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfClassBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfClassBasicArray_swigregister = _framework.OfClassBasicArray_swigregister
OfClassBasicArray_swigregister(OfClassBasicArray)

def OfClassBasicArray_class_info():
    return _framework.OfClassBasicArray_class_info()
OfClassBasicArray_class_info = _framework.OfClassBasicArray_class_info

def OfClassBasicArray____class_destructor__(instance, is_array):
    return _framework.OfClassBasicArray____class_destructor__(instance, is_array)
OfClassBasicArray____class_destructor__ = _framework.OfClassBasicArray____class_destructor__

class OfClassArray(OfClassBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfClassBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfClassArray, name, value)
    __swig_getmethods__ = {}
    for _s in [OfClassBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfClassArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfClassArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfClassArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfClassArray_append(self, *args)

    def get_count(self):
        return _framework.OfClassArray_get_count(self)

    def remove_all(self):
        return _framework.OfClassArray_remove_all(self)

    def resize(self, *args):
        return _framework.OfClassArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.OfClassArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfClassArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfClassArray_get_list(self, list)

    def set_list(self, list):
        return _framework.OfClassArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.OfClassArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.OfClassArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfClassArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfClassArray_class_info)
    else:
        class_info = _framework.OfClassArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfClassArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfClassArray____class_destructor__
OfClassArray_swigregister = _framework.OfClassArray_swigregister
OfClassArray_swigregister(OfClassArray)

def OfClassArray_class_info():
    return _framework.OfClassArray_class_info()
OfClassArray_class_info = _framework.OfClassArray_class_info

def OfClassArray____class_destructor__(instance, is_array):
    return _framework.OfClassArray____class_destructor__(instance, is_array)
OfClassArray____class_destructor__ = _framework.OfClassArray____class_destructor__

class OfClassVector(OfClassBasicArray):
    __swig_setmethods__ = {}
    for _s in [OfClassBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfClassVector, name, value)
    __swig_getmethods__ = {}
    for _s in [OfClassBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfClassVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfClassVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfClassVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.OfClassVector_append(self, *args)

    def add(self, *args):
        return _framework.OfClassVector_add(self, *args)

    def insert(self, element, index):
        return _framework.OfClassVector_insert(self, element, index)

    def remove_last(self):
        return _framework.OfClassVector_remove_last(self)

    def empty(self):
        return _framework.OfClassVector_empty(self)

    def remove_all(self):
        return _framework.OfClassVector_remove_all(self)

    def clear(self, *args):
        return _framework.OfClassVector_clear(self, *args)

    def remove(self, *args):
        return _framework.OfClassVector_remove(self, *args)

    def is_empty(self):
        return _framework.OfClassVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.OfClassVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.OfClassVector_remove_items(self, item)

    def get_count(self):
        return _framework.OfClassVector_get_count(self)

    def get_capacity(self):
        return _framework.OfClassVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.OfClassVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.OfClassVector_set_capacity(self, *args)

    def refit(self):
        return _framework.OfClassVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.OfClassVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.OfClassVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.OfClassVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.OfClassVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.OfClassVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.OfClassVector_get_list(self, list)

    def set_list(self, list):
        return _framework.OfClassVector_set_list(self, list)

    def get_array(self, array):
        return _framework.OfClassVector_get_array(self, array)

    def set_array(self, array):
        return _framework.OfClassVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.OfClassVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.OfClassVector_item(self, *args)

    def get_data(self):
        return _framework.OfClassVector_get_data(self)

    def get_memory_size(self):
        return _framework.OfClassVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.OfClassVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.OfClassVector_class_info)
    else:
        class_info = _framework.OfClassVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfClassVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfClassVector____class_destructor__
OfClassVector_swigregister = _framework.OfClassVector_swigregister
OfClassVector_swigregister(OfClassVector)

def OfClassVector_class_info():
    return _framework.OfClassVector_class_info()
OfClassVector_class_info = _framework.OfClassVector_class_info

def OfClassVector____class_destructor__(instance, is_array):
    return _framework.OfClassVector____class_destructor__(instance, is_array)
OfClassVector____class_destructor__ = _framework.OfClassVector____class_destructor__

class OfClassSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfClassSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfClassSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfClassSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfClassSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.OfClassSet_get_count(self)

    def is_empty(self):
        return _framework.OfClassSet_is_empty(self)

    def exists(self, *args):
        return _framework.OfClassSet_exists(self, *args)

    def add(self, *args):
        return _framework.OfClassSet_add(self, *args)

    def remove(self, index):
        return _framework.OfClassSet_remove(self, index)

    def remove_item(self, item):
        return _framework.OfClassSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.OfClassSet_remove_set(self, set)

    def remove_all(self):
        return _framework.OfClassSet_remove_all(self)

    def toggle(self, item):
        return _framework.OfClassSet_toggle(self, item)

    def back(self, *args):
        return _framework.OfClassSet_back(self, *args)

    def unite(self, set):
        return _framework.OfClassSet_unite(self, set)

    def intersect(self, set):
        return _framework.OfClassSet_intersect(self, set)

    def is_included(self, set):
        return _framework.OfClassSet_is_included(self, set)

    def get_item(self, index):
        return _framework.OfClassSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.OfClassSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.OfClassSet___ne__(self, set)

    def get_items(self):
        return _framework.OfClassSet_get_items(self)

    def get_array(self, array):
        return _framework.OfClassSet_get_array(self, array)

    def get_list(self, list):
        return _framework.OfClassSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.OfClassSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.OfClassSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.OfClassSet_begin(self, *args)

    def end(self, *args):
        return _framework.OfClassSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.OfClassSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.OfClassSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

OfClassSet_swigregister = _framework.OfClassSet_swigregister
OfClassSet_swigregister(OfClassSet)

class FCurveKeyIdBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveKeyIdBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveKeyIdBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.FCurveKeyIdBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_FCurveKeyIdBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveKeyIdBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.FCurveKeyIdBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.FCurveKeyIdBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.FCurveKeyIdBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.FCurveKeyIdBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.FCurveKeyIdBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.FCurveKeyIdBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.FCurveKeyIdBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.FCurveKeyIdBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.FCurveKeyIdBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.FCurveKeyIdBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.FCurveKeyIdBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.FCurveKeyIdBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.FCurveKeyIdBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.FCurveKeyIdBasicArray_class_info)
    else:
        class_info = _framework.FCurveKeyIdBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.FCurveKeyIdBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.FCurveKeyIdBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.FCurveKeyIdBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.FCurveKeyIdBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

FCurveKeyIdBasicArray_swigregister = _framework.FCurveKeyIdBasicArray_swigregister
FCurveKeyIdBasicArray_swigregister(FCurveKeyIdBasicArray)

def FCurveKeyIdBasicArray_class_info():
    return _framework.FCurveKeyIdBasicArray_class_info()
FCurveKeyIdBasicArray_class_info = _framework.FCurveKeyIdBasicArray_class_info

def FCurveKeyIdBasicArray____class_destructor__(instance, is_array):
    return _framework.FCurveKeyIdBasicArray____class_destructor__(instance, is_array)
FCurveKeyIdBasicArray____class_destructor__ = _framework.FCurveKeyIdBasicArray____class_destructor__

class FCurveKeyIdArray(FCurveKeyIdBasicArray):
    __swig_setmethods__ = {}
    for _s in [FCurveKeyIdBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveKeyIdArray, name, value)
    __swig_getmethods__ = {}
    for _s in [FCurveKeyIdBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveKeyIdArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_FCurveKeyIdArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveKeyIdArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.FCurveKeyIdArray_append(self, *args)

    def get_count(self):
        return _framework.FCurveKeyIdArray_get_count(self)

    def remove_all(self):
        return _framework.FCurveKeyIdArray_remove_all(self)

    def resize(self, *args):
        return _framework.FCurveKeyIdArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.FCurveKeyIdArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.FCurveKeyIdArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.FCurveKeyIdArray_get_list(self, list)

    def set_list(self, list):
        return _framework.FCurveKeyIdArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.FCurveKeyIdArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.FCurveKeyIdArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.FCurveKeyIdArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.FCurveKeyIdArray_class_info)
    else:
        class_info = _framework.FCurveKeyIdArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.FCurveKeyIdArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.FCurveKeyIdArray____class_destructor__
FCurveKeyIdArray_swigregister = _framework.FCurveKeyIdArray_swigregister
FCurveKeyIdArray_swigregister(FCurveKeyIdArray)

def FCurveKeyIdArray_class_info():
    return _framework.FCurveKeyIdArray_class_info()
FCurveKeyIdArray_class_info = _framework.FCurveKeyIdArray_class_info

def FCurveKeyIdArray____class_destructor__(instance, is_array):
    return _framework.FCurveKeyIdArray____class_destructor__(instance, is_array)
FCurveKeyIdArray____class_destructor__ = _framework.FCurveKeyIdArray____class_destructor__

class FCurveKeyIdVector(FCurveKeyIdBasicArray):
    __swig_setmethods__ = {}
    for _s in [FCurveKeyIdBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveKeyIdVector, name, value)
    __swig_getmethods__ = {}
    for _s in [FCurveKeyIdBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveKeyIdVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_FCurveKeyIdVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveKeyIdVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.FCurveKeyIdVector_append(self, *args)

    def add(self, *args):
        return _framework.FCurveKeyIdVector_add(self, *args)

    def insert(self, element, index):
        return _framework.FCurveKeyIdVector_insert(self, element, index)

    def remove_last(self):
        return _framework.FCurveKeyIdVector_remove_last(self)

    def empty(self):
        return _framework.FCurveKeyIdVector_empty(self)

    def remove_all(self):
        return _framework.FCurveKeyIdVector_remove_all(self)

    def clear(self, *args):
        return _framework.FCurveKeyIdVector_clear(self, *args)

    def remove(self, *args):
        return _framework.FCurveKeyIdVector_remove(self, *args)

    def is_empty(self):
        return _framework.FCurveKeyIdVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.FCurveKeyIdVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.FCurveKeyIdVector_remove_items(self, item)

    def get_count(self):
        return _framework.FCurveKeyIdVector_get_count(self)

    def get_capacity(self):
        return _framework.FCurveKeyIdVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.FCurveKeyIdVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.FCurveKeyIdVector_set_capacity(self, *args)

    def refit(self):
        return _framework.FCurveKeyIdVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.FCurveKeyIdVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.FCurveKeyIdVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.FCurveKeyIdVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.FCurveKeyIdVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.FCurveKeyIdVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.FCurveKeyIdVector_get_list(self, list)

    def set_list(self, list):
        return _framework.FCurveKeyIdVector_set_list(self, list)

    def get_array(self, array):
        return _framework.FCurveKeyIdVector_get_array(self, array)

    def set_array(self, array):
        return _framework.FCurveKeyIdVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.FCurveKeyIdVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.FCurveKeyIdVector_item(self, *args)

    def get_data(self):
        return _framework.FCurveKeyIdVector_get_data(self)

    def get_memory_size(self):
        return _framework.FCurveKeyIdVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.FCurveKeyIdVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.FCurveKeyIdVector_class_info)
    else:
        class_info = _framework.FCurveKeyIdVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.FCurveKeyIdVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.FCurveKeyIdVector____class_destructor__
FCurveKeyIdVector_swigregister = _framework.FCurveKeyIdVector_swigregister
FCurveKeyIdVector_swigregister(FCurveKeyIdVector)

def FCurveKeyIdVector_class_info():
    return _framework.FCurveKeyIdVector_class_info()
FCurveKeyIdVector_class_info = _framework.FCurveKeyIdVector_class_info

def FCurveKeyIdVector____class_destructor__(instance, is_array):
    return _framework.FCurveKeyIdVector____class_destructor__(instance, is_array)
FCurveKeyIdVector____class_destructor__ = _framework.FCurveKeyIdVector____class_destructor__

class FCurveKeyIdSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveKeyIdSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveKeyIdSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_FCurveKeyIdSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveKeyIdSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.FCurveKeyIdSet_get_count(self)

    def is_empty(self):
        return _framework.FCurveKeyIdSet_is_empty(self)

    def exists(self, *args):
        return _framework.FCurveKeyIdSet_exists(self, *args)

    def add(self, *args):
        return _framework.FCurveKeyIdSet_add(self, *args)

    def remove(self, index):
        return _framework.FCurveKeyIdSet_remove(self, index)

    def remove_item(self, item):
        return _framework.FCurveKeyIdSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.FCurveKeyIdSet_remove_set(self, set)

    def remove_all(self):
        return _framework.FCurveKeyIdSet_remove_all(self)

    def toggle(self, item):
        return _framework.FCurveKeyIdSet_toggle(self, item)

    def back(self, *args):
        return _framework.FCurveKeyIdSet_back(self, *args)

    def unite(self, set):
        return _framework.FCurveKeyIdSet_unite(self, set)

    def intersect(self, set):
        return _framework.FCurveKeyIdSet_intersect(self, set)

    def is_included(self, set):
        return _framework.FCurveKeyIdSet_is_included(self, set)

    def get_item(self, index):
        return _framework.FCurveKeyIdSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.FCurveKeyIdSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.FCurveKeyIdSet___ne__(self, set)

    def get_items(self):
        return _framework.FCurveKeyIdSet_get_items(self)

    def get_array(self, array):
        return _framework.FCurveKeyIdSet_get_array(self, array)

    def get_list(self, list):
        return _framework.FCurveKeyIdSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.FCurveKeyIdSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.FCurveKeyIdSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.FCurveKeyIdSet_begin(self, *args)

    def end(self, *args):
        return _framework.FCurveKeyIdSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.FCurveKeyIdSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.FCurveKeyIdSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

FCurveKeyIdSet_swigregister = _framework.FCurveKeyIdSet_swigregister
FCurveKeyIdSet_swigregister(FCurveKeyIdSet)

class FCurveKeyBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveKeyBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveKeyBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.FCurveKeyBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_FCurveKeyBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveKeyBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.FCurveKeyBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.FCurveKeyBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.FCurveKeyBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.FCurveKeyBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.FCurveKeyBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.FCurveKeyBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.FCurveKeyBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.FCurveKeyBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.FCurveKeyBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.FCurveKeyBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.FCurveKeyBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.FCurveKeyBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.FCurveKeyBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.FCurveKeyBasicArray_class_info)
    else:
        class_info = _framework.FCurveKeyBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.FCurveKeyBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.FCurveKeyBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.FCurveKeyBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.FCurveKeyBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

FCurveKeyBasicArray_swigregister = _framework.FCurveKeyBasicArray_swigregister
FCurveKeyBasicArray_swigregister(FCurveKeyBasicArray)

def FCurveKeyBasicArray_class_info():
    return _framework.FCurveKeyBasicArray_class_info()
FCurveKeyBasicArray_class_info = _framework.FCurveKeyBasicArray_class_info

def FCurveKeyBasicArray____class_destructor__(instance, is_array):
    return _framework.FCurveKeyBasicArray____class_destructor__(instance, is_array)
FCurveKeyBasicArray____class_destructor__ = _framework.FCurveKeyBasicArray____class_destructor__

class FCurveKeyArray(FCurveKeyBasicArray):
    __swig_setmethods__ = {}
    for _s in [FCurveKeyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveKeyArray, name, value)
    __swig_getmethods__ = {}
    for _s in [FCurveKeyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveKeyArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_FCurveKeyArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveKeyArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.FCurveKeyArray_append(self, *args)

    def get_count(self):
        return _framework.FCurveKeyArray_get_count(self)

    def remove_all(self):
        return _framework.FCurveKeyArray_remove_all(self)

    def resize(self, *args):
        return _framework.FCurveKeyArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.FCurveKeyArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.FCurveKeyArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.FCurveKeyArray_get_list(self, list)

    def set_list(self, list):
        return _framework.FCurveKeyArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.FCurveKeyArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.FCurveKeyArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.FCurveKeyArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.FCurveKeyArray_class_info)
    else:
        class_info = _framework.FCurveKeyArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.FCurveKeyArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.FCurveKeyArray____class_destructor__
FCurveKeyArray_swigregister = _framework.FCurveKeyArray_swigregister
FCurveKeyArray_swigregister(FCurveKeyArray)

def FCurveKeyArray_class_info():
    return _framework.FCurveKeyArray_class_info()
FCurveKeyArray_class_info = _framework.FCurveKeyArray_class_info

def FCurveKeyArray____class_destructor__(instance, is_array):
    return _framework.FCurveKeyArray____class_destructor__(instance, is_array)
FCurveKeyArray____class_destructor__ = _framework.FCurveKeyArray____class_destructor__

class FCurveKeyVector(FCurveKeyBasicArray):
    __swig_setmethods__ = {}
    for _s in [FCurveKeyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveKeyVector, name, value)
    __swig_getmethods__ = {}
    for _s in [FCurveKeyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveKeyVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_FCurveKeyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveKeyVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.FCurveKeyVector_append(self, *args)

    def add(self, *args):
        return _framework.FCurveKeyVector_add(self, *args)

    def insert(self, element, index):
        return _framework.FCurveKeyVector_insert(self, element, index)

    def remove_last(self):
        return _framework.FCurveKeyVector_remove_last(self)

    def empty(self):
        return _framework.FCurveKeyVector_empty(self)

    def remove_all(self):
        return _framework.FCurveKeyVector_remove_all(self)

    def clear(self, *args):
        return _framework.FCurveKeyVector_clear(self, *args)

    def remove(self, *args):
        return _framework.FCurveKeyVector_remove(self, *args)

    def is_empty(self):
        return _framework.FCurveKeyVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.FCurveKeyVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.FCurveKeyVector_remove_items(self, item)

    def get_count(self):
        return _framework.FCurveKeyVector_get_count(self)

    def get_capacity(self):
        return _framework.FCurveKeyVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.FCurveKeyVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.FCurveKeyVector_set_capacity(self, *args)

    def refit(self):
        return _framework.FCurveKeyVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.FCurveKeyVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.FCurveKeyVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.FCurveKeyVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.FCurveKeyVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.FCurveKeyVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.FCurveKeyVector_get_list(self, list)

    def set_list(self, list):
        return _framework.FCurveKeyVector_set_list(self, list)

    def get_array(self, array):
        return _framework.FCurveKeyVector_get_array(self, array)

    def set_array(self, array):
        return _framework.FCurveKeyVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.FCurveKeyVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.FCurveKeyVector_item(self, *args)

    def get_data(self):
        return _framework.FCurveKeyVector_get_data(self)

    def get_memory_size(self):
        return _framework.FCurveKeyVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.FCurveKeyVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.FCurveKeyVector_class_info)
    else:
        class_info = _framework.FCurveKeyVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.FCurveKeyVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.FCurveKeyVector____class_destructor__
FCurveKeyVector_swigregister = _framework.FCurveKeyVector_swigregister
FCurveKeyVector_swigregister(FCurveKeyVector)

def FCurveKeyVector_class_info():
    return _framework.FCurveKeyVector_class_info()
FCurveKeyVector_class_info = _framework.FCurveKeyVector_class_info

def FCurveKeyVector____class_destructor__(instance, is_array):
    return _framework.FCurveKeyVector____class_destructor__(instance, is_array)
FCurveKeyVector____class_destructor__ = _framework.FCurveKeyVector____class_destructor__

class FCurveKeySet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveKeySet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveKeySet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_FCurveKeySet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveKeySet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.FCurveKeySet_get_count(self)

    def is_empty(self):
        return _framework.FCurveKeySet_is_empty(self)

    def exists(self, *args):
        return _framework.FCurveKeySet_exists(self, *args)

    def add(self, *args):
        return _framework.FCurveKeySet_add(self, *args)

    def remove(self, index):
        return _framework.FCurveKeySet_remove(self, index)

    def remove_item(self, item):
        return _framework.FCurveKeySet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.FCurveKeySet_remove_set(self, set)

    def remove_all(self):
        return _framework.FCurveKeySet_remove_all(self)

    def toggle(self, item):
        return _framework.FCurveKeySet_toggle(self, item)

    def back(self, *args):
        return _framework.FCurveKeySet_back(self, *args)

    def unite(self, set):
        return _framework.FCurveKeySet_unite(self, set)

    def intersect(self, set):
        return _framework.FCurveKeySet_intersect(self, set)

    def is_included(self, set):
        return _framework.FCurveKeySet_is_included(self, set)

    def get_item(self, index):
        return _framework.FCurveKeySet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.FCurveKeySet___eq__(self, set)


    def __ne__(self, set):
        return _framework.FCurveKeySet___ne__(self, set)

    def get_items(self):
        return _framework.FCurveKeySet_get_items(self)

    def get_array(self, array):
        return _framework.FCurveKeySet_get_array(self, array)

    def get_list(self, list):
        return _framework.FCurveKeySet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.FCurveKeySet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.FCurveKeySet_get_memory_size(self)

    def begin(self, *args):
        return _framework.FCurveKeySet_begin(self, *args)

    def end(self, *args):
        return _framework.FCurveKeySet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.FCurveKeySet___setitem__(self, index, value)

    def __len__(self):
        return _framework.FCurveKeySet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

FCurveKeySet_swigregister = _framework.FCurveKeySet_swigregister
FCurveKeySet_swigregister(FCurveKeySet)

class FCurveBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.FCurveBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_FCurveBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.FCurveBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.FCurveBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.FCurveBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.FCurveBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.FCurveBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.FCurveBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.FCurveBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.FCurveBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.FCurveBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.FCurveBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.FCurveBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.FCurveBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.FCurveBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.FCurveBasicArray_class_info)
    else:
        class_info = _framework.FCurveBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.FCurveBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.FCurveBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.FCurveBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.FCurveBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

FCurveBasicArray_swigregister = _framework.FCurveBasicArray_swigregister
FCurveBasicArray_swigregister(FCurveBasicArray)

def FCurveBasicArray_class_info():
    return _framework.FCurveBasicArray_class_info()
FCurveBasicArray_class_info = _framework.FCurveBasicArray_class_info

def FCurveBasicArray____class_destructor__(instance, is_array):
    return _framework.FCurveBasicArray____class_destructor__(instance, is_array)
FCurveBasicArray____class_destructor__ = _framework.FCurveBasicArray____class_destructor__

class FCurveArray(FCurveBasicArray):
    __swig_setmethods__ = {}
    for _s in [FCurveBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveArray, name, value)
    __swig_getmethods__ = {}
    for _s in [FCurveBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_FCurveArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.FCurveArray_append(self, *args)

    def get_count(self):
        return _framework.FCurveArray_get_count(self)

    def remove_all(self):
        return _framework.FCurveArray_remove_all(self)

    def resize(self, *args):
        return _framework.FCurveArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.FCurveArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.FCurveArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.FCurveArray_get_list(self, list)

    def set_list(self, list):
        return _framework.FCurveArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.FCurveArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.FCurveArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.FCurveArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.FCurveArray_class_info)
    else:
        class_info = _framework.FCurveArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.FCurveArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.FCurveArray____class_destructor__
FCurveArray_swigregister = _framework.FCurveArray_swigregister
FCurveArray_swigregister(FCurveArray)

def FCurveArray_class_info():
    return _framework.FCurveArray_class_info()
FCurveArray_class_info = _framework.FCurveArray_class_info

def FCurveArray____class_destructor__(instance, is_array):
    return _framework.FCurveArray____class_destructor__(instance, is_array)
FCurveArray____class_destructor__ = _framework.FCurveArray____class_destructor__

class FCurveVector(FCurveBasicArray):
    __swig_setmethods__ = {}
    for _s in [FCurveBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveVector, name, value)
    __swig_getmethods__ = {}
    for _s in [FCurveBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_FCurveVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.FCurveVector_append(self, *args)

    def add(self, *args):
        return _framework.FCurveVector_add(self, *args)

    def insert(self, element, index):
        return _framework.FCurveVector_insert(self, element, index)

    def remove_last(self):
        return _framework.FCurveVector_remove_last(self)

    def empty(self):
        return _framework.FCurveVector_empty(self)

    def remove_all(self):
        return _framework.FCurveVector_remove_all(self)

    def clear(self, *args):
        return _framework.FCurveVector_clear(self, *args)

    def remove(self, *args):
        return _framework.FCurveVector_remove(self, *args)

    def is_empty(self):
        return _framework.FCurveVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.FCurveVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.FCurveVector_remove_items(self, item)

    def get_count(self):
        return _framework.FCurveVector_get_count(self)

    def get_capacity(self):
        return _framework.FCurveVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.FCurveVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.FCurveVector_set_capacity(self, *args)

    def refit(self):
        return _framework.FCurveVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.FCurveVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.FCurveVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.FCurveVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.FCurveVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.FCurveVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.FCurveVector_get_list(self, list)

    def set_list(self, list):
        return _framework.FCurveVector_set_list(self, list)

    def get_array(self, array):
        return _framework.FCurveVector_get_array(self, array)

    def set_array(self, array):
        return _framework.FCurveVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.FCurveVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.FCurveVector_item(self, *args)

    def get_data(self):
        return _framework.FCurveVector_get_data(self)

    def get_memory_size(self):
        return _framework.FCurveVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.FCurveVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.FCurveVector_class_info)
    else:
        class_info = _framework.FCurveVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.FCurveVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.FCurveVector____class_destructor__
FCurveVector_swigregister = _framework.FCurveVector_swigregister
FCurveVector_swigregister(FCurveVector)

def FCurveVector_class_info():
    return _framework.FCurveVector_class_info()
FCurveVector_class_info = _framework.FCurveVector_class_info

def FCurveVector____class_destructor__(instance, is_array):
    return _framework.FCurveVector____class_destructor__(instance, is_array)
FCurveVector____class_destructor__ = _framework.FCurveVector____class_destructor__

class FCurveSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FCurveSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FCurveSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_FCurveSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_FCurveSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.FCurveSet_get_count(self)

    def is_empty(self):
        return _framework.FCurveSet_is_empty(self)

    def exists(self, *args):
        return _framework.FCurveSet_exists(self, *args)

    def add(self, *args):
        return _framework.FCurveSet_add(self, *args)

    def remove(self, index):
        return _framework.FCurveSet_remove(self, index)

    def remove_item(self, item):
        return _framework.FCurveSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.FCurveSet_remove_set(self, set)

    def remove_all(self):
        return _framework.FCurveSet_remove_all(self)

    def toggle(self, item):
        return _framework.FCurveSet_toggle(self, item)

    def back(self, *args):
        return _framework.FCurveSet_back(self, *args)

    def unite(self, set):
        return _framework.FCurveSet_unite(self, set)

    def intersect(self, set):
        return _framework.FCurveSet_intersect(self, set)

    def is_included(self, set):
        return _framework.FCurveSet_is_included(self, set)

    def get_item(self, index):
        return _framework.FCurveSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.FCurveSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.FCurveSet___ne__(self, set)

    def get_items(self):
        return _framework.FCurveSet_get_items(self)

    def get_array(self, array):
        return _framework.FCurveSet_get_array(self, array)

    def get_list(self, list):
        return _framework.FCurveSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.FCurveSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.FCurveSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.FCurveSet_begin(self, *args)

    def end(self, *args):
        return _framework.FCurveSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.FCurveSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.FCurveSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

FCurveSet_swigregister = _framework.FCurveSet_swigregister
FCurveSet_swigregister(FCurveSet)

class AnimFCurveBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimFCurveBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimFCurveBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.AnimFCurveBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_AnimFCurveBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AnimFCurveBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.AnimFCurveBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.AnimFCurveBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.AnimFCurveBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.AnimFCurveBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.AnimFCurveBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.AnimFCurveBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.AnimFCurveBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.AnimFCurveBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.AnimFCurveBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.AnimFCurveBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.AnimFCurveBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.AnimFCurveBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.AnimFCurveBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.AnimFCurveBasicArray_class_info)
    else:
        class_info = _framework.AnimFCurveBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AnimFCurveBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.AnimFCurveBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.AnimFCurveBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.AnimFCurveBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

AnimFCurveBasicArray_swigregister = _framework.AnimFCurveBasicArray_swigregister
AnimFCurveBasicArray_swigregister(AnimFCurveBasicArray)

def AnimFCurveBasicArray_class_info():
    return _framework.AnimFCurveBasicArray_class_info()
AnimFCurveBasicArray_class_info = _framework.AnimFCurveBasicArray_class_info

def AnimFCurveBasicArray____class_destructor__(instance, is_array):
    return _framework.AnimFCurveBasicArray____class_destructor__(instance, is_array)
AnimFCurveBasicArray____class_destructor__ = _framework.AnimFCurveBasicArray____class_destructor__

class AnimFCurveArray(AnimFCurveBasicArray):
    __swig_setmethods__ = {}
    for _s in [AnimFCurveBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimFCurveArray, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimFCurveBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimFCurveArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_AnimFCurveArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AnimFCurveArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.AnimFCurveArray_append(self, *args)

    def get_count(self):
        return _framework.AnimFCurveArray_get_count(self)

    def remove_all(self):
        return _framework.AnimFCurveArray_remove_all(self)

    def resize(self, *args):
        return _framework.AnimFCurveArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.AnimFCurveArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.AnimFCurveArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.AnimFCurveArray_get_list(self, list)

    def set_list(self, list):
        return _framework.AnimFCurveArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.AnimFCurveArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.AnimFCurveArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.AnimFCurveArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.AnimFCurveArray_class_info)
    else:
        class_info = _framework.AnimFCurveArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AnimFCurveArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.AnimFCurveArray____class_destructor__
AnimFCurveArray_swigregister = _framework.AnimFCurveArray_swigregister
AnimFCurveArray_swigregister(AnimFCurveArray)

def AnimFCurveArray_class_info():
    return _framework.AnimFCurveArray_class_info()
AnimFCurveArray_class_info = _framework.AnimFCurveArray_class_info

def AnimFCurveArray____class_destructor__(instance, is_array):
    return _framework.AnimFCurveArray____class_destructor__(instance, is_array)
AnimFCurveArray____class_destructor__ = _framework.AnimFCurveArray____class_destructor__

class AnimFCurveVector(AnimFCurveBasicArray):
    __swig_setmethods__ = {}
    for _s in [AnimFCurveBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimFCurveVector, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimFCurveBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimFCurveVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_AnimFCurveVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AnimFCurveVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.AnimFCurveVector_append(self, *args)

    def add(self, *args):
        return _framework.AnimFCurveVector_add(self, *args)

    def insert(self, element, index):
        return _framework.AnimFCurveVector_insert(self, element, index)

    def remove_last(self):
        return _framework.AnimFCurveVector_remove_last(self)

    def empty(self):
        return _framework.AnimFCurveVector_empty(self)

    def remove_all(self):
        return _framework.AnimFCurveVector_remove_all(self)

    def clear(self, *args):
        return _framework.AnimFCurveVector_clear(self, *args)

    def remove(self, *args):
        return _framework.AnimFCurveVector_remove(self, *args)

    def is_empty(self):
        return _framework.AnimFCurveVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.AnimFCurveVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.AnimFCurveVector_remove_items(self, item)

    def get_count(self):
        return _framework.AnimFCurveVector_get_count(self)

    def get_capacity(self):
        return _framework.AnimFCurveVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.AnimFCurveVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.AnimFCurveVector_set_capacity(self, *args)

    def refit(self):
        return _framework.AnimFCurveVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.AnimFCurveVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.AnimFCurveVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.AnimFCurveVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.AnimFCurveVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.AnimFCurveVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.AnimFCurveVector_get_list(self, list)

    def set_list(self, list):
        return _framework.AnimFCurveVector_set_list(self, list)

    def get_array(self, array):
        return _framework.AnimFCurveVector_get_array(self, array)

    def set_array(self, array):
        return _framework.AnimFCurveVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.AnimFCurveVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.AnimFCurveVector_item(self, *args)

    def get_data(self):
        return _framework.AnimFCurveVector_get_data(self)

    def get_memory_size(self):
        return _framework.AnimFCurveVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.AnimFCurveVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.AnimFCurveVector_class_info)
    else:
        class_info = _framework.AnimFCurveVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AnimFCurveVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.AnimFCurveVector____class_destructor__
AnimFCurveVector_swigregister = _framework.AnimFCurveVector_swigregister
AnimFCurveVector_swigregister(AnimFCurveVector)

def AnimFCurveVector_class_info():
    return _framework.AnimFCurveVector_class_info()
AnimFCurveVector_class_info = _framework.AnimFCurveVector_class_info

def AnimFCurveVector____class_destructor__(instance, is_array):
    return _framework.AnimFCurveVector____class_destructor__(instance, is_array)
AnimFCurveVector____class_destructor__ = _framework.AnimFCurveVector____class_destructor__

class AnimFCurveSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimFCurveSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimFCurveSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_AnimFCurveSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AnimFCurveSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.AnimFCurveSet_get_count(self)

    def is_empty(self):
        return _framework.AnimFCurveSet_is_empty(self)

    def exists(self, *args):
        return _framework.AnimFCurveSet_exists(self, *args)

    def add(self, *args):
        return _framework.AnimFCurveSet_add(self, *args)

    def remove(self, index):
        return _framework.AnimFCurveSet_remove(self, index)

    def remove_item(self, item):
        return _framework.AnimFCurveSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.AnimFCurveSet_remove_set(self, set)

    def remove_all(self):
        return _framework.AnimFCurveSet_remove_all(self)

    def toggle(self, item):
        return _framework.AnimFCurveSet_toggle(self, item)

    def back(self, *args):
        return _framework.AnimFCurveSet_back(self, *args)

    def unite(self, set):
        return _framework.AnimFCurveSet_unite(self, set)

    def intersect(self, set):
        return _framework.AnimFCurveSet_intersect(self, set)

    def is_included(self, set):
        return _framework.AnimFCurveSet_is_included(self, set)

    def get_item(self, index):
        return _framework.AnimFCurveSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.AnimFCurveSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.AnimFCurveSet___ne__(self, set)

    def get_items(self):
        return _framework.AnimFCurveSet_get_items(self)

    def get_array(self, array):
        return _framework.AnimFCurveSet_get_array(self, array)

    def get_list(self, list):
        return _framework.AnimFCurveSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.AnimFCurveSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.AnimFCurveSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.AnimFCurveSet_begin(self, *args)

    def end(self, *args):
        return _framework.AnimFCurveSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.AnimFCurveSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.AnimFCurveSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

AnimFCurveSet_swigregister = _framework.AnimFCurveSet_swigregister
AnimFCurveSet_swigregister(AnimFCurveSet)

class AppBase(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppBase, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    TYPE_PROCESS = _framework.AppBase_TYPE_PROCESS
    TYPE_INTERACTIVE = _framework.AppBase_TYPE_INTERACTIVE
    TYPE_GUI = _framework.AppBase_TYPE_GUI
    TYPE_COUNT = _framework.AppBase_TYPE_COUNT
    if _newclass:
        get_type_name = staticmethod(_framework.AppBase_get_type_name)
    else:
        get_type_name = _framework.AppBase_get_type_name
    EVALUATOR_ADD_MODE_HEAD = _framework.AppBase_EVALUATOR_ADD_MODE_HEAD
    EVALUATOR_ADD_MODE_TAIL = _framework.AppBase_EVALUATOR_ADD_MODE_TAIL
    EVALUATOR_ADD_MODE_COUNT = _framework.AppBase_EVALUATOR_ADD_MODE_COUNT
    if _newclass:
        get_evaluator_add_mode = staticmethod(_framework.AppBase_get_evaluator_add_mode)
    else:
        get_evaluator_add_mode = _framework.AppBase_get_evaluator_add_mode
    ACCELERATION_MODE_FULL_INTERACTIVITY = _framework.AppBase_ACCELERATION_MODE_FULL_INTERACTIVITY
    ACCELERATION_MODE_FAVOR_INTERACTIVITY_OVER_SPEED = _framework.AppBase_ACCELERATION_MODE_FAVOR_INTERACTIVITY_OVER_SPEED
    ACCELERATION_MODE_FAVOR_SPEED_OVER_INTERACTIVITY = _framework.AppBase_ACCELERATION_MODE_FAVOR_SPEED_OVER_INTERACTIVITY
    ACCELERATION_MODE_FULL_SPEED = _framework.AppBase_ACCELERATION_MODE_FULL_SPEED
    ACCELERATION_MODE_COUNT = _framework.AppBase_ACCELERATION_MODE_COUNT
    if _newclass:
        get_acceleration_mode_human = staticmethod(_framework.AppBase_get_acceleration_mode_human)
    else:
        get_acceleration_mode_human = _framework.AppBase_get_acceleration_mode_human
    DISPLACEMENT_STORAGE_MODE_FAVOR_MEMORY = _framework.AppBase_DISPLACEMENT_STORAGE_MODE_FAVOR_MEMORY
    DISPLACEMENT_STORAGE_MODE_FAVOR_SPEED = _framework.AppBase_DISPLACEMENT_STORAGE_MODE_FAVOR_SPEED
    DISPLACEMENT_STORAGE_MODE_COUNT = _framework.AppBase_DISPLACEMENT_STORAGE_MODE_COUNT
    if _newclass:
        get_displacement_storage_mode_human = staticmethod(_framework.AppBase_get_displacement_storage_mode_human)
    else:
        get_displacement_storage_mode_human = _framework.AppBase_get_displacement_storage_mode_human
    EVAL_FPS_LAYOUT_VIEW = _framework.AppBase_EVAL_FPS_LAYOUT_VIEW
    EVAL_FPS_RENDERING = _framework.AppBase_EVAL_FPS_RENDERING
    EVAL_FPS_SHADING = _framework.AppBase_EVAL_FPS_SHADING
    EVAL_FPS_COMPOSITING = _framework.AppBase_EVAL_FPS_COMPOSITING
    EVAL_FPS_DEFAULT = _framework.AppBase_EVAL_FPS_DEFAULT
    EVAL_FPS_COUNT = _framework.AppBase_EVAL_FPS_COUNT
    if _newclass:
        get_eval_fps = staticmethod(_framework.AppBase_get_eval_fps)
    else:
        get_eval_fps = _framework.AppBase_get_eval_fps
    CURVE_SIZE_MODE_SMALL = _framework.AppBase_CURVE_SIZE_MODE_SMALL
    CURVE_SIZE_MODE_MEDIUM = _framework.AppBase_CURVE_SIZE_MODE_MEDIUM
    CURVE_SIZE_MODE_LARGE = _framework.AppBase_CURVE_SIZE_MODE_LARGE
    CURVE_SIZE_MODE_COUNT = _framework.AppBase_CURVE_SIZE_MODE_COUNT
    if _newclass:
        get_curve_size_mode_name = staticmethod(_framework.AppBase_get_curve_size_mode_name)
    else:
        get_curve_size_mode_name = _framework.AppBase_get_curve_size_mode_name
    FILE_BROWSER_MODE_NATIVE = _framework.AppBase_FILE_BROWSER_MODE_NATIVE
    FILE_BROWSER_MODE_CLARISSE = _framework.AppBase_FILE_BROWSER_MODE_CLARISSE
    FILE_BROWSER_MODE_COUNT = _framework.AppBase_FILE_BROWSER_MODE_COUNT
    if _newclass:
        get_file_browser_mode_name = staticmethod(_framework.AppBase_get_file_browser_mode_name)
    else:
        get_file_browser_mode_name = _framework.AppBase_get_file_browser_mode_name
    OBJECT_UICOLOR_MODE_TAG = _framework.AppBase_OBJECT_UICOLOR_MODE_TAG
    OBJECT_UICOLOR_MODE_CLASS = _framework.AppBase_OBJECT_UICOLOR_MODE_CLASS
    OBJECT_UICOLOR_MODE_COUNT = _framework.AppBase_OBJECT_UICOLOR_MODE_COUNT
    if _newclass:
        get_object_uicolor_mode_name = staticmethod(_framework.AppBase_get_object_uicolor_mode_name)
    else:
        get_object_uicolor_mode_name = _framework.AppBase_get_object_uicolor_mode_name
    INPUT_DEVICE_MODE_AUTODETECT = _framework.AppBase_INPUT_DEVICE_MODE_AUTODETECT
    INPUT_DEVICE_MODE_FORCE_MOUSE = _framework.AppBase_INPUT_DEVICE_MODE_FORCE_MOUSE
    INPUT_DEVICE_MODE_FORCE_TABLET = _framework.AppBase_INPUT_DEVICE_MODE_FORCE_TABLET
    INPUT_DEVICE_MODE_COUNT = _framework.AppBase_INPUT_DEVICE_MODE_COUNT
    if _newclass:
        get_input_device_mode_name = staticmethod(_framework.AppBase_get_input_device_mode_name)
    else:
        get_input_device_mode_name = _framework.AppBase_get_input_device_mode_name
    MOTION_BLUR_DIRECTION_MODE_BACKWARD = _framework.AppBase_MOTION_BLUR_DIRECTION_MODE_BACKWARD
    MOTION_BLUR_DIRECTION_MODE_CENTERED = _framework.AppBase_MOTION_BLUR_DIRECTION_MODE_CENTERED
    MOTION_BLUR_DIRECTION_MODE_FORWARD = _framework.AppBase_MOTION_BLUR_DIRECTION_MODE_FORWARD
    MOTION_BLUR_DIRECTION_MODE_COUNT = _framework.AppBase_MOTION_BLUR_DIRECTION_MODE_COUNT
    if _newclass:
        get_motion_blur_direction_mode_name = staticmethod(_framework.AppBase_get_motion_blur_direction_mode_name)
    else:
        get_motion_blur_direction_mode_name = _framework.AppBase_get_motion_blur_direction_mode_name
    if _newclass:
        get_motion_blur_direction_mode_value = staticmethod(_framework.AppBase_get_motion_blur_direction_mode_value)
    else:
        get_motion_blur_direction_mode_value = _framework.AppBase_get_motion_blur_direction_mode_value
    if _newclass:
        get_motion_blur_direction_mode_from_value = staticmethod(_framework.AppBase_get_motion_blur_direction_mode_from_value)
    else:
        get_motion_blur_direction_mode_from_value = _framework.AppBase_get_motion_blur_direction_mode_from_value
    if _newclass:
        get_motion_blur_direction_mode_by_name = staticmethod(_framework.AppBase_get_motion_blur_direction_mode_by_name)
    else:
        get_motion_blur_direction_mode_by_name = _framework.AppBase_get_motion_blur_direction_mode_by_name
    __swig_destroy__ = _framework.delete_AppBase
    __del__ = lambda self: None

    def get_type(self):
        return _framework.AppBase_get_type(self)

    def get_thread_id(self):
        return _framework.AppBase_get_thread_id(self)

    def is_app_thread(self):
        return _framework.AppBase_is_app_thread(self)

    def get_thread_manager(self):
        return _framework.AppBase_get_thread_manager(self)

    def get_max_thread_count(self):
        return _framework.AppBase_get_max_thread_count(self)

    def get_thread_count(self):
        return _framework.AppBase_get_thread_count(self)

    def set_thread_count(self, thread_count):
        return _framework.AppBase_set_thread_count(self, thread_count)

    def run_thread_task(self, task, auto_delete=True, is_preemptible=False):
        return _framework.AppBase_run_thread_task(self, task, auto_delete, is_preemptible)

    def add_evaluator(self, *args):
        return _framework.AppBase_add_evaluator(self, *args)

    def remove_evaluator(self, evaluator):
        return _framework.AppBase_remove_evaluator(self, evaluator)

    def must_stop_evaluation(self):
        return _framework.AppBase_must_stop_evaluation(self)

    def is_evaluation_interrupted(self):
        return _framework.AppBase_is_evaluation_interrupted(self)

    def is_evaluating(self):
        return _framework.AppBase_is_evaluating(self)

    def get_evaluation_frame(self):
        return _framework.AppBase_get_evaluation_frame(self)

    def get_evaluation_time(self):
        return _framework.AppBase_get_evaluation_time(self)

    def get_evaluation_quality(self):
        return _framework.AppBase_get_evaluation_quality(self)

    def get_runtime(self):
        return _framework.AppBase_get_runtime(self)

    def stop_evaluation(self, blocking=False):
        return _framework.AppBase_stop_evaluation(self, blocking)

    def clear_evaluation(self):
        return _framework.AppBase_clear_evaluation(self)

    def awake(self, callback, data):
        return _framework.AppBase_awake(self, callback, data)

    def get_temp_folder(self):
        return _framework.AppBase_get_temp_folder(self)

    def request_temp_sub_folder(self, requested_name, usable_path):
        return _framework.AppBase_request_temp_sub_folder(self, requested_name, usable_path)

    def get_search_paths(self):
        return _framework.AppBase_get_search_paths(self)

    def set_search_paths(self, paths):
        return _framework.AppBase_set_search_paths(self, paths)

    def resolve_path(self, file_path):
        return _framework.AppBase_resolve_path(self, file_path)

    def resolve_paths(self, file_paths, verbose=False):
        return _framework.AppBase_resolve_paths(self, file_paths, verbose)

    def save_config(self):
        return _framework.AppBase_save_config(self)

    def get_license(self):
        return _framework.AppBase_get_license(self)

    def get_name(self):
        return _framework.AppBase_get_name(self)

    def get_vendor(self):
        return _framework.AppBase_get_vendor(self)

    def create_progress_bar(self, text, keep_in_history=True, is_abortable=False):
        return _framework.AppBase_create_progress_bar(self, text, keep_in_history, is_abortable)

    def flush_progress_bars(self):
        return _framework.AppBase_flush_progress_bars(self)

    def clear_progress_bars_history(self):
        return _framework.AppBase_clear_progress_bars_history(self)

    def get_progress_bars_count(self):
        return _framework.AppBase_get_progress_bars_count(self)

    def get_progress_bar_value(self, id):
        return _framework.AppBase_get_progress_bar_value(self, id)

    def get_progress_bar_text(self, id):
        return _framework.AppBase_get_progress_bar_text(self, id)

    def is_progress_bar_abortable(self, id):
        return _framework.AppBase_is_progress_bar_abortable(self, id)

    def is_progress_bar_aborted(self, id):
        return _framework.AppBase_is_progress_bar_aborted(self, id)

    def abort_progress_bar(self, id):
        return _framework.AppBase_abort_progress_bar(self, id)

    def get_progress_bars_average(self):
        return _framework.AppBase_get_progress_bars_average(self)

    def get_old_progress_bars_count(self):
        return _framework.AppBase_get_old_progress_bars_count(self)

    def get_old_progress_bar_text(self, id):
        return _framework.AppBase_get_old_progress_bar_text(self, id)

    def get_old_progress_bar_duration(self, id):
        return _framework.AppBase_get_old_progress_bar_duration(self, id)

    def get_acceleration_mode(self, *args):
        return _framework.AppBase_get_acceleration_mode(self, *args)

    def set_acceleration_mode(self, mode):
        return _framework.AppBase_set_acceleration_mode(self, mode)

    def get_displacement_storage_mode(self, *args):
        return _framework.AppBase_get_displacement_storage_mode(self, *args)

    def set_displacement_storage_mode(self, mode):
        return _framework.AppBase_set_displacement_storage_mode(self, mode)

    def get_default_virtual_key_interpolation_type(self):
        return _framework.AppBase_get_default_virtual_key_interpolation_type(self)

    def get_default_key_interpolation_type(self):
        return _framework.AppBase_get_default_key_interpolation_type(self)

    def set_default_virtual_key_interpolation_type(self, type):
        return _framework.AppBase_set_default_virtual_key_interpolation_type(self, type)

    def set_default_key_interpolation_type(self, type):
        return _framework.AppBase_set_default_key_interpolation_type(self, type)

    def get_timeline_keyframes_display(self):
        return _framework.AppBase_get_timeline_keyframes_display(self)

    def set_timeline_keyframes_display(self, mode):
        return _framework.AppBase_set_timeline_keyframes_display(self, mode)

    def get_motion_blur_sample_count(self):
        return _framework.AppBase_get_motion_blur_sample_count(self)

    def get_motion_blur_direction(self):
        return _framework.AppBase_get_motion_blur_direction(self)

    def get_motion_blur_length(self):
        return _framework.AppBase_get_motion_blur_length(self)

    def get_openVDB_delayed_load(self):
        return _framework.AppBase_get_openVDB_delayed_load(self)

    def get_openVDB_use_file_size_max(self):
        return _framework.AppBase_get_openVDB_use_file_size_max(self)

    def get_openVDB_file_max_size(self):
        return _framework.AppBase_get_openVDB_file_max_size(self)

    def get_application_geometry_subdivision_mode(self):
        return _framework.AppBase_get_application_geometry_subdivision_mode(self)

    def get_project_geometry_subdivision_mode(self):
        return _framework.AppBase_get_project_geometry_subdivision_mode(self)

    def get_texture_cache(self):
        return _framework.AppBase_get_texture_cache(self)

    def get_application_projection_master_eye(self):
        return _framework.AppBase_get_application_projection_master_eye(self)

    def get_project_projection_master_eye(self):
        return _framework.AppBase_get_project_projection_master_eye(self)

    def set_motion_blur_sample_count(self, sample_count):
        return _framework.AppBase_set_motion_blur_sample_count(self, sample_count)

    def set_motion_blur_direction(self, direction):
        return _framework.AppBase_set_motion_blur_direction(self, direction)

    def set_motion_blur_length(self, length):
        return _framework.AppBase_set_motion_blur_length(self, length)

    def set_openVDB_delayed_load(self, openVDB_delayed_load):
        return _framework.AppBase_set_openVDB_delayed_load(self, openVDB_delayed_load)

    def set_openVDB_file_max_size(self, file_max_size):
        return _framework.AppBase_set_openVDB_file_max_size(self, file_max_size)

    def set_openVDB_use_file_max_size(self, use_file_max_size):
        return _framework.AppBase_set_openVDB_use_file_max_size(self, use_file_max_size)

    def set_application_geometry_subdivision_mode(self, subdivision_mode):
        return _framework.AppBase_set_application_geometry_subdivision_mode(self, subdivision_mode)

    def set_project_geometry_subdivision_mode(self, subdivision_mode):
        return _framework.AppBase_set_project_geometry_subdivision_mode(self, subdivision_mode)

    def get_application_geometry_visibility_mode(self):
        return _framework.AppBase_get_application_geometry_visibility_mode(self)

    def get_project_geometry_visibility_mode(self):
        return _framework.AppBase_get_project_geometry_visibility_mode(self)

    def set_application_geometry_visibility_mode(self, visibility_mode):
        return _framework.AppBase_set_application_geometry_visibility_mode(self, visibility_mode)

    def set_project_geometry_visibility_mode(self, visibility_mode):
        return _framework.AppBase_set_project_geometry_visibility_mode(self, visibility_mode)

    def set_texture_cache(self, size):
        return _framework.AppBase_set_texture_cache(self, size)

    def set_application_projection_master_eye(self, projection_master_eye):
        return _framework.AppBase_set_application_projection_master_eye(self, projection_master_eye)

    def set_project_projection_master_eye(self, projection_master_eye):
        return _framework.AppBase_set_project_projection_master_eye(self, projection_master_eye)

    def set_OIIO_statistics_log_level(self, value):
        return _framework.AppBase_set_OIIO_statistics_log_level(self, value)

    def get_OIIO_statistics_log_level(self):
        return _framework.AppBase_get_OIIO_statistics_log_level(self)

    def get_curve_size_mode(self):
        return _framework.AppBase_get_curve_size_mode(self)

    def set_curve_size_mode(self, mode):
        return _framework.AppBase_set_curve_size_mode(self, mode)

    def get_file_browser_mode(self):
        return _framework.AppBase_get_file_browser_mode(self)

    def set_file_browser_mode(self, mode):
        return _framework.AppBase_set_file_browser_mode(self, mode)

    def get_objects_uicolor_mode(self):
        return _framework.AppBase_get_objects_uicolor_mode(self)

    def set_objects_uicolor_mode(self, mode):
        return _framework.AppBase_set_objects_uicolor_mode(self, mode)

    def get_input_device_mode(self):
        return _framework.AppBase_get_input_device_mode(self)

    def set_input_device_mode(self, mode):
        return _framework.AppBase_set_input_device_mode(self, mode)

    def get_gizmo_size(self):
        return _framework.AppBase_get_gizmo_size(self)

    def set_gizmo_size(self, size):
        return _framework.AppBase_set_gizmo_size(self, size)

    def add_to_event_loop(self, cbk, data=None):
        return _framework.AppBase_add_to_event_loop(self, cbk, data)

    def remove_from_event_loop(self, cbk, data=None):
        return _framework.AppBase_remove_from_event_loop(self, cbk, data)

    def add_timer(self, time_ms, cbk, data=None, update=True):
        return _framework.AppBase_add_timer(self, time_ms, cbk, data, update)

    def repeat_timer(self, time_ms, cbk, data=None):
        return _framework.AppBase_repeat_timer(self, time_ms, cbk, data)

    def remove_timer(self, cbk, data=None):
        return _framework.AppBase_remove_timer(self, cbk, data)

    def get_favorites_folders(self):
        return _framework.AppBase_get_favorites_folders(self)

    def add_favorites_folders(self, path):
        return _framework.AppBase_add_favorites_folders(self, path)

    def remove_favorites_folders(self, *args):
        return _framework.AppBase_remove_favorites_folders(self, *args)

    def rename_favorites_folders(self, *args):
        return _framework.AppBase_rename_favorites_folders(self, *args)

    def get_use_ocio_config_file(self):
        return _framework.AppBase_get_use_ocio_config_file(self)

    def get_ocio_config_file(self):
        return _framework.AppBase_get_ocio_config_file(self)

    def get_cdl_library_file(self):
        return _framework.AppBase_get_cdl_library_file(self)

    def get_color_space_mapping_config_file(self):
        return _framework.AppBase_get_color_space_mapping_config_file(self)

    def get_auto_detect_color_space(self):
        return _framework.AppBase_get_auto_detect_color_space(self)

    def get_scene_color_space_name(self):
        return _framework.AppBase_get_scene_color_space_name(self)

    def set_use_ocio_config_file(self, enable):
        return _framework.AppBase_set_use_ocio_config_file(self, enable)

    def set_ocio_config_file(self, path):
        return _framework.AppBase_set_ocio_config_file(self, path)

    def set_cdl_library_file(self, path):
        return _framework.AppBase_set_cdl_library_file(self, path)

    def set_color_space_mapping_config_file(self, path):
        return _framework.AppBase_set_color_space_mapping_config_file(self, path)

    def set_auto_detect_color_space(self, enable):
        return _framework.AppBase_set_auto_detect_color_space(self, enable)

    def set_scene_color_space(self, name):
        return _framework.AppBase_set_scene_color_space(self, name)

    def set_default_display_color_space(self, name):
        return _framework.AppBase_set_default_display_color_space(self, name)

    def get_default_display_color_space_name(self):
        return _framework.AppBase_get_default_display_color_space_name(self)

    def set_color_picker_color_space(self, name):
        return _framework.AppBase_set_color_picker_color_space(self, name)

    def get_color_picker_color_space_name(self, real_value=False):
        return _framework.AppBase_get_color_picker_color_space_name(self, real_value)

    def get_use_color_space_mapping_on_save(self):
        return _framework.AppBase_get_use_color_space_mapping_on_save(self)

    def set_use_color_space_mapping_on_save(self, enable):
        return _framework.AppBase_set_use_color_space_mapping_on_save(self, enable)

    def get_use_aov_config_file(self):
        return _framework.AppBase_get_use_aov_config_file(self)

    def get_aov_config_file(self):
        return _framework.AppBase_get_aov_config_file(self)

    def set_use_aov_config_file(self, enable):
        return _framework.AppBase_set_use_aov_config_file(self, enable)

    def set_aov_config_file(self, path):
        return _framework.AppBase_set_aov_config_file(self, path)

    def get_use_resolution_preset_config_file(self):
        return _framework.AppBase_get_use_resolution_preset_config_file(self)

    def get_resolution_preset_config_file(self):
        return _framework.AppBase_get_resolution_preset_config_file(self)

    def set_use_resolution_preset_config_file(self, enable):
        return _framework.AppBase_set_use_resolution_preset_config_file(self, enable)

    def set_resolution_preset_config_file(self, path):
        return _framework.AppBase_set_resolution_preset_config_file(self, path)

    def get_use_in_place_parenting(self):
        return _framework.AppBase_get_use_in_place_parenting(self)

    def set_use_in_place_parenting(self, enable):
        return _framework.AppBase_set_use_in_place_parenting(self, enable)

    def get_combine_pivot_location(self):
        return _framework.AppBase_get_combine_pivot_location(self)

    def set_combine_pivot_location(self, mode):
        return _framework.AppBase_set_combine_pivot_location(self, mode)

    def enable_output_file_buffering(self):
        return _framework.AppBase_enable_output_file_buffering(self)

    def set_enable_output_file_buffering(self, enable):
        return _framework.AppBase_set_enable_output_file_buffering(self, enable)

    def get_image_output_file_type(self):
        return _framework.AppBase_get_image_output_file_type(self)

    def set_image_output_file_type(self, output_file_type):
        return _framework.AppBase_set_image_output_file_type(self, output_file_type)

    def get_openexr_compression_method(self):
        return _framework.AppBase_get_openexr_compression_method(self)

    def set_openexr_compression_method(self, compression_method):
        return _framework.AppBase_set_openexr_compression_method(self, compression_method)

    def set_openexr_compression_error(self, compression_error):
        return _framework.AppBase_set_openexr_compression_error(self, compression_error)

    def get_openexr_compression_error(self):
        return _framework.AppBase_get_openexr_compression_error(self)

    def get_deep_output_channels(self):
        return _framework.AppBase_get_deep_output_channels(self)

    def get_deep_output_raw_samples(self):
        return _framework.AppBase_get_deep_output_raw_samples(self)

    def get_deep_output_file_type(self):
        return _framework.AppBase_get_deep_output_file_type(self)

    def get_deep_output_data_precision(self):
        return _framework.AppBase_get_deep_output_data_precision(self)

    def get_deep_output_max_sample_count(self):
        return _framework.AppBase_get_deep_output_max_sample_count(self)

    def set_deep_output_channels(self, channels):
        return _framework.AppBase_set_deep_output_channels(self, channels)

    def set_deep_output_raw_samples(self, raw_samples):
        return _framework.AppBase_set_deep_output_raw_samples(self, raw_samples)

    def set_deep_output_file_type(self, deep_output_file_type):
        return _framework.AppBase_set_deep_output_file_type(self, deep_output_file_type)

    def set_deep_output_data_precision(self, deep_output_data_precision):
        return _framework.AppBase_set_deep_output_data_precision(self, deep_output_data_precision)

    def set_deep_output_max_sample_count(self, deep_output_max_sample_count):
        return _framework.AppBase_set_deep_output_max_sample_count(self, deep_output_max_sample_count)

    def output_aovs_in_all_format(self):
        return _framework.AppBase_output_aovs_in_all_format(self)

    def set_output_aovs_in_all_format(self, output_aovs):
        return _framework.AppBase_set_output_aovs_in_all_format(self, output_aovs)

    def split_aovs_in_separate_files(self):
        return _framework.AppBase_split_aovs_in_separate_files(self)

    def set_split_aovs_in_separate_files(self, split_aovs):
        return _framework.AppBase_set_split_aovs_in_separate_files(self, split_aovs)

    def disable_rgba_in_output(self):
        return _framework.AppBase_disable_rgba_in_output(self)

    def set_disable_rgba_in_output(self, disable_rgba):
        return _framework.AppBase_set_disable_rgba_in_output(self, disable_rgba)

    def get_component_factory(self):
        return _framework.AppBase_get_component_factory(self)

    def get_task_manager(self):
        return _framework.AppBase_get_task_manager(self)

    def message_box(self, *args):
        return _framework.AppBase_message_box(self, *args)

    def register_directive(self, name, callback):
        return _framework.AppBase_register_directive(self, name, callback)

    def add_directive(self, entry, item):
        return _framework.AppBase_add_directive(self, entry, item)

    def execute_directives(self):
        return _framework.AppBase_execute_directives(self)

    def log_error(self, message):
        return _framework.AppBase_log_error(self, message)

    def log_info(self, message):
        return _framework.AppBase_log_info(self, message)

    def log_warning(self, message):
        return _framework.AppBase_log_warning(self, message)

    def check_for_events(self):
        return _framework.AppBase_check_for_events(self)

    def wait_for_events(self):
        return _framework.AppBase_wait_for_events(self)

    def enable(self):
        return _framework.AppBase_enable(self)

    def disable(self):
        return _framework.AppBase_disable(self)

    def is_enabled(self):
        return _framework.AppBase_is_enabled(self)

    def is_disabled(self):
        return _framework.AppBase_is_disabled(self)

    def get_app_base_impl(self):
        return _framework.AppBase_get_app_base_impl(self)

    def get_application_idle_watch(self):
        return _framework.AppBase_get_application_idle_watch(self)

    def get_application_idle_time(self):
        return _framework.AppBase_get_application_idle_time(self)
    if _newclass:
        exists = staticmethod(_framework.AppBase_exists)
    else:
        exists = _framework.AppBase_exists

    def is_experimental_features_enabled(self):
        return _framework.AppBase_is_experimental_features_enabled(self)

    def is_advanced_features_enabled(self):
        return _framework.AppBase_is_advanced_features_enabled(self)

    def get_version(self):
        return _framework.AppBase_get_version(self)

    def get_version_name(self):
        return _framework.AppBase_get_version_name(self)

    def get_version_number(self):
        return _framework.AppBase_get_version_number(self)

    def get_launching_directory(self):
        return _framework.AppBase_get_launching_directory(self)
    ALEMBIC_CACHE_COHERENCY = _framework.AppBase_ALEMBIC_CACHE_COHERENCY
    VERIFIABLE_STATE_COUNT = _framework.AppBase_VERIFIABLE_STATE_COUNT

    def verify_state(self, state, resolve_if_unsafe):
        return _framework.AppBase_verify_state(self, state, resolve_if_unsafe)

    def register_verification_callback_for_state(self, state, callback):
        return _framework.AppBase_register_verification_callback_for_state(self, state, callback)

    def get_memory_size(self):
        return _framework.AppBase_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_framework.AppBase_class_info)
    else:
        class_info = _framework.AppBase_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppBase____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppBase____class_destructor__

    def get_class_info(self):
        return _framework.AppBase_get_class_info(self)
    if _newclass:
        __to_python__ = staticmethod(_framework.AppBase___to_python__)
    else:
        __to_python__ = _framework.AppBase___to_python__
    if _newclass:
        __callcmd0__ = staticmethod(_framework.AppBase___callcmd0__)
    else:
        __callcmd0__ = _framework.AppBase___callcmd0__
    if _newclass:
        __callcmd1__ = staticmethod(_framework.AppBase___callcmd1__)
    else:
        __callcmd1__ = _framework.AppBase___callcmd1__
    if _newclass:
        __callcmd2__ = staticmethod(_framework.AppBase___callcmd2__)
    else:
        __callcmd2__ = _framework.AppBase___callcmd2__
    if _newclass:
        __callcmd3__ = staticmethod(_framework.AppBase___callcmd3__)
    else:
        __callcmd3__ = _framework.AppBase___callcmd3__
    if _newclass:
        __callcmd4__ = staticmethod(_framework.AppBase___callcmd4__)
    else:
        __callcmd4__ = _framework.AppBase___callcmd4__
    if _newclass:
        __callcmd_var__ = staticmethod(_framework.AppBase___callcmd_var__)
    else:
        __callcmd_var__ = _framework.AppBase___callcmd_var__
AppBase_swigregister = _framework.AppBase_swigregister
AppBase_swigregister(AppBase)
EVT_ID_APPLICATION_PRE_EVALUATION_START = cvar.EVT_ID_APPLICATION_PRE_EVALUATION_START
EVT_ID_APPLICATION_EVALUATION_STARTED = cvar.EVT_ID_APPLICATION_EVALUATION_STARTED
EVT_ID_APPLICATION_EVALUATION_INTERRUPTED = cvar.EVT_ID_APPLICATION_EVALUATION_INTERRUPTED
EVT_ID_APPLICATION_EVALUATION_ENDED = cvar.EVT_ID_APPLICATION_EVALUATION_ENDED
EVT_ID_APPLICATION_IDLE = cvar.EVT_ID_APPLICATION_IDLE
EVT_ID_APPLICATION_PROGRESS_BARS_CHANGED = cvar.EVT_ID_APPLICATION_PROGRESS_BARS_CHANGED
EVT_ID_APPLICATION_TEXTURE_CACHE_CHANGED = cvar.EVT_ID_APPLICATION_TEXTURE_CACHE_CHANGED
EVT_ID_APPLICATION_MOTION_BLUR_CHANGED = cvar.EVT_ID_APPLICATION_MOTION_BLUR_CHANGED
EVT_ID_APPLICATION_DISPLACEMENT_STORAGE_MODE_CHANGED = cvar.EVT_ID_APPLICATION_DISPLACEMENT_STORAGE_MODE_CHANGED
EVT_ID_APPLICATION_OPENVDB_CHANGED = cvar.EVT_ID_APPLICATION_OPENVDB_CHANGED
EVT_ID_APPLICATION_CURVE_SIZE_MODE_CHANGE = cvar.EVT_ID_APPLICATION_CURVE_SIZE_MODE_CHANGE
EVT_ID_APPLICATION_GIZMO_SIZE_CHANGE = cvar.EVT_ID_APPLICATION_GIZMO_SIZE_CHANGE
EVT_ID_APPLICATION_SHELF_SIZE_CHANGE = cvar.EVT_ID_APPLICATION_SHELF_SIZE_CHANGE
EVT_ID_APPLICATION_COLOR_SPACE_FILE_USE_CHANGED = cvar.EVT_ID_APPLICATION_COLOR_SPACE_FILE_USE_CHANGED
EVT_ID_APPLICATION_COLOR_SPACE_FILE_PATH_CHANGED = cvar.EVT_ID_APPLICATION_COLOR_SPACE_FILE_PATH_CHANGED
EVT_ID_APPLICATION_CDL_FILE_PATH_CHANGED = cvar.EVT_ID_APPLICATION_CDL_FILE_PATH_CHANGED
EVT_ID_APPLICATION_COLOR_SPACE_BY_EXT_FILE_PATH_CHANGED = cvar.EVT_ID_APPLICATION_COLOR_SPACE_BY_EXT_FILE_PATH_CHANGED
EVT_ID_PROJECTION_MASTER_EYE_CHANGED = cvar.EVT_ID_PROJECTION_MASTER_EYE_CHANGED
EVT_ID_APPLICATION_COLOR_SPACE_NAME_CHANGED = cvar.EVT_ID_APPLICATION_COLOR_SPACE_NAME_CHANGED
EVT_ID_APPLICATION_AOV_FILE_USE_CHANGED = cvar.EVT_ID_APPLICATION_AOV_FILE_USE_CHANGED
EVT_ID_APPLICATION_AOV_FILE_PATH_CHANGED = cvar.EVT_ID_APPLICATION_AOV_FILE_PATH_CHANGED
EVT_ID_APPLICATION_RES_PRESET_FILE_USE_CHANGED = cvar.EVT_ID_APPLICATION_RES_PRESET_FILE_USE_CHANGED
EVT_ID_APPLICATION_RES_PRESET_FILE_PATH_CHANGED = cvar.EVT_ID_APPLICATION_RES_PRESET_FILE_PATH_CHANGED
EVT_ID_APPLICATION_COMBINER_PIVOT_CHANGED = cvar.EVT_ID_APPLICATION_COMBINER_PIVOT_CHANGED
EVT_ID_APPLICATION_TIMELINE_KF_DISPLAY_CHANGED = cvar.EVT_ID_APPLICATION_TIMELINE_KF_DISPLAY_CHANGED
EVT_ID_GEOMETRY_SUBDIVISION_MODE_CHANGED = cvar.EVT_ID_GEOMETRY_SUBDIVISION_MODE_CHANGED
EVT_ID_GEOMETRY_VISIBILITY_MODE_CHANGED = cvar.EVT_ID_GEOMETRY_VISIBILITY_MODE_CHANGED

def AppBase_get_type_name(type):
    return _framework.AppBase_get_type_name(type)
AppBase_get_type_name = _framework.AppBase_get_type_name

def AppBase_get_evaluator_add_mode(mode):
    return _framework.AppBase_get_evaluator_add_mode(mode)
AppBase_get_evaluator_add_mode = _framework.AppBase_get_evaluator_add_mode

def AppBase_get_acceleration_mode_human(mode):
    return _framework.AppBase_get_acceleration_mode_human(mode)
AppBase_get_acceleration_mode_human = _framework.AppBase_get_acceleration_mode_human

def AppBase_get_displacement_storage_mode_human(mode):
    return _framework.AppBase_get_displacement_storage_mode_human(mode)
AppBase_get_displacement_storage_mode_human = _framework.AppBase_get_displacement_storage_mode_human

def AppBase_get_eval_fps(fps):
    return _framework.AppBase_get_eval_fps(fps)
AppBase_get_eval_fps = _framework.AppBase_get_eval_fps

def AppBase_get_curve_size_mode_name(mode):
    return _framework.AppBase_get_curve_size_mode_name(mode)
AppBase_get_curve_size_mode_name = _framework.AppBase_get_curve_size_mode_name

def AppBase_get_file_browser_mode_name(mode):
    return _framework.AppBase_get_file_browser_mode_name(mode)
AppBase_get_file_browser_mode_name = _framework.AppBase_get_file_browser_mode_name

def AppBase_get_object_uicolor_mode_name(mode):
    return _framework.AppBase_get_object_uicolor_mode_name(mode)
AppBase_get_object_uicolor_mode_name = _framework.AppBase_get_object_uicolor_mode_name

def AppBase_get_input_device_mode_name(mode):
    return _framework.AppBase_get_input_device_mode_name(mode)
AppBase_get_input_device_mode_name = _framework.AppBase_get_input_device_mode_name

def AppBase_get_motion_blur_direction_mode_name(mode):
    return _framework.AppBase_get_motion_blur_direction_mode_name(mode)
AppBase_get_motion_blur_direction_mode_name = _framework.AppBase_get_motion_blur_direction_mode_name

def AppBase_get_motion_blur_direction_mode_value(mode):
    return _framework.AppBase_get_motion_blur_direction_mode_value(mode)
AppBase_get_motion_blur_direction_mode_value = _framework.AppBase_get_motion_blur_direction_mode_value

def AppBase_get_motion_blur_direction_mode_from_value(motion_blur_value):
    return _framework.AppBase_get_motion_blur_direction_mode_from_value(motion_blur_value)
AppBase_get_motion_blur_direction_mode_from_value = _framework.AppBase_get_motion_blur_direction_mode_from_value

def AppBase_get_motion_blur_direction_mode_by_name(_mode):
    return _framework.AppBase_get_motion_blur_direction_mode_by_name(_mode)
AppBase_get_motion_blur_direction_mode_by_name = _framework.AppBase_get_motion_blur_direction_mode_by_name

def AppBase_exists():
    return _framework.AppBase_exists()
AppBase_exists = _framework.AppBase_exists

def AppBase_class_info():
    return _framework.AppBase_class_info()
AppBase_class_info = _framework.AppBase_class_info

def AppBase____class_destructor__(instance, is_array):
    return _framework.AppBase____class_destructor__(instance, is_array)
AppBase____class_destructor__ = _framework.AppBase____class_destructor__

def AppBase___to_python__(inst):
    return _framework.AppBase___to_python__(inst)
AppBase___to_python__ = _framework.AppBase___to_python__

def AppBase___callcmd0__(cmd_id):
    return _framework.AppBase___callcmd0__(cmd_id)
AppBase___callcmd0__ = _framework.AppBase___callcmd0__

def AppBase___callcmd1__(cmd_id, arg1):
    return _framework.AppBase___callcmd1__(cmd_id, arg1)
AppBase___callcmd1__ = _framework.AppBase___callcmd1__

def AppBase___callcmd2__(cmd_id, arg1, arg2):
    return _framework.AppBase___callcmd2__(cmd_id, arg1, arg2)
AppBase___callcmd2__ = _framework.AppBase___callcmd2__

def AppBase___callcmd3__(cmd_id, arg1, arg2, arg3):
    return _framework.AppBase___callcmd3__(cmd_id, arg1, arg2, arg3)
AppBase___callcmd3__ = _framework.AppBase___callcmd3__

def AppBase___callcmd4__(cmd_id, arg1, arg2, arg3, arg4):
    return _framework.AppBase___callcmd4__(cmd_id, arg1, arg2, arg3, arg4)
AppBase___callcmd4__ = _framework.AppBase___callcmd4__

def AppBase___callcmd_var__(cmd_id, py_args):
    return _framework.AppBase___callcmd_var__(cmd_id, py_args)
AppBase___callcmd_var__ = _framework.AppBase___callcmd_var__

class AppDialog(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppDialog, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppDialog, name)
    __repr__ = _swig_repr
    STYLE_OK = _framework.AppDialog_STYLE_OK
    STYLE_OK_CANCEL = _framework.AppDialog_STYLE_OK_CANCEL
    STYLE_ABORT_RETRY_IGNORE = _framework.AppDialog_STYLE_ABORT_RETRY_IGNORE
    STYLE_YES_NO_CANCEL = _framework.AppDialog_STYLE_YES_NO_CANCEL
    STYLE_YES_NO = _framework.AppDialog_STYLE_YES_NO
    STYLE_RETRY_CANCEL = _framework.AppDialog_STYLE_RETRY_CANCEL
    STYLE_APPLY_ALL = _framework.AppDialog_STYLE_APPLY_ALL
    STYLE_OK_APPLY_CANCEL = _framework.AppDialog_STYLE_OK_APPLY_CANCEL
    STYLE_COUNT = _framework.AppDialog_STYLE_COUNT
    if _newclass:
        get_style_name = staticmethod(_framework.AppDialog_get_style_name)
    else:
        get_style_name = _framework.AppDialog_get_style_name
    VALUE_OK = _framework.AppDialog_VALUE_OK
    VALUE_CANCEL = _framework.AppDialog_VALUE_CANCEL
    VALUE_ABORT = _framework.AppDialog_VALUE_ABORT
    VALUE_RETRY = _framework.AppDialog_VALUE_RETRY
    VALUE_IGNORE = _framework.AppDialog_VALUE_IGNORE
    VALUE_YES = _framework.AppDialog_VALUE_YES
    VALUE_NO = _framework.AppDialog_VALUE_NO
    VALUE_ALL = _framework.AppDialog_VALUE_ALL
    VALUE_APPLY = _framework.AppDialog_VALUE_APPLY
    VALUE_COUNT = _framework.AppDialog_VALUE_COUNT
    if _newclass:
        get_value_name = staticmethod(_framework.AppDialog_get_value_name)
    else:
        get_value_name = _framework.AppDialog_get_value_name

    def __init__(self, *args):
        this = _framework.new_AppDialog(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_name(self):
        return _framework.AppDialog_get_name(self)

    def get_value(self):
        return _framework.AppDialog_get_value(self)

    def __eq__(self, src):

        if not isinstance(obj, type(self)):
            return False


        return _framework.AppDialog___eq__(self, src)


    def __ne__(self, src):
        return _framework.AppDialog___ne__(self, src)

    def is_ok(self):
        return _framework.AppDialog_is_ok(self)

    def is_all_ok(self):
        return _framework.AppDialog_is_all_ok(self)

    def is_yes(self):
        return _framework.AppDialog_is_yes(self)

    def is_all_yes(self):
        return _framework.AppDialog_is_all_yes(self)

    def is_no(self):
        return _framework.AppDialog_is_no(self)

    def is_all_no(self):
        return _framework.AppDialog_is_all_no(self)

    def is_aborted(self):
        return _framework.AppDialog_is_aborted(self)

    def is_all_aborted(self):
        return _framework.AppDialog_is_all_aborted(self)

    def is_cancelled(self):
        return _framework.AppDialog_is_cancelled(self)

    def is_all_cancelled(self):
        return _framework.AppDialog_is_all_cancelled(self)

    def is_ignored(self):
        return _framework.AppDialog_is_ignored(self)

    def is_all_ignored(self):
        return _framework.AppDialog_is_all_ignored(self)

    def is_retried(self):
        return _framework.AppDialog_is_retried(self)

    def is_all_retried(self):
        return _framework.AppDialog_is_all_retried(self)

    def is_apply_all(self):
        return _framework.AppDialog_is_apply_all(self)
    if _newclass:
        ok = staticmethod(_framework.AppDialog_ok)
    else:
        ok = _framework.AppDialog_ok
    if _newclass:
        ok_all = staticmethod(_framework.AppDialog_ok_all)
    else:
        ok_all = _framework.AppDialog_ok_all
    if _newclass:
        cancel = staticmethod(_framework.AppDialog_cancel)
    else:
        cancel = _framework.AppDialog_cancel
    if _newclass:
        cancel_all = staticmethod(_framework.AppDialog_cancel_all)
    else:
        cancel_all = _framework.AppDialog_cancel_all
    if _newclass:
        abort = staticmethod(_framework.AppDialog_abort)
    else:
        abort = _framework.AppDialog_abort
    if _newclass:
        abort_all = staticmethod(_framework.AppDialog_abort_all)
    else:
        abort_all = _framework.AppDialog_abort_all
    if _newclass:
        retry = staticmethod(_framework.AppDialog_retry)
    else:
        retry = _framework.AppDialog_retry
    if _newclass:
        retry_all = staticmethod(_framework.AppDialog_retry_all)
    else:
        retry_all = _framework.AppDialog_retry_all
    if _newclass:
        ignore = staticmethod(_framework.AppDialog_ignore)
    else:
        ignore = _framework.AppDialog_ignore
    if _newclass:
        ignore_all = staticmethod(_framework.AppDialog_ignore_all)
    else:
        ignore_all = _framework.AppDialog_ignore_all
    if _newclass:
        yes = staticmethod(_framework.AppDialog_yes)
    else:
        yes = _framework.AppDialog_yes
    if _newclass:
        yes_all = staticmethod(_framework.AppDialog_yes_all)
    else:
        yes_all = _framework.AppDialog_yes_all
    if _newclass:
        no = staticmethod(_framework.AppDialog_no)
    else:
        no = _framework.AppDialog_no
    if _newclass:
        no_all = staticmethod(_framework.AppDialog_no_all)
    else:
        no_all = _framework.AppDialog_no_all
    if _newclass:
        class_info = staticmethod(_framework.AppDialog_class_info)
    else:
        class_info = _framework.AppDialog_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppDialog____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppDialog____class_destructor__

    def get_class_info(self):
        return _framework.AppDialog_get_class_info(self)
    __swig_destroy__ = _framework.delete_AppDialog
    __del__ = lambda self: None
AppDialog_swigregister = _framework.AppDialog_swigregister
AppDialog_swigregister(AppDialog)

def AppDialog_get_style_name(value):
    return _framework.AppDialog_get_style_name(value)
AppDialog_get_style_name = _framework.AppDialog_get_style_name

def AppDialog_get_value_name(value):
    return _framework.AppDialog_get_value_name(value)
AppDialog_get_value_name = _framework.AppDialog_get_value_name

def AppDialog_ok():
    return _framework.AppDialog_ok()
AppDialog_ok = _framework.AppDialog_ok

def AppDialog_ok_all():
    return _framework.AppDialog_ok_all()
AppDialog_ok_all = _framework.AppDialog_ok_all

def AppDialog_cancel():
    return _framework.AppDialog_cancel()
AppDialog_cancel = _framework.AppDialog_cancel

def AppDialog_cancel_all():
    return _framework.AppDialog_cancel_all()
AppDialog_cancel_all = _framework.AppDialog_cancel_all

def AppDialog_abort():
    return _framework.AppDialog_abort()
AppDialog_abort = _framework.AppDialog_abort

def AppDialog_abort_all():
    return _framework.AppDialog_abort_all()
AppDialog_abort_all = _framework.AppDialog_abort_all

def AppDialog_retry():
    return _framework.AppDialog_retry()
AppDialog_retry = _framework.AppDialog_retry

def AppDialog_retry_all():
    return _framework.AppDialog_retry_all()
AppDialog_retry_all = _framework.AppDialog_retry_all

def AppDialog_ignore():
    return _framework.AppDialog_ignore()
AppDialog_ignore = _framework.AppDialog_ignore

def AppDialog_ignore_all():
    return _framework.AppDialog_ignore_all()
AppDialog_ignore_all = _framework.AppDialog_ignore_all

def AppDialog_yes():
    return _framework.AppDialog_yes()
AppDialog_yes = _framework.AppDialog_yes

def AppDialog_yes_all():
    return _framework.AppDialog_yes_all()
AppDialog_yes_all = _framework.AppDialog_yes_all

def AppDialog_no():
    return _framework.AppDialog_no()
AppDialog_no = _framework.AppDialog_no

def AppDialog_no_all():
    return _framework.AppDialog_no_all()
AppDialog_no_all = _framework.AppDialog_no_all

def AppDialog_class_info():
    return _framework.AppDialog_class_info()
AppDialog_class_info = _framework.AppDialog_class_info

def AppDialog____class_destructor__(instance, is_array):
    return _framework.AppDialog____class_destructor__(instance, is_array)
AppDialog____class_destructor__ = _framework.AppDialog____class_destructor__

class AppProgressBar(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppProgressBar, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppProgressBar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_AppProgressBar
    __del__ = lambda self: None

    def get_application(self):
        return _framework.AppProgressBar_get_application(self)

    def is_valid_context(self):
        return _framework.AppProgressBar_is_valid_context(self)

    def get_text(self):
        return _framework.AppProgressBar_get_text(self)

    def get_task_name(self):
        return _framework.AppProgressBar_get_task_name(self)

    def get_global_value(self):
        return _framework.AppProgressBar_get_global_value(self)

    def get_value(self):
        return _framework.AppProgressBar_get_value(self)

    def set_value(self, value):
        return _framework.AppProgressBar_set_value(self, value)

    def set_increment(self, increment):
        return _framework.AppProgressBar_set_increment(self, increment)

    def increment(self, *args):
        return _framework.AppProgressBar_increment(self, *args)

    def set_step_count(self, step_count):
        return _framework.AppProgressBar_set_step_count(self, step_count)

    def step(self, i):
        return _framework.AppProgressBar_step(self, i)

    def begin_task(self, *args):
        return _framework.AppProgressBar_begin_task(self, *args)

    def end_task(self):
        return _framework.AppProgressBar_end_task(self)

    def start(self):
        return _framework.AppProgressBar_start(self)

    def finish(self):
        return _framework.AppProgressBar_finish(self)

    def abort(self):
        return _framework.AppProgressBar_abort(self)

    def destroy(self):
        return _framework.AppProgressBar_destroy(self)

    def is_abortable(self):
        return _framework.AppProgressBar_is_abortable(self)

    def must_abort(self):
        return _framework.AppProgressBar_must_abort(self)

    def is_destroyed(self):
        return _framework.AppProgressBar_is_destroyed(self)

    def keep_in_history(self):
        return _framework.AppProgressBar_keep_in_history(self)

    def detach_from_main_thread(self):
        return _framework.AppProgressBar_detach_from_main_thread(self)

    def get_duration(self):
        return _framework.AppProgressBar_get_duration(self)
    if _newclass:
        class_info = staticmethod(_framework.AppProgressBar_class_info)
    else:
        class_info = _framework.AppProgressBar_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppProgressBar____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppProgressBar____class_destructor__

    def get_class_info(self):
        return _framework.AppProgressBar_get_class_info(self)
AppProgressBar_swigregister = _framework.AppProgressBar_swigregister
AppProgressBar_swigregister(AppProgressBar)

def AppProgressBar_class_info():
    return _framework.AppProgressBar_class_info()
AppProgressBar_class_info = _framework.AppProgressBar_class_info

def AppProgressBar____class_destructor__(instance, is_array):
    return _framework.AppProgressBar____class_destructor__(instance, is_array)
AppProgressBar____class_destructor__ = _framework.AppProgressBar____class_destructor__

class OfApp(AppBase):
    __swig_setmethods__ = {}
    for _s in [AppBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfApp, name, value)
    __swig_getmethods__ = {}
    for _s in [AppBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfApp, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_OfApp
    __del__ = lambda self: None

    def get_factory(self, *args):
        return _framework.OfApp_get_factory(self, *args)

    def get_config(self, *args):
        return _framework.OfApp_get_config(self, *args)

    def populate_prefs(self):
        return _framework.OfApp_populate_prefs(self)

    def register_directive(self, name, callback):
        return _framework.OfApp_register_directive(self, name, callback)

    def init_directives(self):
        return _framework.OfApp_init_directives(self)

    def add_directive(self, entry, item):
        return _framework.OfApp_add_directive(self, entry, item)

    def execute_directives(self):
        return _framework.OfApp_execute_directives(self)

    def run_single_script(self, *args):
        return _framework.OfApp_run_single_script(self, *args)

    def get_language_from_extension(self, extension):
        return _framework.OfApp_get_language_from_extension(self, extension)

    def get_scripting_engine_from_extension(self, extension):
        return _framework.OfApp_get_scripting_engine_from_extension(self, extension)

    def get_channel_manager(self, *args):
        return _framework.OfApp_get_channel_manager(self, *args)

    def append_custom_variable(self, name, value, replace_existing):
        return _framework.OfApp_append_custom_variable(self, name, value, replace_existing)

    def remove_custom_variable(self, name):
        return _framework.OfApp_remove_custom_variable(self, name)

    def clear_custom_variables(self):
        return _framework.OfApp_clear_custom_variables(self)

    def load_custom_variables(self, filename):
        return _framework.OfApp_load_custom_variables(self, filename)

    def save_custom_variables(self, filename):
        return _framework.OfApp_save_custom_variables(self, filename)

    def quit(self):
        return _framework.OfApp_quit(self)

    def get_current_project_filename(self):
        return _framework.OfApp_get_current_project_filename(self)

    def clear_context_overrides(self, context):
        return _framework.OfApp_clear_context_overrides(self, context)

    def cleanup_context_overrides(self, context):
        return _framework.OfApp_cleanup_context_overrides(self, context)

    def create_override_set(self, context):
        return _framework.OfApp_create_override_set(self, context)

    def get_current_project_version(self):
        return _framework.OfApp_get_current_project_version(self)

    def get_current_object_framework_version(self):
        return _framework.OfApp_get_current_object_framework_version(self)
    if _newclass:
        get_project_header = staticmethod(_framework.OfApp_get_project_header)
    else:
        get_project_header = _framework.OfApp_get_project_header
    if _newclass:
        process_expressions = staticmethod(_framework.OfApp_process_expressions)
    else:
        process_expressions = _framework.OfApp_process_expressions

    def get_command_manager(self, *args):
        return _framework.OfApp_get_command_manager(self, *args)

    def echo_command(self, value):
        return _framework.OfApp_echo_command(self, value)

    def create_batch_command(self):
        return _framework.OfApp_create_batch_command(self)

    def exec_batch_command(self, cmd):
        return _framework.OfApp_exec_batch_command(self, cmd)
    if _newclass:
        get_batch_command = staticmethod(_framework.OfApp_get_batch_command)
    else:
        get_batch_command = _framework.OfApp_get_batch_command

    def get_history_size(self):
        return _framework.OfApp_get_history_size(self)

    def set_history_size(self, size):
        return _framework.OfApp_set_history_size(self, size)

    def get_attr_auto_localize(self):
        return _framework.OfApp_get_attr_auto_localize(self)

    def set_attr_auto_localize(self, value):
        return _framework.OfApp_set_attr_auto_localize(self, value)
    REFERENCE_LOADING_MODE_AUTOMATIC = _framework.OfApp_REFERENCE_LOADING_MODE_AUTOMATIC
    REFERENCE_LOADING_MODE_MANUAL = _framework.OfApp_REFERENCE_LOADING_MODE_MANUAL

    def set_reference_loading_mode(self, mode):
        return _framework.OfApp_set_reference_loading_mode(self, mode)

    def get_reference_loading_mode(self):
        return _framework.OfApp_get_reference_loading_mode(self)

    def get_alembic_log_level(self):
        return _framework.OfApp_get_alembic_log_level(self)

    def set_alembic_log_level(self, level):
        return _framework.OfApp_set_alembic_log_level(self, level)

    def get_alembic_instance_detection(self):
        return _framework.OfApp_get_alembic_instance_detection(self)

    def set_alembic_instance_detection(self, detection):
        return _framework.OfApp_set_alembic_instance_detection(self, detection)

    def check_filter_matches(self, *args):
        return _framework.OfApp_check_filter_matches(self, *args)

    def get_matching_objects(self, *args):
        return _framework.OfApp_get_matching_objects(self, *args)

    def get_matching_contexts(self, result, filter, base_context):
        return _framework.OfApp_get_matching_contexts(self, result, filter, base_context)

    def is_visible_object(self, obj):
        return _framework.OfApp_is_visible_object(self, obj)

    def get_attr_value_manager(self):
        return _framework.OfApp_get_attr_value_manager(self)

    def get_nodal_position_manager(self, *args):
        return _framework.OfApp_get_nodal_position_manager(self, *args)

    def add_progress_update_callback(self, data, on_progress_update):
        return _framework.OfApp_add_progress_update_callback(self, data, on_progress_update)

    def remove_progress_update_callback(self, data):
        return _framework.OfApp_remove_progress_update_callback(self, data)

    def update_progress_receivers(self, object_name, value):
        return _framework.OfApp_update_progress_receivers(self, object_name, value)

    def get_memory_size(self):
        return _framework.OfApp_get_memory_size(self)

    def declare_of_commands(self):
        return _framework.OfApp_declare_of_commands(self)

    def add_cam_attribute(self, *args):
        return _framework.OfApp_add_cam_attribute(self, *args)

    def edit_cam_attribute(self, *args):
        return _framework.OfApp_edit_cam_attribute(self, *args)

    def remove_cam_attribute(self, attr_paths, requester=None):
        return _framework.OfApp_remove_cam_attribute(self, attr_paths, requester)

    def remove_all_cam_attributes(self, context_paths, requester=None):
        return _framework.OfApp_remove_all_cam_attributes(self, context_paths, requester)

    def edit_cam_rule(self, *args):
        return _framework.OfApp_edit_cam_rule(self, *args)

    def disable_cam(self, attr_paths, disabled, requester=None):
        return _framework.OfApp_disable_cam(self, attr_paths, disabled, requester)

    def save_cam_set(self, *args):
        return _framework.OfApp_save_cam_set(self, *args)

    def load_cam_set(self, context_paths, cam_set, requester=None):
        return _framework.OfApp_load_cam_set(self, context_paths, cam_set, requester)

    def retrieve_context(self, *args):
        return _framework.OfApp_retrieve_context(self, *args)

    def retrieve_object(self, *args):
        return _framework.OfApp_retrieve_object(self, *args)

    def get_scripting_command(self, command_id, arguments):
        return _framework.OfApp_get_scripting_command(self, command_id, arguments)

    def remove_items_from_selection(self, contexts, objects):
        return _framework.OfApp_remove_items_from_selection(self, contexts, objects)
    if _newclass:
        class_info = staticmethod(_framework.OfApp_class_info)
    else:
        class_info = _framework.OfApp_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfApp____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfApp____class_destructor__

    def get_class_info(self):
        return _framework.OfApp_get_class_info(self)

    def add_custom_variable(self, *args):
        return _framework.OfApp_add_custom_variable(self, *args)
OfApp_swigregister = _framework.OfApp_swigregister
OfApp_swigregister(OfApp)
EVT_ID_APPLICATION_COMMAND_REGISTER = cvar.EVT_ID_APPLICATION_COMMAND_REGISTER
EVT_ID_APPLICATION_COMMAND_UNREGISTER = cvar.EVT_ID_APPLICATION_COMMAND_UNREGISTER
EVT_ID_APPLICATION_PROJECT_LOAD_START = cvar.EVT_ID_APPLICATION_PROJECT_LOAD_START
EVT_ID_APPLICATION_PROJECT_LOAD_END = cvar.EVT_ID_APPLICATION_PROJECT_LOAD_END
EVT_ID_APPLICATION_PROJECT_SAVE_START = cvar.EVT_ID_APPLICATION_PROJECT_SAVE_START
EVT_ID_APPLICATION_PROJECT_SAVE_END = cvar.EVT_ID_APPLICATION_PROJECT_SAVE_END

def OfApp_get_project_header():
    return _framework.OfApp_get_project_header()
OfApp_get_project_header = _framework.OfApp_get_project_header

def OfApp_process_expressions():
    return _framework.OfApp_process_expressions()
OfApp_process_expressions = _framework.OfApp_process_expressions

def OfApp_get_batch_command(data, args):
    return _framework.OfApp_get_batch_command(data, args)
OfApp_get_batch_command = _framework.OfApp_get_batch_command

def OfApp_class_info():
    return _framework.OfApp_class_info()
OfApp_class_info = _framework.OfApp_class_info

def OfApp____class_destructor__(instance, is_array):
    return _framework.OfApp____class_destructor__(instance, is_array)
OfApp____class_destructor__ = _framework.OfApp____class_destructor__

class ProgressUpdateReceiver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressUpdateReceiver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressUpdateReceiver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["initialized"] = _framework.ProgressUpdateReceiver_initialized_set
    __swig_getmethods__["initialized"] = _framework.ProgressUpdateReceiver_initialized_get
    if _newclass:
        initialized = _swig_property(_framework.ProgressUpdateReceiver_initialized_get, _framework.ProgressUpdateReceiver_initialized_set)
    __swig_setmethods__["progress_update"] = _framework.ProgressUpdateReceiver_progress_update_set
    __swig_getmethods__["progress_update"] = _framework.ProgressUpdateReceiver_progress_update_get
    if _newclass:
        progress_update = _swig_property(_framework.ProgressUpdateReceiver_progress_update_get, _framework.ProgressUpdateReceiver_progress_update_set)
    __swig_setmethods__["data"] = _framework.ProgressUpdateReceiver_data_set
    __swig_getmethods__["data"] = _framework.ProgressUpdateReceiver_data_get
    if _newclass:
        data = _swig_property(_framework.ProgressUpdateReceiver_data_get, _framework.ProgressUpdateReceiver_data_set)

    def __init__(self):
        this = _framework.new_ProgressUpdateReceiver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ProgressUpdateReceiver
    __del__ = lambda self: None
ProgressUpdateReceiver_swigregister = _framework.ProgressUpdateReceiver_swigregister
ProgressUpdateReceiver_swigregister(ProgressUpdateReceiver)

class AppUnits(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppUnits, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppUnits, name)
    __repr__ = _swig_repr
    MODE_APPLICATION = _framework.AppUnits_MODE_APPLICATION
    MODE_PROJECT = _framework.AppUnits_MODE_PROJECT
    if _newclass:
        get_mode_name = staticmethod(_framework.AppUnits_get_mode_name)
    else:
        get_mode_name = _framework.AppUnits_get_mode_name
    __swig_setmethods__["unit_tag_in_preferences"] = _framework.AppUnits_unit_tag_in_preferences_set
    __swig_getmethods__["unit_tag_in_preferences"] = _framework.AppUnits_unit_tag_in_preferences_get
    if _newclass:
        unit_tag_in_preferences = _swig_property(_framework.AppUnits_unit_tag_in_preferences_get, _framework.AppUnits_unit_tag_in_preferences_set)

    def __init__(self, app, mode):
        this = _framework.new_AppUnits(app, mode)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        get_default_config_file_path = staticmethod(_framework.AppUnits_get_default_config_file_path)
    else:
        get_default_config_file_path = _framework.AppUnits_get_default_config_file_path

    def load_unit_config_file(self, filename, reset):
        return _framework.AppUnits_load_unit_config_file(self, filename, reset)

    def set_units_file_path(self, file):
        return _framework.AppUnits_set_units_file_path(self, file)

    def get_units_file_path(self):
        return _framework.AppUnits_get_units_file_path(self)

    def set_current_unit_system(self, type_name, system_name, send_event=True):
        return _framework.AppUnits_set_current_unit_system(self, type_name, system_name, send_event)

    def get_current_unit_system(self, type_name):
        return _framework.AppUnits_get_current_unit_system(self, type_name)

    def set_current_unit_base(self, type_name, system_name, unit_base, send_event=True):
        return _framework.AppUnits_set_current_unit_base(self, type_name, system_name, unit_base, send_event)

    def get_current_unit_base(self, type_name, system_name):
        return _framework.AppUnits_get_current_unit_base(self, type_name, system_name)

    def get_value_from_str_with_unit(self, *args):
        return _framework.AppUnits_get_value_from_str_with_unit(self, *args)

    def get_value_with_unit_from_value(self, *args):
        return _framework.AppUnits_get_value_with_unit_from_value(self, *args)

    def save_preferences(self, preferences):
        return _framework.AppUnits_save_preferences(self, preferences)

    def load_preferences(self, preferences, can_load_units_file=False):
        return _framework.AppUnits_load_preferences(self, preferences, can_load_units_file)

    def populate_preferences(self):
        return _framework.AppUnits_populate_preferences(self)

    def is_populating_preferences(self):
        return _framework.AppUnits_is_populating_preferences(self)

    def init_default_units(self):
        return _framework.AppUnits_init_default_units(self)

    def to_string_debug(self):
        return _framework.AppUnits_to_string_debug(self)

    def clarisse_units_preferences_change(self, obj, units_attr):
        return _framework.AppUnits_clarisse_units_preferences_change(self, obj, units_attr)

    def get_units_data(self):
        return _framework.AppUnits_get_units_data(self)

    def get_current_unit_names(self):
        return _framework.AppUnits_get_current_unit_names(self)

    def copy_from(self, app_unit):
        return _framework.AppUnits_copy_from(self, app_unit)

    def refresh(self):
        return _framework.AppUnits_refresh(self)
    __swig_destroy__ = _framework.delete_AppUnits
    __del__ = lambda self: None
AppUnits_swigregister = _framework.AppUnits_swigregister
AppUnits_swigregister(AppUnits)
EVT_ID_APPLICATION_UNIT_SYSTEM_CHANGE = cvar.EVT_ID_APPLICATION_UNIT_SYSTEM_CHANGE

def AppUnits_get_mode_name(mode):
    return _framework.AppUnits_get_mode_name(mode)
AppUnits_get_mode_name = _framework.AppUnits_get_mode_name

def AppUnits_get_default_config_file_path():
    return _framework.AppUnits_get_default_config_file_path()
AppUnits_get_default_config_file_path = _framework.AppUnits_get_default_config_file_path

class AppLogMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppLogMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppLogMessage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["msg"] = _framework.AppLogMessage_msg_set
    __swig_getmethods__["msg"] = _framework.AppLogMessage_msg_get
    if _newclass:
        msg = _swig_property(_framework.AppLogMessage_msg_get, _framework.AppLogMessage_msg_set)
    __swig_setmethods__["level"] = _framework.AppLogMessage_level_set
    __swig_getmethods__["level"] = _framework.AppLogMessage_level_get
    if _newclass:
        level = _swig_property(_framework.AppLogMessage_level_get, _framework.AppLogMessage_level_set)
    __swig_destroy__ = _framework.delete_AppLogMessage
    __del__ = lambda self: None
AppLogMessage_swigregister = _framework.AppLogMessage_swigregister
AppLogMessage_swigregister(AppLogMessage)
EVT_ID_APPLICATION_TEMP_FOLDER_CHANGED = cvar.EVT_ID_APPLICATION_TEMP_FOLDER_CHANGED
EVT_ID_APPLICATION_FRAME_RANGE_CHANGED = cvar.EVT_ID_APPLICATION_FRAME_RANGE_CHANGED
EVT_ID_APPLICATION_PREVIZ_LIGHTING_CHANGED = cvar.EVT_ID_APPLICATION_PREVIZ_LIGHTING_CHANGED
EVT_ID_APPLICATION_RUN = cvar.EVT_ID_APPLICATION_RUN
EVT_ID_APPLICATION_START = cvar.EVT_ID_APPLICATION_START
EVT_ID_APPLICATION_QUIT = cvar.EVT_ID_APPLICATION_QUIT
EVT_ID_APPLICATION_ON_QUIT = cvar.EVT_ID_APPLICATION_ON_QUIT
EVT_ID_APPLICATION_MAIN_MENU_CHANGED = cvar.EVT_ID_APPLICATION_MAIN_MENU_CHANGED
EVT_ID_APPLICATION_MODULES_LOADED = cvar.EVT_ID_APPLICATION_MODULES_LOADED
EVT_ID_APPLICATION_PREFERENCES_LOADED = cvar.EVT_ID_APPLICATION_PREFERENCES_LOADED
EVT_ID_APPLICATION_SYNC_PROJECT_PREFERENCES_FROM_APP = cvar.EVT_ID_APPLICATION_SYNC_PROJECT_PREFERENCES_FROM_APP

class AppDirective(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppDirective, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppDirective, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["entry"] = _framework.AppDirective_entry_set
    __swig_getmethods__["entry"] = _framework.AppDirective_entry_get
    if _newclass:
        entry = _swig_property(_framework.AppDirective_entry_get, _framework.AppDirective_entry_set)
    __swig_setmethods__["item"] = _framework.AppDirective_item_set
    __swig_getmethods__["item"] = _framework.AppDirective_item_get
    if _newclass:
        item = _swig_property(_framework.AppDirective_item_get, _framework.AppDirective_item_set)
    __swig_destroy__ = _framework.delete_AppDirective
    __del__ = lambda self: None
AppDirective_swigregister = _framework.AppDirective_swigregister
AppDirective_swigregister(AppDirective)

class AppObject(OfApp):
    __swig_setmethods__ = {}
    for _s in [OfApp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OfApp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    MAX_WAIT_TIME = _framework.AppObject_MAX_WAIT_TIME
    __swig_destroy__ = _framework.delete_AppObject
    __del__ = lambda self: None

    def get_config(self, *args):
        return _framework.AppObject_get_config(self, *args)

    def set_preferences(self):
        return _framework.AppObject_set_preferences(self)

    def populate_prefs(self):
        return _framework.AppObject_populate_prefs(self)

    def populate_project_prefs(self):
        return _framework.AppObject_populate_project_prefs(self)

    def get_factory(self, *args):
        return _framework.AppObject_get_factory(self, *args)

    def get_resources(self, *args):
        return _framework.AppObject_get_resources(self, *args)

    def scan_modules(self, *args):
        return _framework.AppObject_scan_modules(self, *args)

    def get_application_header(self):
        return _framework.AppObject_get_application_header(self)

    def get_selection(self, *args):
        return _framework.AppObject_get_selection(self, *args)

    def unload_resources(self, *args):
        return _framework.AppObject_unload_resources(self, *args)

    def remove_items_from_selection(self, contexts, objects):
        return _framework.AppObject_remove_items_from_selection(self, contexts, objects)

    def get_current_frame(self):
        return _framework.AppObject_get_current_frame(self)

    def get_current_time(self):
        return _framework.AppObject_get_current_time(self)

    def get_evaluation_frame(self):
        return _framework.AppObject_get_evaluation_frame(self)

    def get_evaluation_time(self):
        return _framework.AppObject_get_evaluation_time(self)

    def get_evaluation_quality(self):
        return _framework.AppObject_get_evaluation_quality(self)

    def get_builtin_commands(self):
        return _framework.AppObject_get_builtin_commands(self)

    def clear_project(self):
        return _framework.AppObject_clear_project(self)

    def new_project(self):
        return _framework.AppObject_new_project(self)

    def load_startup_scene(self):
        return _framework.AppObject_load_startup_scene(self)

    def load_project(self, filename):
        return _framework.AppObject_load_project(self, filename)

    def save_project(self, filename, autosave=False):
        return _framework.AppObject_save_project(self, filename, autosave)

    def export_context_as_project(self, filename, root, include_dependencies=False):
        return _framework.AppObject_export_context_as_project(self, filename, root, include_dependencies)

    def preload_project_preferences(self, preferences):
        return _framework.AppObject_preload_project_preferences(self, preferences)

    def load_project_preferences(self, preferences):
        return _framework.AppObject_load_project_preferences(self, preferences)

    def save_project_preferences(self, preferences):
        return _framework.AppObject_save_project_preferences(self, preferences)

    def get_startup_scene_filename(self):
        return _framework.AppObject_get_startup_scene_filename(self)

    def get_prefs(self, *args):
        return _framework.AppObject_get_prefs(self, *args)

    def get_use_in_place_parenting(self):
        return _framework.AppObject_get_use_in_place_parenting(self)

    def set_use_in_place_parenting(self, enable):
        return _framework.AppObject_set_use_in_place_parenting(self, enable)

    def get_language_from_extension(self, extension):
        return _framework.AppObject_get_language_from_extension(self, extension)

    def get_scripting_engine_from_extension(self, extension):
        return _framework.AppObject_get_scripting_engine_from_extension(self, extension)

    def register_scripting_engine(self, engine_obj):
        return _framework.AppObject_register_scripting_engine(self, engine_obj)

    def retrieve_scripting_engine(self, engine_type):
        return _framework.AppObject_retrieve_scripting_engine(self, engine_type)

    def run_single_script(self, *args):
        return _framework.AppObject_run_single_script(self, *args)

    def request_temp_sub_folder(self, requested_name, usable_path):
        return _framework.AppObject_request_temp_sub_folder(self, requested_name, usable_path)

    def get_temp_folder(self):
        return _framework.AppObject_get_temp_folder(self)

    def set_temp_folder(self, temp_folder):
        return _framework.AppObject_set_temp_folder(self, temp_folder)

    def is_managing_temp_folders(self):
        return _framework.AppObject_is_managing_temp_folders(self)

    def set_managing_temp_folders(self, is_managing):
        return _framework.AppObject_set_managing_temp_folders(self, is_managing)

    def get_search_paths(self):
        return _framework.AppObject_get_search_paths(self)

    def set_search_paths(self, paths):
        return _framework.AppObject_set_search_paths(self, paths)

    def get_working_context(self):
        return _framework.AppObject_get_working_context(self)

    def on_selection_change(self, group, slot):
        return _framework.AppObject_on_selection_change(self, group, slot)

    def on_working_context_change(self, slot, context):
        return _framework.AppObject_on_working_context_change(self, slot, context)

    def get_log_history(self, log_msg):
        return _framework.AppObject_get_log_history(self, log_msg)

    def set_enable_file_logging(self, enable):
        return _framework.AppObject_set_enable_file_logging(self, enable)

    def set_log_file_path(self, file_path):
        return _framework.AppObject_set_log_file_path(self, file_path)

    def set_specified_log_file(self, file_path):
        return _framework.AppObject_set_specified_log_file(self, file_path)

    def set_log_file_policy(self, policy):
        return _framework.AppObject_set_log_file_policy(self, policy)

    def set_enable_verbose_log_file(self, enable):
        return _framework.AppObject_set_enable_verbose_log_file(self, enable)

    def set_previz_light_group(self, group):
        return _framework.AppObject_set_previz_light_group(self, group)

    def get_enable_file_logging(self):
        return _framework.AppObject_get_enable_file_logging(self)

    def get_log_file_path(self):
        return _framework.AppObject_get_log_file_path(self)

    def get_specified_log_file(self):
        return _framework.AppObject_get_specified_log_file(self)

    def get_log_file_policy(self):
        return _framework.AppObject_get_log_file_policy(self)

    def get_previz_lights(self):
        return _framework.AppObject_get_previz_lights(self)

    def get_previz_light_group(self):
        return _framework.AppObject_get_previz_light_group(self)

    def get_selection_history_size(self):
        return _framework.AppObject_get_selection_history_size(self)

    def set_selection_history_size(self, size):
        return _framework.AppObject_set_selection_history_size(self, size)

    def set_current_frame_range(self, range_min, range_max):
        return _framework.AppObject_set_current_frame_range(self, range_min, range_max)

    def set_current_frame_range_min(self, range_min):
        return _framework.AppObject_set_current_frame_range_min(self, range_min)

    def set_current_frame_range_max(self, range_max):
        return _framework.AppObject_set_current_frame_range_max(self, range_max)

    def get_current_frame_range(self):
        return _framework.AppObject_get_current_frame_range(self)

    def add_evaluator(self, *args):
        return _framework.AppObject_add_evaluator(self, *args)

    def remove_evaluator(self, evaluator):
        return _framework.AppObject_remove_evaluator(self, evaluator)

    def stop_evaluation(self, blocking=False):
        return _framework.AppObject_stop_evaluation(self, blocking)

    def is_evaluating(self):
        return _framework.AppObject_is_evaluating(self)

    def must_stop_evaluation(self):
        return _framework.AppObject_must_stop_evaluation(self)

    def is_evaluation_interrupted(self):
        return _framework.AppObject_is_evaluation_interrupted(self)

    def clear_evaluation(self):
        return _framework.AppObject_clear_evaluation(self)

    def get_minimum_eval_time(self):
        return _framework.AppObject_get_minimum_eval_time(self)

    def set_minimum_eval_time(self, time_ms, fps):
        return _framework.AppObject_set_minimum_eval_time(self, time_ms, fps)

    def is_minimum_time_elapsed(self):
        return _framework.AppObject_is_minimum_time_elapsed(self)

    def add_to_event_loop(self, cbk, data=None):
        return _framework.AppObject_add_to_event_loop(self, cbk, data)

    def remove_from_event_loop(self, cbk, data=None):
        return _framework.AppObject_remove_from_event_loop(self, cbk, data)

    def add_timer(self, time_ms, cbk, data=None, update=True):
        return _framework.AppObject_add_timer(self, time_ms, cbk, data, update)

    def repeat_timer(self, time_ms, cbk, data=None):
        return _framework.AppObject_repeat_timer(self, time_ms, cbk, data)

    def remove_timer(self, cbk, data=None):
        return _framework.AppObject_remove_timer(self, cbk, data)

    def run(self):
        return _framework.AppObject_run(self)

    def run_thread(self, thread):
        return _framework.AppObject_run_thread(self, thread)

    def is_started(self):
        return _framework.AppObject_is_started(self)

    def is_running(self):
        return _framework.AppObject_is_running(self)

    def is_quitting(self):
        return _framework.AppObject_is_quitting(self)

    def quit(self):
        return _framework.AppObject_quit(self)

    def check_for_events(self):
        return _framework.AppObject_check_for_events(self)

    def wait_for_events(self):
        return _framework.AppObject_wait_for_events(self)

    def get_statistics(self, stats):
        return _framework.AppObject_get_statistics(self, stats)

    def get_project_statistics_as_string(self):
        return _framework.AppObject_get_project_statistics_as_string(self)

    def get_OIIO_statistics_as_string(self, log_level):
        return _framework.AppObject_get_OIIO_statistics_as_string(self, log_level)

    def get_all_statistics_as_string(self):
        return _framework.AppObject_get_all_statistics_as_string(self)

    def add_statistic_logger(self, name, log_callback, log_data):
        return _framework.AppObject_add_statistic_logger(self, name, log_callback, log_data)

    def remove_statistic_logger(self, name):
        return _framework.AppObject_remove_statistic_logger(self, name)

    def get_statistics_log(self, name):
        return _framework.AppObject_get_statistics_log(self, name)

    def get_OIIO_statistics_log_level(self):
        return _framework.AppObject_get_OIIO_statistics_log_level(self)

    def set_OIIO_statistics_log_level(self, value):
        return _framework.AppObject_set_OIIO_statistics_log_level(self, value)

    def clear_texture_cache(self):
        return _framework.AppObject_clear_texture_cache(self)

    def get_current_context(self):
        return _framework.AppObject_get_current_context(self)

    def ls(self, *args):
        return _framework.AppObject_ls(self, *args)

    def cd(self, *args):
        return _framework.AppObject_cd(self, *args)

    def init_directives(self):
        return _framework.AppObject_init_directives(self)

    def add_directive(self, entry, item):
        return _framework.AppObject_add_directive(self, entry, item)

    def execute_directives(self):
        return _framework.AppObject_execute_directives(self)

    def set_texture_cache(self, size):
        return _framework.AppObject_set_texture_cache(self, size)

    def inspect(self, *args):
        return _framework.AppObject_inspect(self, *args)

    def get_argc(self):
        return _framework.AppObject_get_argc(self)

    def get_argv(self):
        return _framework.AppObject_get_argv(self)

    def get_envp(self):
        return _framework.AppObject_get_envp(self)

    def set_current_project_filename(self, filename):
        return _framework.AppObject_set_current_project_filename(self, filename)

    def get_current_project_filename(self):
        return _framework.AppObject_get_current_project_filename(self)

    def get_current_project_version(self):
        return _framework.AppObject_get_current_project_version(self)

    def get_current_object_framework_version(self):
        return _framework.AppObject_get_current_object_framework_version(self)

    def get_current_project_dependencies(self):
        return _framework.AppObject_get_current_project_dependencies(self)

    def import_project(self, *args):
        return _framework.AppObject_import_project(self, *args)

    def set_import_variables_mode(self, mode):
        return _framework.AppObject_set_import_variables_mode(self, mode)

    def get_import_variables_mode(self):
        return _framework.AppObject_get_import_variables_mode(self)

    def set_import_aov_mode(self, mode):
        return _framework.AppObject_set_import_aov_mode(self, mode)

    def get_import_aov_mode(self):
        return _framework.AppObject_get_import_aov_mode(self)

    def enable_command_port(self, active=True):
        return _framework.AppObject_enable_command_port(self, active)

    def is_command_port_active(self):
        return _framework.AppObject_is_command_port_active(self)

    def get_command_port(self):
        return _framework.AppObject_get_command_port(self)

    def set_command_port(self, port):
        return _framework.AppObject_set_command_port(self, port)

    def get_shelf(self):
        return _framework.AppObject_get_shelf(self)

    def reset_default_shelf(self, remove_all=True, use_env_config=True):
        return _framework.AppObject_reset_default_shelf(self, remove_all, use_env_config)

    def clear_context_overrides(self, context):
        return _framework.AppObject_clear_context_overrides(self, context)

    def cleanup_context_overrides(self, context):
        return _framework.AppObject_cleanup_context_overrides(self, context)

    def create_override_set(self, context):
        return _framework.AppObject_create_override_set(self, context)

    def set_wait_mode(self, mode):
        return _framework.AppObject_set_wait_mode(self, mode)

    def get_copy_buffer(self):
        return _framework.AppObject_get_copy_buffer(self)

    def check_filter_matches(self, *args):
        return _framework.AppObject_check_filter_matches(self, *args)

    def get_matching_objects(self, *args):
        return _framework.AppObject_get_matching_objects(self, *args)

    def get_matching_contexts(self, result, filter, base_context):
        return _framework.AppObject_get_matching_contexts(self, result, filter, base_context)

    def is_experimental_features_enabled(self):
        return _framework.AppObject_is_experimental_features_enabled(self)

    def is_advanced_features_enabled(self):
        return _framework.AppObject_is_advanced_features_enabled(self)

    def init_config(self, check_migration_config_file, force_migration=False):
        return _framework.AppObject_init_config(self, check_migration_config_file, force_migration)

    def save_config(self):
        return _framework.AppObject_save_config(self)

    def get_units(self, *args):
        return _framework.AppObject_get_units(self, *args)

    def get_memory_size(self):
        return _framework.AppObject_get_memory_size(self)

    def get_main_menu(self):
        return _framework.AppObject_get_main_menu(self)
    if _newclass:
        get_legacy_config_file_for_migration = staticmethod(_framework.AppObject_get_legacy_config_file_for_migration)
    else:
        get_legacy_config_file_for_migration = _framework.AppObject_get_legacy_config_file_for_migration

    def check_migration_config_file(self, forced_import):
        return _framework.AppObject_check_migration_config_file(self, forced_import)

    def initialize_builtin_commands(self):
        return _framework.AppObject_initialize_builtin_commands(self)

    def project_has_directives(self):
        return _framework.AppObject_project_has_directives(self)

    def copy(self, *args):
        return _framework.AppObject_copy(self, *args)

    def cut(self, items_names, requester=None):
        return _framework.AppObject_cut(self, items_names, requester)

    def paste(self, *args):
        return _framework.AppObject_paste(self, *args)

    def get_scripting_command(self, command_id, arguments):
        return _framework.AppObject_get_scripting_command(self, command_id, arguments)

    def get_default_integration_model(self):
        return _framework.AppObject_get_default_integration_model(self)
    if _newclass:
        initialize_previz_physical_lights = staticmethod(_framework.AppObject_initialize_previz_physical_lights)
    else:
        initialize_previz_physical_lights = _framework.AppObject_initialize_previz_physical_lights
    if _newclass:
        class_info = staticmethod(_framework.AppObject_class_info)
    else:
        class_info = _framework.AppObject_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppObject____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppObject____class_destructor__

    def get_class_info(self):
        return _framework.AppObject_get_class_info(self)

    def export_render_archive(self, filename):
        return _framework.AppObject_export_render_archive(self, filename)

    def __register_event_loop_wrapper__(self, callback):
        return _framework.AppObject___register_event_loop_wrapper__(self, callback)

    def add_to_event_loop_single(self, callback):
        if getattr(callback, '__call__') == None:
            raise TypeError('The specified callback isn\'t a function.')
        if callback.func_code.co_argcount != 1:
            raise TypeError('The specified callback prototype mismatch, expecting:\ndef method(self).')
        self.__register_event_loop_wrapper__(callback)

AppObject_swigregister = _framework.AppObject_swigregister
AppObject_swigregister(AppObject)

def AppObject_get_legacy_config_file_for_migration(filename, create_folder):
    return _framework.AppObject_get_legacy_config_file_for_migration(filename, create_folder)
AppObject_get_legacy_config_file_for_migration = _framework.AppObject_get_legacy_config_file_for_migration

def AppObject_initialize_previz_physical_lights(previz_light_set):
    return _framework.AppObject_initialize_previz_physical_lights(previz_light_set)
AppObject_initialize_previz_physical_lights = _framework.AppObject_initialize_previz_physical_lights

def AppObject_class_info():
    return _framework.AppObject_class_info()
AppObject_class_info = _framework.AppObject_class_info

def AppObject____class_destructor__(instance, is_array):
    return _framework.AppObject____class_destructor__(instance, is_array)
AppObject____class_destructor__ = _framework.AppObject____class_destructor__

class AppConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppConfig, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_AppConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppConfig
    __del__ = lambda self: None

    def init_config(self, *args):
        return _framework.AppConfig_init_config(self, *args)

    def read(self, *args):
        return _framework.AppConfig_read(self, *args)

    def save(self, *args):
        return _framework.AppConfig_save(self, *args)

    def write(self, filename):
        return _framework.AppConfig_write(self, filename)

    def get_value_count(self, entry_name):
        return _framework.AppConfig_get_value_count(self, entry_name)

    def reset_entry(self, entry_name):
        return _framework.AppConfig_reset_entry(self, entry_name)

    def is_value_bool(self, entry_name, index=0):
        return _framework.AppConfig_is_value_bool(self, entry_name, index)

    def is_value_int(self, entry_name, index=0):
        return _framework.AppConfig_is_value_int(self, entry_name, index)

    def is_value_double(self, entry_name, index=0):
        return _framework.AppConfig_is_value_double(self, entry_name, index)

    def is_value_string(self, entry_name, index=0):
        return _framework.AppConfig_is_value_string(self, entry_name, index)

    def is_value_local(self, entry_name):
        return _framework.AppConfig_is_value_local(self, entry_name)

    def get_bool(self, entry_name, index=0):
        return _framework.AppConfig_get_bool(self, entry_name, index)

    def get_int(self, entry_name, index=0):
        return _framework.AppConfig_get_int(self, entry_name, index)

    def get_double(self, entry_name, index=0):
        return _framework.AppConfig_get_double(self, entry_name, index)

    def get_string(self, entry_name, index=0):
        return _framework.AppConfig_get_string(self, entry_name, index)

    def set_bool(self, entry_name, value, index=0):
        return _framework.AppConfig_set_bool(self, entry_name, value, index)

    def set_int(self, entry_name, value, index=0):
        return _framework.AppConfig_set_int(self, entry_name, value, index)

    def set_double(self, entry_name, value, index=0):
        return _framework.AppConfig_set_double(self, entry_name, value, index)

    def set_string(self, entry_name, value, index=0):
        return _framework.AppConfig_set_string(self, entry_name, value, index)

    def set_local_bool(self, entry_name, value, index=0):
        return _framework.AppConfig_set_local_bool(self, entry_name, value, index)

    def set_local_int(self, entry_name, value, index=0):
        return _framework.AppConfig_set_local_int(self, entry_name, value, index)

    def set_local_double(self, entry_name, value, index=0):
        return _framework.AppConfig_set_local_double(self, entry_name, value, index)

    def set_local_string(self, entry_name, value, index=0):
        return _framework.AppConfig_set_local_string(self, entry_name, value, index)

    def get_entry(self, entry_name):
        return _framework.AppConfig_get_entry(self, entry_name)

    def get_file_entry(self, entry_name):
        return _framework.AppConfig_get_file_entry(self, entry_name)

    def create_file_entry(self, entry_name):
        return _framework.AppConfig_create_file_entry(self, entry_name)

    def is_built_in(self, entry_name):
        return _framework.AppConfig_is_built_in(self, entry_name)

    def get_config_file_full_path(self):
        return _framework.AppConfig_get_config_file_full_path(self)
    if _newclass:
        get_app_prefs_root_dir = staticmethod(_framework.AppConfig_get_app_prefs_root_dir)
    else:
        get_app_prefs_root_dir = _framework.AppConfig_get_app_prefs_root_dir

    def get_app_prefs_path(self):
        return _framework.AppConfig_get_app_prefs_path(self)

    def get_app_prefs_default_filename(self):
        return _framework.AppConfig_get_app_prefs_default_filename(self)

    def post_load_config(self, app):
        return _framework.AppConfig_post_load_config(self, app)

    def get_value_type(self, entry_name):
        return _framework.AppConfig_get_value_type(self, entry_name)

    def get_entry_names(self, *args):
        return _framework.AppConfig_get_entry_names(self, *args)

    def set_config_readonly(self, value):
        return _framework.AppConfig_set_config_readonly(self, value)

    def is_config_readonly(self):
        return _framework.AppConfig_is_config_readonly(self)
AppConfig_swigregister = _framework.AppConfig_swigregister
AppConfig_swigregister(AppConfig)

def AppConfig_get_app_prefs_root_dir():
    return _framework.AppConfig_get_app_prefs_root_dir()
AppConfig_get_app_prefs_root_dir = _framework.AppConfig_get_app_prefs_root_dir

class AppShelf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppShelf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppShelf, name)
    __repr__ = _swig_repr

    def __init__(self, app):
        this = _framework.new_AppShelf(app)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        get_default_config_file = staticmethod(_framework.AppShelf_get_default_config_file)
    else:
        get_default_config_file = _framework.AppShelf_get_default_config_file
    if _newclass:
        get_user_config_filename = staticmethod(_framework.AppShelf_get_user_config_filename)
    else:
        get_user_config_filename = _framework.AppShelf_get_user_config_filename

    def get_shelf_config_file(self):
        return _framework.AppShelf_get_shelf_config_file(self)

    def get_shelf_script_path(self):
        return _framework.AppShelf_get_shelf_script_path(self)

    def get_shelf_icon_path(self):
        return _framework.AppShelf_get_shelf_icon_path(self)
    if _newclass:
        get_new_unique_id = staticmethod(_framework.AppShelf_get_new_unique_id)
    else:
        get_new_unique_id = _framework.AppShelf_get_new_unique_id
    ITEM_TYPE_BUILTIN = _framework.AppShelf_ITEM_TYPE_BUILTIN
    ITEM_TYPE_USER = _framework.AppShelf_ITEM_TYPE_USER
    ITEM_TYPE_VOLATILE = _framework.AppShelf_ITEM_TYPE_VOLATILE

    def add_separator(self, slot, category):
        return _framework.AppShelf_add_separator(self, slot, category)
    LOCATION_NONE = _framework.AppShelf_LOCATION_NONE
    LOCATION_WIDGET = _framework.AppShelf_LOCATION_WIDGET
    LOCATION_APPLICATION = _framework.AppShelf_LOCATION_APPLICATION

    def remove_all_items(self, *args):
        return _framework.AppShelf_remove_all_items(self, *args)

    def get_items(self, slot, category):
        return _framework.AppShelf_get_items(self, slot, category)

    def get_categories(self, slot):
        return _framework.AppShelf_get_categories(self, slot)

    def set_item(self, id, shelf_item):
        return _framework.AppShelf_set_item(self, id, shelf_item)

    def add_item(self, *args):
        return _framework.AppShelf_add_item(self, *args)

    def insert_item(self, shelf_item, index=-1):
        return _framework.AppShelf_insert_item(self, shelf_item, index)

    def move_item(self, shelf_item, slot_dst, category_dst, position_dst=-1):
        return _framework.AppShelf_move_item(self, shelf_item, slot_dst, category_dst, position_dst)

    def move_category(self, category, slot_scr, slot_dst, position_dst=-1):
        return _framework.AppShelf_move_category(self, category, slot_scr, slot_dst, position_dst)

    def remove_item(self, id):
        return _framework.AppShelf_remove_item(self, id)

    def get_slot_count(self):
        return _framework.AppShelf_get_slot_count(self)

    def is_empty(self):
        return _framework.AppShelf_is_empty(self)

    def load_file(self, *args):
        return _framework.AppShelf_load_file(self, *args)

    def load_entry(self, *args):
        return _framework.AppShelf_load_entry(self, *args)

    def save_entry(self, shelf_entry, type):
        return _framework.AppShelf_save_entry(self, shelf_entry, type)

    def save_file(self, filename, type):
        return _framework.AppShelf_save_file(self, filename, type)

    def is_app_toolbar_shown(self):
        return _framework.AppShelf_is_app_toolbar_shown(self)

    def get_app_toolbar_slot(self):
        return _framework.AppShelf_get_app_toolbar_slot(self)

    def get_app_toolbar_category(self):
        return _framework.AppShelf_get_app_toolbar_category(self)

    def get_app_toolbar_style(self):
        return _framework.AppShelf_get_app_toolbar_style(self)

    def get_app_toolbar_view_mode(self):
        return _framework.AppShelf_get_app_toolbar_view_mode(self)

    def set_app_toolbar_shown(self, show):
        return _framework.AppShelf_set_app_toolbar_shown(self, show)

    def set_app_toolbar_slot(self, slot):
        return _framework.AppShelf_set_app_toolbar_slot(self, slot)

    def set_app_toolbar_category(self, category):
        return _framework.AppShelf_set_app_toolbar_category(self, category)

    def set_app_toolbar_style(self, style):
        return _framework.AppShelf_set_app_toolbar_style(self, style)

    def set_app_toolbar_view_mode(self, view_mode):
        return _framework.AppShelf_set_app_toolbar_view_mode(self, view_mode)
    __swig_destroy__ = _framework.delete_AppShelf
    __del__ = lambda self: None
AppShelf_swigregister = _framework.AppShelf_swigregister
AppShelf_swigregister(AppShelf)
EVT_ID_APPLICATION_SHELF_ITEM_ADDED = cvar.EVT_ID_APPLICATION_SHELF_ITEM_ADDED
EVT_ID_APPLICATION_SHELF_ITEM_REMOVED = cvar.EVT_ID_APPLICATION_SHELF_ITEM_REMOVED
EVT_ID_APPLICATION_SHELF_ITEM_CHANGED = cvar.EVT_ID_APPLICATION_SHELF_ITEM_CHANGED
EVT_ID_APPLICATION_SHELF_ITEM_MOVED = cvar.EVT_ID_APPLICATION_SHELF_ITEM_MOVED
EVT_ID_APPLICATION_SHELF_CATEGORY_MOVED = cvar.EVT_ID_APPLICATION_SHELF_CATEGORY_MOVED
EVT_ID_APPLICATION_SHELF_CATEGORY_REMOVED = cvar.EVT_ID_APPLICATION_SHELF_CATEGORY_REMOVED

def AppShelf_get_default_config_file():
    return _framework.AppShelf_get_default_config_file()
AppShelf_get_default_config_file = _framework.AppShelf_get_default_config_file

def AppShelf_get_user_config_filename():
    return _framework.AppShelf_get_user_config_filename()
AppShelf_get_user_config_filename = _framework.AppShelf_get_user_config_filename

def AppShelf_get_new_unique_id():
    return _framework.AppShelf_get_new_unique_id()
AppShelf_get_new_unique_id = _framework.AppShelf_get_new_unique_id

class AppShelfCategory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppShelfCategory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppShelfCategory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_AppShelfCategory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_name(self):
        return _framework.AppShelfCategory_get_name(self)

    def set_name(self, category):
        return _framework.AppShelfCategory_set_name(self, category)

    def get_shelf_items(self):
        return _framework.AppShelfCategory_get_shelf_items(self)

    def get_shelf_items_const(self):
        return _framework.AppShelfCategory_get_shelf_items_const(self)

    def __eq__(self, item):

        if not isinstance(obj, type(self)):
            return False


        return _framework.AppShelfCategory___eq__(self, item)


    def __ne__(self, item):
        return _framework.AppShelfCategory___ne__(self, item)

    def is_always_show(self):
        return _framework.AppShelfCategory_is_always_show(self)

    def set_always_show(self, value):
        return _framework.AppShelfCategory_set_always_show(self, value)
    __swig_destroy__ = _framework.delete_AppShelfCategory
    __del__ = lambda self: None
AppShelfCategory_swigregister = _framework.AppShelfCategory_swigregister
AppShelfCategory_swigregister(AppShelfCategory)

class AppShelfItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppShelfItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppShelfItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_AppShelfItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppShelfItem
    __del__ = lambda self: None

    def set_category(self, category):
        return _framework.AppShelfItem_set_category(self, category)

    def set_title(self, title):
        return _framework.AppShelfItem_set_title(self, title)

    def set_description(self, description):
        return _framework.AppShelfItem_set_description(self, description)

    def set_script_filename(self, filename):
        return _framework.AppShelfItem_set_script_filename(self, filename)

    def set_icon_filename(self, filename):
        return _framework.AppShelfItem_set_icon_filename(self, filename)

    def set_preset_icon(self, icon_name):
        return _framework.AppShelfItem_set_preset_icon(self, icon_name)

    def set_is_separator(self, enable):
        return _framework.AppShelfItem_set_is_separator(self, enable)

    def set_slot(self, slot):
        return _framework.AppShelfItem_set_slot(self, slot)

    def set_id(self, id):
        return _framework.AppShelfItem_set_id(self, id)

    def set_type(self, type):
        return _framework.AppShelfItem_set_type(self, type)

    def set_working_directory(self, working_directory):
        return _framework.AppShelfItem_set_working_directory(self, working_directory)

    def get_category(self):
        return _framework.AppShelfItem_get_category(self)

    def get_title(self):
        return _framework.AppShelfItem_get_title(self)

    def get_description(self):
        return _framework.AppShelfItem_get_description(self)

    def get_script_filename(self):
        return _framework.AppShelfItem_get_script_filename(self)

    def get_icon_filename(self):
        return _framework.AppShelfItem_get_icon_filename(self)

    def get_preset_icon(self):
        return _framework.AppShelfItem_get_preset_icon(self)

    def is_separator(self):
        return _framework.AppShelfItem_is_separator(self)

    def get_slot(self):
        return _framework.AppShelfItem_get_slot(self)

    def get_id(self):
        return _framework.AppShelfItem_get_id(self)

    def get_type(self):
        return _framework.AppShelfItem_get_type(self)

    def is_readonly(self):
        return _framework.AppShelfItem_is_readonly(self)

    def get_working_directory(self):
        return _framework.AppShelfItem_get_working_directory(self)

    def load_entry(self, shelf_items, type, m_app):
        return _framework.AppShelfItem_load_entry(self, shelf_items, type, m_app)

    def save_entry(self, shelf_items):
        return _framework.AppShelfItem_save_entry(self, shelf_items)

    def __eq__(self, item):

        if not isinstance(obj, type(self)):
            return False


        return _framework.AppShelfItem___eq__(self, item)


    def __ne__(self, item):
        return _framework.AppShelfItem___ne__(self, item)

    def get_script_fullpath(self, app):
        return _framework.AppShelfItem_get_script_fullpath(self, app)

    def get_icon_fullpath(self, app):
        return _framework.AppShelfItem_get_icon_fullpath(self, app)
AppShelfItem_swigregister = _framework.AppShelfItem_swigregister
AppShelfItem_swigregister(AppShelfItem)

NB_SLOTS = _framework.NB_SLOTS
class AppSelection(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppSelection, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppSelection, name)
    __repr__ = _swig_repr
    if _newclass:
        get_global_group_label = staticmethod(_framework.AppSelection_get_global_group_label)
    else:
        get_global_group_label = _framework.AppSelection_get_global_group_label
    if _newclass:
        get_global_slot_label = staticmethod(_framework.AppSelection_get_global_slot_label)
    else:
        get_global_slot_label = _framework.AppSelection_get_global_slot_label
    if _newclass:
        get_local_slot_label = staticmethod(_framework.AppSelection_get_local_slot_label)
    else:
        get_local_slot_label = _framework.AppSelection_get_local_slot_label

    def __init__(self, app):
        this = _framework.new_AppSelection(app)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppSelection
    __del__ = lambda self: None

    def load_settings(self, settings):
        return _framework.AppSelection_load_settings(self, settings)

    def save_settings(self, settings):
        return _framework.AppSelection_save_settings(self, settings)

    def propagate_selections(self):
        return _framework.AppSelection_propagate_selections(self)

    def get_application(self):
        return _framework.AppSelection_get_application(self)

    def reset(self):
        return _framework.AppSelection_reset(self)

    def remove_items(self, *args):
        return _framework.AppSelection_remove_items(self, *args)

    def get_count(self, *args):
        return _framework.AppSelection_get_count(self, *args)

    def add_item(self, group, item, slot):
        return _framework.AppSelection_add_item(self, group, item, slot)

    def remove_item(self, *args):
        return _framework.AppSelection_remove_item(self, *args)

    def remove_all(self, *args):
        return _framework.AppSelection_remove_all(self, *args)

    def select_all(self, *args):
        return _framework.AppSelection_select_all(self, *args)

    def deselect_all(self, *args):
        return _framework.AppSelection_deselect_all(self, *args)

    def set_selection(self, *args):
        return _framework.AppSelection_set_selection(self, *args)

    def set_selection_stealth(self, group, slot, selection):
        return _framework.AppSelection_set_selection_stealth(self, group, slot, selection)

    def set_all_slots_selection(self, *args):
        return _framework.AppSelection_set_all_slots_selection(self, *args)

    def get_is_slot_selection_empty(self, slot):
        return _framework.AppSelection_get_is_slot_selection_empty(self, slot)

    def clear_slot_selection(self, slot):
        return _framework.AppSelection_clear_slot_selection(self, slot)

    def get_selection_index(self, *args):
        return _framework.AppSelection_get_selection_index(self, *args)

    def is_selected(self, *args):
        return _framework.AppSelection_is_selected(self, *args)

    def get_objects(self, *args):
        return _framework.AppSelection_get_objects(self, *args)

    def get_contexts(self, *args):
        return _framework.AppSelection_get_contexts(self, *args)

    def list_groups(self, groups):
        return _framework.AppSelection_list_groups(self, groups)

    def list_slots(self, slots):
        return _framework.AppSelection_list_slots(self, slots)

    def get_first_slot(self):
        return _framework.AppSelection_get_first_slot(self)

    def get_current_changing_group(self):
        return _framework.AppSelection_get_current_changing_group(self)

    def get_current_changing_slot(self):
        return _framework.AppSelection_get_current_changing_slot(self)

    def set_slot_working_context(self, slot, of_context):
        return _framework.AppSelection_set_slot_working_context(self, slot, of_context)

    def get_slot_working_context(self, slot):
        return _framework.AppSelection_get_slot_working_context(self, slot)

    def get_slot_exists(self, slot_name):
        return _framework.AppSelection_get_slot_exists(self, slot_name)
    if _newclass:
        class_info = staticmethod(_framework.AppSelection_class_info)
    else:
        class_info = _framework.AppSelection_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppSelection____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppSelection____class_destructor__

    def get_class_info(self):
        return _framework.AppSelection_get_class_info(self)

    def get_item(self, *args):
        return _framework.AppSelection_get_item(self, *args)

    def get_items(self, *args):
        return _framework.AppSelection_get_items(self, *args)
AppSelection_swigregister = _framework.AppSelection_swigregister
AppSelection_swigregister(AppSelection)
EVT_ID_SELECTION_CHANGED = cvar.EVT_ID_SELECTION_CHANGED
EVT_ID_WORKING_CONTEXT_CHANGED = cvar.EVT_ID_WORKING_CONTEXT_CHANGED
EVT_ID_SELECTION_RESET = cvar.EVT_ID_SELECTION_RESET

def AppSelection_get_global_group_label():
    return _framework.AppSelection_get_global_group_label()
AppSelection_get_global_group_label = _framework.AppSelection_get_global_group_label

def AppSelection_get_global_slot_label():
    return _framework.AppSelection_get_global_slot_label()
AppSelection_get_global_slot_label = _framework.AppSelection_get_global_slot_label

def AppSelection_get_local_slot_label():
    return _framework.AppSelection_get_local_slot_label()
AppSelection_get_local_slot_label = _framework.AppSelection_get_local_slot_label

def AppSelection_class_info():
    return _framework.AppSelection_class_info()
AppSelection_class_info = _framework.AppSelection_class_info

def AppSelection____class_destructor__(instance, is_array):
    return _framework.AppSelection____class_destructor__(instance, is_array)
AppSelection____class_destructor__ = _framework.AppSelection____class_destructor__

class AppBuiltinCommands(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppBuiltinCommands, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppBuiltinCommands, name)
    __repr__ = _swig_repr

    def __init__(self, application, cmd_manager):
        this = _framework.new_AppBuiltinCommands(application, cmd_manager)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def declare_curve_commands(self):
        return _framework.AppBuiltinCommands_declare_curve_commands(self)

    def declare_expression_commands(self):
        return _framework.AppBuiltinCommands_declare_expression_commands(self)

    def declare_shading_layer_commands(self):
        return _framework.AppBuiltinCommands_declare_shading_layer_commands(self)

    def declare_isolate_commands(self):
        return _framework.AppBuiltinCommands_declare_isolate_commands(self)

    def declare_flag_commands(self, app):
        return _framework.AppBuiltinCommands_declare_flag_commands(self, app)

    def declare_move_copy_commands(self):
        return _framework.AppBuiltinCommands_declare_move_copy_commands(self)

    def declare_particle_commands(self):
        return _framework.AppBuiltinCommands_declare_particle_commands(self)
    __swig_destroy__ = _framework.delete_AppBuiltinCommands
    __del__ = lambda self: None

    def set_current_time(self, time, old_time, requester=None):
        return _framework.AppBuiltinCommands_set_current_time(self, time, old_time, requester)

    def set_current_frame(self, frame, old_frame, requester=None):
        return _framework.AppBuiltinCommands_set_current_frame(self, frame, old_frame, requester)

    def set_fps(self, value, requester=None):
        return _framework.AppBuiltinCommands_set_fps(self, value, requester)

    def set_current_frame_range(self, min, max, requester=None):
        return _framework.AppBuiltinCommands_set_current_frame_range(self, min, max, requester)

    def set_current_frame_range_min(self, min, requester=None):
        return _framework.AppBuiltinCommands_set_current_frame_range_min(self, min, requester)

    def set_current_frame_range_max(self, max, requester=None):
        return _framework.AppBuiltinCommands_set_current_frame_range_max(self, max, requester)

    def goto_next_keyframe(self, requester=None):
        return _framework.AppBuiltinCommands_goto_next_keyframe(self, requester)

    def goto_previous_keyframe(self, requester=None):
        return _framework.AppBuiltinCommands_goto_previous_keyframe(self, requester)

    def set_parent_in_place(self, value, requester=None):
        return _framework.AppBuiltinCommands_set_parent_in_place(self, value, requester)

    def create_object(self, *args):
        return _framework.AppBuiltinCommands_create_object(self, *args)

    def create_reference(self, *args):
        return _framework.AppBuiltinCommands_create_reference(self, *args)

    def create_texture(self, *args):
        return _framework.AppBuiltinCommands_create_texture(self, *args)

    def create_group(self, *args):
        return _framework.AppBuiltinCommands_create_group(self, *args)

    def create_context(self, *args):
        return _framework.AppBuiltinCommands_create_context(self, *args)

    def instantiate(self, *args):
        return _framework.AppBuiltinCommands_instantiate(self, *args)

    def delete_selection(self, requester=None):
        return _framework.AppBuiltinCommands_delete_selection(self, requester)

    def reset_attributes(self, attributes, requester=None):
        return _framework.AppBuiltinCommands_reset_attributes(self, attributes, requester)

    def revert_attributes(self, attributes, requester=None):
        return _framework.AppBuiltinCommands_revert_attributes(self, attributes, requester)

    def revert_items_overrides(self, items, requester=None):
        return _framework.AppBuiltinCommands_revert_items_overrides(self, items, requester)

    def revert_sub_items_overrides(self, items, requester=None):
        return _framework.AppBuiltinCommands_revert_sub_items_overrides(self, items, requester)

    def activate_shading_variable(self, attributes, values, requester=None):
        return _framework.AppBuiltinCommands_activate_shading_variable(self, attributes, values, requester)

    def bind_to_shading_variable(self, attributes, values, requester=None):
        return _framework.AppBuiltinCommands_bind_to_shading_variable(self, attributes, values, requester)

    def unbind_shading_variable(self, attributes, requester=None):
        return _framework.AppBuiltinCommands_unbind_shading_variable(self, attributes, requester)

    def set_value(self, *args):
        return _framework.AppBuiltinCommands_set_value(self, *args)

    def set_value_disabled(self, *args):
        return _framework.AppBuiltinCommands_set_value_disabled(self, *args)

    def paste_attr_value(self, *args):
        return _framework.AppBuiltinCommands_paste_attr_value(self, *args)

    def add_value(self, *args):
        return _framework.AppBuiltinCommands_add_value(self, *args)

    def set_curve(self, attr_paths, types, positions, values, requester=None):
        return _framework.AppBuiltinCommands_set_curve(self, attr_paths, types, positions, values, requester)

    def add_curve_value(self, attr_paths, types, positions, values, requester=None):
        return _framework.AppBuiltinCommands_add_curve_value(self, attr_paths, types, positions, values, requester)

    def remove_curve_value(self, attr_paths, key_ids, requester=None):
        return _framework.AppBuiltinCommands_remove_curve_value(self, attr_paths, key_ids, requester)

    def set_curve_key_type(self, attr_paths, serial, requester=None):
        return _framework.AppBuiltinCommands_set_curve_key_type(self, attr_paths, serial, requester)

    def set_curve_key_value(self, attr_paths, values, key_ids, requester=None):
        return _framework.AppBuiltinCommands_set_curve_key_value(self, attr_paths, values, key_ids, requester)

    def set_curve_key_position(self, attr_paths, positions, key_ids, requester=None):
        return _framework.AppBuiltinCommands_set_curve_key_position(self, attr_paths, positions, key_ids, requester)

    def move_curve_value(self, attr_paths, serial, requester=None):
        return _framework.AppBuiltinCommands_move_curve_value(self, attr_paths, serial, requester)

    def add_to_group(self, *args):
        return _framework.AppBuiltinCommands_add_to_group(self, *args)

    def move_value(self, attr_path, arg3, to, requester=None):
        return _framework.AppBuiltinCommands_move_value(self, attr_path, arg3, to, requester)

    def permute_values(self, attr_paths, permutations, requester=None):
        return _framework.AppBuiltinCommands_permute_values(self, attr_paths, permutations, requester)

    def remove_value(self, *args):
        return _framework.AppBuiltinCommands_remove_value(self, *args)

    def remove_all_values(self, *args):
        return _framework.AppBuiltinCommands_remove_all_values(self, *args)

    def set_value_count(self, *args):
        return _framework.AppBuiltinCommands_set_value_count(self, *args)

    def set_texture(self, *args):
        return _framework.AppBuiltinCommands_set_texture(self, *args)

    def set_channel(self, *args):
        return _framework.AppBuiltinCommands_set_channel(self, *args)

    def set_key(self, *args):
        return _framework.AppBuiltinCommands_set_key(self, *args)

    def move_keys(self, attr_paths, indexes, times, values, undo_times, undo_values, requester):
        return _framework.AppBuiltinCommands_move_keys(self, attr_paths, indexes, times, values, undo_times, undo_values, requester)

    def set_keys_values(self, attr_paths, indexes, values, undo_values, requester):
        return _framework.AppBuiltinCommands_set_keys_values(self, attr_paths, indexes, values, undo_values, requester)

    def set_keys_type(self, attr_paths, indexes, type, requester):
        return _framework.AppBuiltinCommands_set_keys_type(self, attr_paths, indexes, type, requester)

    def set_keys_times(self, attr_path, indexes, times, undo_times, requester):
        return _framework.AppBuiltinCommands_set_keys_times(self, attr_path, indexes, times, undo_times, requester)

    def set_keys_tcb(self, attr_path, indexes, tcb_values, undo_tcb_values, requester):
        return _framework.AppBuiltinCommands_set_keys_tcb(self, attr_path, indexes, tcb_values, undo_tcb_values, requester)

    def set_key_tangents(self, attr_path, index, tangents_values, undo_tangents_values, requester):
        return _framework.AppBuiltinCommands_set_key_tangents(self, attr_path, index, tangents_values, undo_tangents_values, requester)

    def remove_key(self, *args):
        return _framework.AppBuiltinCommands_remove_key(self, *args)

    def remove_keys_at(self, attr_paths, time, requester=None):
        return _framework.AppBuiltinCommands_remove_keys_at(self, attr_paths, time, requester)

    def set_keys_property_values(self, *args):
        return _framework.AppBuiltinCommands_set_keys_property_values(self, *args)

    def remove_fcurve(self, *args):
        return _framework.AppBuiltinCommands_remove_fcurve(self, *args)

    def set_item_view_point(self, item, pos, rot, aim_distance, requester=None):
        return _framework.AppBuiltinCommands_set_item_view_point(self, item, pos, rot, aim_distance, requester)

    def add_shading_layer_rule(self, shading_layer, index, sl_params, requester=None):
        return _framework.AppBuiltinCommands_add_shading_layer_rule(self, shading_layer, index, sl_params, requester)

    def remove_shading_layer_rules(self, shading_layer, sl_rule_indexes, requester=None):
        return _framework.AppBuiltinCommands_remove_shading_layer_rules(self, shading_layer, sl_rule_indexes, requester)

    def set_shading_layer_rules_property(self, shading_layer, rule_indexes, property_name, property_values, requester=None):
        return _framework.AppBuiltinCommands_set_shading_layer_rules_property(self, shading_layer, rule_indexes, property_name, property_values, requester)

    def move_shading_layer_rules(self, shading_layer, indexes, move_delta, is_relative=True, requester=None):
        return _framework.AppBuiltinCommands_move_shading_layer_rules(self, shading_layer, indexes, move_delta, is_relative, requester)

    def trash_items(self, items_names, requester=None):
        return _framework.AppBuiltinCommands_trash_items(self, items_names, requester)

    def delete_items(self, items, requester=None):
        return _framework.AppBuiltinCommands_delete_items(self, items, requester)

    def delete_item(self, item, requester=None):
        return _framework.AppBuiltinCommands_delete_item(self, item, requester)

    def rename_item(self, *args):
        return _framework.AppBuiltinCommands_rename_item(self, *args)

    def group_items(self, items_names, target_path, requester=None):
        return _framework.AppBuiltinCommands_group_items(self, items_names, target_path, requester)
    COMBINE_ITEMS_PIVOT_BBOX = _framework.AppBuiltinCommands_COMBINE_ITEMS_PIVOT_BBOX
    COMBINE_ITEMS_PIVOT_GROUND = _framework.AppBuiltinCommands_COMBINE_ITEMS_PIVOT_GROUND
    COMBINE_ITEMS_PIVOT_ORIGIN = _framework.AppBuiltinCommands_COMBINE_ITEMS_PIVOT_ORIGIN
    COMBINE_ITEMS_PIVOT_CENTER = _framework.AppBuiltinCommands_COMBINE_ITEMS_PIVOT_CENTER
    COMBINE_ITEMS_PIVOT_MASTER = _framework.AppBuiltinCommands_COMBINE_ITEMS_PIVOT_MASTER
    COMBINE_ITEMS_PIVOT_COUNT = _framework.AppBuiltinCommands_COMBINE_ITEMS_PIVOT_COUNT
    if _newclass:
        get_combine_items_pivot_name = staticmethod(_framework.AppBuiltinCommands_get_combine_items_pivot_name)
    else:
        get_combine_items_pivot_name = _framework.AppBuiltinCommands_get_combine_items_pivot_name

    def combine_items(self, items, target_path, requester=None):
        return _framework.AppBuiltinCommands_combine_items(self, items, target_path, requester)

    def create_shading_layer_for_items(self, items, creation_node, target_path, requester=None):
        return _framework.AppBuiltinCommands_create_shading_layer_for_items(self, items, creation_node, target_path, requester)

    def make_local(self, item_names, requester=None):
        return _framework.AppBuiltinCommands_make_local(self, item_names, requester)

    def make_instance(self, item_names, source_name, requester=None):
        return _framework.AppBuiltinCommands_make_instance(self, item_names, source_name, requester)

    def paste_items(self, copy_buffer, select, context_path, selection_slot, requester=None):
        return _framework.AppBuiltinCommands_paste_items(self, copy_buffer, select, context_path, selection_slot, requester)

    def move_item_to(self, item, target, requester=None):
        return _framework.AppBuiltinCommands_move_item_to(self, item, target, requester)

    def copy_item_to(self, item, target, requester=None):
        return _framework.AppBuiltinCommands_copy_item_to(self, item, target, requester)

    def create_instance_to(self, item, target, requester=None):
        return _framework.AppBuiltinCommands_create_instance_to(self, item, target, requester)

    def move_items_to(self, items, target, requester=None):
        return _framework.AppBuiltinCommands_move_items_to(self, items, target, requester)

    def copy_items_to(self, items, target, requester=None):
        return _framework.AppBuiltinCommands_copy_items_to(self, items, target, requester)

    def create_instances_to(self, items, target, requester=None):
        return _framework.AppBuiltinCommands_create_instances_to(self, items, target, requester)

    def paint_instance(self, source, ctx, pos, rot, scl, requester=None):
        return _framework.AppBuiltinCommands_paint_instance(self, source, ctx, pos, rot, scl, requester)

    def drag_paint_instance(self, instance_name, previous_selection, source, ctx, requester=None):
        return _framework.AppBuiltinCommands_drag_paint_instance(self, instance_name, previous_selection, source, ctx, requester)

    def paint_copy(self, source, ctx, pos, rot, scl, requester=None):
        return _framework.AppBuiltinCommands_paint_copy(self, source, ctx, pos, rot, scl, requester)

    def drag_paint_copy(self, copy_name, previous_selection, source, ctx, requester=None):
        return _framework.AppBuiltinCommands_drag_paint_copy(self, copy_name, previous_selection, source, ctx, requester)

    def set_items_positions(self, items, positions, position_slot, requester=None):
        return _framework.AppBuiltinCommands_set_items_positions(self, items, positions, position_slot, requester)

    def set_item_position(self, item, position, position_slot, requester=None):
        return _framework.AppBuiltinCommands_set_item_position(self, item, position, position_slot, requester)

    def set_items_nodal_properties(self, objects, properties, slot, requester=None):
        return _framework.AppBuiltinCommands_set_items_nodal_properties(self, objects, properties, slot, requester)

    def localize_attrs(self, attr_paths, flag, requester=None):
        return _framework.AppBuiltinCommands_localize_attrs(self, attr_paths, flag, requester)

    def localize_attrs_in(self, object, attrs, path, requester=None):
        return _framework.AppBuiltinCommands_localize_attrs_in(self, object, attrs, path, requester)

    def mute_local_value_attrs(self, attr_paths, flag, requester=None):
        return _framework.AppBuiltinCommands_mute_local_value_attrs(self, attr_paths, flag, requester)

    def disable_attrs(self, attr_paths, disable, requester=None):
        return _framework.AppBuiltinCommands_disable_attrs(self, attr_paths, disable, requester)

    def lock_attrs(self, attr_paths, locked, requester=None):
        return _framework.AppBuiltinCommands_lock_attrs(self, attr_paths, locked, requester)

    def lock_attr_values(self, attr_paths, value_indices, locked, requester=None):
        return _framework.AppBuiltinCommands_lock_attr_values(self, attr_paths, value_indices, locked, requester)

    def center_objects_pivots(self, *args):
        return _framework.AppBuiltinCommands_center_objects_pivots(self, *args)

    def reset_objects_pivots(self, *args):
        return _framework.AppBuiltinCommands_reset_objects_pivots(self, *args)

    def remove_objects_offsets(self, objects, requester=None):
        return _framework.AppBuiltinCommands_remove_objects_offsets(self, objects, requester)

    def record_objects_offsets(self, objects, requester=None):
        return _framework.AppBuiltinCommands_record_objects_offsets(self, objects, requester)

    def inplace_set_objects_translation(self, objects, values, requester=None):
        return _framework.AppBuiltinCommands_inplace_set_objects_translation(self, objects, values, requester)

    def inplace_set_objects_rotation(self, objects, values, requester=None):
        return _framework.AppBuiltinCommands_inplace_set_objects_rotation(self, objects, values, requester)

    def inplace_set_objects_scaling(self, objects, values, requester=None):
        return _framework.AppBuiltinCommands_inplace_set_objects_scaling(self, objects, values, requester)

    def set_objects_local_transform(self, objects, values, requester=None):
        return _framework.AppBuiltinCommands_set_objects_local_transform(self, objects, values, requester)

    def set_objects_global_transform(self, objects, values, requester=None):
        return _framework.AppBuiltinCommands_set_objects_global_transform(self, objects, values, requester)

    def reset_objects_transforms(self, objects, requester=None):
        return _framework.AppBuiltinCommands_reset_objects_transforms(self, objects, requester)

    def set_objects_translation(self, objects, values, axis, requester=None):
        return _framework.AppBuiltinCommands_set_objects_translation(self, objects, values, axis, requester)

    def set_objects_scaling(self, objects, values, axis, requester=None):
        return _framework.AppBuiltinCommands_set_objects_scaling(self, objects, values, axis, requester)

    def set_objects_rotation(self, objects, values, axis, requester=None):
        return _framework.AppBuiltinCommands_set_objects_rotation(self, objects, values, axis, requester)

    def set_reference_filename(self, *args):
        return _framework.AppBuiltinCommands_set_reference_filename(self, *args)

    def remove_reference_filename(self, contexts, indices, requester=None):
        return _framework.AppBuiltinCommands_remove_reference_filename(self, contexts, indices, requester)

    def add_reference_filename(self, contexts, filenames, requester=None):
        return _framework.AppBuiltinCommands_add_reference_filename(self, contexts, filenames, requester)

    def permute_reference_filename(self, contexts, permutations, requester=None):
        return _framework.AppBuiltinCommands_permute_reference_filename(self, contexts, permutations, requester)

    def clear_context_overrides(self, context, requester=None):
        return _framework.AppBuiltinCommands_clear_context_overrides(self, context, requester)

    def cleanup_context_overrides(self, context, requester=None):
        return _framework.AppBuiltinCommands_cleanup_context_overrides(self, context, requester)

    def create_override_set(self, context, requester=None):
        return _framework.AppBuiltinCommands_create_override_set(self, context, requester)

    def make_local_context(self, *args):
        return _framework.AppBuiltinCommands_make_local_context(self, *args)

    def isolate(self, items_names, requester=None):
        return _framework.AppBuiltinCommands_isolate(self, items_names, requester)

    def isolate_more(self, items_names, requester=None):
        return _framework.AppBuiltinCommands_isolate_more(self, items_names, requester)

    def isolate_less(self, items_names, requester=None):
        return _framework.AppBuiltinCommands_isolate_less(self, items_names, requester)

    def isolate_swap(self, requester=None):
        return _framework.AppBuiltinCommands_isolate_swap(self, requester)

    def disable_item(self, item_full_name, requester=None):
        return _framework.AppBuiltinCommands_disable_item(self, item_full_name, requester)

    def disable_items(self, item_full_names, requester=None):
        return _framework.AppBuiltinCommands_disable_items(self, item_full_names, requester)

    def enable_item(self, item_full_name, requester=None):
        return _framework.AppBuiltinCommands_enable_item(self, item_full_name, requester)

    def enable_items(self, item_full_names, requester=None):
        return _framework.AppBuiltinCommands_enable_items(self, item_full_names, requester)

    def colortag_items(self, items_names, tag, requester=None):
        return _framework.AppBuiltinCommands_colortag_items(self, items_names, tag, requester)

    def comment_item(self, item, comment, requester=None):
        return _framework.AppBuiltinCommands_comment_item(self, item, comment, requester)

    def override_attrs(self, attr_paths, override_attr_path, requester=None):
        return _framework.AppBuiltinCommands_override_attrs(self, attr_paths, override_attr_path, requester)

    def clear_override_attrs(self, attr_paths, requester=None):
        return _framework.AppBuiltinCommands_clear_override_attrs(self, attr_paths, requester)

    def get_application(self):
        return _framework.AppBuiltinCommands_get_application(self)

    def get_command_manager(self):
        return _framework.AppBuiltinCommands_get_command_manager(self)
    if _newclass:
        is_context_writable = staticmethod(_framework.AppBuiltinCommands_is_context_writable)
    else:
        is_context_writable = _framework.AppBuiltinCommands_is_context_writable
    if _newclass:
        is_item_move_allowed = staticmethod(_framework.AppBuiltinCommands_is_item_move_allowed)
    else:
        is_item_move_allowed = _framework.AppBuiltinCommands_is_item_move_allowed
    if _newclass:
        is_item_copy_to_allowed = staticmethod(_framework.AppBuiltinCommands_is_item_copy_to_allowed)
    else:
        is_item_copy_to_allowed = _framework.AppBuiltinCommands_is_item_copy_to_allowed
    if _newclass:
        is_item_instantiate_allowed = staticmethod(_framework.AppBuiltinCommands_is_item_instantiate_allowed)
    else:
        is_item_instantiate_allowed = _framework.AppBuiltinCommands_is_item_instantiate_allowed

    def add_custom_attribute(self, *args):
        return _framework.AppBuiltinCommands_add_custom_attribute(self, *args)

    def edit_custom_attribute(self, *args):
        return _framework.AppBuiltinCommands_edit_custom_attribute(self, *args)

    def remove_custom_attribute(self, attr_paths, requester=None):
        return _framework.AppBuiltinCommands_remove_custom_attribute(self, attr_paths, requester)

    def set_expression(self, attr_names, expressions, requester=None):
        return _framework.AppBuiltinCommands_set_expression(self, attr_names, expressions, requester)

    def activate_expression(self, attr_names, enables, requester=None):
        return _framework.AppBuiltinCommands_activate_expression(self, attr_names, enables, requester)

    def clear_particles(self, items_names, requester=None):
        return _framework.AppBuiltinCommands_clear_particles(self, items_names, requester)

    def clear_particle(self, item_name, requester=None):
        return _framework.AppBuiltinCommands_clear_particle(self, item_name, requester)

    def bake_particles(self, items_names, target_path, requester=None):
        return _framework.AppBuiltinCommands_bake_particles(self, items_names, target_path, requester)

    def jitter_particles(self, items_names, variance, space, keep_sign, requester=None):
        return _framework.AppBuiltinCommands_jitter_particles(self, items_names, variance, space, keep_sign, requester)

    def jitter_particle(self, item_name, variance, space, keep_sign, requester=None):
        return _framework.AppBuiltinCommands_jitter_particle(self, item_name, variance, space, keep_sign, requester)
    if _newclass:
        class_info = staticmethod(_framework.AppBuiltinCommands_class_info)
    else:
        class_info = _framework.AppBuiltinCommands_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppBuiltinCommands____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppBuiltinCommands____class_destructor__

    def get_class_info(self):
        return _framework.AppBuiltinCommands_get_class_info(self)
AppBuiltinCommands_swigregister = _framework.AppBuiltinCommands_swigregister
AppBuiltinCommands_swigregister(AppBuiltinCommands)

def AppBuiltinCommands_get_combine_items_pivot_name(value):
    return _framework.AppBuiltinCommands_get_combine_items_pivot_name(value)
AppBuiltinCommands_get_combine_items_pivot_name = _framework.AppBuiltinCommands_get_combine_items_pivot_name

def AppBuiltinCommands_is_context_writable(context):
    return _framework.AppBuiltinCommands_is_context_writable(context)
AppBuiltinCommands_is_context_writable = _framework.AppBuiltinCommands_is_context_writable

def AppBuiltinCommands_is_item_move_allowed(item, destination_ctx):
    return _framework.AppBuiltinCommands_is_item_move_allowed(item, destination_ctx)
AppBuiltinCommands_is_item_move_allowed = _framework.AppBuiltinCommands_is_item_move_allowed

def AppBuiltinCommands_is_item_copy_to_allowed(item, destination_ctx, allow_in_parent_context=True):
    return _framework.AppBuiltinCommands_is_item_copy_to_allowed(item, destination_ctx, allow_in_parent_context)
AppBuiltinCommands_is_item_copy_to_allowed = _framework.AppBuiltinCommands_is_item_copy_to_allowed

def AppBuiltinCommands_is_item_instantiate_allowed(item, destination_ctx):
    return _framework.AppBuiltinCommands_is_item_instantiate_allowed(item, destination_ctx)
AppBuiltinCommands_is_item_instantiate_allowed = _framework.AppBuiltinCommands_is_item_instantiate_allowed

def AppBuiltinCommands_class_info():
    return _framework.AppBuiltinCommands_class_info()
AppBuiltinCommands_class_info = _framework.AppBuiltinCommands_class_info

def AppBuiltinCommands____class_destructor__(instance, is_array):
    return _framework.AppBuiltinCommands____class_destructor__(instance, is_array)
AppBuiltinCommands____class_destructor__ = _framework.AppBuiltinCommands____class_destructor__

PREFERENCES_FILE_VERSION_TOKEN = _framework.PREFERENCES_FILE_VERSION_TOKEN
PREFERENCES_FILE_VERSION = _framework.PREFERENCES_FILE_VERSION
class AppPreferences(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppPreferences, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppPreferences, name)
    __repr__ = _swig_repr
    VALUE_TYPE_BOOL = _framework.AppPreferences_VALUE_TYPE_BOOL
    VALUE_TYPE_LONG = _framework.AppPreferences_VALUE_TYPE_LONG
    VALUE_TYPE_DOUBLE = _framework.AppPreferences_VALUE_TYPE_DOUBLE
    VALUE_TYPE_STRING = _framework.AppPreferences_VALUE_TYPE_STRING
    VALUE_TYPE_UNKNOWN = _framework.AppPreferences_VALUE_TYPE_UNKNOWN
    if _newclass:
        get_value_type_name = staticmethod(_framework.AppPreferences_get_value_type_name)
    else:
        get_value_type_name = _framework.AppPreferences_get_value_type_name
    COLOR_DEPTH_RGB = _framework.AppPreferences_COLOR_DEPTH_RGB
    COLOR_DEPTH_RGBA = _framework.AppPreferences_COLOR_DEPTH_RGBA
    COLOR_DEPTH_L = _framework.AppPreferences_COLOR_DEPTH_L
    COLOR_DEPTH_LA = _framework.AppPreferences_COLOR_DEPTH_LA
    COLOR_DEPTH_UNKNOWN = _framework.AppPreferences_COLOR_DEPTH_UNKNOWN
    if _newclass:
        get_color_depth_name = staticmethod(_framework.AppPreferences_get_color_depth_name)
    else:
        get_color_depth_name = _framework.AppPreferences_get_color_depth_name
    MODE_APPLICATION = _framework.AppPreferences_MODE_APPLICATION
    MODE_PROJECT = _framework.AppPreferences_MODE_PROJECT
    if _newclass:
        get_mode_name = staticmethod(_framework.AppPreferences_get_mode_name)
    else:
        get_mode_name = _framework.AppPreferences_get_mode_name
    if _newclass:
        get_category_project_tag = staticmethod(_framework.AppPreferences_get_category_project_tag)
    else:
        get_category_project_tag = _framework.AppPreferences_get_category_project_tag

    def __init__(self, app, mode):
        this = _framework.new_AppPreferences(app, mode)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppPreferences
    __del__ = lambda self: None

    def get_mode(self):
        return _framework.AppPreferences_get_mode(self)

    def add_category(self, name):
        return _framework.AppPreferences_add_category(self, name)

    def add_bool(self, *args):
        return _framework.AppPreferences_add_bool(self, *args)

    def add_long(self, *args):
        return _framework.AppPreferences_add_long(self, *args)

    def add_double(self, *args):
        return _framework.AppPreferences_add_double(self, *args)

    def add_string(self, *args):
        return _framework.AppPreferences_add_string(self, *args)

    def add_open_file(self, *args):
        return _framework.AppPreferences_add_open_file(self, *args)

    def add_open_folder(self, *args):
        return _framework.AppPreferences_add_open_folder(self, *args)

    def add_save_file(self, *args):
        return _framework.AppPreferences_add_save_file(self, *args)

    def add_color(self, *args):
        return _framework.AppPreferences_add_color(self, *args)

    def set_bool_value(self, category, name, value):
        return _framework.AppPreferences_set_bool_value(self, category, name, value)

    def set_long_value(self, category, name, value):
        return _framework.AppPreferences_set_long_value(self, category, name, value)

    def set_double_value(self, category, name, value):
        return _framework.AppPreferences_set_double_value(self, category, name, value)

    def set_string_value(self, category, name, value):
        return _framework.AppPreferences_set_string_value(self, category, name, value)

    def set_color_value(self, category, name, value, index):
        return _framework.AppPreferences_set_color_value(self, category, name, value, index)

    def set_rgba_value(self, category, name, value):
        return _framework.AppPreferences_set_rgba_value(self, category, name, value)

    def set_preset_value(self, *args):
        return _framework.AppPreferences_set_preset_value(self, *args)

    def add_preset_value(self, category, name, title, value):
        return _framework.AppPreferences_add_preset_value(self, category, name, title, value)

    def set_numeric_range(self, category, name, min, max):
        return _framework.AppPreferences_set_numeric_range(self, category, name, min, max)

    def enable_range(self, category, name, value):
        return _framework.AppPreferences_enable_range(self, category, name, value)

    def set_numeric_ui_range(self, category, name, min, max):
        return _framework.AppPreferences_set_numeric_ui_range(self, category, name, min, max)

    def enable_ui_range(self, category, name, value):
        return _framework.AppPreferences_enable_ui_range(self, category, name, value)

    def set_read_only(self, category, name, value):
        return _framework.AppPreferences_set_read_only(self, category, name, value)

    def set_doc(self, category, name, text):
        return _framework.AppPreferences_set_doc(self, category, name, text)

    def set_hidden(self, category, name, value):
        return _framework.AppPreferences_set_hidden(self, category, name, value)

    def set_filename_extensions(self, category, name, extensions):
        return _framework.AppPreferences_set_filename_extensions(self, category, name, extensions)

    def set_saveable(self, category, name, flag):
        return _framework.AppPreferences_set_saveable(self, category, name, flag)

    def get_category(self, name):
        return _framework.AppPreferences_get_category(self, name)

    def get_item(self, category, name):
        return _framework.AppPreferences_get_item(self, category, name)

    def category_exists(self, *args):
        return _framework.AppPreferences_category_exists(self, *args)

    def item_exists(self, *args):
        return _framework.AppPreferences_item_exists(self, *args)

    def get_bool_value(self, category, name):
        return _framework.AppPreferences_get_bool_value(self, category, name)

    def get_long_value(self, category, name):
        return _framework.AppPreferences_get_long_value(self, category, name)

    def get_double_value(self, category, name):
        return _framework.AppPreferences_get_double_value(self, category, name)

    def get_string_value(self, category, name):
        return _framework.AppPreferences_get_string_value(self, category, name)

    def get_color_value(self, category, name, index):
        return _framework.AppPreferences_get_color_value(self, category, name, index)

    def get_preset_label(self, category, name, index):
        return _framework.AppPreferences_get_preset_label(self, category, name, index)

    def get_preset_value(self, category, name, index):
        return _framework.AppPreferences_get_preset_value(self, category, name, index)

    def get_preset_value_count(self, category, name):
        return _framework.AppPreferences_get_preset_value_count(self, category, name)

    def remove_all_presets(self, category, name):
        return _framework.AppPreferences_remove_all_presets(self, category, name)

    def add_value_validator(self, *args):
        return _framework.AppPreferences_add_value_validator(self, *args)

    def on_prefs_attribute_change(self, obj, event, data):
        return _framework.AppPreferences_on_prefs_attribute_change(self, obj, event, data)

    def connect_attrs_change(self, category, object_change_callback):
        return _framework.AppPreferences_connect_attrs_change(self, category, object_change_callback)

    def get_item_value_type(self, category, name):
        return _framework.AppPreferences_get_item_value_type(self, category, name)

    def remove_category(self, category, update_values_app_prefs=True):
        return _framework.AppPreferences_remove_category(self, category, update_values_app_prefs)

    def remove_all_category(self, update_values_from_app_prefs=True):
        return _framework.AppPreferences_remove_all_category(self, update_values_from_app_prefs)

    def is_asleep(self):
        return _framework.AppPreferences_is_asleep(self)

    def asleep(self):
        return _framework.AppPreferences_asleep(self)

    def awake(self):
        return _framework.AppPreferences_awake(self)
    if _newclass:
        sync_prefs = staticmethod(_framework.AppPreferences_sync_prefs)
    else:
        sync_prefs = _framework.AppPreferences_sync_prefs
AppPreferences_swigregister = _framework.AppPreferences_swigregister
AppPreferences_swigregister(AppPreferences)

def AppPreferences_get_value_type_name(type):
    return _framework.AppPreferences_get_value_type_name(type)
AppPreferences_get_value_type_name = _framework.AppPreferences_get_value_type_name

def AppPreferences_get_color_depth_name(depth):
    return _framework.AppPreferences_get_color_depth_name(depth)
AppPreferences_get_color_depth_name = _framework.AppPreferences_get_color_depth_name

def AppPreferences_get_mode_name(mode):
    return _framework.AppPreferences_get_mode_name(mode)
AppPreferences_get_mode_name = _framework.AppPreferences_get_mode_name

def AppPreferences_get_category_project_tag():
    return _framework.AppPreferences_get_category_project_tag()
AppPreferences_get_category_project_tag = _framework.AppPreferences_get_category_project_tag

def AppPreferences_sync_prefs(app, scr, dst, category_name):
    return _framework.AppPreferences_sync_prefs(app, scr, dst, category_name)
AppPreferences_sync_prefs = _framework.AppPreferences_sync_prefs

class AppCategoryPreferences(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppCategoryPreferences, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppCategoryPreferences, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_AppCategoryPreferences
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _framework.new_AppCategoryPreferences(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_name(self):
        return _framework.AppCategoryPreferences_get_name(self)

    def add_bool(self, *args):
        return _framework.AppCategoryPreferences_add_bool(self, *args)

    def add_long(self, *args):
        return _framework.AppCategoryPreferences_add_long(self, *args)

    def add_double(self, *args):
        return _framework.AppCategoryPreferences_add_double(self, *args)

    def add_string(self, *args):
        return _framework.AppCategoryPreferences_add_string(self, *args)

    def add_open_file(self, *args):
        return _framework.AppCategoryPreferences_add_open_file(self, *args)

    def add_open_folder(self, *args):
        return _framework.AppCategoryPreferences_add_open_folder(self, *args)

    def add_save_file(self, *args):
        return _framework.AppCategoryPreferences_add_save_file(self, *args)

    def add_color(self, *args):
        return _framework.AppCategoryPreferences_add_color(self, *args)

    def set_bool_value(self, item_name, value):
        return _framework.AppCategoryPreferences_set_bool_value(self, item_name, value)

    def set_long_value(self, item_name, value):
        return _framework.AppCategoryPreferences_set_long_value(self, item_name, value)

    def set_double_value(self, item_name, value):
        return _framework.AppCategoryPreferences_set_double_value(self, item_name, value)

    def set_string_value(self, item_name, value):
        return _framework.AppCategoryPreferences_set_string_value(self, item_name, value)

    def set_color_value(self, item_name, value, index):
        return _framework.AppCategoryPreferences_set_color_value(self, item_name, value, index)

    def set_rgba_value(self, item_name, rgba):
        return _framework.AppCategoryPreferences_set_rgba_value(self, item_name, rgba)

    def set_preset_value(self, item_name, str_value):
        return _framework.AppCategoryPreferences_set_preset_value(self, item_name, str_value)

    def get_bool_value(self, item_name):
        return _framework.AppCategoryPreferences_get_bool_value(self, item_name)

    def get_long_value(self, item_name):
        return _framework.AppCategoryPreferences_get_long_value(self, item_name)

    def get_double_value(self, item_name):
        return _framework.AppCategoryPreferences_get_double_value(self, item_name)

    def get_string_value(self, item_name):
        return _framework.AppCategoryPreferences_get_string_value(self, item_name)

    def get_color_value(self, item_name, index):
        return _framework.AppCategoryPreferences_get_color_value(self, item_name, index)

    def get_preset_label(self, item_name, index):
        return _framework.AppCategoryPreferences_get_preset_label(self, item_name, index)

    def get_preset_value(self, item_name, index):
        return _framework.AppCategoryPreferences_get_preset_value(self, item_name, index)

    def get_preset_value_count(self, item_name):
        return _framework.AppCategoryPreferences_get_preset_value_count(self, item_name)

    def remove_all_presets(self, item_name):
        return _framework.AppCategoryPreferences_remove_all_presets(self, item_name)

    def add_preset_value(self, item_name, title, value):
        return _framework.AppCategoryPreferences_add_preset_value(self, item_name, title, value)

    def set_numeric_range(self, item_name, min, max):
        return _framework.AppCategoryPreferences_set_numeric_range(self, item_name, min, max)

    def enable_range(self, item_name, value):
        return _framework.AppCategoryPreferences_enable_range(self, item_name, value)

    def set_numeric_ui_range(self, item_name, min, max):
        return _framework.AppCategoryPreferences_set_numeric_ui_range(self, item_name, min, max)

    def enable_ui_range(self, item_name, value):
        return _framework.AppCategoryPreferences_enable_ui_range(self, item_name, value)

    def set_read_only(self, item_name, value):
        return _framework.AppCategoryPreferences_set_read_only(self, item_name, value)

    def set_doc(self, item_name, text):
        return _framework.AppCategoryPreferences_set_doc(self, item_name, text)

    def set_hidden(self, *args):
        return _framework.AppCategoryPreferences_set_hidden(self, *args)

    def set_filename_extensions(self, item_name, extensions):
        return _framework.AppCategoryPreferences_set_filename_extensions(self, item_name, extensions)

    def set_saveable(self, *args):
        return _framework.AppCategoryPreferences_set_saveable(self, *args)

    def add_value_validator(self, *args):
        return _framework.AppCategoryPreferences_add_value_validator(self, *args)

    def get_item(self, name):
        return _framework.AppCategoryPreferences_get_item(self, name)

    def item_exists(self, *args):
        return _framework.AppCategoryPreferences_item_exists(self, *args)

    def connect_attrs_change(self, object_change_callback):
        return _framework.AppCategoryPreferences_connect_attrs_change(self, object_change_callback)

    def get_object_category_from_vars(self):
        return _framework.AppCategoryPreferences_get_object_category_from_vars(self)
    if _newclass:
        get_category_name = staticmethod(_framework.AppCategoryPreferences_get_category_name)
    else:
        get_category_name = _framework.AppCategoryPreferences_get_category_name
AppCategoryPreferences_swigregister = _framework.AppCategoryPreferences_swigregister
AppCategoryPreferences_swigregister(AppCategoryPreferences)

def AppCategoryPreferences_get_category_name(*args):
    return _framework.AppCategoryPreferences_get_category_name(*args)
AppCategoryPreferences_get_category_name = _framework.AppCategoryPreferences_get_category_name

class AppItemPreferences(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppItemPreferences, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppItemPreferences, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_AppItemPreferences
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _framework.new_AppItemPreferences(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_value_type(self):
        return _framework.AppItemPreferences_get_value_type(self)

    def get_category_name(self):
        return _framework.AppItemPreferences_get_category_name(self)

    def get_name(self):
        return _framework.AppItemPreferences_get_name(self)

    def get_bool_value(self):
        return _framework.AppItemPreferences_get_bool_value(self)

    def get_long_value(self):
        return _framework.AppItemPreferences_get_long_value(self)

    def get_double_value(self):
        return _framework.AppItemPreferences_get_double_value(self)

    def get_string_value(self):
        return _framework.AppItemPreferences_get_string_value(self)

    def get_color_value(self, index):
        return _framework.AppItemPreferences_get_color_value(self, index)

    def get_preset_label(self, index):
        return _framework.AppItemPreferences_get_preset_label(self, index)

    def get_preset_value(self, index):
        return _framework.AppItemPreferences_get_preset_value(self, index)

    def get_preset_value_count(self):
        return _framework.AppItemPreferences_get_preset_value_count(self)

    def remove_all_presets(self):
        return _framework.AppItemPreferences_remove_all_presets(self)

    def set_bool_value(self, value):
        return _framework.AppItemPreferences_set_bool_value(self, value)

    def set_long_value(self, value):
        return _framework.AppItemPreferences_set_long_value(self, value)

    def set_double_value(self, value):
        return _framework.AppItemPreferences_set_double_value(self, value)

    def set_string_value(self, value):
        return _framework.AppItemPreferences_set_string_value(self, value)

    def set_color_value(self, value, index):
        return _framework.AppItemPreferences_set_color_value(self, value, index)

    def set_rgba_value(self, rgba):
        return _framework.AppItemPreferences_set_rgba_value(self, rgba)

    def set_preset_value(self, str_value):
        return _framework.AppItemPreferences_set_preset_value(self, str_value)

    def add_preset_value(self, title, value):
        return _framework.AppItemPreferences_add_preset_value(self, title, value)

    def set_numeric_range(self, min, max):
        return _framework.AppItemPreferences_set_numeric_range(self, min, max)

    def enable_range(self, value):
        return _framework.AppItemPreferences_enable_range(self, value)

    def set_numeric_ui_range(self, min, max):
        return _framework.AppItemPreferences_set_numeric_ui_range(self, min, max)

    def enable_ui_range(self, value):
        return _framework.AppItemPreferences_enable_ui_range(self, value)

    def set_read_only(self, value):
        return _framework.AppItemPreferences_set_read_only(self, value)

    def set_doc(self, text):
        return _framework.AppItemPreferences_set_doc(self, text)

    def set_hidden(self, value):
        return _framework.AppItemPreferences_set_hidden(self, value)

    def set_filename_extensions(self, extensions):
        return _framework.AppItemPreferences_set_filename_extensions(self, extensions)

    def set_saveable(self, flag):
        return _framework.AppItemPreferences_set_saveable(self, flag)

    def add_value_validator(self, *args):
        return _framework.AppItemPreferences_add_value_validator(self, *args)

    def is_empty(self, *args):
        return _framework.AppItemPreferences_is_empty(self, *args)

    def get_category(self):
        return _framework.AppItemPreferences_get_category(self)

    def get_item_attribute_from_vars(self):
        return _framework.AppItemPreferences_get_item_attribute_from_vars(self)
AppItemPreferences_swigregister = _framework.AppItemPreferences_swigregister
AppItemPreferences_swigregister(AppItemPreferences)

class AppMainMenu(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppMainMenu, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppMainMenu, name)
    __repr__ = _swig_repr

    def __init__(self, app):
        this = _framework.new_AppMainMenu(app)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppMainMenu
    __del__ = lambda self: None

    def add_command_as_script(self, *args):
        return _framework.AppMainMenu_add_command_as_script(self, *args)

    def add_command(self, *args):
        return _framework.AppMainMenu_add_command(self, *args)

    def add_show_callback(self, *args):
        return _framework.AppMainMenu_add_show_callback(self, *args)

    def remove_command(self, menu_path):
        return _framework.AppMainMenu_remove_command(self, menu_path)

    def remove_all_commands(self, *args):
        return _framework.AppMainMenu_remove_all_commands(self, *args)

    def exec_command(self, menu_path):
        return _framework.AppMainMenu_exec_command(self, menu_path)

    def get_sub_commands(self, parent_menu_path, recursive=True, show_menu_and_separator=True):
        return _framework.AppMainMenu_get_sub_commands(self, parent_menu_path, recursive, show_menu_and_separator)

    def get_all_commands(self, recursive=True, show_menu_and_separator=True):
        return _framework.AppMainMenu_get_all_commands(self, recursive, show_menu_and_separator)

    def enable_command(self, menu_path, state):
        return _framework.AppMainMenu_enable_command(self, menu_path, state)

    def get_application(self):
        return _framework.AppMainMenu_get_application(self)

    def get_menu_config_file(self):
        return _framework.AppMainMenu_get_menu_config_file(self)

    def get_menu_script_path(self):
        return _framework.AppMainMenu_get_menu_script_path(self)

    def get_menu_icon_path(self):
        return _framework.AppMainMenu_get_menu_icon_path(self)

    def run_file(self, *args):
        return _framework.AppMainMenu_run_file(self, *args)

    def run_script(self, *args):
        return _framework.AppMainMenu_run_script(self, *args)

    def get_item(self, menu_path, recursive=True):
        return _framework.AppMainMenu_get_item(self, menu_path, recursive)

    def get_clarisse_window(self):
        return _framework.AppMainMenu_get_clarisse_window(self)

    def move_command(self, item_path, neighbor_item_path, after=True):
        return _framework.AppMainMenu_move_command(self, item_path, neighbor_item_path, after)
AppMainMenu_swigregister = _framework.AppMainMenu_swigregister
AppMainMenu_swigregister(AppMainMenu)
EVT_ID_MAIN_MENU_ADDED_COMMAND = cvar.EVT_ID_MAIN_MENU_ADDED_COMMAND
EVT_ID_MAIN_MENU_REMOVED_COMMAND = cvar.EVT_ID_MAIN_MENU_REMOVED_COMMAND
EVT_ID_MAIN_MENU_CHANGED = cvar.EVT_ID_MAIN_MENU_CHANGED
EVT_ID_MAIN_MENU_ITEM_MOVED = cvar.EVT_ID_MAIN_MENU_ITEM_MOVED

class AppMainMenuItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppMainMenuItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppMainMenuItem, name)
    __repr__ = _swig_repr
    TYPE_COMMAND_WITH_CALLBACK = _framework.AppMainMenuItem_TYPE_COMMAND_WITH_CALLBACK
    TYPE_COMMAND_WITH_FILE = _framework.AppMainMenuItem_TYPE_COMMAND_WITH_FILE
    TYPE_COMMAND_WITH_SCRIPT = _framework.AppMainMenuItem_TYPE_COMMAND_WITH_SCRIPT
    TYPE_MENU = _framework.AppMainMenuItem_TYPE_MENU
    TYPE_SEPARATOR = _framework.AppMainMenuItem_TYPE_SEPARATOR
    TYPE_NOT_DEFINE = _framework.AppMainMenuItem_TYPE_NOT_DEFINE

    def __init__(self, menu, menu_path):
        this = _framework.new_AppMainMenuItem(menu, menu_path)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppMainMenuItem
    __del__ = lambda self: None

    def exec_command(self):
        return _framework.AppMainMenuItem_exec_command(self)

    def exec_command_show(self):
        return _framework.AppMainMenuItem_exec_command_show(self)

    def enable_command(self, state):
        return _framework.AppMainMenuItem_enable_command(self, state)

    def is_menu(self):
        return _framework.AppMainMenuItem_is_menu(self)

    def is_separator(self):
        return _framework.AppMainMenuItem_is_separator(self)

    def is_command(self):
        return _framework.AppMainMenuItem_is_command(self)

    def get_type(self):
        return _framework.AppMainMenuItem_get_type(self)

    def get_path(self):
        return _framework.AppMainMenuItem_get_path(self)

    def get_name(self):
        return _framework.AppMainMenuItem_get_name(self)

    def get_parent_menu_path(self):
        return _framework.AppMainMenuItem_get_parent_menu_path(self)

    def get_shortcut(self):
        return _framework.AppMainMenuItem_get_shortcut(self)

    def get_description(self):
        return _framework.AppMainMenuItem_get_description(self)

    def set_description(self, desc):
        return _framework.AppMainMenuItem_set_description(self, desc)

    def get_icon_path(self):
        return _framework.AppMainMenuItem_get_icon_path(self)

    def get_icon_fullpath(self):
        return _framework.AppMainMenuItem_get_icon_fullpath(self)

    def get_action_file(self):
        return _framework.AppMainMenuItem_get_action_file(self)

    def get_action_file_fullpath(self):
        return _framework.AppMainMenuItem_get_action_file_fullpath(self)

    def get_action_files_show(self):
        return _framework.AppMainMenuItem_get_action_files_show(self)

    def get_action_files_show_fullpath(self):
        return _framework.AppMainMenuItem_get_action_files_show_fullpath(self)

    def is_enable(self):
        return _framework.AppMainMenuItem_is_enable(self)

    def set_icon(self, *args):
        return _framework.AppMainMenuItem_set_icon(self, *args)

    def get_icon(self):
        return _framework.AppMainMenuItem_get_icon(self)

    def set_radio_group(self, group_name):
        return _framework.AppMainMenuItem_set_radio_group(self, group_name)

    def get_radio_group(self):
        return _framework.AppMainMenuItem_get_radio_group(self)

    def set_checkable(self, value):
        return _framework.AppMainMenuItem_set_checkable(self, value)

    def is_checkable(self):
        return _framework.AppMainMenuItem_is_checkable(self)

    def set_checked(self, value):
        return _framework.AppMainMenuItem_set_checked(self, value)

    def is_checked(self):
        return _framework.AppMainMenuItem_is_checked(self)

    def set_custom_data(self, data):
        return _framework.AppMainMenuItem_set_custom_data(self, data)

    def get_custom_data(self):
        return _framework.AppMainMenuItem_get_custom_data(self)

    def get_item(self, menu_path, recursive=True):
        return _framework.AppMainMenuItem_get_item(self, menu_path, recursive)

    def get_all_commands(self, recursive, show_menu_and_separator=True):
        return _framework.AppMainMenuItem_get_all_commands(self, recursive, show_menu_and_separator)

    def remove_all_commands(self):
        return _framework.AppMainMenuItem_remove_all_commands(self)

    def remove_command(self, *args):
        return _framework.AppMainMenuItem_remove_command(self, *args)

    def set_working_directory(self, working_directory):
        return _framework.AppMainMenuItem_set_working_directory(self, working_directory)

    def get_working_directory(self):
        return _framework.AppMainMenuItem_get_working_directory(self)
AppMainMenuItem_swigregister = _framework.AppMainMenuItem_swigregister
AppMainMenuItem_swigregister(AppMainMenuItem)

class AssociationsData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssociationsData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AssociationsData, name)
    __repr__ = _swig_repr
    TYPE_BUILTIN = _framework.AssociationsData_TYPE_BUILTIN
    TYPE_USER = _framework.AssociationsData_TYPE_USER

    def __init__(self, app):
        this = _framework.new_AssociationsData(app)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add(self, *args):
        return _framework.AssociationsData_add(self, *args)

    def set(self, class_name, widget_name, issuer=True):
        return _framework.AssociationsData_set(self, class_name, widget_name, issuer)

    def copy_from(self, data):
        return _framework.AssociationsData_copy_from(self, data)

    def set_default(self, class_name, widget_name, issuer=True):
        return _framework.AssociationsData_set_default(self, class_name, widget_name, issuer)

    def remove(self, *args):
        return _framework.AssociationsData_remove(self, *args)

    def remove_all(self, class_name, issuer=True):
        return _framework.AssociationsData_remove_all(self, class_name, issuer)

    def reset(self, issuer=True):
        return _framework.AssociationsData_reset(self, issuer)

    def get_count(self):
        return _framework.AssociationsData_get_count(self)

    def get_class_name(self, class_index):
        return _framework.AssociationsData_get_class_name(self, class_index)

    def get(self, *args):
        return _framework.AssociationsData_get(self, *args)

    def get_default(self, *args):
        return _framework.AssociationsData_get_default(self, *args)

    def set_current_type(self, type):
        return _framework.AssociationsData_set_current_type(self, type)
    __swig_destroy__ = _framework.delete_AssociationsData
    __del__ = lambda self: None
AssociationsData_swigregister = _framework.AssociationsData_swigregister
AssociationsData_swigregister(AssociationsData)
EVT_ID_OPEN_WITH_ASSOCIATIONS_CHANGED = cvar.EVT_ID_OPEN_WITH_ASSOCIATIONS_CHANGED

class AppOpenWithAssociations(AssociationsData):
    __swig_setmethods__ = {}
    for _s in [AssociationsData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppOpenWithAssociations, name, value)
    __swig_getmethods__ = {}
    for _s in [AssociationsData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppOpenWithAssociations, name)
    __repr__ = _swig_repr

    def __init__(self, app):
        this = _framework.new_AppOpenWithAssociations(app)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        get_user_filename = staticmethod(_framework.AppOpenWithAssociations_get_user_filename)
    else:
        get_user_filename = _framework.AppOpenWithAssociations_get_user_filename
    if _newclass:
        get_default_filename = staticmethod(_framework.AppOpenWithAssociations_get_default_filename)
    else:
        get_default_filename = _framework.AppOpenWithAssociations_get_default_filename

    def load_entry(self, entry, clear=True):
        return _framework.AppOpenWithAssociations_load_entry(self, entry, clear)

    def save_entry(self, entry, save_all_type=False):
        return _framework.AppOpenWithAssociations_save_entry(self, entry, save_all_type)

    def save_file(self, name, save_all_type=False):
        return _framework.AppOpenWithAssociations_save_file(self, name, save_all_type)

    def load_file(self, name, clear=True):
        return _framework.AppOpenWithAssociations_load_file(self, name, clear)
    __swig_destroy__ = _framework.delete_AppOpenWithAssociations
    __del__ = lambda self: None
AppOpenWithAssociations_swigregister = _framework.AppOpenWithAssociations_swigregister
AppOpenWithAssociations_swigregister(AppOpenWithAssociations)

def AppOpenWithAssociations_get_user_filename():
    return _framework.AppOpenWithAssociations_get_user_filename()
AppOpenWithAssociations_get_user_filename = _framework.AppOpenWithAssociations_get_user_filename

def AppOpenWithAssociations_get_default_filename():
    return _framework.AppOpenWithAssociations_get_default_filename()
AppOpenWithAssociations_get_default_filename = _framework.AppOpenWithAssociations_get_default_filename

class CommandSignatureDoc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandSignatureDoc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommandSignatureDoc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_CommandSignatureDoc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add_arg_doc(self, arg_name, arg_doc):
        return _framework.CommandSignatureDoc_add_arg_doc(self, arg_name, arg_doc)

    def get_cmd_doc(self):
        return _framework.CommandSignatureDoc_get_cmd_doc(self)

    def get_cmd_args_doc(self):
        return _framework.CommandSignatureDoc_get_cmd_args_doc(self)

    def get_cmd_name(self):
        return _framework.CommandSignatureDoc_get_cmd_name(self)
    __swig_destroy__ = _framework.delete_CommandSignatureDoc
    __del__ = lambda self: None
CommandSignatureDoc_swigregister = _framework.CommandSignatureDoc_swigregister
CommandSignatureDoc_swigregister(CommandSignatureDoc)

class CommandRegistrar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandRegistrar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommandRegistrar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        register_command = staticmethod(_framework.CommandRegistrar_register_command)
    else:
        register_command = _framework.CommandRegistrar_register_command
    if _newclass:
        register_custom_set_value = staticmethod(_framework.CommandRegistrar_register_custom_set_value)
    else:
        register_custom_set_value = _framework.CommandRegistrar_register_custom_set_value
    if _newclass:
        has_custom_set_value_cmd = staticmethod(_framework.CommandRegistrar_has_custom_set_value_cmd)
    else:
        has_custom_set_value_cmd = _framework.CommandRegistrar_has_custom_set_value_cmd
    if _newclass:
        call_custom_set_value_cmd = staticmethod(_framework.CommandRegistrar_call_custom_set_value_cmd)
    else:
        call_custom_set_value_cmd = _framework.CommandRegistrar_call_custom_set_value_cmd
    if _newclass:
        call = staticmethod(_framework.CommandRegistrar_call)
    else:
        call = _framework.CommandRegistrar_call
    if _newclass:
        get_commands_count = staticmethod(_framework.CommandRegistrar_get_commands_count)
    else:
        get_commands_count = _framework.CommandRegistrar_get_commands_count
    if _newclass:
        get_command = staticmethod(_framework.CommandRegistrar_get_command)
    else:
        get_command = _framework.CommandRegistrar_get_command
    if _newclass:
        add_command_doc = staticmethod(_framework.CommandRegistrar_add_command_doc)
    else:
        add_command_doc = _framework.CommandRegistrar_add_command_doc
    if _newclass:
        get_commands_docs = staticmethod(_framework.CommandRegistrar_get_commands_docs)
    else:
        get_commands_docs = _framework.CommandRegistrar_get_commands_docs
    __swig_destroy__ = _framework.delete_CommandRegistrar
    __del__ = lambda self: None
CommandRegistrar_swigregister = _framework.CommandRegistrar_swigregister
CommandRegistrar_swigregister(CommandRegistrar)

def CommandRegistrar_register_command(*args):
    return _framework.CommandRegistrar_register_command(*args)
CommandRegistrar_register_command = _framework.CommandRegistrar_register_command

def CommandRegistrar_register_custom_set_value(command_name, class_name, attr_name):
    return _framework.CommandRegistrar_register_custom_set_value(command_name, class_name, attr_name)
CommandRegistrar_register_custom_set_value = _framework.CommandRegistrar_register_custom_set_value

def CommandRegistrar_has_custom_set_value_cmd(*args):
    return _framework.CommandRegistrar_has_custom_set_value_cmd(*args)
CommandRegistrar_has_custom_set_value_cmd = _framework.CommandRegistrar_has_custom_set_value_cmd

def CommandRegistrar_call_custom_set_value_cmd(cmd_name, args):
    return _framework.CommandRegistrar_call_custom_set_value_cmd(cmd_name, args)
CommandRegistrar_call_custom_set_value_cmd = _framework.CommandRegistrar_call_custom_set_value_cmd

def CommandRegistrar_call(*args):
    return _framework.CommandRegistrar_call(*args)
CommandRegistrar_call = _framework.CommandRegistrar_call

def CommandRegistrar_get_commands_count():
    return _framework.CommandRegistrar_get_commands_count()
CommandRegistrar_get_commands_count = _framework.CommandRegistrar_get_commands_count

def CommandRegistrar_get_command(*args):
    return _framework.CommandRegistrar_get_command(*args)
CommandRegistrar_get_command = _framework.CommandRegistrar_get_command

def CommandRegistrar_add_command_doc(doc):
    return _framework.CommandRegistrar_add_command_doc(doc)
CommandRegistrar_add_command_doc = _framework.CommandRegistrar_add_command_doc

def CommandRegistrar_get_commands_docs():
    return _framework.CommandRegistrar_get_commands_docs()
CommandRegistrar_get_commands_docs = _framework.CommandRegistrar_get_commands_docs

class OfCommandManager(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfCommandManager, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfCommandManager, name)
    __repr__ = _swig_repr

    def __init__(self, application):
        this = _framework.new_OfCommandManager(application)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfCommandManager
    __del__ = lambda self: None

    def get_caller(self, *args):
        return _framework.OfCommandManager_get_caller(self, *args)

    def get_caller_count(self):
        return _framework.OfCommandManager_get_caller_count(self)

    def disable_history(self):
        return _framework.OfCommandManager_disable_history(self)

    def enable_history(self):
        return _framework.OfCommandManager_enable_history(self)

    def undo(self):
        return _framework.OfCommandManager_undo(self)

    def redo(self):
        return _framework.OfCommandManager_redo(self)

    def is_undoing_or_redoing(self):
        return _framework.OfCommandManager_is_undoing_or_redoing(self)

    def is_undoable(self):
        return _framework.OfCommandManager_is_undoable(self)

    def is_redoable(self):
        return _framework.OfCommandManager_is_redoable(self)

    def echo_command(self, value):
        return _framework.OfCommandManager_echo_command(self, value)

    def is_echo_command(self):
        return _framework.OfCommandManager_is_echo_command(self)

    def get_history(self):
        return _framework.OfCommandManager_get_history(self)

    def get_current_command(self):
        return _framework.OfCommandManager_get_current_command(self)

    def set_current_command(self, *args):
        return _framework.OfCommandManager_set_current_command(self, *args)

    def clear_history(self):
        return _framework.OfCommandManager_clear_history(self)

    def delete_current_command(self):
        return _framework.OfCommandManager_delete_current_command(self)

    def get_commands(self):
        return _framework.OfCommandManager_get_commands(self)

    def begin_batch(self, batch_name):
        return _framework.OfCommandManager_begin_batch(self, batch_name)

    def end_batch(self):
        return _framework.OfCommandManager_end_batch(self)

    def cancel_batch(self):
        return _framework.OfCommandManager_cancel_batch(self)

    def get_batch_level(self):
        return _framework.OfCommandManager_get_batch_level(self)

    def is_history_enabled(self):
        return _framework.OfCommandManager_is_history_enabled(self)

    def get_history_cursor(self):
        return _framework.OfCommandManager_get_history_cursor(self)
    if _newclass:
        class_info = staticmethod(_framework.OfCommandManager_class_info)
    else:
        class_info = _framework.OfCommandManager_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfCommandManager____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfCommandManager____class_destructor__

    def get_class_info(self):
        return _framework.OfCommandManager_get_class_info(self)
OfCommandManager_swigregister = _framework.OfCommandManager_swigregister
OfCommandManager_swigregister(OfCommandManager)
EVT_ID_COMMAND_MANAGER_HISTORY_CHANGED = cvar.EVT_ID_COMMAND_MANAGER_HISTORY_CHANGED
EVT_ID_COMMAND_MANAGER_CURSOR_CHANGED = cvar.EVT_ID_COMMAND_MANAGER_CURSOR_CHANGED
EVT_ID_COMMAND_MANAGER_UNDO = cvar.EVT_ID_COMMAND_MANAGER_UNDO
EVT_ID_COMMAND_MANAGER_REDO = cvar.EVT_ID_COMMAND_MANAGER_REDO

def OfCommandManager_class_info():
    return _framework.OfCommandManager_class_info()
OfCommandManager_class_info = _framework.OfCommandManager_class_info

def OfCommandManager____class_destructor__(instance, is_array):
    return _framework.OfCommandManager____class_destructor__(instance, is_array)
OfCommandManager____class_destructor__ = _framework.OfCommandManager____class_destructor__

MAX_GROUP_CHANNEL_COUNT = _framework.MAX_GROUP_CHANNEL_COUNT
class OfChannelManager(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfChannelManager, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfChannelManager, name)
    __repr__ = _swig_repr
    FLAG_LOCKED = _framework.OfChannelManager_FLAG_LOCKED
    FLAG_FACTORY = _framework.OfChannelManager_FLAG_FACTORY
    FLAG_DEPRECATED = _framework.OfChannelManager_FLAG_DEPRECATED
    DEL_GROUP = _framework.OfChannelManager_DEL_GROUP
    ADD_GROUP = _framework.OfChannelManager_ADD_GROUP
    RENAME_GROUP = _framework.OfChannelManager_RENAME_GROUP
    SET_CHANNEL = _framework.OfChannelManager_SET_CHANNEL
    REORDER_CHANNELS = _framework.OfChannelManager_REORDER_CHANNELS
    MODIFY_BLEND = _framework.OfChannelManager_MODIFY_BLEND
    MODIFY_DESCRIPTION = _framework.OfChannelManager_MODIFY_DESCRIPTION
    MODIFY_BIT_DEPTH = _framework.OfChannelManager_MODIFY_BIT_DEPTH
    MODIFY_SEPARATOR = _framework.OfChannelManager_MODIFY_SEPARATOR
    MODIFY_FILTERING = _framework.OfChannelManager_MODIFY_FILTERING
    MODIFY_VISUAL_HINT = _framework.OfChannelManager_MODIFY_VISUAL_HINT
    AOVBLENDINGMODE_INVALID = _framework.OfChannelManager_AOVBLENDINGMODE_INVALID
    AOVBLENDINGMODE_BLEND = _framework.OfChannelManager_AOVBLENDINGMODE_BLEND
    AOVBLENDINGMODE_FIRST = _framework.OfChannelManager_AOVBLENDINGMODE_FIRST
    AOVBLENDINGMODE_LAST = _framework.OfChannelManager_AOVBLENDINGMODE_LAST
    AOVBLENDINGMODE_MIN = _framework.OfChannelManager_AOVBLENDINGMODE_MIN
    AOVBLENDINGMODE_MAX = _framework.OfChannelManager_AOVBLENDINGMODE_MAX
    AOVBLENDINGMODE_COUNT = _framework.OfChannelManager_AOVBLENDINGMODE_COUNT
    AOVFILTERINGMODE_INVALID = _framework.OfChannelManager_AOVFILTERINGMODE_INVALID
    AOVFILTERINGMODE_USE_FILTER = _framework.OfChannelManager_AOVFILTERINGMODE_USE_FILTER
    AOVFILTERINGMODE_ADD = _framework.OfChannelManager_AOVFILTERINGMODE_ADD
    AOVFILTERINGMODE_FIRST = _framework.OfChannelManager_AOVFILTERINGMODE_FIRST
    AOVFILTERINGMODE_LAST = _framework.OfChannelManager_AOVFILTERINGMODE_LAST
    AOVFILTERINGMODE_MIN = _framework.OfChannelManager_AOVFILTERINGMODE_MIN
    AOVFILTERINGMODE_MAX = _framework.OfChannelManager_AOVFILTERINGMODE_MAX
    AOVFILTERINGMODE_COUNT = _framework.OfChannelManager_AOVFILTERINGMODE_COUNT
    AOVVISUALHINTMODE_INVALID = _framework.OfChannelManager_AOVVISUALHINTMODE_INVALID
    AOVVISUALHINTMODE_COLOR = _framework.OfChannelManager_AOVVISUALHINTMODE_COLOR
    AOVVISUALHINTMODE_RAW = _framework.OfChannelManager_AOVVISUALHINTMODE_RAW
    AOVVISUALHINTMODE_BLACK_AND_WHITE = _framework.OfChannelManager_AOVVISUALHINTMODE_BLACK_AND_WHITE
    AOVVISUALHINTMODE_BLACK_AND_WHITE_NORMALIZED = _framework.OfChannelManager_AOVVISUALHINTMODE_BLACK_AND_WHITE_NORMALIZED
    AOVVISUALHINTMODE_HEATMAP = _framework.OfChannelManager_AOVVISUALHINTMODE_HEATMAP
    AOVVISUALHINTMODE_HEATMAP_NORMALIZED = _framework.OfChannelManager_AOVVISUALHINTMODE_HEATMAP_NORMALIZED
    AOVVISUALHINTMODE_NORMAL = _framework.OfChannelManager_AOVVISUALHINTMODE_NORMAL
    AOVVISUALHINTMODE_COUNT = _framework.OfChannelManager_AOVVISUALHINTMODE_COUNT
    if _newclass:
        get_channel_name_conversion_table = staticmethod(_framework.OfChannelManager_get_channel_name_conversion_table)
    else:
        get_channel_name_conversion_table = _framework.OfChannelManager_get_channel_name_conversion_table
    if _newclass:
        convert_channel_name = staticmethod(_framework.OfChannelManager_convert_channel_name)
    else:
        convert_channel_name = _framework.OfChannelManager_convert_channel_name
    if _newclass:
        get_aov_blending_mode_name = staticmethod(_framework.OfChannelManager_get_aov_blending_mode_name)
    else:
        get_aov_blending_mode_name = _framework.OfChannelManager_get_aov_blending_mode_name
    if _newclass:
        get_aov_filtering_mode_name = staticmethod(_framework.OfChannelManager_get_aov_filtering_mode_name)
    else:
        get_aov_filtering_mode_name = _framework.OfChannelManager_get_aov_filtering_mode_name
    if _newclass:
        get_aov_visual_hint_mode_name = staticmethod(_framework.OfChannelManager_get_aov_visual_hint_mode_name)
    else:
        get_aov_visual_hint_mode_name = _framework.OfChannelManager_get_aov_visual_hint_mode_name
    if _newclass:
        get_aov_visual_hint_mode_names = staticmethod(_framework.OfChannelManager_get_aov_visual_hint_mode_names)
    else:
        get_aov_visual_hint_mode_names = _framework.OfChannelManager_get_aov_visual_hint_mode_names

    def __init__(self, app):
        this = _framework.new_OfChannelManager(app)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfChannelManager
    __del__ = lambda self: None

    def get_groups_enum(self):
        return _framework.OfChannelManager_get_groups_enum(self)

    def get_aovs_enum(self):
        return _framework.OfChannelManager_get_aovs_enum(self)

    def add_layer(self, *args):
        return _framework.OfChannelManager_add_layer(self, *args)

    def add_channel(self, channel_name):
        return _framework.OfChannelManager_add_channel(self, channel_name)

    def add_factory_layer(self, *args):
        return _framework.OfChannelManager_add_factory_layer(self, *args)

    def set_layer_parameters(self, layer_id, parameters, update_enum=True):
        return _framework.OfChannelManager_set_layer_parameters(self, layer_id, parameters, update_enum)

    def get_layer_count(self):
        return _framework.OfChannelManager_get_layer_count(self)

    def get_layer_index_from_channel_name(self, channel_name):
        return _framework.OfChannelManager_get_layer_index_from_channel_name(self, channel_name)

    def layer_exists(self, layer_name):
        return _framework.OfChannelManager_layer_exists(self, layer_name)

    def get_layer_index(self, layer_name):
        return _framework.OfChannelManager_get_layer_index(self, layer_name)

    def get_layer_name(self, layer_index):
        return _framework.OfChannelManager_get_layer_name(self, layer_index)

    def get_bit_depth(self, layer_index):
        return _framework.OfChannelManager_get_bit_depth(self, layer_index)

    def get_bit_type(self, layer_index):
        return _framework.OfChannelManager_get_bit_type(self, layer_index)

    def get_blending_mode(self, layer_index):
        return _framework.OfChannelManager_get_blending_mode(self, layer_index)

    def get_filtering_mode(self, layer_index):
        return _framework.OfChannelManager_get_filtering_mode(self, layer_index)

    def get_visual_hint_mode(self, layer_index):
        return _framework.OfChannelManager_get_visual_hint_mode(self, layer_index)

    def get_layer_description(self, layer_index):
        return _framework.OfChannelManager_get_layer_description(self, layer_index)

    def get_group_separator(self, layer_index):
        return _framework.OfChannelManager_get_group_separator(self, layer_index)

    def is_layer_locked(self, layer_index):
        return _framework.OfChannelManager_is_layer_locked(self, layer_index)

    def get_layer_flags(self, layer_index):
        return _framework.OfChannelManager_get_layer_flags(self, layer_index)

    def get_channel_name(self, *args):
        return _framework.OfChannelManager_get_channel_name(self, *args)

    def get_channel_names(self, *args):
        return _framework.OfChannelManager_get_channel_names(self, *args)

    def channel_exists(self, *args):
        return _framework.OfChannelManager_channel_exists(self, *args)

    def get_channel_indices(self, *args):
        return _framework.OfChannelManager_get_channel_indices(self, *args)

    def get_channel_count(self, *args):
        return _framework.OfChannelManager_get_channel_count(self, *args)

    def remove_channel(self, *args):
        return _framework.OfChannelManager_remove_channel(self, *args)

    def remove_layer(self, *args):
        return _framework.OfChannelManager_remove_layer(self, *args)

    def clear_custom_channels(self):
        return _framework.OfChannelManager_clear_custom_channels(self)

    def update_channels_from_list(self, channel_names):
        return _framework.OfChannelManager_update_channels_from_list(self, channel_names)

    def order_layer(self, layer_id):
        return _framework.OfChannelManager_order_layer(self, layer_id)

    def get_last_event_info(self):
        return _framework.OfChannelManager_get_last_event_info(self)

    def load_config(self, preferences):
        return _framework.OfChannelManager_load_config(self, preferences)

    def save_config(self, preferences):
        return _framework.OfChannelManager_save_config(self, preferences)

    def start_batch(self):
        return _framework.OfChannelManager_start_batch(self)

    def end_batch(self):
        return _framework.OfChannelManager_end_batch(self)

    def add_batch_event(self, event):
        return _framework.OfChannelManager_add_batch_event(self, event)
    if _newclass:
        class_info = staticmethod(_framework.OfChannelManager_class_info)
    else:
        class_info = _framework.OfChannelManager_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.OfChannelManager____class_destructor__)
    else:
        ___class_destructor__ = _framework.OfChannelManager____class_destructor__

    def get_class_info(self):
        return _framework.OfChannelManager_get_class_info(self)
OfChannelManager_swigregister = _framework.OfChannelManager_swigregister
OfChannelManager_swigregister(OfChannelManager)
EVT_ID_CHANNELMANAGER_GROUP_CHANGE = cvar.EVT_ID_CHANNELMANAGER_GROUP_CHANGE

def OfChannelManager_get_channel_name_conversion_table():
    return _framework.OfChannelManager_get_channel_name_conversion_table()
OfChannelManager_get_channel_name_conversion_table = _framework.OfChannelManager_get_channel_name_conversion_table

def OfChannelManager_convert_channel_name(name):
    return _framework.OfChannelManager_convert_channel_name(name)
OfChannelManager_convert_channel_name = _framework.OfChannelManager_convert_channel_name

def OfChannelManager_get_aov_blending_mode_name(mode):
    return _framework.OfChannelManager_get_aov_blending_mode_name(mode)
OfChannelManager_get_aov_blending_mode_name = _framework.OfChannelManager_get_aov_blending_mode_name

def OfChannelManager_get_aov_filtering_mode_name(mode):
    return _framework.OfChannelManager_get_aov_filtering_mode_name(mode)
OfChannelManager_get_aov_filtering_mode_name = _framework.OfChannelManager_get_aov_filtering_mode_name

def OfChannelManager_get_aov_visual_hint_mode_name(mode):
    return _framework.OfChannelManager_get_aov_visual_hint_mode_name(mode)
OfChannelManager_get_aov_visual_hint_mode_name = _framework.OfChannelManager_get_aov_visual_hint_mode_name

def OfChannelManager_get_aov_visual_hint_mode_names(names):
    return _framework.OfChannelManager_get_aov_visual_hint_mode_names(names)
OfChannelManager_get_aov_visual_hint_mode_names = _framework.OfChannelManager_get_aov_visual_hint_mode_names
OfChannelManager.INVALID_INDEX = _framework.cvar.OfChannelManager_INVALID_INDEX
OfChannelManager.CHANNEL_NONE = _framework.cvar.OfChannelManager_CHANNEL_NONE
OfChannelManager.GROUP_NAME_ALL = _framework.cvar.OfChannelManager_GROUP_NAME_ALL
OfChannelManager.GROUP_NAME_RGBA = _framework.cvar.OfChannelManager_GROUP_NAME_RGBA
OfChannelManager.GROUP_NAME_RGB = _framework.cvar.OfChannelManager_GROUP_NAME_RGB
OfChannelManager.GROUP_NAME_RED = _framework.cvar.OfChannelManager_GROUP_NAME_RED
OfChannelManager.GROUP_NAME_GREEN = _framework.cvar.OfChannelManager_GROUP_NAME_GREEN
OfChannelManager.GROUP_NAME_BLUE = _framework.cvar.OfChannelManager_GROUP_NAME_BLUE
OfChannelManager.GROUP_NAME_ALPHA = _framework.cvar.OfChannelManager_GROUP_NAME_ALPHA
OfChannelManager.GROUP_INDEX_ALL = _framework.cvar.OfChannelManager_GROUP_INDEX_ALL
OfChannelManager.GROUP_INDEX_RGBA = _framework.cvar.OfChannelManager_GROUP_INDEX_RGBA
OfChannelManager.GROUP_INDEX_RGB = _framework.cvar.OfChannelManager_GROUP_INDEX_RGB
OfChannelManager.GROUP_INDEX_RED = _framework.cvar.OfChannelManager_GROUP_INDEX_RED
OfChannelManager.GROUP_INDEX_GREEN = _framework.cvar.OfChannelManager_GROUP_INDEX_GREEN
OfChannelManager.GROUP_INDEX_BLUE = _framework.cvar.OfChannelManager_GROUP_INDEX_BLUE
OfChannelManager.GROUP_INDEX_ALPHA = _framework.cvar.OfChannelManager_GROUP_INDEX_ALPHA

def OfChannelManager_class_info():
    return _framework.OfChannelManager_class_info()
OfChannelManager_class_info = _framework.OfChannelManager_class_info

def OfChannelManager____class_destructor__(instance, is_array):
    return _framework.OfChannelManager____class_destructor__(instance, is_array)
OfChannelManager____class_destructor__ = _framework.OfChannelManager____class_destructor__


def core_get_hash(*args):
    return _framework.core_get_hash(*args)
core_get_hash = _framework.core_get_hash
class OfCommandArgument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfCommandArgument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfCommandArgument, name)
    __repr__ = _swig_repr
    TYPE_NONE = _framework.OfCommandArgument_TYPE_NONE
    TYPE_BOOL = _framework.OfCommandArgument_TYPE_BOOL
    TYPE_CHAR = _framework.OfCommandArgument_TYPE_CHAR
    TYPE_UCHAR = _framework.OfCommandArgument_TYPE_UCHAR
    TYPE_SHORT = _framework.OfCommandArgument_TYPE_SHORT
    TYPE_USHORT = _framework.OfCommandArgument_TYPE_USHORT
    TYPE_INT = _framework.OfCommandArgument_TYPE_INT
    TYPE_UINT = _framework.OfCommandArgument_TYPE_UINT
    TYPE_FLOAT = _framework.OfCommandArgument_TYPE_FLOAT
    TYPE_DOUBLE = _framework.OfCommandArgument_TYPE_DOUBLE
    TYPE_STRING = _framework.OfCommandArgument_TYPE_STRING
    TYPE_ITEM = _framework.OfCommandArgument_TYPE_ITEM
    TYPE_OBJECT = _framework.OfCommandArgument_TYPE_OBJECT
    TYPE_CONTEXT = _framework.OfCommandArgument_TYPE_CONTEXT
    TYPE_VEC2I = _framework.OfCommandArgument_TYPE_VEC2I
    TYPE_VEC2D = _framework.OfCommandArgument_TYPE_VEC2D
    TYPE_VEC3D = _framework.OfCommandArgument_TYPE_VEC3D
    TYPE_MATRIX4X4D = _framework.OfCommandArgument_TYPE_MATRIX4X4D
    TYPE_ARRAY_BOOL = _framework.OfCommandArgument_TYPE_ARRAY_BOOL
    TYPE_ARRAY_CHAR = _framework.OfCommandArgument_TYPE_ARRAY_CHAR
    TYPE_ARRAY_UCHAR = _framework.OfCommandArgument_TYPE_ARRAY_UCHAR
    TYPE_ARRAY_SHORT = _framework.OfCommandArgument_TYPE_ARRAY_SHORT
    TYPE_ARRAY_USHORT = _framework.OfCommandArgument_TYPE_ARRAY_USHORT
    TYPE_ARRAY_INT = _framework.OfCommandArgument_TYPE_ARRAY_INT
    TYPE_ARRAY_UINT = _framework.OfCommandArgument_TYPE_ARRAY_UINT
    TYPE_ARRAY_FLOAT = _framework.OfCommandArgument_TYPE_ARRAY_FLOAT
    TYPE_ARRAY_DOUBLE = _framework.OfCommandArgument_TYPE_ARRAY_DOUBLE
    TYPE_ARRAY_STRING = _framework.OfCommandArgument_TYPE_ARRAY_STRING
    TYPE_ARRAY_ITEM = _framework.OfCommandArgument_TYPE_ARRAY_ITEM
    TYPE_ARRAY_OBJECT = _framework.OfCommandArgument_TYPE_ARRAY_OBJECT
    TYPE_ARRAY_CONTEXT = _framework.OfCommandArgument_TYPE_ARRAY_CONTEXT
    TYPE_ARRAY_VEC2I = _framework.OfCommandArgument_TYPE_ARRAY_VEC2I
    TYPE_ARRAY_VEC2D = _framework.OfCommandArgument_TYPE_ARRAY_VEC2D
    TYPE_ARRAY_VEC3D = _framework.OfCommandArgument_TYPE_ARRAY_VEC3D
    TYPE_ARRAY_MATRIX4X4D = _framework.OfCommandArgument_TYPE_ARRAY_MATRIX4X4D
    TYPE_COUNT = _framework.OfCommandArgument_TYPE_COUNT
    if _newclass:
        get_type_name = staticmethod(_framework.OfCommandArgument_get_type_name)
    else:
        get_type_name = _framework.OfCommandArgument_get_type_name

    def __init__(self, *args):
        this = _framework.new_OfCommandArgument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfCommandArgument
    __del__ = lambda self: None

    def get_type(self):
        return _framework.OfCommandArgument_get_type(self)

    def get_count(self):
        return _framework.OfCommandArgument_get_count(self)

    def __nonzero__(self):
        return _framework.OfCommandArgument___nonzero__(self)
    __bool__ = __nonzero__



    def get_as_gmath_vec2i(self):
        return _framework.OfCommandArgument_get_as_gmath_vec2i(self)

    def get_as_gmath_vec2d(self):
        return _framework.OfCommandArgument_get_as_gmath_vec2d(self)

    def get_as_gmath_vec3d(self):
        return _framework.OfCommandArgument_get_as_gmath_vec3d(self)

    def get_as_gmath_matrix4x4d(self):
        return _framework.OfCommandArgument_get_as_gmath_matrix4x4d(self)
OfCommandArgument_swigregister = _framework.OfCommandArgument_swigregister
OfCommandArgument_swigregister(OfCommandArgument)

def OfCommandArgument_get_type_name(type):
    return _framework.OfCommandArgument_get_type_name(type)
OfCommandArgument_get_type_name = _framework.OfCommandArgument_get_type_name

class OfCommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfCommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfCommand, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_OfCommand
    __del__ = lambda self: None

    def echo(self):
        return _framework.OfCommand_echo(self)

    def get_scripting_echo(self):
        return _framework.OfCommand_get_scripting_echo(self)

    def get_return_value(self):
        return _framework.OfCommand_get_return_value(self)

    def is_batch(self):
        return _framework.OfCommand_is_batch(self)
OfCommand_swigregister = _framework.OfCommand_swigregister
OfCommand_swigregister(OfCommand)

class OfCommandSignature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfCommandSignature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfCommandSignature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_OfCommandSignature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfCommandSignature
    __del__ = lambda self: None

    def add_argument(self, *args):
        return _framework.OfCommandSignature_add_argument(self, *args)

    def get_argument_types(self):
        return _framework.OfCommandSignature_get_argument_types(self)

    def get_argument_names(self):
        return _framework.OfCommandSignature_get_argument_names(self)

    def set_script_visibility(self, value):
        return _framework.OfCommandSignature_set_script_visibility(self, value)

    def get_script_visibility(self):
        return _framework.OfCommandSignature_get_script_visibility(self)

    def get_command(self):
        return _framework.OfCommandSignature_get_command(self)
OfCommandSignature_swigregister = _framework.OfCommandSignature_swigregister
OfCommandSignature_swigregister(OfCommandSignature)

class OfCommandCaller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfCommandCaller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OfCommandCaller, name)
    __repr__ = _swig_repr

    def __init__(self, manager, command_id, data):
        this = _framework.new_OfCommandCaller(manager, command_id, data)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_OfCommandCaller
    __del__ = lambda self: None

    def get_signature(self, arguments):
        return _framework.OfCommandCaller_get_signature(self, arguments)

    def call(self, *args):
        return _framework.OfCommandCaller_call(self, *args)

    def get_manager(self):
        return _framework.OfCommandCaller_get_manager(self)

    def add_signature(self, create):
        return _framework.OfCommandCaller_add_signature(self, create)

    def create_command(self, args):
        return _framework.OfCommandCaller_create_command(self, args)

    def get_command_id(self):
        return _framework.OfCommandCaller_get_command_id(self)

    def get_signatures(self):
        return _framework.OfCommandCaller_get_signatures(self)

    def display_signatures(self):
        return _framework.OfCommandCaller_display_signatures(self)
OfCommandCaller_swigregister = _framework.OfCommandCaller_swigregister
OfCommandCaller_swigregister(OfCommandCaller)

class ApplicationHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationHelper, name)
    __repr__ = _swig_repr
    if _newclass:
        is_application_created = staticmethod(_framework.ApplicationHelper_is_application_created)
    else:
        is_application_created = _framework.ApplicationHelper_is_application_created
    if _newclass:
        get_application = staticmethod(_framework.ApplicationHelper_get_application)
    else:
        get_application = _framework.ApplicationHelper_get_application
    if _newclass:
        create_application = staticmethod(_framework.ApplicationHelper_create_application)
    else:
        create_application = _framework.ApplicationHelper_create_application

    def __init__(self):
        this = _framework.new_ApplicationHelper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ApplicationHelper
    __del__ = lambda self: None
ApplicationHelper_swigregister = _framework.ApplicationHelper_swigregister
ApplicationHelper_swigregister(ApplicationHelper)

def ApplicationHelper_is_application_created():
    return _framework.ApplicationHelper_is_application_created()
ApplicationHelper_is_application_created = _framework.ApplicationHelper_is_application_created

def ApplicationHelper_get_application():
    return _framework.ApplicationHelper_get_application()
ApplicationHelper_get_application = _framework.ApplicationHelper_get_application

def ApplicationHelper_create_application(*args):
    return _framework.ApplicationHelper_create_application(*args)
ApplicationHelper_create_application = _framework.ApplicationHelper_create_application


def __validate_cmd_params___(cmd_id, py_args, output_args):
    return _framework.__validate_cmd_params___(cmd_id, py_args, output_args)
__validate_cmd_params___ = _framework.__validate_cmd_params___
class AppShelfItemBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppShelfItemBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppShelfItemBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.AppShelfItemBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_AppShelfItemBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppShelfItemBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.AppShelfItemBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.AppShelfItemBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.AppShelfItemBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.AppShelfItemBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.AppShelfItemBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.AppShelfItemBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.AppShelfItemBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.AppShelfItemBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.AppShelfItemBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.AppShelfItemBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.AppShelfItemBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.AppShelfItemBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.AppShelfItemBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.AppShelfItemBasicArray_class_info)
    else:
        class_info = _framework.AppShelfItemBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppShelfItemBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppShelfItemBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.AppShelfItemBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.AppShelfItemBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

AppShelfItemBasicArray_swigregister = _framework.AppShelfItemBasicArray_swigregister
AppShelfItemBasicArray_swigregister(AppShelfItemBasicArray)

def AppShelfItemBasicArray_class_info():
    return _framework.AppShelfItemBasicArray_class_info()
AppShelfItemBasicArray_class_info = _framework.AppShelfItemBasicArray_class_info

def AppShelfItemBasicArray____class_destructor__(instance, is_array):
    return _framework.AppShelfItemBasicArray____class_destructor__(instance, is_array)
AppShelfItemBasicArray____class_destructor__ = _framework.AppShelfItemBasicArray____class_destructor__

class AppShelfItemArray(AppShelfItemBasicArray):
    __swig_setmethods__ = {}
    for _s in [AppShelfItemBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppShelfItemArray, name, value)
    __swig_getmethods__ = {}
    for _s in [AppShelfItemBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppShelfItemArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_AppShelfItemArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppShelfItemArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.AppShelfItemArray_append(self, *args)

    def get_count(self):
        return _framework.AppShelfItemArray_get_count(self)

    def remove_all(self):
        return _framework.AppShelfItemArray_remove_all(self)

    def resize(self, *args):
        return _framework.AppShelfItemArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.AppShelfItemArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.AppShelfItemArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.AppShelfItemArray_get_list(self, list)

    def set_list(self, list):
        return _framework.AppShelfItemArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.AppShelfItemArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.AppShelfItemArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.AppShelfItemArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.AppShelfItemArray_class_info)
    else:
        class_info = _framework.AppShelfItemArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppShelfItemArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppShelfItemArray____class_destructor__
AppShelfItemArray_swigregister = _framework.AppShelfItemArray_swigregister
AppShelfItemArray_swigregister(AppShelfItemArray)

def AppShelfItemArray_class_info():
    return _framework.AppShelfItemArray_class_info()
AppShelfItemArray_class_info = _framework.AppShelfItemArray_class_info

def AppShelfItemArray____class_destructor__(instance, is_array):
    return _framework.AppShelfItemArray____class_destructor__(instance, is_array)
AppShelfItemArray____class_destructor__ = _framework.AppShelfItemArray____class_destructor__

class AppShelfItemVector(AppShelfItemBasicArray):
    __swig_setmethods__ = {}
    for _s in [AppShelfItemBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppShelfItemVector, name, value)
    __swig_getmethods__ = {}
    for _s in [AppShelfItemBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppShelfItemVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_AppShelfItemVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppShelfItemVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.AppShelfItemVector_append(self, *args)

    def add(self, *args):
        return _framework.AppShelfItemVector_add(self, *args)

    def insert(self, element, index):
        return _framework.AppShelfItemVector_insert(self, element, index)

    def remove_last(self):
        return _framework.AppShelfItemVector_remove_last(self)

    def empty(self):
        return _framework.AppShelfItemVector_empty(self)

    def remove_all(self):
        return _framework.AppShelfItemVector_remove_all(self)

    def clear(self, *args):
        return _framework.AppShelfItemVector_clear(self, *args)

    def remove(self, *args):
        return _framework.AppShelfItemVector_remove(self, *args)

    def is_empty(self):
        return _framework.AppShelfItemVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.AppShelfItemVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.AppShelfItemVector_remove_items(self, item)

    def get_count(self):
        return _framework.AppShelfItemVector_get_count(self)

    def get_capacity(self):
        return _framework.AppShelfItemVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.AppShelfItemVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.AppShelfItemVector_set_capacity(self, *args)

    def refit(self):
        return _framework.AppShelfItemVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.AppShelfItemVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.AppShelfItemVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.AppShelfItemVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.AppShelfItemVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.AppShelfItemVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.AppShelfItemVector_get_list(self, list)

    def set_list(self, list):
        return _framework.AppShelfItemVector_set_list(self, list)

    def get_array(self, array):
        return _framework.AppShelfItemVector_get_array(self, array)

    def set_array(self, array):
        return _framework.AppShelfItemVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.AppShelfItemVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.AppShelfItemVector_item(self, *args)

    def get_data(self):
        return _framework.AppShelfItemVector_get_data(self)

    def get_memory_size(self):
        return _framework.AppShelfItemVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.AppShelfItemVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.AppShelfItemVector_class_info)
    else:
        class_info = _framework.AppShelfItemVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppShelfItemVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppShelfItemVector____class_destructor__
AppShelfItemVector_swigregister = _framework.AppShelfItemVector_swigregister
AppShelfItemVector_swigregister(AppShelfItemVector)

def AppShelfItemVector_class_info():
    return _framework.AppShelfItemVector_class_info()
AppShelfItemVector_class_info = _framework.AppShelfItemVector_class_info

def AppShelfItemVector____class_destructor__(instance, is_array):
    return _framework.AppShelfItemVector____class_destructor__(instance, is_array)
AppShelfItemVector____class_destructor__ = _framework.AppShelfItemVector____class_destructor__

class AppShelfCategoryBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppShelfCategoryBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppShelfCategoryBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.AppShelfCategoryBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_AppShelfCategoryBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppShelfCategoryBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.AppShelfCategoryBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.AppShelfCategoryBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.AppShelfCategoryBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.AppShelfCategoryBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.AppShelfCategoryBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.AppShelfCategoryBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.AppShelfCategoryBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.AppShelfCategoryBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.AppShelfCategoryBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.AppShelfCategoryBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.AppShelfCategoryBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.AppShelfCategoryBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.AppShelfCategoryBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.AppShelfCategoryBasicArray_class_info)
    else:
        class_info = _framework.AppShelfCategoryBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppShelfCategoryBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppShelfCategoryBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.AppShelfCategoryBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.AppShelfCategoryBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

AppShelfCategoryBasicArray_swigregister = _framework.AppShelfCategoryBasicArray_swigregister
AppShelfCategoryBasicArray_swigregister(AppShelfCategoryBasicArray)

def AppShelfCategoryBasicArray_class_info():
    return _framework.AppShelfCategoryBasicArray_class_info()
AppShelfCategoryBasicArray_class_info = _framework.AppShelfCategoryBasicArray_class_info

def AppShelfCategoryBasicArray____class_destructor__(instance, is_array):
    return _framework.AppShelfCategoryBasicArray____class_destructor__(instance, is_array)
AppShelfCategoryBasicArray____class_destructor__ = _framework.AppShelfCategoryBasicArray____class_destructor__

class AppShelfCategoryArray(AppShelfCategoryBasicArray):
    __swig_setmethods__ = {}
    for _s in [AppShelfCategoryBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppShelfCategoryArray, name, value)
    __swig_getmethods__ = {}
    for _s in [AppShelfCategoryBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppShelfCategoryArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_AppShelfCategoryArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppShelfCategoryArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.AppShelfCategoryArray_append(self, *args)

    def get_count(self):
        return _framework.AppShelfCategoryArray_get_count(self)

    def remove_all(self):
        return _framework.AppShelfCategoryArray_remove_all(self)

    def resize(self, *args):
        return _framework.AppShelfCategoryArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.AppShelfCategoryArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.AppShelfCategoryArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.AppShelfCategoryArray_get_list(self, list)

    def set_list(self, list):
        return _framework.AppShelfCategoryArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.AppShelfCategoryArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.AppShelfCategoryArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.AppShelfCategoryArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.AppShelfCategoryArray_class_info)
    else:
        class_info = _framework.AppShelfCategoryArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppShelfCategoryArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppShelfCategoryArray____class_destructor__
AppShelfCategoryArray_swigregister = _framework.AppShelfCategoryArray_swigregister
AppShelfCategoryArray_swigregister(AppShelfCategoryArray)

def AppShelfCategoryArray_class_info():
    return _framework.AppShelfCategoryArray_class_info()
AppShelfCategoryArray_class_info = _framework.AppShelfCategoryArray_class_info

def AppShelfCategoryArray____class_destructor__(instance, is_array):
    return _framework.AppShelfCategoryArray____class_destructor__(instance, is_array)
AppShelfCategoryArray____class_destructor__ = _framework.AppShelfCategoryArray____class_destructor__

class AppShelfCategoryVector(AppShelfCategoryBasicArray):
    __swig_setmethods__ = {}
    for _s in [AppShelfCategoryBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppShelfCategoryVector, name, value)
    __swig_getmethods__ = {}
    for _s in [AppShelfCategoryBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppShelfCategoryVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_AppShelfCategoryVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_AppShelfCategoryVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.AppShelfCategoryVector_append(self, *args)

    def add(self, *args):
        return _framework.AppShelfCategoryVector_add(self, *args)

    def insert(self, element, index):
        return _framework.AppShelfCategoryVector_insert(self, element, index)

    def remove_last(self):
        return _framework.AppShelfCategoryVector_remove_last(self)

    def empty(self):
        return _framework.AppShelfCategoryVector_empty(self)

    def remove_all(self):
        return _framework.AppShelfCategoryVector_remove_all(self)

    def clear(self, *args):
        return _framework.AppShelfCategoryVector_clear(self, *args)

    def remove(self, *args):
        return _framework.AppShelfCategoryVector_remove(self, *args)

    def is_empty(self):
        return _framework.AppShelfCategoryVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.AppShelfCategoryVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.AppShelfCategoryVector_remove_items(self, item)

    def get_count(self):
        return _framework.AppShelfCategoryVector_get_count(self)

    def get_capacity(self):
        return _framework.AppShelfCategoryVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.AppShelfCategoryVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.AppShelfCategoryVector_set_capacity(self, *args)

    def refit(self):
        return _framework.AppShelfCategoryVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.AppShelfCategoryVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.AppShelfCategoryVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.AppShelfCategoryVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.AppShelfCategoryVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.AppShelfCategoryVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.AppShelfCategoryVector_get_list(self, list)

    def set_list(self, list):
        return _framework.AppShelfCategoryVector_set_list(self, list)

    def get_array(self, array):
        return _framework.AppShelfCategoryVector_get_array(self, array)

    def set_array(self, array):
        return _framework.AppShelfCategoryVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.AppShelfCategoryVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.AppShelfCategoryVector_item(self, *args)

    def get_data(self):
        return _framework.AppShelfCategoryVector_get_data(self)

    def get_memory_size(self):
        return _framework.AppShelfCategoryVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.AppShelfCategoryVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.AppShelfCategoryVector_class_info)
    else:
        class_info = _framework.AppShelfCategoryVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.AppShelfCategoryVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.AppShelfCategoryVector____class_destructor__
AppShelfCategoryVector_swigregister = _framework.AppShelfCategoryVector_swigregister
AppShelfCategoryVector_swigregister(AppShelfCategoryVector)

def AppShelfCategoryVector_class_info():
    return _framework.AppShelfCategoryVector_class_info()
AppShelfCategoryVector_class_info = _framework.AppShelfCategoryVector_class_info

def AppShelfCategoryVector____class_destructor__(instance, is_array):
    return _framework.AppShelfCategoryVector____class_destructor__(instance, is_array)
AppShelfCategoryVector____class_destructor__ = _framework.AppShelfCategoryVector____class_destructor__

class ModuleCma(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleCma, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleCma, name)
    __repr__ = _swig_repr

    def __init__(self, eval):
        this = _framework.new_ModuleCma(eval)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleCma
    __del__ = lambda self: None
    __swig_setmethods__["m_default_cma"] = _framework.ModuleCma_m_default_cma_set
    __swig_getmethods__["m_default_cma"] = _framework.ModuleCma_m_default_cma_get
    if _newclass:
        m_default_cma = _swig_property(_framework.ModuleCma_m_default_cma_get, _framework.ModuleCma_m_default_cma_set)
    if _newclass:
        class_info = staticmethod(_framework.ModuleCma_class_info)
    else:
        class_info = _framework.ModuleCma_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleCma____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleCma____class_destructor__

    def get_class_info(self):
        return _framework.ModuleCma_get_class_info(self)
ModuleCma_swigregister = _framework.ModuleCma_swigregister
ModuleCma_swigregister(ModuleCma)

def ModuleCma_class_info():
    return _framework.ModuleCma_class_info()
ModuleCma_class_info = _framework.ModuleCma_class_info

def ModuleCma____class_destructor__(instance, is_array):
    return _framework.ModuleCma____class_destructor__(instance, is_array)
ModuleCma____class_destructor__ = _framework.ModuleCma____class_destructor__

class ModuleObjectCallbacks(OfClassCallbacks):
    __swig_setmethods__ = {}
    for _s in [OfClassCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleObjectCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [OfClassCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleObjectCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleObjectCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_parent_callbacks(self, base_class):
        return _framework.ModuleObjectCallbacks_init_parent_callbacks(self, base_class)

    def init_callbacks(self, callbacks):
        return _framework.ModuleObjectCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_on_destroy_module"] = _framework.ModuleObjectCallbacks_cb_on_destroy_module_set
    __swig_getmethods__["cb_on_destroy_module"] = _framework.ModuleObjectCallbacks_cb_on_destroy_module_get
    if _newclass:
        cb_on_destroy_module = _swig_property(_framework.ModuleObjectCallbacks_cb_on_destroy_module_get, _framework.ModuleObjectCallbacks_cb_on_destroy_module_set)
    __swig_setmethods__["cb_create_resource"] = _framework.ModuleObjectCallbacks_cb_create_resource_set
    __swig_getmethods__["cb_create_resource"] = _framework.ModuleObjectCallbacks_cb_create_resource_get
    if _newclass:
        cb_create_resource = _swig_property(_framework.ModuleObjectCallbacks_cb_create_resource_get, _framework.ModuleObjectCallbacks_cb_create_resource_set)
    __swig_setmethods__["cb_set_resource_data"] = _framework.ModuleObjectCallbacks_cb_set_resource_data_set
    __swig_getmethods__["cb_set_resource_data"] = _framework.ModuleObjectCallbacks_cb_set_resource_data_get
    if _newclass:
        cb_set_resource_data = _swig_property(_framework.ModuleObjectCallbacks_cb_set_resource_data_get, _framework.ModuleObjectCallbacks_cb_set_resource_data_set)
    __swig_setmethods__["cb_on_resource_update"] = _framework.ModuleObjectCallbacks_cb_on_resource_update_set
    __swig_getmethods__["cb_on_resource_update"] = _framework.ModuleObjectCallbacks_cb_on_resource_update_get
    if _newclass:
        cb_on_resource_update = _swig_property(_framework.ModuleObjectCallbacks_cb_on_resource_update_get, _framework.ModuleObjectCallbacks_cb_on_resource_update_set)
    __swig_setmethods__["cb_make_resource_key"] = _framework.ModuleObjectCallbacks_cb_make_resource_key_set
    __swig_getmethods__["cb_make_resource_key"] = _framework.ModuleObjectCallbacks_cb_make_resource_key_get
    if _newclass:
        cb_make_resource_key = _swig_property(_framework.ModuleObjectCallbacks_cb_make_resource_key_get, _framework.ModuleObjectCallbacks_cb_make_resource_key_set)
    __swig_setmethods__["cb_create_cma"] = _framework.ModuleObjectCallbacks_cb_create_cma_set
    __swig_getmethods__["cb_create_cma"] = _framework.ModuleObjectCallbacks_cb_create_cma_get
    if _newclass:
        cb_create_cma = _swig_property(_framework.ModuleObjectCallbacks_cb_create_cma_get, _framework.ModuleObjectCallbacks_cb_create_cma_set)
    __swig_setmethods__["cb_on_new_time"] = _framework.ModuleObjectCallbacks_cb_on_new_time_set
    __swig_getmethods__["cb_on_new_time"] = _framework.ModuleObjectCallbacks_cb_on_new_time_get
    if _newclass:
        cb_on_new_time = _swig_property(_framework.ModuleObjectCallbacks_cb_on_new_time_get, _framework.ModuleObjectCallbacks_cb_on_new_time_set)
    __swig_setmethods__["cb_request_variables"] = _framework.ModuleObjectCallbacks_cb_request_variables_set
    __swig_getmethods__["cb_request_variables"] = _framework.ModuleObjectCallbacks_cb_request_variables_get
    if _newclass:
        cb_request_variables = _swig_property(_framework.ModuleObjectCallbacks_cb_request_variables_get, _framework.ModuleObjectCallbacks_cb_request_variables_set)
    __swig_setmethods__["cb_register_variables"] = _framework.ModuleObjectCallbacks_cb_register_variables_set
    __swig_getmethods__["cb_register_variables"] = _framework.ModuleObjectCallbacks_cb_register_variables_get
    if _newclass:
        cb_register_variables = _swig_property(_framework.ModuleObjectCallbacks_cb_register_variables_get, _framework.ModuleObjectCallbacks_cb_register_variables_set)
    __swig_setmethods__["cb_unregister_variables"] = _framework.ModuleObjectCallbacks_cb_unregister_variables_set
    __swig_getmethods__["cb_unregister_variables"] = _framework.ModuleObjectCallbacks_cb_unregister_variables_get
    if _newclass:
        cb_unregister_variables = _swig_property(_framework.ModuleObjectCallbacks_cb_unregister_variables_get, _framework.ModuleObjectCallbacks_cb_unregister_variables_set)
    __swig_setmethods__["cb_create_class_eval_data"] = _framework.ModuleObjectCallbacks_cb_create_class_eval_data_set
    __swig_getmethods__["cb_create_class_eval_data"] = _framework.ModuleObjectCallbacks_cb_create_class_eval_data_get
    if _newclass:
        cb_create_class_eval_data = _swig_property(_framework.ModuleObjectCallbacks_cb_create_class_eval_data_get, _framework.ModuleObjectCallbacks_cb_create_class_eval_data_set)
    __swig_setmethods__["cb_destroy_class_eval_data"] = _framework.ModuleObjectCallbacks_cb_destroy_class_eval_data_set
    __swig_getmethods__["cb_destroy_class_eval_data"] = _framework.ModuleObjectCallbacks_cb_destroy_class_eval_data_get
    if _newclass:
        cb_destroy_class_eval_data = _swig_property(_framework.ModuleObjectCallbacks_cb_destroy_class_eval_data_get, _framework.ModuleObjectCallbacks_cb_destroy_class_eval_data_set)
    __swig_setmethods__["cb_create_eval_data"] = _framework.ModuleObjectCallbacks_cb_create_eval_data_set
    __swig_getmethods__["cb_create_eval_data"] = _framework.ModuleObjectCallbacks_cb_create_eval_data_get
    if _newclass:
        cb_create_eval_data = _swig_property(_framework.ModuleObjectCallbacks_cb_create_eval_data_get, _framework.ModuleObjectCallbacks_cb_create_eval_data_set)
    __swig_setmethods__["cb_destroy_eval_data"] = _framework.ModuleObjectCallbacks_cb_destroy_eval_data_set
    __swig_getmethods__["cb_destroy_eval_data"] = _framework.ModuleObjectCallbacks_cb_destroy_eval_data_get
    if _newclass:
        cb_destroy_eval_data = _swig_property(_framework.ModuleObjectCallbacks_cb_destroy_eval_data_get, _framework.ModuleObjectCallbacks_cb_destroy_eval_data_set)
    __swig_setmethods__["cb_create_thread_data"] = _framework.ModuleObjectCallbacks_cb_create_thread_data_set
    __swig_getmethods__["cb_create_thread_data"] = _framework.ModuleObjectCallbacks_cb_create_thread_data_get
    if _newclass:
        cb_create_thread_data = _swig_property(_framework.ModuleObjectCallbacks_cb_create_thread_data_get, _framework.ModuleObjectCallbacks_cb_create_thread_data_set)
    __swig_setmethods__["cb_destroy_thread_data"] = _framework.ModuleObjectCallbacks_cb_destroy_thread_data_set
    __swig_getmethods__["cb_destroy_thread_data"] = _framework.ModuleObjectCallbacks_cb_destroy_thread_data_get
    if _newclass:
        cb_destroy_thread_data = _swig_property(_framework.ModuleObjectCallbacks_cb_destroy_thread_data_get, _framework.ModuleObjectCallbacks_cb_destroy_thread_data_set)
    __swig_setmethods__["cb_post_evaluate"] = _framework.ModuleObjectCallbacks_cb_post_evaluate_set
    __swig_getmethods__["cb_post_evaluate"] = _framework.ModuleObjectCallbacks_cb_post_evaluate_get
    if _newclass:
        cb_post_evaluate = _swig_property(_framework.ModuleObjectCallbacks_cb_post_evaluate_get, _framework.ModuleObjectCallbacks_cb_post_evaluate_set)
    __swig_setmethods__["cb_get_attr_preset_hints"] = _framework.ModuleObjectCallbacks_cb_get_attr_preset_hints_set
    __swig_getmethods__["cb_get_attr_preset_hints"] = _framework.ModuleObjectCallbacks_cb_get_attr_preset_hints_get
    if _newclass:
        cb_get_attr_preset_hints = _swig_property(_framework.ModuleObjectCallbacks_cb_get_attr_preset_hints_get, _framework.ModuleObjectCallbacks_cb_get_attr_preset_hints_set)
    __swig_setmethods__["cb_get_tracking_filenames"] = _framework.ModuleObjectCallbacks_cb_get_tracking_filenames_set
    __swig_getmethods__["cb_get_tracking_filenames"] = _framework.ModuleObjectCallbacks_cb_get_tracking_filenames_get
    if _newclass:
        cb_get_tracking_filenames = _swig_property(_framework.ModuleObjectCallbacks_cb_get_tracking_filenames_get, _framework.ModuleObjectCallbacks_cb_get_tracking_filenames_set)
    __swig_setmethods__["cb_get_object_variable_long"] = _framework.ModuleObjectCallbacks_cb_get_object_variable_long_set
    __swig_getmethods__["cb_get_object_variable_long"] = _framework.ModuleObjectCallbacks_cb_get_object_variable_long_get
    if _newclass:
        cb_get_object_variable_long = _swig_property(_framework.ModuleObjectCallbacks_cb_get_object_variable_long_get, _framework.ModuleObjectCallbacks_cb_get_object_variable_long_set)
    __swig_setmethods__["cb_get_object_variable_double"] = _framework.ModuleObjectCallbacks_cb_get_object_variable_double_set
    __swig_getmethods__["cb_get_object_variable_double"] = _framework.ModuleObjectCallbacks_cb_get_object_variable_double_get
    if _newclass:
        cb_get_object_variable_double = _swig_property(_framework.ModuleObjectCallbacks_cb_get_object_variable_double_get, _framework.ModuleObjectCallbacks_cb_get_object_variable_double_set)
    __swig_setmethods__["cb_declare_custom_ui"] = _framework.ModuleObjectCallbacks_cb_declare_custom_ui_set
    __swig_getmethods__["cb_declare_custom_ui"] = _framework.ModuleObjectCallbacks_cb_declare_custom_ui_get
    if _newclass:
        cb_declare_custom_ui = _swig_property(_framework.ModuleObjectCallbacks_cb_declare_custom_ui_get, _framework.ModuleObjectCallbacks_cb_declare_custom_ui_set)
    __swig_destroy__ = _framework.delete_ModuleObjectCallbacks
    __del__ = lambda self: None
ModuleObjectCallbacks_swigregister = _framework.ModuleObjectCallbacks_swigregister
ModuleObjectCallbacks_swigregister(ModuleObjectCallbacks)

class ModuleObject(OfModule):
    __swig_setmethods__ = {}
    for _s in [OfModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleObject, name, value)
    __swig_getmethods__ = {}
    for _s in [OfModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleObject
    __del__ = lambda self: None

    def is_protected(self):
        return _framework.ModuleObject_is_protected(self)

    def remove_resource(self, resource_id):
        return _framework.ModuleObject_remove_resource(self, resource_id)

    def set_resource_attrs(self, *args):
        return _framework.ModuleObject_set_resource_attrs(self, *args)

    def get_resource_attrs(self, *args):
        return _framework.ModuleObject_get_resource_attrs(self, *args)

    def set_resource_deps(self, resource_id, deps):
        return _framework.ModuleObject_set_resource_deps(self, resource_id, deps)

    def get_resource_deps(self, id, deps):
        return _framework.ModuleObject_get_resource_deps(self, id, deps)

    def share_resource(self, resource_id, target_id):
        return _framework.ModuleObject_share_resource(self, resource_id, target_id)

    def get_shared_resource(self, resource_id):
        return _framework.ModuleObject_get_shared_resource(self, resource_id)

    def clear_resource(self, resource_id):
        return _framework.ModuleObject_clear_resource(self, resource_id)

    def update_resource(self, resource_id):
        return _framework.ModuleObject_update_resource(self, resource_id)

    def get_resource(self, resource_id, data=None):
        return _framework.ModuleObject_get_resource(self, resource_id, data)

    def try_get_resource(self, resource_id):
        return _framework.ModuleObject_try_get_resource(self, resource_id)

    def is_resource_created(self, resource_id):
        return _framework.ModuleObject_is_resource_created(self, resource_id)

    def is_sharing_resource(self, other, resource_id):
        return _framework.ModuleObject_is_sharing_resource(self, other, resource_id)

    def declare_custom_ui(self, attrs, parent_widget, info):
        return _framework.ModuleObject_declare_custom_ui(self, attrs, parent_widget, info)

    def update_resource_key(self, resource_id):
        return _framework.ModuleObject_update_resource_key(self, resource_id)

    def update_resource_keys(self):
        return _framework.ModuleObject_update_resource_keys(self)

    def get_resource_link_id(self, connection, resource_id):
        return _framework.ModuleObject_get_resource_link_id(self, connection, resource_id)

    def get_resource_link_tag(self, connection, resource_tag):
        return _framework.ModuleObject_get_resource_link_tag(self, connection, resource_tag)

    def get_resource_tag(self, resource, resource_tag):
        return _framework.ModuleObject_get_resource_tag(self, resource, resource_tag)

    def get_application(self):
        return _framework.ModuleObject_get_application(self)

    def post_evaluate(self, eval_ctx):
        return _framework.ModuleObject_post_evaluate(self, eval_ctx)

    def has_resources(self):
        return _framework.ModuleObject_has_resources(self)

    def get_resource_handler(self, *args):
        return _framework.ModuleObject_get_resource_handler(self, *args)

    def register_variable(self, variables, unknown_variable_indices):
        return _framework.ModuleObject_register_variable(self, variables, unknown_variable_indices)

    def unregister_variable(self, variables):
        return _framework.ModuleObject_unregister_variable(self, variables)

    def udpate_variables_status(self, known_variables, unknown_variables):
        return _framework.ModuleObject_udpate_variables_status(self, known_variables, unknown_variables)

    def get_master_input_value(self):
        return _framework.ModuleObject_get_master_input_value(self)

    def get_pass_through(self):
        return _framework.ModuleObject_get_pass_through(self)

    def get_master_input(self):
        return _framework.ModuleObject_get_master_input(self)

    def get_object_variable(self, *args):
        return _framework.ModuleObject_get_object_variable(self, *args)

    def get_memory_size(self):
        return _framework.ModuleObject_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleObject_class_info)
    else:
        class_info = _framework.ModuleObject_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleObject____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleObject____class_destructor__

    def get_class_info(self):
        return _framework.ModuleObject_get_class_info(self)
ModuleObject_swigregister = _framework.ModuleObject_swigregister
ModuleObject_swigregister(ModuleObject)

def ModuleObject_class_info():
    return _framework.ModuleObject_class_info()
ModuleObject_class_info = _framework.ModuleObject_class_info

def ModuleObject____class_destructor__(instance, is_array):
    return _framework.ModuleObject____class_destructor__(instance, is_array)
ModuleObject____class_destructor__ = _framework.ModuleObject____class_destructor__

class ModuleProjectItem(ModuleObject):
    __swig_setmethods__ = {}
    for _s in [ModuleObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleProjectItem, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleProjectItem, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleProjectItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleProjectItem
    __del__ = lambda self: None
    if _newclass:
        class_info = staticmethod(_framework.ModuleProjectItem_class_info)
    else:
        class_info = _framework.ModuleProjectItem_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleProjectItem____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleProjectItem____class_destructor__

    def get_class_info(self):
        return _framework.ModuleProjectItem_get_class_info(self)
ModuleProjectItem_swigregister = _framework.ModuleProjectItem_swigregister
ModuleProjectItem_swigregister(ModuleProjectItem)

def ModuleProjectItem_class_info():
    return _framework.ModuleProjectItem_class_info()
ModuleProjectItem_class_info = _framework.ModuleProjectItem_class_info

def ModuleProjectItem____class_destructor__(instance, is_array):
    return _framework.ModuleProjectItem____class_destructor__(instance, is_array)
ModuleProjectItem____class_destructor__ = _framework.ModuleProjectItem____class_destructor__

class ModuleProcessCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleProcessCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleProcessCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleProcessCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleProcessCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_run_process"] = _framework.ModuleProcessCallbacks_cb_run_process_set
    __swig_getmethods__["cb_run_process"] = _framework.ModuleProcessCallbacks_cb_run_process_get
    if _newclass:
        cb_run_process = _swig_property(_framework.ModuleProcessCallbacks_cb_run_process_get, _framework.ModuleProcessCallbacks_cb_run_process_set)
    __swig_setmethods__["cb_create_process_watch"] = _framework.ModuleProcessCallbacks_cb_create_process_watch_set
    __swig_getmethods__["cb_create_process_watch"] = _framework.ModuleProcessCallbacks_cb_create_process_watch_get
    if _newclass:
        cb_create_process_watch = _swig_property(_framework.ModuleProcessCallbacks_cb_create_process_watch_get, _framework.ModuleProcessCallbacks_cb_create_process_watch_set)
    __swig_setmethods__["cb_destroy_process_watch"] = _framework.ModuleProcessCallbacks_cb_destroy_process_watch_set
    __swig_getmethods__["cb_destroy_process_watch"] = _framework.ModuleProcessCallbacks_cb_destroy_process_watch_get
    if _newclass:
        cb_destroy_process_watch = _swig_property(_framework.ModuleProcessCallbacks_cb_destroy_process_watch_get, _framework.ModuleProcessCallbacks_cb_destroy_process_watch_set)
    __swig_destroy__ = _framework.delete_ModuleProcessCallbacks
    __del__ = lambda self: None
ModuleProcessCallbacks_swigregister = _framework.ModuleProcessCallbacks_swigregister
ModuleProcessCallbacks_swigregister(ModuleProcessCallbacks)

class ModuleProcess(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleProcess, name)
    __repr__ = _swig_repr

    def __init__(self, is_abortable=True):
        this = _framework.new_ModuleProcess(is_abortable)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleProcess
    __del__ = lambda self: None

    def run(self, *args):
        return _framework.ModuleProcess_run(self, *args)
    if _newclass:
        class_info = staticmethod(_framework.ModuleProcess_class_info)
    else:
        class_info = _framework.ModuleProcess_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleProcess____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleProcess____class_destructor__

    def get_class_info(self):
        return _framework.ModuleProcess_get_class_info(self)
ModuleProcess_swigregister = _framework.ModuleProcess_swigregister
ModuleProcess_swigregister(ModuleProcess)

def ModuleProcess_class_info():
    return _framework.ModuleProcess_class_info()
ModuleProcess_class_info = _framework.ModuleProcess_class_info

def ModuleProcess____class_destructor__(instance, is_array):
    return _framework.ModuleProcess____class_destructor__(instance, is_array)
ModuleProcess____class_destructor__ = _framework.ModuleProcess____class_destructor__

class ModuleGlObjectCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleGlObjectCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleGlObjectCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleGlObjectCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleGlObjectCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_pre_paint_gl"] = _framework.ModuleGlObjectCallbacks_cb_pre_paint_gl_set
    __swig_getmethods__["cb_pre_paint_gl"] = _framework.ModuleGlObjectCallbacks_cb_pre_paint_gl_get
    if _newclass:
        cb_pre_paint_gl = _swig_property(_framework.ModuleGlObjectCallbacks_cb_pre_paint_gl_get, _framework.ModuleGlObjectCallbacks_cb_pre_paint_gl_set)
    __swig_setmethods__["cb_paint_gl"] = _framework.ModuleGlObjectCallbacks_cb_paint_gl_set
    __swig_getmethods__["cb_paint_gl"] = _framework.ModuleGlObjectCallbacks_cb_paint_gl_get
    if _newclass:
        cb_paint_gl = _swig_property(_framework.ModuleGlObjectCallbacks_cb_paint_gl_get, _framework.ModuleGlObjectCallbacks_cb_paint_gl_set)
    __swig_setmethods__["cb_destroy_gl_data"] = _framework.ModuleGlObjectCallbacks_cb_destroy_gl_data_set
    __swig_getmethods__["cb_destroy_gl_data"] = _framework.ModuleGlObjectCallbacks_cb_destroy_gl_data_get
    if _newclass:
        cb_destroy_gl_data = _swig_property(_framework.ModuleGlObjectCallbacks_cb_destroy_gl_data_get, _framework.ModuleGlObjectCallbacks_cb_destroy_gl_data_set)
    __swig_destroy__ = _framework.delete_ModuleGlObjectCallbacks
    __del__ = lambda self: None
ModuleGlObjectCallbacks_swigregister = _framework.ModuleGlObjectCallbacks_swigregister
ModuleGlObjectCallbacks_swigregister(ModuleGlObjectCallbacks)

class ModuleGlObject(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleGlObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleGlObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleGlObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleGlObject
    __del__ = lambda self: None

    def pre_paint_gl(self, ctx):
        return _framework.ModuleGlObject_pre_paint_gl(self, ctx)

    def paint_gl(self, ctx):
        return _framework.ModuleGlObject_paint_gl(self, ctx)

    def destroy_gl_data(self, gl_ctx):
        return _framework.ModuleGlObject_destroy_gl_data(self, gl_ctx)

    def get_memory_size(self):
        return _framework.ModuleGlObject_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleGlObject_class_info)
    else:
        class_info = _framework.ModuleGlObject_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleGlObject____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleGlObject____class_destructor__

    def get_class_info(self):
        return _framework.ModuleGlObject_get_class_info(self)
ModuleGlObject_swigregister = _framework.ModuleGlObject_swigregister
ModuleGlObject_swigregister(ModuleGlObject)

def ModuleGlObject_class_info():
    return _framework.ModuleGlObject_class_info()
ModuleGlObject_class_info = _framework.ModuleGlObject_class_info

def ModuleGlObject____class_destructor__(instance, is_array):
    return _framework.ModuleGlObject____class_destructor__(instance, is_array)
ModuleGlObject____class_destructor__ = _framework.ModuleGlObject____class_destructor__

EXECUTION_MODE_INTERACTIVE = _framework.EXECUTION_MODE_INTERACTIVE
EXECUTION_MODE_SCRIPT = _framework.EXECUTION_MODE_SCRIPT
EXECUTION_MODE_STATEMENT = _framework.EXECUTION_MODE_STATEMENT
EXECUTION_MODE_COUNT = _framework.EXECUTION_MODE_COUNT

def get_execution_mode_name(mode):
    return _framework.get_execution_mode_name(mode)
get_execution_mode_name = _framework.get_execution_mode_name
class ModuleScriptingCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleScriptingCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleScriptingCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleScriptingCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleScriptingCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_init_engine"] = _framework.ModuleScriptingCallbacks_cb_init_engine_set
    __swig_getmethods__["cb_init_engine"] = _framework.ModuleScriptingCallbacks_cb_init_engine_get
    if _newclass:
        cb_init_engine = _swig_property(_framework.ModuleScriptingCallbacks_cb_init_engine_get, _framework.ModuleScriptingCallbacks_cb_init_engine_set)
    __swig_setmethods__["cb_cleanup_engine"] = _framework.ModuleScriptingCallbacks_cb_cleanup_engine_set
    __swig_getmethods__["cb_cleanup_engine"] = _framework.ModuleScriptingCallbacks_cb_cleanup_engine_get
    if _newclass:
        cb_cleanup_engine = _swig_property(_framework.ModuleScriptingCallbacks_cb_cleanup_engine_get, _framework.ModuleScriptingCallbacks_cb_cleanup_engine_set)
    __swig_setmethods__["cb_interrupt_engine"] = _framework.ModuleScriptingCallbacks_cb_interrupt_engine_set
    __swig_getmethods__["cb_interrupt_engine"] = _framework.ModuleScriptingCallbacks_cb_interrupt_engine_get
    if _newclass:
        cb_interrupt_engine = _swig_property(_framework.ModuleScriptingCallbacks_cb_interrupt_engine_get, _framework.ModuleScriptingCallbacks_cb_interrupt_engine_set)
    __swig_setmethods__["cb_execute_script"] = _framework.ModuleScriptingCallbacks_cb_execute_script_set
    __swig_getmethods__["cb_execute_script"] = _framework.ModuleScriptingCallbacks_cb_execute_script_get
    if _newclass:
        cb_execute_script = _swig_property(_framework.ModuleScriptingCallbacks_cb_execute_script_get, _framework.ModuleScriptingCallbacks_cb_execute_script_set)
    __swig_setmethods__["cb_pre_execute_script"] = _framework.ModuleScriptingCallbacks_cb_pre_execute_script_set
    __swig_getmethods__["cb_pre_execute_script"] = _framework.ModuleScriptingCallbacks_cb_pre_execute_script_get
    if _newclass:
        cb_pre_execute_script = _swig_property(_framework.ModuleScriptingCallbacks_cb_pre_execute_script_get, _framework.ModuleScriptingCallbacks_cb_pre_execute_script_set)
    __swig_setmethods__["cb_post_execute_script"] = _framework.ModuleScriptingCallbacks_cb_post_execute_script_set
    __swig_getmethods__["cb_post_execute_script"] = _framework.ModuleScriptingCallbacks_cb_post_execute_script_get
    if _newclass:
        cb_post_execute_script = _swig_property(_framework.ModuleScriptingCallbacks_cb_post_execute_script_get, _framework.ModuleScriptingCallbacks_cb_post_execute_script_set)
    __swig_setmethods__["cb_get_scripting_command"] = _framework.ModuleScriptingCallbacks_cb_get_scripting_command_set
    __swig_getmethods__["cb_get_scripting_command"] = _framework.ModuleScriptingCallbacks_cb_get_scripting_command_get
    if _newclass:
        cb_get_scripting_command = _swig_property(_framework.ModuleScriptingCallbacks_cb_get_scripting_command_get, _framework.ModuleScriptingCallbacks_cb_get_scripting_command_set)
    __swig_setmethods__["cb_build_completion_list"] = _framework.ModuleScriptingCallbacks_cb_build_completion_list_set
    __swig_getmethods__["cb_build_completion_list"] = _framework.ModuleScriptingCallbacks_cb_build_completion_list_get
    if _newclass:
        cb_build_completion_list = _swig_property(_framework.ModuleScriptingCallbacks_cb_build_completion_list_get, _framework.ModuleScriptingCallbacks_cb_build_completion_list_set)
    __swig_setmethods__["cb_get_help"] = _framework.ModuleScriptingCallbacks_cb_get_help_set
    __swig_getmethods__["cb_get_help"] = _framework.ModuleScriptingCallbacks_cb_get_help_get
    if _newclass:
        cb_get_help = _swig_property(_framework.ModuleScriptingCallbacks_cb_get_help_get, _framework.ModuleScriptingCallbacks_cb_get_help_set)
    __swig_destroy__ = _framework.delete_ModuleScriptingCallbacks
    __del__ = lambda self: None
ModuleScriptingCallbacks_swigregister = _framework.ModuleScriptingCallbacks_swigregister
ModuleScriptingCallbacks_swigregister(ModuleScriptingCallbacks)

class ModuleScripting(ModuleObject):
    __swig_setmethods__ = {}
    for _s in [ModuleObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleScripting, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleScripting, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleScripting()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleScripting
    __del__ = lambda self: None

    def pre_execute_script(self):
        return _framework.ModuleScripting_pre_execute_script(self)

    def execute_script(self, *args):
        return _framework.ModuleScripting_execute_script(self, *args)

    def post_execute_script(self):
        return _framework.ModuleScripting_post_execute_script(self)

    def execute_single_script(self, *args):
        return _framework.ModuleScripting_execute_single_script(self, *args)

    def interrupt_script(self):
        return _framework.ModuleScripting_interrupt_script(self)

    def get_language(self):
        return _framework.ModuleScripting_get_language(self)

    def is_engine_initialized(self):
        return _framework.ModuleScripting_is_engine_initialized(self)

    def is_running(self):
        return _framework.ModuleScripting_is_running(self)

    def is_scripting_command_defined(self):
        return _framework.ModuleScripting_is_scripting_command_defined(self)

    def get_scripting_command(self, command_id, arguments):
        return _framework.ModuleScripting_get_scripting_command(self, command_id, arguments)

    def use_completion(self):
        return _framework.ModuleScripting_use_completion(self)

    def build_completion_list(self):
        return _framework.ModuleScripting_build_completion_list(self)

    def get_help(self, command):
        return _framework.ModuleScripting_get_help(self, command)
    if _newclass:
        register_directives = staticmethod(_framework.ModuleScripting_register_directives)
    else:
        register_directives = _framework.ModuleScripting_register_directives
    if _newclass:
        class_info = staticmethod(_framework.ModuleScripting_class_info)
    else:
        class_info = _framework.ModuleScripting_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleScripting____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleScripting____class_destructor__

    def get_class_info(self):
        return _framework.ModuleScripting_get_class_info(self)
ModuleScripting_swigregister = _framework.ModuleScripting_swigregister
ModuleScripting_swigregister(ModuleScripting)

def ModuleScripting_register_directives(app):
    return _framework.ModuleScripting_register_directives(app)
ModuleScripting_register_directives = _framework.ModuleScripting_register_directives

def ModuleScripting_class_info():
    return _framework.ModuleScripting_class_info()
ModuleScripting_class_info = _framework.ModuleScripting_class_info

def ModuleScripting____class_destructor__(instance, is_array):
    return _framework.ModuleScripting____class_destructor__(instance, is_array)
ModuleScripting____class_destructor__ = _framework.ModuleScripting____class_destructor__

class ModuleToolCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleToolCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleToolCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleToolCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleToolCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_get_options"] = _framework.ModuleToolCallbacks_cb_get_options_set
    __swig_getmethods__["cb_get_options"] = _framework.ModuleToolCallbacks_cb_get_options_get
    if _newclass:
        cb_get_options = _swig_property(_framework.ModuleToolCallbacks_cb_get_options_get, _framework.ModuleToolCallbacks_cb_get_options_set)
    __swig_setmethods__["cb_enter_tool"] = _framework.ModuleToolCallbacks_cb_enter_tool_set
    __swig_getmethods__["cb_enter_tool"] = _framework.ModuleToolCallbacks_cb_enter_tool_get
    if _newclass:
        cb_enter_tool = _swig_property(_framework.ModuleToolCallbacks_cb_enter_tool_get, _framework.ModuleToolCallbacks_cb_enter_tool_set)
    __swig_setmethods__["cb_leave_tool"] = _framework.ModuleToolCallbacks_cb_leave_tool_set
    __swig_getmethods__["cb_leave_tool"] = _framework.ModuleToolCallbacks_cb_leave_tool_get
    if _newclass:
        cb_leave_tool = _swig_property(_framework.ModuleToolCallbacks_cb_leave_tool_get, _framework.ModuleToolCallbacks_cb_leave_tool_set)
    __swig_setmethods__["cb_pre_destroy_tool"] = _framework.ModuleToolCallbacks_cb_pre_destroy_tool_set
    __swig_getmethods__["cb_pre_destroy_tool"] = _framework.ModuleToolCallbacks_cb_pre_destroy_tool_get
    if _newclass:
        cb_pre_destroy_tool = _swig_property(_framework.ModuleToolCallbacks_cb_pre_destroy_tool_get, _framework.ModuleToolCallbacks_cb_pre_destroy_tool_set)
    __swig_setmethods__["cb_update_tool"] = _framework.ModuleToolCallbacks_cb_update_tool_set
    __swig_getmethods__["cb_update_tool"] = _framework.ModuleToolCallbacks_cb_update_tool_get
    if _newclass:
        cb_update_tool = _swig_property(_framework.ModuleToolCallbacks_cb_update_tool_get, _framework.ModuleToolCallbacks_cb_update_tool_set)
    __swig_setmethods__["cb_draw_tool"] = _framework.ModuleToolCallbacks_cb_draw_tool_set
    __swig_getmethods__["cb_draw_tool"] = _framework.ModuleToolCallbacks_cb_draw_tool_get
    if _newclass:
        cb_draw_tool = _swig_property(_framework.ModuleToolCallbacks_cb_draw_tool_get, _framework.ModuleToolCallbacks_cb_draw_tool_set)
    __swig_setmethods__["cb_draw_tool_2d"] = _framework.ModuleToolCallbacks_cb_draw_tool_2d_set
    __swig_getmethods__["cb_draw_tool_2d"] = _framework.ModuleToolCallbacks_cb_draw_tool_2d_get
    if _newclass:
        cb_draw_tool_2d = _swig_property(_framework.ModuleToolCallbacks_cb_draw_tool_2d_get, _framework.ModuleToolCallbacks_cb_draw_tool_2d_set)
    __swig_setmethods__["cb_draw_tool_3d"] = _framework.ModuleToolCallbacks_cb_draw_tool_3d_set
    __swig_getmethods__["cb_draw_tool_3d"] = _framework.ModuleToolCallbacks_cb_draw_tool_3d_get
    if _newclass:
        cb_draw_tool_3d = _swig_property(_framework.ModuleToolCallbacks_cb_draw_tool_3d_get, _framework.ModuleToolCallbacks_cb_draw_tool_3d_set)
    __swig_setmethods__["cb_get_tool_bbox"] = _framework.ModuleToolCallbacks_cb_get_tool_bbox_set
    __swig_getmethods__["cb_get_tool_bbox"] = _framework.ModuleToolCallbacks_cb_get_tool_bbox_get
    if _newclass:
        cb_get_tool_bbox = _swig_property(_framework.ModuleToolCallbacks_cb_get_tool_bbox_get, _framework.ModuleToolCallbacks_cb_get_tool_bbox_set)
    __swig_setmethods__["cb_get_actions"] = _framework.ModuleToolCallbacks_cb_get_actions_set
    __swig_getmethods__["cb_get_actions"] = _framework.ModuleToolCallbacks_cb_get_actions_get
    if _newclass:
        cb_get_actions = _swig_property(_framework.ModuleToolCallbacks_cb_get_actions_get, _framework.ModuleToolCallbacks_cb_get_actions_set)
    __swig_setmethods__["cb_is_hidden_item"] = _framework.ModuleToolCallbacks_cb_is_hidden_item_set
    __swig_getmethods__["cb_is_hidden_item"] = _framework.ModuleToolCallbacks_cb_is_hidden_item_get
    if _newclass:
        cb_is_hidden_item = _swig_property(_framework.ModuleToolCallbacks_cb_is_hidden_item_get, _framework.ModuleToolCallbacks_cb_is_hidden_item_set)
    __swig_setmethods__["cb_process_event"] = _framework.ModuleToolCallbacks_cb_process_event_set
    __swig_getmethods__["cb_process_event"] = _framework.ModuleToolCallbacks_cb_process_event_get
    if _newclass:
        cb_process_event = _swig_property(_framework.ModuleToolCallbacks_cb_process_event_get, _framework.ModuleToolCallbacks_cb_process_event_set)
    __swig_destroy__ = _framework.delete_ModuleToolCallbacks
    __del__ = lambda self: None
ModuleToolCallbacks_swigregister = _framework.ModuleToolCallbacks_swigregister
ModuleToolCallbacks_swigregister(ModuleToolCallbacks)

class ModuleTool(ModuleObject):
    __swig_setmethods__ = {}
    for _s in [ModuleObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleTool, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleTool, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleTool
    __del__ = lambda self: None

    def get_options(self, parent):
        return _framework.ModuleTool_get_options(self, parent)

    def enter(self, ctx):
        return _framework.ModuleTool_enter(self, ctx)

    def leave(self, ctx):
        return _framework.ModuleTool_leave(self, ctx)

    def pre_destroy(self, ctx):
        return _framework.ModuleTool_pre_destroy(self, ctx)

    def update(self, ctx):
        return _framework.ModuleTool_update(self, ctx)

    def set_description(self, str):
        return _framework.ModuleTool_set_description(self, str)

    def get_description(self):
        return _framework.ModuleTool_get_description(self)

    def is_active(self):
        return _framework.ModuleTool_is_active(self)

    def draw(self, ctx, draw):
        return _framework.ModuleTool_draw(self, ctx, draw)

    def draw_2d(self, ctx):
        return _framework.ModuleTool_draw_2d(self, ctx)

    def draw_3d(self, ctx):
        return _framework.ModuleTool_draw_3d(self, ctx)

    def process_event(self, ctx, evt):
        return _framework.ModuleTool_process_event(self, ctx, evt)

    def get_bbox(self, ctx, box):
        return _framework.ModuleTool_get_bbox(self, ctx, box)

    def get_actions(self, actions):
        return _framework.ModuleTool_get_actions(self, actions)

    def is_hidden_item(self, ctx, item):
        return _framework.ModuleTool_is_hidden_item(self, ctx, item)

    def reset_attribute(self, attr):
        return _framework.ModuleTool_reset_attribute(self, attr)
    if _newclass:
        set_gizmo_world_pivot = staticmethod(_framework.ModuleTool_set_gizmo_world_pivot)
    else:
        set_gizmo_world_pivot = _framework.ModuleTool_set_gizmo_world_pivot
    if _newclass:
        set_gizmo_custom_offset = staticmethod(_framework.ModuleTool_set_gizmo_custom_offset)
    else:
        set_gizmo_custom_offset = _framework.ModuleTool_set_gizmo_custom_offset
    if _newclass:
        get_gizmo_world_pivot = staticmethod(_framework.ModuleTool_get_gizmo_world_pivot)
    else:
        get_gizmo_world_pivot = _framework.ModuleTool_get_gizmo_world_pivot
    if _newclass:
        get_gizmo_custom_offset = staticmethod(_framework.ModuleTool_get_gizmo_custom_offset)
    else:
        get_gizmo_custom_offset = _framework.ModuleTool_get_gizmo_custom_offset
    if _newclass:
        set_gizmo_translate_increment = staticmethod(_framework.ModuleTool_set_gizmo_translate_increment)
    else:
        set_gizmo_translate_increment = _framework.ModuleTool_set_gizmo_translate_increment
    if _newclass:
        set_gizmo_rotate_increment = staticmethod(_framework.ModuleTool_set_gizmo_rotate_increment)
    else:
        set_gizmo_rotate_increment = _framework.ModuleTool_set_gizmo_rotate_increment
    if _newclass:
        set_gizmo_scale_increment = staticmethod(_framework.ModuleTool_set_gizmo_scale_increment)
    else:
        set_gizmo_scale_increment = _framework.ModuleTool_set_gizmo_scale_increment
    if _newclass:
        get_gizmo_translate_increment = staticmethod(_framework.ModuleTool_get_gizmo_translate_increment)
    else:
        get_gizmo_translate_increment = _framework.ModuleTool_get_gizmo_translate_increment
    if _newclass:
        get_gizmo_rotate_increment = staticmethod(_framework.ModuleTool_get_gizmo_rotate_increment)
    else:
        get_gizmo_rotate_increment = _framework.ModuleTool_get_gizmo_rotate_increment
    if _newclass:
        get_gizmo_scale_increment = staticmethod(_framework.ModuleTool_get_gizmo_scale_increment)
    else:
        get_gizmo_scale_increment = _framework.ModuleTool_get_gizmo_scale_increment
    MODE_VALUE = _framework.ModuleTool_MODE_VALUE
    MODE_OFFSET = _framework.ModuleTool_MODE_OFFSET
    MODE_PIVOT = _framework.ModuleTool_MODE_PIVOT
    MODE_COUNT = _framework.ModuleTool_MODE_COUNT
    if _newclass:
        set_mode = staticmethod(_framework.ModuleTool_set_mode)
    else:
        set_mode = _framework.ModuleTool_set_mode
    if _newclass:
        get_mode = staticmethod(_framework.ModuleTool_get_mode)
    else:
        get_mode = _framework.ModuleTool_get_mode
    SPACE_LOCAL = _framework.ModuleTool_SPACE_LOCAL
    SPACE_WORLD = _framework.ModuleTool_SPACE_WORLD
    SPACE_GIZMO = _framework.ModuleTool_SPACE_GIZMO
    SPACE_TRA_OBJECT = _framework.ModuleTool_SPACE_TRA_OBJECT
    SPACE_ROT_GIMBAL = _framework.ModuleTool_SPACE_ROT_GIMBAL
    SPACE_COUNT = _framework.ModuleTool_SPACE_COUNT
    if _newclass:
        set_space = staticmethod(_framework.ModuleTool_set_space)
    else:
        set_space = _framework.ModuleTool_set_space
    if _newclass:
        get_space = staticmethod(_framework.ModuleTool_get_space)
    else:
        get_space = _framework.ModuleTool_get_space
    if _newclass:
        set_transform_space = staticmethod(_framework.ModuleTool_set_transform_space)
    else:
        set_transform_space = _framework.ModuleTool_set_transform_space
    if _newclass:
        get_transform_space = staticmethod(_framework.ModuleTool_get_transform_space)
    else:
        get_transform_space = _framework.ModuleTool_get_transform_space
    if _newclass:
        set_linked_space = staticmethod(_framework.ModuleTool_set_linked_space)
    else:
        set_linked_space = _framework.ModuleTool_set_linked_space
    if _newclass:
        is_linked_space = staticmethod(_framework.ModuleTool_is_linked_space)
    else:
        is_linked_space = _framework.ModuleTool_is_linked_space
    if _newclass:
        class_info = staticmethod(_framework.ModuleTool_class_info)
    else:
        class_info = _framework.ModuleTool_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleTool____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleTool____class_destructor__

    def get_class_info(self):
        return _framework.ModuleTool_get_class_info(self)
ModuleTool_swigregister = _framework.ModuleTool_swigregister
ModuleTool_swigregister(ModuleTool)

def ModuleTool_set_gizmo_world_pivot(v):
    return _framework.ModuleTool_set_gizmo_world_pivot(v)
ModuleTool_set_gizmo_world_pivot = _framework.ModuleTool_set_gizmo_world_pivot

def ModuleTool_set_gizmo_custom_offset(v):
    return _framework.ModuleTool_set_gizmo_custom_offset(v)
ModuleTool_set_gizmo_custom_offset = _framework.ModuleTool_set_gizmo_custom_offset

def ModuleTool_get_gizmo_world_pivot():
    return _framework.ModuleTool_get_gizmo_world_pivot()
ModuleTool_get_gizmo_world_pivot = _framework.ModuleTool_get_gizmo_world_pivot

def ModuleTool_get_gizmo_custom_offset():
    return _framework.ModuleTool_get_gizmo_custom_offset()
ModuleTool_get_gizmo_custom_offset = _framework.ModuleTool_get_gizmo_custom_offset

def ModuleTool_set_gizmo_translate_increment(d):
    return _framework.ModuleTool_set_gizmo_translate_increment(d)
ModuleTool_set_gizmo_translate_increment = _framework.ModuleTool_set_gizmo_translate_increment

def ModuleTool_set_gizmo_rotate_increment(d):
    return _framework.ModuleTool_set_gizmo_rotate_increment(d)
ModuleTool_set_gizmo_rotate_increment = _framework.ModuleTool_set_gizmo_rotate_increment

def ModuleTool_set_gizmo_scale_increment(d):
    return _framework.ModuleTool_set_gizmo_scale_increment(d)
ModuleTool_set_gizmo_scale_increment = _framework.ModuleTool_set_gizmo_scale_increment

def ModuleTool_get_gizmo_translate_increment():
    return _framework.ModuleTool_get_gizmo_translate_increment()
ModuleTool_get_gizmo_translate_increment = _framework.ModuleTool_get_gizmo_translate_increment

def ModuleTool_get_gizmo_rotate_increment():
    return _framework.ModuleTool_get_gizmo_rotate_increment()
ModuleTool_get_gizmo_rotate_increment = _framework.ModuleTool_get_gizmo_rotate_increment

def ModuleTool_get_gizmo_scale_increment():
    return _framework.ModuleTool_get_gizmo_scale_increment()
ModuleTool_get_gizmo_scale_increment = _framework.ModuleTool_get_gizmo_scale_increment

def ModuleTool_set_mode(m):
    return _framework.ModuleTool_set_mode(m)
ModuleTool_set_mode = _framework.ModuleTool_set_mode

def ModuleTool_get_mode():
    return _framework.ModuleTool_get_mode()
ModuleTool_get_mode = _framework.ModuleTool_get_mode

def ModuleTool_set_space(s):
    return _framework.ModuleTool_set_space(s)
ModuleTool_set_space = _framework.ModuleTool_set_space

def ModuleTool_get_space():
    return _framework.ModuleTool_get_space()
ModuleTool_get_space = _framework.ModuleTool_get_space

def ModuleTool_set_transform_space(s):
    return _framework.ModuleTool_set_transform_space(s)
ModuleTool_set_transform_space = _framework.ModuleTool_set_transform_space

def ModuleTool_get_transform_space():
    return _framework.ModuleTool_get_transform_space()
ModuleTool_get_transform_space = _framework.ModuleTool_get_transform_space

def ModuleTool_set_linked_space(link):
    return _framework.ModuleTool_set_linked_space(link)
ModuleTool_set_linked_space = _framework.ModuleTool_set_linked_space

def ModuleTool_is_linked_space():
    return _framework.ModuleTool_is_linked_space()
ModuleTool_is_linked_space = _framework.ModuleTool_is_linked_space

def ModuleTool_class_info():
    return _framework.ModuleTool_class_info()
ModuleTool_class_info = _framework.ModuleTool_class_info

def ModuleTool____class_destructor__(instance, is_array):
    return _framework.ModuleTool____class_destructor__(instance, is_array)
ModuleTool____class_destructor__ = _framework.ModuleTool____class_destructor__

class ModuleWidgetQuery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleWidgetQuery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleWidgetQuery, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleWidgetQuery()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["x"] = _framework.ModuleWidgetQuery_x_set
    __swig_getmethods__["x"] = _framework.ModuleWidgetQuery_x_get
    if _newclass:
        x = _swig_property(_framework.ModuleWidgetQuery_x_get, _framework.ModuleWidgetQuery_x_set)
    __swig_setmethods__["y"] = _framework.ModuleWidgetQuery_y_set
    __swig_getmethods__["y"] = _framework.ModuleWidgetQuery_y_get
    if _newclass:
        y = _swig_property(_framework.ModuleWidgetQuery_y_get, _framework.ModuleWidgetQuery_y_set)
    __swig_setmethods__["dx"] = _framework.ModuleWidgetQuery_dx_set
    __swig_getmethods__["dx"] = _framework.ModuleWidgetQuery_dx_get
    if _newclass:
        dx = _swig_property(_framework.ModuleWidgetQuery_dx_get, _framework.ModuleWidgetQuery_dx_set)
    __swig_setmethods__["dy"] = _framework.ModuleWidgetQuery_dy_set
    __swig_getmethods__["dy"] = _framework.ModuleWidgetQuery_dy_get
    if _newclass:
        dy = _swig_property(_framework.ModuleWidgetQuery_dy_get, _framework.ModuleWidgetQuery_dy_set)
    __swig_setmethods__["alpha_threshold"] = _framework.ModuleWidgetQuery_alpha_threshold_set
    __swig_getmethods__["alpha_threshold"] = _framework.ModuleWidgetQuery_alpha_threshold_get
    if _newclass:
        alpha_threshold = _swig_property(_framework.ModuleWidgetQuery_alpha_threshold_get, _framework.ModuleWidgetQuery_alpha_threshold_set)
    __swig_setmethods__["local_object"] = _framework.ModuleWidgetQuery_local_object_set
    __swig_getmethods__["local_object"] = _framework.ModuleWidgetQuery_local_object_get
    if _newclass:
        local_object = _swig_property(_framework.ModuleWidgetQuery_local_object_get, _framework.ModuleWidgetQuery_local_object_set)
    __swig_setmethods__["specified_group"] = _framework.ModuleWidgetQuery_specified_group_set
    __swig_getmethods__["specified_group"] = _framework.ModuleWidgetQuery_specified_group_get
    if _newclass:
        specified_group = _swig_property(_framework.ModuleWidgetQuery_specified_group_get, _framework.ModuleWidgetQuery_specified_group_set)
    __swig_setmethods__["items"] = _framework.ModuleWidgetQuery_items_set
    __swig_getmethods__["items"] = _framework.ModuleWidgetQuery_items_get
    if _newclass:
        items = _swig_property(_framework.ModuleWidgetQuery_items_get, _framework.ModuleWidgetQuery_items_set)
    __swig_setmethods__["exclude_items"] = _framework.ModuleWidgetQuery_exclude_items_set
    __swig_getmethods__["exclude_items"] = _framework.ModuleWidgetQuery_exclude_items_get
    if _newclass:
        exclude_items = _swig_property(_framework.ModuleWidgetQuery_exclude_items_get, _framework.ModuleWidgetQuery_exclude_items_set)
    __swig_setmethods__["filter_3dview_unpickable"] = _framework.ModuleWidgetQuery_filter_3dview_unpickable_set
    __swig_getmethods__["filter_3dview_unpickable"] = _framework.ModuleWidgetQuery_filter_3dview_unpickable_get
    if _newclass:
        filter_3dview_unpickable = _swig_property(_framework.ModuleWidgetQuery_filter_3dview_unpickable_get, _framework.ModuleWidgetQuery_filter_3dview_unpickable_set)
    __swig_setmethods__["pick_vertices_point_cloud_only"] = _framework.ModuleWidgetQuery_pick_vertices_point_cloud_only_set
    __swig_getmethods__["pick_vertices_point_cloud_only"] = _framework.ModuleWidgetQuery_pick_vertices_point_cloud_only_get
    if _newclass:
        pick_vertices_point_cloud_only = _swig_property(_framework.ModuleWidgetQuery_pick_vertices_point_cloud_only_get, _framework.ModuleWidgetQuery_pick_vertices_point_cloud_only_set)
    __swig_setmethods__["pick_vertices_screen_space_coordinate"] = _framework.ModuleWidgetQuery_pick_vertices_screen_space_coordinate_set
    __swig_getmethods__["pick_vertices_screen_space_coordinate"] = _framework.ModuleWidgetQuery_pick_vertices_screen_space_coordinate_get
    if _newclass:
        pick_vertices_screen_space_coordinate = _swig_property(_framework.ModuleWidgetQuery_pick_vertices_screen_space_coordinate_get, _framework.ModuleWidgetQuery_pick_vertices_screen_space_coordinate_set)
    __swig_setmethods__["pick_vertices_clip_distance"] = _framework.ModuleWidgetQuery_pick_vertices_clip_distance_set
    __swig_getmethods__["pick_vertices_clip_distance"] = _framework.ModuleWidgetQuery_pick_vertices_clip_distance_get
    if _newclass:
        pick_vertices_clip_distance = _swig_property(_framework.ModuleWidgetQuery_pick_vertices_clip_distance_get, _framework.ModuleWidgetQuery_pick_vertices_clip_distance_set)
    __swig_destroy__ = _framework.delete_ModuleWidgetQuery
    __del__ = lambda self: None
ModuleWidgetQuery_swigregister = _framework.ModuleWidgetQuery_swigregister
ModuleWidgetQuery_swigregister(ModuleWidgetQuery)

class ModuleWidgetCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleWidgetCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleWidgetCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleWidgetCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleWidgetCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_on_selection_change"] = _framework.ModuleWidgetCallbacks_cb_on_selection_change_set
    __swig_getmethods__["cb_on_selection_change"] = _framework.ModuleWidgetCallbacks_cb_on_selection_change_get
    if _newclass:
        cb_on_selection_change = _swig_property(_framework.ModuleWidgetCallbacks_cb_on_selection_change_get, _framework.ModuleWidgetCallbacks_cb_on_selection_change_set)
    __swig_setmethods__["cb_on_application_context_change"] = _framework.ModuleWidgetCallbacks_cb_on_application_context_change_set
    __swig_getmethods__["cb_on_application_context_change"] = _framework.ModuleWidgetCallbacks_cb_on_application_context_change_get
    if _newclass:
        cb_on_application_context_change = _swig_property(_framework.ModuleWidgetCallbacks_cb_on_application_context_change_get, _framework.ModuleWidgetCallbacks_cb_on_application_context_change_set)
    __swig_setmethods__["cb_display_items"] = _framework.ModuleWidgetCallbacks_cb_display_items_set
    __swig_getmethods__["cb_display_items"] = _framework.ModuleWidgetCallbacks_cb_display_items_get
    if _newclass:
        cb_display_items = _swig_property(_framework.ModuleWidgetCallbacks_cb_display_items_get, _framework.ModuleWidgetCallbacks_cb_display_items_set)
    __swig_setmethods__["cb_create_widget"] = _framework.ModuleWidgetCallbacks_cb_create_widget_set
    __swig_getmethods__["cb_create_widget"] = _framework.ModuleWidgetCallbacks_cb_create_widget_get
    if _newclass:
        cb_create_widget = _swig_property(_framework.ModuleWidgetCallbacks_cb_create_widget_get, _framework.ModuleWidgetCallbacks_cb_create_widget_set)
    __swig_setmethods__["cb_destroy_widget"] = _framework.ModuleWidgetCallbacks_cb_destroy_widget_set
    __swig_getmethods__["cb_destroy_widget"] = _framework.ModuleWidgetCallbacks_cb_destroy_widget_get
    if _newclass:
        cb_destroy_widget = _swig_property(_framework.ModuleWidgetCallbacks_cb_destroy_widget_get, _framework.ModuleWidgetCallbacks_cb_destroy_widget_set)
    __swig_setmethods__["cb_load_settings"] = _framework.ModuleWidgetCallbacks_cb_load_settings_set
    __swig_getmethods__["cb_load_settings"] = _framework.ModuleWidgetCallbacks_cb_load_settings_get
    if _newclass:
        cb_load_settings = _swig_property(_framework.ModuleWidgetCallbacks_cb_load_settings_get, _framework.ModuleWidgetCallbacks_cb_load_settings_set)
    __swig_setmethods__["cb_save_settings"] = _framework.ModuleWidgetCallbacks_cb_save_settings_set
    __swig_getmethods__["cb_save_settings"] = _framework.ModuleWidgetCallbacks_cb_save_settings_get
    if _newclass:
        cb_save_settings = _swig_property(_framework.ModuleWidgetCallbacks_cb_save_settings_get, _framework.ModuleWidgetCallbacks_cb_save_settings_set)
    __swig_setmethods__["cb_pick_items"] = _framework.ModuleWidgetCallbacks_cb_pick_items_set
    __swig_getmethods__["cb_pick_items"] = _framework.ModuleWidgetCallbacks_cb_pick_items_get
    if _newclass:
        cb_pick_items = _swig_property(_framework.ModuleWidgetCallbacks_cb_pick_items_get, _framework.ModuleWidgetCallbacks_cb_pick_items_set)
    __swig_setmethods__["cb_pick_color"] = _framework.ModuleWidgetCallbacks_cb_pick_color_set
    __swig_getmethods__["cb_pick_color"] = _framework.ModuleWidgetCallbacks_cb_pick_color_get
    if _newclass:
        cb_pick_color = _swig_property(_framework.ModuleWidgetCallbacks_cb_pick_color_get, _framework.ModuleWidgetCallbacks_cb_pick_color_set)
    __swig_setmethods__["cb_pick_vertices"] = _framework.ModuleWidgetCallbacks_cb_pick_vertices_set
    __swig_getmethods__["cb_pick_vertices"] = _framework.ModuleWidgetCallbacks_cb_pick_vertices_get
    if _newclass:
        cb_pick_vertices = _swig_property(_framework.ModuleWidgetCallbacks_cb_pick_vertices_get, _framework.ModuleWidgetCallbacks_cb_pick_vertices_set)
    __swig_setmethods__["cb_raycast"] = _framework.ModuleWidgetCallbacks_cb_raycast_set
    __swig_getmethods__["cb_raycast"] = _framework.ModuleWidgetCallbacks_cb_raycast_get
    if _newclass:
        cb_raycast = _swig_property(_framework.ModuleWidgetCallbacks_cb_raycast_get, _framework.ModuleWidgetCallbacks_cb_raycast_set)
    __swig_setmethods__["cb_get_sticky_selection"] = _framework.ModuleWidgetCallbacks_cb_get_sticky_selection_set
    __swig_getmethods__["cb_get_sticky_selection"] = _framework.ModuleWidgetCallbacks_cb_get_sticky_selection_get
    if _newclass:
        cb_get_sticky_selection = _swig_property(_framework.ModuleWidgetCallbacks_cb_get_sticky_selection_get, _framework.ModuleWidgetCallbacks_cb_get_sticky_selection_set)
    __swig_setmethods__["cb_auto_evaluation"] = _framework.ModuleWidgetCallbacks_cb_auto_evaluation_set
    __swig_getmethods__["cb_auto_evaluation"] = _framework.ModuleWidgetCallbacks_cb_auto_evaluation_get
    if _newclass:
        cb_auto_evaluation = _swig_property(_framework.ModuleWidgetCallbacks_cb_auto_evaluation_get, _framework.ModuleWidgetCallbacks_cb_auto_evaluation_set)
    __swig_setmethods__["cb_refresh_evaluation"] = _framework.ModuleWidgetCallbacks_cb_refresh_evaluation_set
    __swig_getmethods__["cb_refresh_evaluation"] = _framework.ModuleWidgetCallbacks_cb_refresh_evaluation_get
    if _newclass:
        cb_refresh_evaluation = _swig_property(_framework.ModuleWidgetCallbacks_cb_refresh_evaluation_get, _framework.ModuleWidgetCallbacks_cb_refresh_evaluation_set)
    __swig_setmethods__["cb_can_evaluate"] = _framework.ModuleWidgetCallbacks_cb_can_evaluate_set
    __swig_getmethods__["cb_can_evaluate"] = _framework.ModuleWidgetCallbacks_cb_can_evaluate_get
    if _newclass:
        cb_can_evaluate = _swig_property(_framework.ModuleWidgetCallbacks_cb_can_evaluate_get, _framework.ModuleWidgetCallbacks_cb_can_evaluate_set)
    __swig_setmethods__["cb_screen_to_view"] = _framework.ModuleWidgetCallbacks_cb_screen_to_view_set
    __swig_getmethods__["cb_screen_to_view"] = _framework.ModuleWidgetCallbacks_cb_screen_to_view_get
    if _newclass:
        cb_screen_to_view = _swig_property(_framework.ModuleWidgetCallbacks_cb_screen_to_view_get, _framework.ModuleWidgetCallbacks_cb_screen_to_view_set)
    __swig_destroy__ = _framework.delete_ModuleWidgetCallbacks
    __del__ = lambda self: None
ModuleWidgetCallbacks_swigregister = _framework.ModuleWidgetCallbacks_swigregister
ModuleWidgetCallbacks_swigregister(ModuleWidgetCallbacks)

class ModuleWidget(ModuleObject):
    __swig_setmethods__ = {}
    for _s in [ModuleObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleWidget, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleWidget()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleWidget
    __del__ = lambda self: None

    def set_selection_group(self, *args):
        return _framework.ModuleWidget_set_selection_group(self, *args)

    def add_selection_group(self, group):
        return _framework.ModuleWidget_add_selection_group(self, group)

    def set_selection_slot(self, slot):
        return _framework.ModuleWidget_set_selection_slot(self, slot)

    def get_selection_slot(self):
        return _framework.ModuleWidget_get_selection_slot(self)

    def clear_selection_group(self):
        return _framework.ModuleWidget_clear_selection_group(self)

    def get_selection_groups(self):
        return _framework.ModuleWidget_get_selection_groups(self)

    def set_item_filter(self, *args):
        return _framework.ModuleWidget_set_item_filter(self, *args)

    def add_item_filter(self, filter):
        return _framework.ModuleWidget_add_item_filter(self, filter)

    def clear_item_filter(self):
        return _framework.ModuleWidget_clear_item_filter(self)

    def get_item_filters(self):
        return _framework.ModuleWidget_get_item_filters(self)

    def on_selection_change(self, group, selection):
        return _framework.ModuleWidget_on_selection_change(self, group, selection)

    def on_application_context_change(self, context):
        return _framework.ModuleWidget_on_application_context_change(self, context)

    def display_items(self, items):
        return _framework.ModuleWidget_display_items(self, items)

    def create_widget(self, parent):
        return _framework.ModuleWidget_create_widget(self, parent)

    def get_widget(self):
        return _framework.ModuleWidget_get_widget(self)

    def load_settings(self, settings):
        return _framework.ModuleWidget_load_settings(self, settings)

    def save_settings(self, settings):
        return _framework.ModuleWidget_save_settings(self, settings)

    def pick_items(self, eval_ctx, items, query):
        return _framework.ModuleWidget_pick_items(self, eval_ctx, items, query)

    def pick_color(self, eval_ctx, color, query):
        return _framework.ModuleWidget_pick_color(self, eval_ctx, color, query)

    def pick_vertices(self, eval_ctx, vertices, query):
        return _framework.ModuleWidget_pick_vertices(self, eval_ctx, vertices, query)

    def raycast(self, eval_ctx, inter, query):
        return _framework.ModuleWidget_raycast(self, eval_ctx, inter, query)

    def screen_to_view(self, xy, widget_xy):
        return _framework.ModuleWidget_screen_to_view(self, xy, widget_xy)

    def auto_evaluation(self, state):
        return _framework.ModuleWidget_auto_evaluation(self, state)

    def refresh_evaluation(self):
        return _framework.ModuleWidget_refresh_evaluation(self)

    def can_evaluate(self):
        return _framework.ModuleWidget_can_evaluate(self)

    def get_sticky_selection(self, selection):
        return _framework.ModuleWidget_get_sticky_selection(self, selection)

    def use_auto_evaluation(self):
        return _framework.ModuleWidget_use_auto_evaluation(self)

    def use_sticky_selection(self):
        return _framework.ModuleWidget_use_sticky_selection(self)

    def dnd_enter(self, objects):
        return _framework.ModuleWidget_dnd_enter(self, objects)

    def dnd_leave(self):
        return _framework.ModuleWidget_dnd_leave(self)

    def dnd_release(self):
        return _framework.ModuleWidget_dnd_release(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleWidget_class_info)
    else:
        class_info = _framework.ModuleWidget_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleWidget____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleWidget____class_destructor__

    def get_class_info(self):
        return _framework.ModuleWidget_get_class_info(self)
ModuleWidget_swigregister = _framework.ModuleWidget_swigregister
ModuleWidget_swigregister(ModuleWidget)

def ModuleWidget_class_info():
    return _framework.ModuleWidget_class_info()
ModuleWidget_class_info = _framework.ModuleWidget_class_info

def ModuleWidget____class_destructor__(instance, is_array):
    return _framework.ModuleWidget____class_destructor__(instance, is_array)
ModuleWidget____class_destructor__ = _framework.ModuleWidget____class_destructor__

class ModuleConstraintCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleConstraintCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleConstraintCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleConstraintCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleConstraintCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_apply_constraint"] = _framework.ModuleConstraintCallbacks_cb_apply_constraint_set
    __swig_getmethods__["cb_apply_constraint"] = _framework.ModuleConstraintCallbacks_cb_apply_constraint_get
    if _newclass:
        cb_apply_constraint = _swig_property(_framework.ModuleConstraintCallbacks_cb_apply_constraint_get, _framework.ModuleConstraintCallbacks_cb_apply_constraint_set)
    __swig_setmethods__["cb_xform_modifier"] = _framework.ModuleConstraintCallbacks_cb_xform_modifier_set
    __swig_getmethods__["cb_xform_modifier"] = _framework.ModuleConstraintCallbacks_cb_xform_modifier_get
    if _newclass:
        cb_xform_modifier = _swig_property(_framework.ModuleConstraintCallbacks_cb_xform_modifier_get, _framework.ModuleConstraintCallbacks_cb_xform_modifier_set)
    __swig_destroy__ = _framework.delete_ModuleConstraintCallbacks
    __del__ = lambda self: None
ModuleConstraintCallbacks_swigregister = _framework.ModuleConstraintCallbacks_swigregister
ModuleConstraintCallbacks_swigregister(ModuleConstraintCallbacks)

class ModuleConstraint(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleConstraint
    __del__ = lambda self: None

    def apply_constraint(self, item, global_xform):
        return _framework.ModuleConstraint_apply_constraint(self, item, global_xform)

    def apply_constraint_at(self, time, item, global_xform):
        return _framework.ModuleConstraint_apply_constraint_at(self, time, item, global_xform)
    XFORM_MODIFIER_NONE = _framework.ModuleConstraint_XFORM_MODIFIER_NONE
    XFORM_MODIFIER_TRANSLATE = _framework.ModuleConstraint_XFORM_MODIFIER_TRANSLATE
    XFORM_MODIFIER_ROTATE = _framework.ModuleConstraint_XFORM_MODIFIER_ROTATE
    XFORM_MODIFIER_SCALE = _framework.ModuleConstraint_XFORM_MODIFIER_SCALE
    XFORM_MODIFIER_ALL = _framework.ModuleConstraint_XFORM_MODIFIER_ALL

    def get_xform_modifier(self):
        return _framework.ModuleConstraint_get_xform_modifier(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleConstraint_class_info)
    else:
        class_info = _framework.ModuleConstraint_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleConstraint____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleConstraint____class_destructor__

    def get_class_info(self):
        return _framework.ModuleConstraint_get_class_info(self)
ModuleConstraint_swigregister = _framework.ModuleConstraint_swigregister
ModuleConstraint_swigregister(ModuleConstraint)

def ModuleConstraint_class_info():
    return _framework.ModuleConstraint_class_info()
ModuleConstraint_class_info = _framework.ModuleConstraint_class_info

def ModuleConstraint____class_destructor__(instance, is_array):
    return _framework.ModuleConstraint____class_destructor__(instance, is_array)
ModuleConstraint____class_destructor__ = _framework.ModuleConstraint____class_destructor__

class ModuleDeformerTopology(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleDeformerTopology, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleDeformerTopology, name)
    __repr__ = _swig_repr

    def __init__(self, point_count, has_velocities, has_normals, time_sampling):
        this = _framework.new_ModuleDeformerTopology(point_count, has_velocities, has_normals, time_sampling)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_point_count(self):
        return _framework.ModuleDeformerTopology_get_point_count(self)

    def has_velocities(self):
        return _framework.ModuleDeformerTopology_has_velocities(self)

    def has_normals(self):
        return _framework.ModuleDeformerTopology_has_normals(self)

    def has_sampling(self):
        return _framework.ModuleDeformerTopology_has_sampling(self)

    def get_time_sampling(self):
        return _framework.ModuleDeformerTopology_get_time_sampling(self)

    def require_velocities(self):
        return _framework.ModuleDeformerTopology_require_velocities(self)

    def require_normals(self):
        return _framework.ModuleDeformerTopology_require_normals(self)

    def set_sampling(self, time_sampling):
        return _framework.ModuleDeformerTopology_set_sampling(self, time_sampling)
    if _newclass:
        class_info = staticmethod(_framework.ModuleDeformerTopology_class_info)
    else:
        class_info = _framework.ModuleDeformerTopology_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleDeformerTopology____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleDeformerTopology____class_destructor__

    def get_class_info(self):
        return _framework.ModuleDeformerTopology_get_class_info(self)
    __swig_destroy__ = _framework.delete_ModuleDeformerTopology
    __del__ = lambda self: None
ModuleDeformerTopology_swigregister = _framework.ModuleDeformerTopology_swigregister
ModuleDeformerTopology_swigregister(ModuleDeformerTopology)

def ModuleDeformerTopology_class_info():
    return _framework.ModuleDeformerTopology_class_info()
ModuleDeformerTopology_class_info = _framework.ModuleDeformerTopology_class_info

def ModuleDeformerTopology____class_destructor__(instance, is_array):
    return _framework.ModuleDeformerTopology____class_destructor__(instance, is_array)
ModuleDeformerTopology____class_destructor__ = _framework.ModuleDeformerTopology____class_destructor__

class ModuleDeformerGeometry(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleDeformerGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleDeformerGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, topology, time, positions=None):
        this = _framework.new_ModuleDeformerGeometry(topology, time, positions)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleDeformerGeometry
    __del__ = lambda self: None

    def get_topology(self):
        return _framework.ModuleDeformerGeometry_get_topology(self)

    def get_point_count(self):
        return _framework.ModuleDeformerGeometry_get_point_count(self)

    def get_time_sampling(self):
        return _framework.ModuleDeformerGeometry_get_time_sampling(self)

    def has_velocities(self):
        return _framework.ModuleDeformerGeometry_has_velocities(self)

    def has_normals(self):
        return _framework.ModuleDeformerGeometry_has_normals(self)

    def get_time(self):
        return _framework.ModuleDeformerGeometry_get_time(self)

    def init(self, point_cloud):
        return _framework.ModuleDeformerGeometry_init(self, point_cloud)

    def update(self):
        return _framework.ModuleDeformerGeometry_update(self)

    def get_positions(self):
        return _framework.ModuleDeformerGeometry_get_positions(self)

    def get_velocities(self):
        return _framework.ModuleDeformerGeometry_get_velocities(self)

    def get_normals(self):
        return _framework.ModuleDeformerGeometry_get_normals(self)

    def get_position(self, index):
        return _framework.ModuleDeformerGeometry_get_position(self, index)

    def get_velocity(self, index):
        return _framework.ModuleDeformerGeometry_get_velocity(self, index)

    def get_normal(self, index):
        return _framework.ModuleDeformerGeometry_get_normal(self, index)

    def set_position(self, index, p):
        return _framework.ModuleDeformerGeometry_set_position(self, index, p)

    def set_velocity(self, index, v):
        return _framework.ModuleDeformerGeometry_set_velocity(self, index, v)

    def set_normal(self, index, n):
        return _framework.ModuleDeformerGeometry_set_normal(self, index, n)
    if _newclass:
        class_info = staticmethod(_framework.ModuleDeformerGeometry_class_info)
    else:
        class_info = _framework.ModuleDeformerGeometry_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleDeformerGeometry____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleDeformerGeometry____class_destructor__

    def get_class_info(self):
        return _framework.ModuleDeformerGeometry_get_class_info(self)
ModuleDeformerGeometry_swigregister = _framework.ModuleDeformerGeometry_swigregister
ModuleDeformerGeometry_swigregister(ModuleDeformerGeometry)

def ModuleDeformerGeometry_class_info():
    return _framework.ModuleDeformerGeometry_class_info()
ModuleDeformerGeometry_class_info = _framework.ModuleDeformerGeometry_class_info

def ModuleDeformerGeometry____class_destructor__(instance, is_array):
    return _framework.ModuleDeformerGeometry____class_destructor__(instance, is_array)
ModuleDeformerGeometry____class_destructor__ = _framework.ModuleDeformerGeometry____class_destructor__

class ModuleDeformerCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleDeformerCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleDeformerCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleDeformerCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleDeformerCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_deform"] = _framework.ModuleDeformerCallbacks_cb_deform_set
    __swig_getmethods__["cb_deform"] = _framework.ModuleDeformerCallbacks_cb_deform_get
    if _newclass:
        cb_deform = _swig_property(_framework.ModuleDeformerCallbacks_cb_deform_get, _framework.ModuleDeformerCallbacks_cb_deform_set)
    __swig_setmethods__["cb_pre_deform"] = _framework.ModuleDeformerCallbacks_cb_pre_deform_set
    __swig_getmethods__["cb_pre_deform"] = _framework.ModuleDeformerCallbacks_cb_pre_deform_get
    if _newclass:
        cb_pre_deform = _swig_property(_framework.ModuleDeformerCallbacks_cb_pre_deform_get, _framework.ModuleDeformerCallbacks_cb_pre_deform_set)
    __swig_setmethods__["cb_post_deform"] = _framework.ModuleDeformerCallbacks_cb_post_deform_set
    __swig_getmethods__["cb_post_deform"] = _framework.ModuleDeformerCallbacks_cb_post_deform_get
    if _newclass:
        cb_post_deform = _swig_property(_framework.ModuleDeformerCallbacks_cb_post_deform_get, _framework.ModuleDeformerCallbacks_cb_post_deform_set)
    __swig_destroy__ = _framework.delete_ModuleDeformerCallbacks
    __del__ = lambda self: None
ModuleDeformerCallbacks_swigregister = _framework.ModuleDeformerCallbacks_swigregister
ModuleDeformerCallbacks_swigregister(ModuleDeformerCallbacks)

class ModuleDeformer(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleDeformer, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleDeformer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleDeformer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleDeformer
    __del__ = lambda self: None

    def is_local_deformation(self):
        return _framework.ModuleDeformer_is_local_deformation(self)

    def deform(self, eval_ctx, module, geometry, begin, end):
        return _framework.ModuleDeformer_deform(self, eval_ctx, module, geometry, begin, end)

    def pre_deform(self, eval_ctx, module, topology):
        return _framework.ModuleDeformer_pre_deform(self, eval_ctx, module, topology)

    def post_deform(self, eval_ctx, module):
        return _framework.ModuleDeformer_post_deform(self, eval_ctx, module)
    if _newclass:
        class_info = staticmethod(_framework.ModuleDeformer_class_info)
    else:
        class_info = _framework.ModuleDeformer_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleDeformer____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleDeformer____class_destructor__

    def get_class_info(self):
        return _framework.ModuleDeformer_get_class_info(self)
ModuleDeformer_swigregister = _framework.ModuleDeformer_swigregister
ModuleDeformer_swigregister(ModuleDeformer)

def ModuleDeformer_class_info():
    return _framework.ModuleDeformer_class_info()
ModuleDeformer_class_info = _framework.ModuleDeformer_class_info

def ModuleDeformer____class_destructor__(instance, is_array):
    return _framework.ModuleDeformer____class_destructor__(instance, is_array)
ModuleDeformer____class_destructor__ = _framework.ModuleDeformer____class_destructor__

class SceneObjectInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneObjectInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneObjectInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["geometry_count"] = _framework.SceneObjectInfo_geometry_count_set
    __swig_getmethods__["geometry_count"] = _framework.SceneObjectInfo_geometry_count_get
    if _newclass:
        geometry_count = _swig_property(_framework.SceneObjectInfo_geometry_count_get, _framework.SceneObjectInfo_geometry_count_set)
    __swig_setmethods__["primitive_count"] = _framework.SceneObjectInfo_primitive_count_set
    __swig_getmethods__["primitive_count"] = _framework.SceneObjectInfo_primitive_count_get
    if _newclass:
        primitive_count = _swig_property(_framework.SceneObjectInfo_primitive_count_get, _framework.SceneObjectInfo_primitive_count_set)
    __swig_destroy__ = _framework.delete_SceneObjectInfo
    __del__ = lambda self: None
SceneObjectInfo_swigregister = _framework.SceneObjectInfo_swigregister
SceneObjectInfo_swigregister(SceneObjectInfo)

class ModuleGroupCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleGroupCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleGroupCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleGroupCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleGroupCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_create_gas"] = _framework.ModuleGroupCallbacks_cb_create_gas_set
    __swig_getmethods__["cb_create_gas"] = _framework.ModuleGroupCallbacks_cb_create_gas_get
    if _newclass:
        cb_create_gas = _swig_property(_framework.ModuleGroupCallbacks_cb_create_gas_get, _framework.ModuleGroupCallbacks_cb_create_gas_set)
    __swig_setmethods__["cb_destroy_gas"] = _framework.ModuleGroupCallbacks_cb_destroy_gas_set
    __swig_getmethods__["cb_destroy_gas"] = _framework.ModuleGroupCallbacks_cb_destroy_gas_get
    if _newclass:
        cb_destroy_gas = _swig_property(_framework.ModuleGroupCallbacks_cb_destroy_gas_get, _framework.ModuleGroupCallbacks_cb_destroy_gas_set)
    __swig_setmethods__["cb_get_scene_object_info"] = _framework.ModuleGroupCallbacks_cb_get_scene_object_info_set
    __swig_getmethods__["cb_get_scene_object_info"] = _framework.ModuleGroupCallbacks_cb_get_scene_object_info_get
    if _newclass:
        cb_get_scene_object_info = _swig_property(_framework.ModuleGroupCallbacks_cb_get_scene_object_info_get, _framework.ModuleGroupCallbacks_cb_get_scene_object_info_set)
    __swig_setmethods__["cb_pre_evaluate"] = _framework.ModuleGroupCallbacks_cb_pre_evaluate_set
    __swig_getmethods__["cb_pre_evaluate"] = _framework.ModuleGroupCallbacks_cb_pre_evaluate_get
    if _newclass:
        cb_pre_evaluate = _swig_property(_framework.ModuleGroupCallbacks_cb_pre_evaluate_get, _framework.ModuleGroupCallbacks_cb_pre_evaluate_set)
    __swig_setmethods__["cb_get_gas_ctx"] = _framework.ModuleGroupCallbacks_cb_get_gas_ctx_set
    __swig_getmethods__["cb_get_gas_ctx"] = _framework.ModuleGroupCallbacks_cb_get_gas_ctx_get
    if _newclass:
        cb_get_gas_ctx = _swig_property(_framework.ModuleGroupCallbacks_cb_get_gas_ctx_get, _framework.ModuleGroupCallbacks_cb_get_gas_ctx_set)
    __swig_destroy__ = _framework.delete_ModuleGroupCallbacks
    __del__ = lambda self: None
ModuleGroupCallbacks_swigregister = _framework.ModuleGroupCallbacks_swigregister
ModuleGroupCallbacks_swigregister(ModuleGroupCallbacks)

class ModuleGroup(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleGroup, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleGroup()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleGroup
    __del__ = lambda self: None

    def get_objects(self, objects):
        return _framework.ModuleGroup_get_objects(self, objects)

    def get_updated_objects(self, objects):
        return _framework.ModuleGroup_get_updated_objects(self, objects)

    def get_scene_object_info(self):
        return _framework.ModuleGroup_get_scene_object_info(self)

    def set_inclusion_rule(self, rule):
        return _framework.ModuleGroup_set_inclusion_rule(self, rule)

    def set_exclusion_rule(self, rule):
        return _framework.ModuleGroup_set_exclusion_rule(self, rule)

    def get_inclusion_rule(self):
        return _framework.ModuleGroup_get_inclusion_rule(self)

    def get_exclusion_rule(self):
        return _framework.ModuleGroup_get_exclusion_rule(self)

    def set_result_filter(self, rule):
        return _framework.ModuleGroup_set_result_filter(self, rule)

    def get_filter_classes(self):
        return _framework.ModuleGroup_get_filter_classes(self)

    def get_filter_class_names(self, classes, class_names):
        return _framework.ModuleGroup_get_filter_class_names(self, classes, class_names)

    def add_filter(self, filter):
        return _framework.ModuleGroup_add_filter(self, filter)

    def set_filter(self, *args):
        return _framework.ModuleGroup_set_filter(self, *args)

    def get_gas(self, auto_create=True):
        return _framework.ModuleGroup_get_gas(self, auto_create)

    def get_las(self, integrator, auto_create=True):
        return _framework.ModuleGroup_get_las(self, integrator, auto_create)

    def destroy_gas(self):
        return _framework.ModuleGroup_destroy_gas(self)

    def destroy_las(self):
        return _framework.ModuleGroup_destroy_las(self)

    def dirty_motion_blur(self):
        return _framework.ModuleGroup_dirty_motion_blur(self)

    def set_shading_layer(self, shading_layer):
        return _framework.ModuleGroup_set_shading_layer(self, shading_layer)

    def get_shading_layer(self):
        return _framework.ModuleGroup_get_shading_layer(self)
    GROUP_UPDATE_MODE_AUTOMATIC = _framework.ModuleGroup_GROUP_UPDATE_MODE_AUTOMATIC
    GROUP_UPDATE_MODE_MANUAL = _framework.ModuleGroup_GROUP_UPDATE_MODE_MANUAL
    GROUP_UPDATE_BEHAVIOR_ALL = _framework.ModuleGroup_GROUP_UPDATE_BEHAVIOR_ALL
    GROUP_UPDATE_BEHAVIOR_INCLUSION_ONLY = _framework.ModuleGroup_GROUP_UPDATE_BEHAVIOR_INCLUSION_ONLY
    GROUP_UPDATE_BEHAVIOR_RULE_ONLY = _framework.ModuleGroup_GROUP_UPDATE_BEHAVIOR_RULE_ONLY
    GROUP_UPDATE_BEHAVIOR_NONE = _framework.ModuleGroup_GROUP_UPDATE_BEHAVIOR_NONE

    def set_group_update_behavior(self, bh):
        return _framework.ModuleGroup_set_group_update_behavior(self, bh)

    def get_group_update_behavior(self):
        return _framework.ModuleGroup_get_group_update_behavior(self)

    def get_update_mode(self):
        return _framework.ModuleGroup_get_update_mode(self)

    def set_update_mode(self, update_mode):
        return _framework.ModuleGroup_set_update_mode(self, update_mode)

    def get_memory_size(self):
        return _framework.ModuleGroup_get_memory_size(self)

    def get_shading_gas_ctx(self, *args):
        return _framework.ModuleGroup_get_shading_gas_ctx(self, *args)

    def clear_shading_tables(self, shading_layer):
        return _framework.ModuleGroup_clear_shading_tables(self, shading_layer)

    def clear_shading_gas(self, shading_layer):
        return _framework.ModuleGroup_clear_shading_gas(self, shading_layer)

    def clear_content(self):
        return _framework.ModuleGroup_clear_content(self)

    def get_is_dirty(self):
        return _framework.ModuleGroup_get_is_dirty(self)

    def set_is_dirty(self, value=True):
        return _framework.ModuleGroup_set_is_dirty(self, value)

    def force_update_references(self):
        return _framework.ModuleGroup_force_update_references(self)

    def has_rules(self):
        return _framework.ModuleGroup_has_rules(self)

    def get_inclusion_objects(self, included):
        return _framework.ModuleGroup_get_inclusion_objects(self, included)

    def get_inclusion_rules(self, rules):
        return _framework.ModuleGroup_get_inclusion_rules(self, rules)

    def get_exclusion_objects(self, excluded):
        return _framework.ModuleGroup_get_exclusion_objects(self, excluded)

    def get_exclusion_rules(self, rules):
        return _framework.ModuleGroup_get_exclusion_rules(self, rules)

    def set_inclusion_objects(self, *args):
        return _framework.ModuleGroup_set_inclusion_objects(self, *args)

    def set_exclusion_objects(self, *args):
        return _framework.ModuleGroup_set_exclusion_objects(self, *args)

    def add_inclusion_object(self, obj):
        return _framework.ModuleGroup_add_inclusion_object(self, obj)

    def add_inclusion_objects(self, *args):
        return _framework.ModuleGroup_add_inclusion_objects(self, *args)

    def add_exclusion_object(self, obj):
        return _framework.ModuleGroup_add_exclusion_object(self, obj)

    def add_exclusion_objects(self, *args):
        return _framework.ModuleGroup_add_exclusion_objects(self, *args)

    def get_result_filter(self, rules):
        return _framework.ModuleGroup_get_result_filter(self, rules)

    def get_matte_table(self, layer3d):
        return _framework.ModuleGroup_get_matte_table(self, layer3d)

    def clear_matte_table(self, layer3d):
        return _framework.ModuleGroup_clear_matte_table(self, layer3d)

    def build_dynamic_objects(self):
        return _framework.ModuleGroup_build_dynamic_objects(self)

    def set_objects(self, *args):
        return _framework.ModuleGroup_set_objects(self, *args)

    def set_group_rule(self, rule):
        return _framework.ModuleGroup_set_group_rule(self, rule)

    def set_group_exclusion_rule(self, rule):
        return _framework.ModuleGroup_set_group_exclusion_rule(self, rule)

    def get_group_rule(self):
        return _framework.ModuleGroup_get_group_rule(self)

    def get_group_exclusion_rule(self):
        return _framework.ModuleGroup_get_group_exclusion_rule(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleGroup_class_info)
    else:
        class_info = _framework.ModuleGroup_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleGroup____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleGroup____class_destructor__

    def get_class_info(self):
        return _framework.ModuleGroup_get_class_info(self)
ModuleGroup_swigregister = _framework.ModuleGroup_swigregister
ModuleGroup_swigregister(ModuleGroup)
EVT_ID_MODULE_GROUP_VISIBILITY = cvar.EVT_ID_MODULE_GROUP_VISIBILITY

def ModuleGroup_class_info():
    return _framework.ModuleGroup_class_info()
ModuleGroup_class_info = _framework.ModuleGroup_class_info

def ModuleGroup____class_destructor__(instance, is_array):
    return _framework.ModuleGroup____class_destructor__(instance, is_array)
ModuleGroup____class_destructor__ = _framework.ModuleGroup____class_destructor__

class GroupManager(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroupManager, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroupManager, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_GroupManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["singleton_ref"] = _framework.GroupManager_singleton_ref_set
    __swig_getmethods__["singleton_ref"] = _framework.GroupManager_singleton_ref_get
    if _newclass:
        singleton_ref = _swig_property(_framework.GroupManager_singleton_ref_get, _framework.GroupManager_singleton_ref_set)

    def connect_factory_events(self, factory):
        return _framework.GroupManager_connect_factory_events(self, factory)
    if _newclass:
        class_info = staticmethod(_framework.GroupManager_class_info)
    else:
        class_info = _framework.GroupManager_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GroupManager____class_destructor__)
    else:
        ___class_destructor__ = _framework.GroupManager____class_destructor__

    def get_class_info(self):
        return _framework.GroupManager_get_class_info(self)
    __swig_destroy__ = _framework.delete_GroupManager
    __del__ = lambda self: None
GroupManager_swigregister = _framework.GroupManager_swigregister
GroupManager_swigregister(GroupManager)

def GroupManager_class_info():
    return _framework.GroupManager_class_info()
GroupManager_class_info = _framework.GroupManager_class_info

def GroupManager____class_destructor__(instance, is_array):
    return _framework.GroupManager____class_destructor__(instance, is_array)
GroupManager____class_destructor__ = _framework.GroupManager____class_destructor__

class ModuleImageInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleImageInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleImageInfo, name)
    __repr__ = _swig_repr
    DIRTINESS_NONE = _framework.ModuleImageInfo_DIRTINESS_NONE
    DIRTINESS_SRC = _framework.ModuleImageInfo_DIRTINESS_SRC
    DIRTINESS_POSITION = _framework.ModuleImageInfo_DIRTINESS_POSITION
    DIRTINESS_ALL = _framework.ModuleImageInfo_DIRTINESS_ALL

    def __init__(self):
        this = _framework.new_ModuleImageInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["offset_x"] = _framework.ModuleImageInfo_offset_x_set
    __swig_getmethods__["offset_x"] = _framework.ModuleImageInfo_offset_x_get
    if _newclass:
        offset_x = _swig_property(_framework.ModuleImageInfo_offset_x_get, _framework.ModuleImageInfo_offset_x_set)
    __swig_setmethods__["offset_y"] = _framework.ModuleImageInfo_offset_y_set
    __swig_getmethods__["offset_y"] = _framework.ModuleImageInfo_offset_y_get
    if _newclass:
        offset_y = _swig_property(_framework.ModuleImageInfo_offset_y_get, _framework.ModuleImageInfo_offset_y_set)
    __swig_setmethods__["image"] = _framework.ModuleImageInfo_image_set
    __swig_getmethods__["image"] = _framework.ModuleImageInfo_image_get
    if _newclass:
        image = _swig_property(_framework.ModuleImageInfo_image_get, _framework.ModuleImageInfo_image_set)
    __swig_setmethods__["region"] = _framework.ModuleImageInfo_region_set
    __swig_getmethods__["region"] = _framework.ModuleImageInfo_region_get
    if _newclass:
        region = _swig_property(_framework.ModuleImageInfo_region_get, _framework.ModuleImageInfo_region_set)
    __swig_setmethods__["image_is_ref"] = _framework.ModuleImageInfo_image_is_ref_set
    __swig_getmethods__["image_is_ref"] = _framework.ModuleImageInfo_image_is_ref_get
    if _newclass:
        image_is_ref = _swig_property(_framework.ModuleImageInfo_image_is_ref_get, _framework.ModuleImageInfo_image_is_ref_set)

    def is_dirty(self):
        return _framework.ModuleImageInfo_is_dirty(self)

    def get_dirty(self):
        return _framework.ModuleImageInfo_get_dirty(self)

    def set_dirty(self, _dirtiness):
        return _framework.ModuleImageInfo_set_dirty(self, _dirtiness)

    def modify_dirty(self, _dirtiness):
        return _framework.ModuleImageInfo_modify_dirty(self, _dirtiness)
    __swig_destroy__ = _framework.delete_ModuleImageInfo
    __del__ = lambda self: None
ModuleImageInfo_swigregister = _framework.ModuleImageInfo_swigregister
ModuleImageInfo_swigregister(ModuleImageInfo)

class ModuleImage(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleImage, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleImage, name)
    __repr__ = _swig_repr
    QUALITY_UNKNOWN = _framework.ModuleImage_QUALITY_UNKNOWN
    QUALITY_ONE_SIXTEENTH = _framework.ModuleImage_QUALITY_ONE_SIXTEENTH
    QUALITY_ONE_EIGHTH = _framework.ModuleImage_QUALITY_ONE_EIGHTH
    QUALITY_ONE_QUARTER = _framework.ModuleImage_QUALITY_ONE_QUARTER
    QUALITY_HALF = _framework.ModuleImage_QUALITY_HALF
    QUALITY_FULL = _framework.ModuleImage_QUALITY_FULL
    QUALITY_COUNT = _framework.ModuleImage_QUALITY_COUNT
    RESOLUTION_MULTIPLIER_25 = _framework.ModuleImage_RESOLUTION_MULTIPLIER_25
    RESOLUTION_MULTIPLIER_50 = _framework.ModuleImage_RESOLUTION_MULTIPLIER_50
    RESOLUTION_MULTIPLIER_100 = _framework.ModuleImage_RESOLUTION_MULTIPLIER_100
    RESOLUTION_MULTIPLIER_200 = _framework.ModuleImage_RESOLUTION_MULTIPLIER_200
    RESOLUTION_MULTIPLIER_400 = _framework.ModuleImage_RESOLUTION_MULTIPLIER_400
    RESOLUTION_MULTIPLIER_75 = _framework.ModuleImage_RESOLUTION_MULTIPLIER_75
    RESOLUTION_MULTIPLIER_150 = _framework.ModuleImage_RESOLUTION_MULTIPLIER_150
    RESOLUTION_MULTIPLIER_COUNT = _framework.ModuleImage_RESOLUTION_MULTIPLIER_COUNT
    if _newclass:
        get_quality_name = staticmethod(_framework.ModuleImage_get_quality_name)
    else:
        get_quality_name = _framework.ModuleImage_get_quality_name
    if _newclass:
        get_quality_level = staticmethod(_framework.ModuleImage_get_quality_level)
    else:
        get_quality_level = _framework.ModuleImage_get_quality_level
    if _newclass:
        is_valid_quality = staticmethod(_framework.ModuleImage_is_valid_quality)
    else:
        is_valid_quality = _framework.ModuleImage_is_valid_quality
    if _newclass:
        limited_region_validator = staticmethod(_framework.ModuleImage_limited_region_validator)
    else:
        limited_region_validator = _framework.ModuleImage_limited_region_validator

    def __init__(self):
        this = _framework.new_ModuleImage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleImage
    __del__ = lambda self: None

    def destroy_all(self):
        return _framework.ModuleImage_destroy_all(self)

    def get_width(self):
        return _framework.ModuleImage_get_width(self)

    def get_height(self):
        return _framework.ModuleImage_get_height(self)

    def add_layer(self, *args):
        return _framework.ModuleImage_add_layer(self, *args)

    def get_active_layer(self):
        return _framework.ModuleImage_get_active_layer(self)

    def set_active_layer(self, layer):
        return _framework.ModuleImage_set_active_layer(self, layer)

    def is_evaluating(self):
        return _framework.ModuleImage_is_evaluating(self)

    def get_progress(self):
        return _framework.ModuleImage_get_progress(self)

    def add_progress(self, amount):
        return _framework.ModuleImage_add_progress(self, amount)

    def add_sub_progress(self, amount):
        return _framework.ModuleImage_add_sub_progress(self, amount)

    def get_progress_quality(self):
        return _framework.ModuleImage_get_progress_quality(self)

    def get_image(self, *args):
        return _framework.ModuleImage_get_image(self, *args)

    def get_image_async(self, quality, compute_all_qualities=False, region=None, priority_offset=0.0):
        return _framework.ModuleImage_get_image_async(self, quality, compute_all_qualities, region, priority_offset)

    def compute_image(self, *args):
        return _framework.ModuleImage_compute_image(self, *args)

    def stop_compute_image(self, requester=None):
        return _framework.ModuleImage_stop_compute_image(self, requester)

    def is_image_dirty(self, quality, strict=False):
        return _framework.ModuleImage_is_image_dirty(self, quality, strict)

    def get_highest_quality_image(self, image, quality):
        return _framework.ModuleImage_get_highest_quality_image(self, image, quality)

    def check_need_to_dirty(self):
        return _framework.ModuleImage_check_need_to_dirty(self)

    def check_need_to_dirty_level(self, quality):
        return _framework.ModuleImage_check_need_to_dirty_level(self, quality)

    def get_layers(self):
        return _framework.ModuleImage_get_layers(self)

    def get_all_layers(self):
        return _framework.ModuleImage_get_all_layers(self)

    def get_active_layers(self):
        return _framework.ModuleImage_get_active_layers(self)

    def dirty_layers_list(self):
        return _framework.ModuleImage_dirty_layers_list(self)

    def get_layer_xy(self, x, y, quality):
        return _framework.ModuleImage_get_layer_xy(self, x, y, quality)

    def get_resolution_multiplier(self):
        return _framework.ModuleImage_get_resolution_multiplier(self)

    def get_dirtiness(self):
        return _framework.ModuleImage_get_dirtiness(self)

    def dirty_layers(self, old_bbox, new_bbox):
        return _framework.ModuleImage_dirty_layers(self, old_bbox, new_bbox)

    def has_render_region(self):
        return _framework.ModuleImage_has_render_region(self)

    def get_render_region_bbox(self):
        return _framework.ModuleImage_get_render_region_bbox(self)

    def add_image_level_update_callback(self, data, on_image_level_update):
        return _framework.ModuleImage_add_image_level_update_callback(self, data, on_image_level_update)

    def remove_image_level_update_callback(self, data):
        return _framework.ModuleImage_remove_image_level_update_callback(self, data)

    def get_image_level_update_receivers_count(self):
        return _framework.ModuleImage_get_image_level_update_receivers_count(self)

    def resize_image(self, source, dest, quality, width, height, render_region):
        return _framework.ModuleImage_resize_image(self, source, dest, quality, width, height, render_region)

    def image_level_update(self, quality):
        return _framework.ModuleImage_image_level_update(self, quality)

    def get_image_progress(self):
        return _framework.ModuleImage_get_image_progress(self)

    def update_region(self, region, set_progress=True):
        return _framework.ModuleImage_update_region(self, region, set_progress)

    def add_draw_region_callback(self, data, init_render, end_render, draw_region, highlight_region):
        return _framework.ModuleImage_add_draw_region_callback(self, data, init_render, end_render, draw_region, highlight_region)

    def remove_draw_region_callback(self, data):
        return _framework.ModuleImage_remove_draw_region_callback(self, data)

    def get_draw_region_receivers_count(self):
        return _framework.ModuleImage_get_draw_region_receivers_count(self)

    def get_current_render_bucket_list(self):
        return _framework.ModuleImage_get_current_render_bucket_list(self)

    def add_progress_update_callback(self, data, on_progress_update):
        return _framework.ModuleImage_add_progress_update_callback(self, data, on_progress_update)

    def remove_progress_update_callback(self, data):
        return _framework.ModuleImage_remove_progress_update_callback(self, data)

    def get_progress_update_receivers_count(self):
        return _framework.ModuleImage_get_progress_update_receivers_count(self)

    def get_nearest_quality(self, w, h):
        return _framework.ModuleImage_get_nearest_quality(self, w, h)

    def get_scene_objects(self, objects):
        return _framework.ModuleImage_get_scene_objects(self, objects)

    def get_scene_items(self, scene_items):
        return _framework.ModuleImage_get_scene_items(self, scene_items)

    def get_referenced_objects(self, stop_on_class=None):
        return _framework.ModuleImage_get_referenced_objects(self, stop_on_class)

    def get_progress_buffer(self):
        return _framework.ModuleImage_get_progress_buffer(self)

    def get_memory_size(self):
        return _framework.ModuleImage_get_memory_size(self)

    def get_last_computed_image_time(self):
        return _framework.ModuleImage_get_last_computed_image_time(self)

    def get_evaluation_frame(self):
        return _framework.ModuleImage_get_evaluation_frame(self)

    def dirty_image(self):
        return _framework.ModuleImage_dirty_image(self)

    def dirty_image_level(self, quality):
        return _framework.ModuleImage_dirty_image_level(self, quality)

    def get_display_ratio(self):
        return _framework.ModuleImage_get_display_ratio(self)

    def set_display_ratio(self, value):
        return _framework.ModuleImage_set_display_ratio(self, value)

    def get_overscan(self):
        return _framework.ModuleImage_get_overscan(self)

    def get_overscan_ratio(self):
        return _framework.ModuleImage_get_overscan_ratio(self)

    def update_overscan(self):
        return _framework.ModuleImage_update_overscan(self)

    def get_data_window(self, quality):
        return _framework.ModuleImage_get_data_window(self, quality)

    def get_max_overscan(self):
        return _framework.ModuleImage_get_max_overscan(self)

    def calc_max_pixel_overscan(self, quality):
        return _framework.ModuleImage_calc_max_pixel_overscan(self, quality)

    def get_progress_pixel_percent(self):
        return _framework.ModuleImage_get_progress_pixel_percent(self)

    def set_progress_pixel_count(self, count, max):
        return _framework.ModuleImage_set_progress_pixel_count(self, count, max)

    def set_rman_interface(self, rman):
        return _framework.ModuleImage_set_rman_interface(self, rman)

    def get_rman_interface(self):
        return _framework.ModuleImage_get_rman_interface(self)

    def init_progress_count(self):
        return _framework.ModuleImage_init_progress_count(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleImage_class_info)
    else:
        class_info = _framework.ModuleImage_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleImage____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleImage____class_destructor__

    def get_class_info(self):
        return _framework.ModuleImage_get_class_info(self)
ModuleImage_swigregister = _framework.ModuleImage_swigregister
ModuleImage_swigregister(ModuleImage)
EVT_ID_MODULE_IMAGE_PROGRESS = cvar.EVT_ID_MODULE_IMAGE_PROGRESS
EVT_ID_MODULE_IMAGE_PIXEL_ASPECT_RATIO_CHANGE = cvar.EVT_ID_MODULE_IMAGE_PIXEL_ASPECT_RATIO_CHANGE
EVT_ID_LAYER_REF_UPDATE = cvar.EVT_ID_LAYER_REF_UPDATE

def ModuleImage_get_quality_name(quality):
    return _framework.ModuleImage_get_quality_name(quality)
ModuleImage_get_quality_name = _framework.ModuleImage_get_quality_name

def ModuleImage_get_quality_level(quality):
    return _framework.ModuleImage_get_quality_level(quality)
ModuleImage_get_quality_level = _framework.ModuleImage_get_quality_level

def ModuleImage_is_valid_quality(quality):
    return _framework.ModuleImage_is_valid_quality(quality)
ModuleImage_is_valid_quality = _framework.ModuleImage_is_valid_quality

def ModuleImage_limited_region_validator(attr, value, index, data):
    return _framework.ModuleImage_limited_region_validator(attr, value, index, data)
ModuleImage_limited_region_validator = _framework.ModuleImage_limited_region_validator

def ModuleImage_class_info():
    return _framework.ModuleImage_class_info()
ModuleImage_class_info = _framework.ModuleImage_class_info

def ModuleImage____class_destructor__(instance, is_array):
    return _framework.ModuleImage____class_destructor__(instance, is_array)
ModuleImage____class_destructor__ = _framework.ModuleImage____class_destructor__

class ModuleImageLevelUpdateReceiver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleImageLevelUpdateReceiver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleImageLevelUpdateReceiver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["image_level_update"] = _framework.ModuleImageLevelUpdateReceiver_image_level_update_set
    __swig_getmethods__["image_level_update"] = _framework.ModuleImageLevelUpdateReceiver_image_level_update_get
    if _newclass:
        image_level_update = _swig_property(_framework.ModuleImageLevelUpdateReceiver_image_level_update_get, _framework.ModuleImageLevelUpdateReceiver_image_level_update_set)
    __swig_setmethods__["data"] = _framework.ModuleImageLevelUpdateReceiver_data_set
    __swig_getmethods__["data"] = _framework.ModuleImageLevelUpdateReceiver_data_get
    if _newclass:
        data = _swig_property(_framework.ModuleImageLevelUpdateReceiver_data_get, _framework.ModuleImageLevelUpdateReceiver_data_set)
    __swig_destroy__ = _framework.delete_ModuleImageLevelUpdateReceiver
    __del__ = lambda self: None
ModuleImageLevelUpdateReceiver_swigregister = _framework.ModuleImageLevelUpdateReceiver_swigregister
ModuleImageLevelUpdateReceiver_swigregister(ModuleImageLevelUpdateReceiver)

class ModuleImageDrawRegionReceiver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleImageDrawRegionReceiver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleImageDrawRegionReceiver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["initialized"] = _framework.ModuleImageDrawRegionReceiver_initialized_set
    __swig_getmethods__["initialized"] = _framework.ModuleImageDrawRegionReceiver_initialized_get
    if _newclass:
        initialized = _swig_property(_framework.ModuleImageDrawRegionReceiver_initialized_get, _framework.ModuleImageDrawRegionReceiver_initialized_set)
    __swig_setmethods__["init_render"] = _framework.ModuleImageDrawRegionReceiver_init_render_set
    __swig_getmethods__["init_render"] = _framework.ModuleImageDrawRegionReceiver_init_render_get
    if _newclass:
        init_render = _swig_property(_framework.ModuleImageDrawRegionReceiver_init_render_get, _framework.ModuleImageDrawRegionReceiver_init_render_set)
    __swig_setmethods__["draw_region"] = _framework.ModuleImageDrawRegionReceiver_draw_region_set
    __swig_getmethods__["draw_region"] = _framework.ModuleImageDrawRegionReceiver_draw_region_get
    if _newclass:
        draw_region = _swig_property(_framework.ModuleImageDrawRegionReceiver_draw_region_get, _framework.ModuleImageDrawRegionReceiver_draw_region_set)
    __swig_setmethods__["highlight_region"] = _framework.ModuleImageDrawRegionReceiver_highlight_region_set
    __swig_getmethods__["highlight_region"] = _framework.ModuleImageDrawRegionReceiver_highlight_region_get
    if _newclass:
        highlight_region = _swig_property(_framework.ModuleImageDrawRegionReceiver_highlight_region_get, _framework.ModuleImageDrawRegionReceiver_highlight_region_set)
    __swig_setmethods__["end_render"] = _framework.ModuleImageDrawRegionReceiver_end_render_set
    __swig_getmethods__["end_render"] = _framework.ModuleImageDrawRegionReceiver_end_render_get
    if _newclass:
        end_render = _swig_property(_framework.ModuleImageDrawRegionReceiver_end_render_get, _framework.ModuleImageDrawRegionReceiver_end_render_set)
    __swig_setmethods__["data"] = _framework.ModuleImageDrawRegionReceiver_data_set
    __swig_getmethods__["data"] = _framework.ModuleImageDrawRegionReceiver_data_get
    if _newclass:
        data = _swig_property(_framework.ModuleImageDrawRegionReceiver_data_get, _framework.ModuleImageDrawRegionReceiver_data_set)
    __swig_destroy__ = _framework.delete_ModuleImageDrawRegionReceiver
    __del__ = lambda self: None
ModuleImageDrawRegionReceiver_swigregister = _framework.ModuleImageDrawRegionReceiver_swigregister
ModuleImageDrawRegionReceiver_swigregister(ModuleImageDrawRegionReceiver)

class ModuleProgressUpdateReceiver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleProgressUpdateReceiver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleProgressUpdateReceiver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["initialized"] = _framework.ModuleProgressUpdateReceiver_initialized_set
    __swig_getmethods__["initialized"] = _framework.ModuleProgressUpdateReceiver_initialized_get
    if _newclass:
        initialized = _swig_property(_framework.ModuleProgressUpdateReceiver_initialized_get, _framework.ModuleProgressUpdateReceiver_initialized_set)
    __swig_setmethods__["progress_update"] = _framework.ModuleProgressUpdateReceiver_progress_update_set
    __swig_getmethods__["progress_update"] = _framework.ModuleProgressUpdateReceiver_progress_update_get
    if _newclass:
        progress_update = _swig_property(_framework.ModuleProgressUpdateReceiver_progress_update_get, _framework.ModuleProgressUpdateReceiver_progress_update_set)
    __swig_setmethods__["data"] = _framework.ModuleProgressUpdateReceiver_data_set
    __swig_getmethods__["data"] = _framework.ModuleProgressUpdateReceiver_data_get
    if _newclass:
        data = _swig_property(_framework.ModuleProgressUpdateReceiver_data_get, _framework.ModuleProgressUpdateReceiver_data_set)
    __swig_destroy__ = _framework.delete_ModuleProgressUpdateReceiver
    __del__ = lambda self: None
ModuleProgressUpdateReceiver_swigregister = _framework.ModuleProgressUpdateReceiver_swigregister
ModuleProgressUpdateReceiver_swigregister(ModuleProgressUpdateReceiver)

class ModuleImageFilter(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleImageFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleImageFilter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def apply(self, ctx):
        return _framework.ModuleImageFilter_apply(self, ctx)
    if _newclass:
        class_info = staticmethod(_framework.ModuleImageFilter_class_info)
    else:
        class_info = _framework.ModuleImageFilter_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleImageFilter____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleImageFilter____class_destructor__

    def get_class_info(self):
        return _framework.ModuleImageFilter_get_class_info(self)
    __swig_destroy__ = _framework.delete_ModuleImageFilter
    __del__ = lambda self: None
ModuleImageFilter_swigregister = _framework.ModuleImageFilter_swigregister
ModuleImageFilter_swigregister(ModuleImageFilter)

def ModuleImageFilter_class_info():
    return _framework.ModuleImageFilter_class_info()
ModuleImageFilter_class_info = _framework.ModuleImageFilter_class_info

def ModuleImageFilter____class_destructor__(instance, is_array):
    return _framework.ModuleImageFilter____class_destructor__(instance, is_array)
ModuleImageFilter____class_destructor__ = _framework.ModuleImageFilter____class_destructor__

class ModulePixelFilterCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModulePixelFilterCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModulePixelFilterCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModulePixelFilterCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModulePixelFilterCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_pre_filter"] = _framework.ModulePixelFilterCallbacks_cb_pre_filter_set
    __swig_getmethods__["cb_pre_filter"] = _framework.ModulePixelFilterCallbacks_cb_pre_filter_get
    if _newclass:
        cb_pre_filter = _swig_property(_framework.ModulePixelFilterCallbacks_cb_pre_filter_get, _framework.ModulePixelFilterCallbacks_cb_pre_filter_set)
    __swig_setmethods__["cb_apply_filter"] = _framework.ModulePixelFilterCallbacks_cb_apply_filter_set
    __swig_getmethods__["cb_apply_filter"] = _framework.ModulePixelFilterCallbacks_cb_apply_filter_get
    if _newclass:
        cb_apply_filter = _swig_property(_framework.ModulePixelFilterCallbacks_cb_apply_filter_get, _framework.ModulePixelFilterCallbacks_cb_apply_filter_set)
    __swig_destroy__ = _framework.delete_ModulePixelFilterCallbacks
    __del__ = lambda self: None
ModulePixelFilterCallbacks_swigregister = _framework.ModulePixelFilterCallbacks_swigregister
ModulePixelFilterCallbacks_swigregister(ModulePixelFilterCallbacks)

class ModulePixelFilter(ModuleImageFilter):
    __swig_setmethods__ = {}
    for _s in [ModuleImageFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModulePixelFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleImageFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModulePixelFilter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModulePixelFilter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModulePixelFilter
    __del__ = lambda self: None

    def apply(self, ctx):
        return _framework.ModulePixelFilter_apply(self, ctx)
    if _newclass:
        class_info = staticmethod(_framework.ModulePixelFilter_class_info)
    else:
        class_info = _framework.ModulePixelFilter_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModulePixelFilter____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModulePixelFilter____class_destructor__

    def get_class_info(self):
        return _framework.ModulePixelFilter_get_class_info(self)
ModulePixelFilter_swigregister = _framework.ModulePixelFilter_swigregister
ModulePixelFilter_swigregister(ModulePixelFilter)

def ModulePixelFilter_class_info():
    return _framework.ModulePixelFilter_class_info()
ModulePixelFilter_class_info = _framework.ModulePixelFilter_class_info

def ModulePixelFilter____class_destructor__(instance, is_array):
    return _framework.ModulePixelFilter____class_destructor__(instance, is_array)
ModulePixelFilter____class_destructor__ = _framework.ModulePixelFilter____class_destructor__

class ModuleKernelFilterCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleKernelFilterCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleKernelFilterCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleKernelFilterCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleKernelFilterCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_pre_filter"] = _framework.ModuleKernelFilterCallbacks_cb_pre_filter_set
    __swig_getmethods__["cb_pre_filter"] = _framework.ModuleKernelFilterCallbacks_cb_pre_filter_get
    if _newclass:
        cb_pre_filter = _swig_property(_framework.ModuleKernelFilterCallbacks_cb_pre_filter_get, _framework.ModuleKernelFilterCallbacks_cb_pre_filter_set)
    __swig_setmethods__["cb_filter"] = _framework.ModuleKernelFilterCallbacks_cb_filter_set
    __swig_getmethods__["cb_filter"] = _framework.ModuleKernelFilterCallbacks_cb_filter_get
    if _newclass:
        cb_filter = _swig_property(_framework.ModuleKernelFilterCallbacks_cb_filter_get, _framework.ModuleKernelFilterCallbacks_cb_filter_set)
    __swig_setmethods__["cb_post_filter"] = _framework.ModuleKernelFilterCallbacks_cb_post_filter_set
    __swig_getmethods__["cb_post_filter"] = _framework.ModuleKernelFilterCallbacks_cb_post_filter_get
    if _newclass:
        cb_post_filter = _swig_property(_framework.ModuleKernelFilterCallbacks_cb_post_filter_get, _framework.ModuleKernelFilterCallbacks_cb_post_filter_set)
    __swig_destroy__ = _framework.delete_ModuleKernelFilterCallbacks
    __del__ = lambda self: None
ModuleKernelFilterCallbacks_swigregister = _framework.ModuleKernelFilterCallbacks_swigregister
ModuleKernelFilterCallbacks_swigregister(ModuleKernelFilterCallbacks)

class ModuleKernelFilter(ModuleImageFilter):
    __swig_setmethods__ = {}
    for _s in [ModuleImageFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleKernelFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleImageFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleKernelFilter, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleKernelFilter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleKernelFilter
    __del__ = lambda self: None

    def apply(self, ctx):
        return _framework.ModuleKernelFilter_apply(self, ctx)
    if _newclass:
        class_info = staticmethod(_framework.ModuleKernelFilter_class_info)
    else:
        class_info = _framework.ModuleKernelFilter_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleKernelFilter____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleKernelFilter____class_destructor__

    def get_class_info(self):
        return _framework.ModuleKernelFilter_get_class_info(self)
ModuleKernelFilter_swigregister = _framework.ModuleKernelFilter_swigregister
ModuleKernelFilter_swigregister(ModuleKernelFilter)

def ModuleKernelFilter_class_info():
    return _framework.ModuleKernelFilter_class_info()
ModuleKernelFilter_class_info = _framework.ModuleKernelFilter_class_info

def ModuleKernelFilter____class_destructor__(instance, is_array):
    return _framework.ModuleKernelFilter____class_destructor__(instance, is_array)
ModuleKernelFilter____class_destructor__ = _framework.ModuleKernelFilter____class_destructor__

class ModuleLayerSourceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLayerSourceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLayerSourceInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dirty"] = _framework.ModuleLayerSourceInfo_dirty_set
    __swig_getmethods__["dirty"] = _framework.ModuleLayerSourceInfo_dirty_get
    if _newclass:
        dirty = _swig_property(_framework.ModuleLayerSourceInfo_dirty_get, _framework.ModuleLayerSourceInfo_dirty_set)
    __swig_setmethods__["image"] = _framework.ModuleLayerSourceInfo_image_set
    __swig_getmethods__["image"] = _framework.ModuleLayerSourceInfo_image_get
    if _newclass:
        image = _swig_property(_framework.ModuleLayerSourceInfo_image_get, _framework.ModuleLayerSourceInfo_image_set)

    def __init__(self):
        this = _framework.new_ModuleLayerSourceInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLayerSourceInfo
    __del__ = lambda self: None
ModuleLayerSourceInfo_swigregister = _framework.ModuleLayerSourceInfo_swigregister
ModuleLayerSourceInfo_swigregister(ModuleLayerSourceInfo)


def get_memory_size(*args):
    return _framework.get_memory_size(*args)
get_memory_size = _framework.get_memory_size
class ModuleLayerCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLayerCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLayerCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleLayerCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleLayerCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_get_image"] = _framework.ModuleLayerCallbacks_cb_get_image_set
    __swig_getmethods__["cb_get_image"] = _framework.ModuleLayerCallbacks_cb_get_image_get
    if _newclass:
        cb_get_image = _swig_property(_framework.ModuleLayerCallbacks_cb_get_image_get, _framework.ModuleLayerCallbacks_cb_get_image_set)
    __swig_destroy__ = _framework.delete_ModuleLayerCallbacks
    __del__ = lambda self: None
ModuleLayerCallbacks_swigregister = _framework.ModuleLayerCallbacks_swigregister
ModuleLayerCallbacks_swigregister(ModuleLayerCallbacks)

class ModuleLayer(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLayer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleLayer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLayer
    __del__ = lambda self: None

    def destroy_all(self):
        return _framework.ModuleLayer_destroy_all(self)

    def get_width(self):
        return _framework.ModuleLayer_get_width(self)

    def get_height(self):
        return _framework.ModuleLayer_get_height(self)

    def get_parent_image(self):
        return _framework.ModuleLayer_get_parent_image(self)

    def get_opacity(self):
        return _framework.ModuleLayer_get_opacity(self)

    def get_blending_mode(self):
        return _framework.ModuleLayer_get_blending_mode(self)

    def is_active(self):
        return _framework.ModuleLayer_is_active(self)

    def get_image(self, quality, region=None):
        return _framework.ModuleLayer_get_image(self, quality, region)

    def is_image_dirty(self, quality, strict=False):
        return _framework.ModuleLayer_is_image_dirty(self, quality, strict)

    def peek_source_image(self, quality):
        return _framework.ModuleLayer_peek_source_image(self, quality)

    def add_image_level_update_callback(self, data, on_image_level_update):
        return _framework.ModuleLayer_add_image_level_update_callback(self, data, on_image_level_update)

    def remove_image_level_update_callback(self, data):
        return _framework.ModuleLayer_remove_image_level_update_callback(self, data)

    def get_image_level_update_receivers_count(self):
        return _framework.ModuleLayer_get_image_level_update_receivers_count(self)

    def start_progress(self, quality):
        return _framework.ModuleLayer_start_progress(self, quality)

    def stop_progress(self, image):
        return _framework.ModuleLayer_stop_progress(self, image)

    def update_region(self, region, set_progress=True):
        return _framework.ModuleLayer_update_region(self, region, set_progress)

    def bucket_render_start(self, region, thread_id):
        return _framework.ModuleLayer_bucket_render_start(self, region, thread_id)

    def bucket_render_end(self, region, thread_id):
        return _framework.ModuleLayer_bucket_render_end(self, region, thread_id)

    def dirty_layer(self, dirty_source):
        return _framework.ModuleLayer_dirty_layer(self, dirty_source)

    def mark_as_dirty(self):
        return _framework.ModuleLayer_mark_as_dirty(self)

    def dirty_layer_border(self, region):
        return _framework.ModuleLayer_dirty_layer_border(self, region)

    def on_update_visible(self, old_region, new_region):
        return _framework.ModuleLayer_on_update_visible(self, old_region, new_region)

    def is_evaluating(self):
        return _framework.ModuleLayer_is_evaluating(self)

    def get_nearest_quality(self, w, h):
        return _framework.ModuleLayer_get_nearest_quality(self, w, h)

    def image_level_update(self, quality):
        return _framework.ModuleLayer_image_level_update(self, quality)

    def get_render_region_mode(self):
        return _framework.ModuleLayer_get_render_region_mode(self)

    def get_render_region_bbox(self):
        return _framework.ModuleLayer_get_render_region_bbox(self)

    def get_overscan(self, *args):
        return _framework.ModuleLayer_get_overscan(self, *args)

    def get_data_window(self, quality):
        return _framework.ModuleLayer_get_data_window(self, quality)

    def update_overscan(self):
        return _framework.ModuleLayer_update_overscan(self)

    def get_pyramid_source_image(self, quality):
        return _framework.ModuleLayer_get_pyramid_source_image(self, quality)

    def resize_image(self, source, dest, quality, width, height, render_region):
        return _framework.ModuleLayer_resize_image(self, source, dest, quality, width, height, render_region)

    def get_progress_buffer(self):
        return _framework.ModuleLayer_get_progress_buffer(self)

    def init_progress_buffer(self, quality):
        return _framework.ModuleLayer_init_progress_buffer(self, quality)

    def update_progress(self, image, event, data):
        return _framework.ModuleLayer_update_progress(self, image, event, data)

    def get_highest_quality_image(self):
        return _framework.ModuleLayer_get_highest_quality_image(self)

    def get_memory_size(self):
        return _framework.ModuleLayer_get_memory_size(self)

    def set_finalize_image(self, _finalize_image=True):
        return _framework.ModuleLayer_set_finalize_image(self, _finalize_image)

    def get_finalize_image(self):
        return _framework.ModuleLayer_get_finalize_image(self)

    def add_filter(self, class_name, filter_name):
        return _framework.ModuleLayer_add_filter(self, class_name, filter_name)

    def has_active_filters(self):
        return _framework.ModuleLayer_has_active_filters(self)

    def get_progress_pixel_count(self):
        return _framework.ModuleLayer_get_progress_pixel_count(self)

    def get_progress_pixel_count_max(self):
        return _framework.ModuleLayer_get_progress_pixel_count_max(self)

    def get_progress_pixel_percent(self):
        return _framework.ModuleLayer_get_progress_pixel_percent(self)

    def set_progress_pixel_count(self, count):
        return _framework.ModuleLayer_set_progress_pixel_count(self, count)
    if _newclass:
        class_info = staticmethod(_framework.ModuleLayer_class_info)
    else:
        class_info = _framework.ModuleLayer_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleLayer____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleLayer____class_destructor__

    def get_class_info(self):
        return _framework.ModuleLayer_get_class_info(self)
ModuleLayer_swigregister = _framework.ModuleLayer_swigregister
ModuleLayer_swigregister(ModuleLayer)

def ModuleLayer_class_info():
    return _framework.ModuleLayer_class_info()
ModuleLayer_class_info = _framework.ModuleLayer_class_info

def ModuleLayer____class_destructor__(instance, is_array):
    return _framework.ModuleLayer____class_destructor__(instance, is_array)
ModuleLayer____class_destructor__ = _framework.ModuleLayer____class_destructor__

class MatteTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatteTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatteTable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_MatteTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_MatteTable
    __del__ = lambda self: None

    def is_matte(self, index):
        return _framework.MatteTable_is_matte(self, index)

    def reset(self, new_size):
        return _framework.MatteTable_reset(self, new_size)

    def get_dirtiness(self):
        return _framework.MatteTable_get_dirtiness(self)

    def set_dirtiness(self, d):
        return _framework.MatteTable_set_dirtiness(self, d)
MatteTable_swigregister = _framework.MatteTable_swigregister
MatteTable_swigregister(MatteTable)
EVT_ID_MODULE_LAYER3D_RENDERING_INTERRUPTED = cvar.EVT_ID_MODULE_LAYER3D_RENDERING_INTERRUPTED
EVT_ID_MODULE_LAYER3D_VISIBILITY = cvar.EVT_ID_MODULE_LAYER3D_VISIBILITY
EVT_ID_MODULE_LAYER3D_GRAPH_AOV_LIST_CHANGED = cvar.EVT_ID_MODULE_LAYER3D_GRAPH_AOV_LIST_CHANGED

class MatteOverride(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatteOverride, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatteOverride, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_MatteOverride()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_MatteOverride
    __del__ = lambda self: None

    def set_alpha_attr(self, attr):
        return _framework.MatteOverride_set_alpha_attr(self, attr)

    def set_color_attr(self, attr):
        return _framework.MatteOverride_set_color_attr(self, attr)

    def resync_alpha(self):
        return _framework.MatteOverride_resync_alpha(self)

    def resync_color(self):
        return _framework.MatteOverride_resync_color(self)

    def eval_matte_alpha(self, eval_ctx, shader_ctx):
        return _framework.MatteOverride_eval_matte_alpha(self, eval_ctx, shader_ctx)

    def eval_matte_color(self, eval_ctx, shader_ctx):
        return _framework.MatteOverride_eval_matte_color(self, eval_ctx, shader_ctx)
MatteOverride_swigregister = _framework.MatteOverride_swigregister
MatteOverride_swigregister(MatteOverride)

class ModuleLayer3d(ModuleLayer):
    __swig_setmethods__ = {}
    for _s in [ModuleLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLayer3d, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLayer3d, name)
    __repr__ = _swig_repr
    UV_BAKE_EYE_NORMAL = _framework.ModuleLayer3d_UV_BAKE_EYE_NORMAL
    UV_BAKE_EYE_CAMERA = _framework.ModuleLayer3d_UV_BAKE_EYE_CAMERA
    UV_BAKE_PROJECTION_NONE = _framework.ModuleLayer3d_UV_BAKE_PROJECTION_NONE
    UV_BAKE_PROJECTION_INSIDE = _framework.ModuleLayer3d_UV_BAKE_PROJECTION_INSIDE
    UV_BAKE_PROJECTION_OUTSIDE = _framework.ModuleLayer3d_UV_BAKE_PROJECTION_OUTSIDE
    UV_BAKE_PROJECTION_INSIDE_AND_OUTSIDE = _framework.ModuleLayer3d_UV_BAKE_PROJECTION_INSIDE_AND_OUTSIDE
    UV_BAKE_NORMAL_FLAT = _framework.ModuleLayer3d_UV_BAKE_NORMAL_FLAT
    UV_BAKE_NORMAL_SMOOTH = _framework.ModuleLayer3d_UV_BAKE_NORMAL_SMOOTH

    def __init__(self):
        this = _framework.new_ModuleLayer3d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLayer3d
    __del__ = lambda self: None

    def destroy_all(self):
        return _framework.ModuleLayer3d_destroy_all(self)

    def get_scene_objects(self):
        return _framework.ModuleLayer3d_get_scene_objects(self)

    def get_lights(self):
        return _framework.ModuleLayer3d_get_lights(self)

    def get_shadow_objects(self):
        return _framework.ModuleLayer3d_get_shadow_objects(self)

    def get_raytraced_objects(self):
        return _framework.ModuleLayer3d_get_raytraced_objects(self)

    def get_global_illumination_objects(self):
        return _framework.ModuleLayer3d_get_global_illumination_objects(self)

    def get_holdout_objects(self):
        return _framework.ModuleLayer3d_get_holdout_objects(self)

    def get_available_aovs(self):
        return _framework.ModuleLayer3d_get_available_aovs(self)

    def get_selected_aovs_groups(self, ret_array):
        return _framework.ModuleLayer3d_get_selected_aovs_groups(self, ret_array)

    def get_export_aovs(self):
        return _framework.ModuleLayer3d_get_export_aovs(self)

    def update_selected_aovs(self):
        return _framework.ModuleLayer3d_update_selected_aovs(self)

    def get_selected_aovs_channels(self):
        return _framework.ModuleLayer3d_get_selected_aovs_channels(self)

    def get_defined_aov_groups(self):
        return _framework.ModuleLayer3d_get_defined_aov_groups(self)

    def get_override_material(self):
        return _framework.ModuleLayer3d_get_override_material(self)

    def set_override_material(self, m):
        return _framework.ModuleLayer3d_set_override_material(self, m)

    def get_shading_layer(self):
        return _framework.ModuleLayer3d_get_shading_layer(self)

    def set_shading_layer(self, sl):
        return _framework.ModuleLayer3d_set_shading_layer(self, sl)

    def get_matte_override(self):
        return _framework.ModuleLayer3d_get_matte_override(self)

    def get_scene_object_index(self, geometry):
        return _framework.ModuleLayer3d_get_scene_object_index(self, geometry)

    def get_camera(self):
        return _framework.ModuleLayer3d_get_camera(self)

    def get_near_clip(self):
        return _framework.ModuleLayer3d_get_near_clip(self)

    def get_far_clip(self):
        return _framework.ModuleLayer3d_get_far_clip(self)

    def get_pixel_aspect_ratio(self):
        return _framework.ModuleLayer3d_get_pixel_aspect_ratio(self)

    def get_scene_object_group(self):
        return _framework.ModuleLayer3d_get_scene_object_group(self)

    def get_shadow_object_group(self):
        return _framework.ModuleLayer3d_get_shadow_object_group(self)

    def get_raytraced_object_group(self):
        return _framework.ModuleLayer3d_get_raytraced_object_group(self)

    def get_global_illumination_object_group(self):
        return _framework.ModuleLayer3d_get_global_illumination_object_group(self)

    def get_holdout_group(self):
        return _framework.ModuleLayer3d_get_holdout_group(self)

    def get_light_group(self):
        return _framework.ModuleLayer3d_get_light_group(self)

    def is_uv_bake_enabled(self):
        return _framework.ModuleLayer3d_is_uv_bake_enabled(self)

    def get_uv_bake_config(self):
        return _framework.ModuleLayer3d_get_uv_bake_config(self)

    def set_uv_bake_config(self, config):
        return _framework.ModuleLayer3d_set_uv_bake_config(self, config)

    def get_uv_bake_slot(self):
        return _framework.ModuleLayer3d_get_uv_bake_slot(self)

    def get_uv_bake_range(self):
        return _framework.ModuleLayer3d_get_uv_bake_range(self)

    def get_uv_bake_eye_direction(self):
        return _framework.ModuleLayer3d_get_uv_bake_eye_direction(self)

    def get_uv_bake_projection_mode(self):
        return _framework.ModuleLayer3d_get_uv_bake_projection_mode(self)

    def get_uv_bake_projection_normal(self):
        return _framework.ModuleLayer3d_get_uv_bake_projection_normal(self)

    def get_uv_bake_projection_offset(self):
        return _framework.ModuleLayer3d_get_uv_bake_projection_offset(self)

    def get_uv_bake_projection_distance(self):
        return _framework.ModuleLayer3d_get_uv_bake_projection_distance(self)

    def eval_uv_bake_projection_range(self, eval_ctx, shader_ctx, offset, distance):
        return _framework.ModuleLayer3d_eval_uv_bake_projection_range(self, eval_ctx, shader_ctx, offset, distance)

    def get_lpe_descs(self):
        return _framework.ModuleLayer3d_get_lpe_descs(self)

    def get_sub_pixel_filters(self):
        return _framework.ModuleLayer3d_get_sub_pixel_filters(self)

    def get_global_aov_store(self):
        return _framework.ModuleLayer3d_get_global_aov_store(self)

    def dirty_layer(self, dirty_source):
        return _framework.ModuleLayer3d_dirty_layer(self, dirty_source)

    def get_cache(self):
        return _framework.ModuleLayer3d_get_cache(self)

    def set_cache(self, cache):
        return _framework.ModuleLayer3d_set_cache(self, cache)

    def is_holdout_group_dirty(self):
        return _framework.ModuleLayer3d_is_holdout_group_dirty(self)

    def is_scene_objects_group_dirty(self):
        return _framework.ModuleLayer3d_is_scene_objects_group_dirty(self)
    __swig_setmethods__["m_need_add_aovs_from_shading"] = _framework.ModuleLayer3d_m_need_add_aovs_from_shading_set
    __swig_getmethods__["m_need_add_aovs_from_shading"] = _framework.ModuleLayer3d_m_need_add_aovs_from_shading_get
    if _newclass:
        m_need_add_aovs_from_shading = _swig_property(_framework.ModuleLayer3d_m_need_add_aovs_from_shading_get, _framework.ModuleLayer3d_m_need_add_aovs_from_shading_set)
    if _newclass:
        class_info = staticmethod(_framework.ModuleLayer3d_class_info)
    else:
        class_info = _framework.ModuleLayer3d_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleLayer3d____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleLayer3d____class_destructor__

    def get_class_info(self):
        return _framework.ModuleLayer3d_get_class_info(self)
ModuleLayer3d_swigregister = _framework.ModuleLayer3d_swigregister
ModuleLayer3d_swigregister(ModuleLayer3d)

def ModuleLayer3d_class_info():
    return _framework.ModuleLayer3d_class_info()
ModuleLayer3d_class_info = _framework.ModuleLayer3d_class_info

def ModuleLayer3d____class_destructor__(instance, is_array):
    return _framework.ModuleLayer3d____class_destructor__(instance, is_array)
ModuleLayer3d____class_destructor__ = _framework.ModuleLayer3d____class_destructor__

class ModuleMaterialCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleMaterialCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleMaterialCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleMaterialCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleMaterialCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_shade_basic"] = _framework.ModuleMaterialCallbacks_cb_shade_basic_set
    __swig_getmethods__["cb_shade_basic"] = _framework.ModuleMaterialCallbacks_cb_shade_basic_get
    if _newclass:
        cb_shade_basic = _swig_property(_framework.ModuleMaterialCallbacks_cb_shade_basic_get, _framework.ModuleMaterialCallbacks_cb_shade_basic_set)
    __swig_setmethods__["cb_get_aovs"] = _framework.ModuleMaterialCallbacks_cb_get_aovs_set
    __swig_getmethods__["cb_get_aovs"] = _framework.ModuleMaterialCallbacks_cb_get_aovs_get
    if _newclass:
        cb_get_aovs = _swig_property(_framework.ModuleMaterialCallbacks_cb_get_aovs_get, _framework.ModuleMaterialCallbacks_cb_get_aovs_set)
    __swig_destroy__ = _framework.delete_ModuleMaterialCallbacks
    __del__ = lambda self: None
ModuleMaterialCallbacks_swigregister = _framework.ModuleMaterialCallbacks_swigregister
ModuleMaterialCallbacks_swigregister(ModuleMaterialCallbacks)

class ModuleMaterial(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleMaterial, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleMaterial()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleMaterial
    __del__ = lambda self: None

    def is_transparent(self, ray_type):
        return _framework.ModuleMaterial_is_transparent(self, ray_type)

    def get_transparency_mask(self):
        return _framework.ModuleMaterial_get_transparency_mask(self)

    def get_max_transparency(self):
        return _framework.ModuleMaterial_get_max_transparency(self)

    def is_exporting_aovs(self):
        return _framework.ModuleMaterial_is_exporting_aovs(self)

    def build_aov_list(self):
        return _framework.ModuleMaterial_build_aov_list(self)

    def get_aovs_groups(self):
        return _framework.ModuleMaterial_get_aovs_groups(self)

    def get_aov_stores(self):
        return _framework.ModuleMaterial_get_aov_stores(self)

    def set_aov_list_dirty(self, dirtiness):
        return _framework.ModuleMaterial_set_aov_list_dirty(self, dirtiness)

    def set_is_transparent(self, *args):
        return _framework.ModuleMaterial_set_is_transparent(self, *args)

    def set_max_transparency(self, transparency):
        return _framework.ModuleMaterial_set_max_transparency(self, transparency)
    if _newclass:
        get_object_count = staticmethod(_framework.ModuleMaterial_get_object_count)
    else:
        get_object_count = _framework.ModuleMaterial_get_object_count

    def aov_store(self, eval_ctx, ctx, aov_values):
        return _framework.ModuleMaterial_aov_store(self, eval_ctx, ctx, aov_values)

    def shade_basic(self, *args):
        return _framework.ModuleMaterial_shade_basic(self, *args)
    if _newclass:
        reserve_flag = staticmethod(_framework.ModuleMaterial_reserve_flag)
    else:
        reserve_flag = _framework.ModuleMaterial_reserve_flag

    def get_flags(self):
        return _framework.ModuleMaterial_get_flags(self)

    def enable_flags(self, flags):
        return _framework.ModuleMaterial_enable_flags(self, flags)

    def disable_flags(self, flags):
        return _framework.ModuleMaterial_disable_flags(self, flags)
    if _newclass:
        class_info = staticmethod(_framework.ModuleMaterial_class_info)
    else:
        class_info = _framework.ModuleMaterial_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleMaterial____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleMaterial____class_destructor__

    def get_class_info(self):
        return _framework.ModuleMaterial_get_class_info(self)
ModuleMaterial_swigregister = _framework.ModuleMaterial_swigregister
ModuleMaterial_swigregister(ModuleMaterial)

def ModuleMaterial_get_object_count(application):
    return _framework.ModuleMaterial_get_object_count(application)
ModuleMaterial_get_object_count = _framework.ModuleMaterial_get_object_count

def ModuleMaterial_reserve_flag():
    return _framework.ModuleMaterial_reserve_flag()
ModuleMaterial_reserve_flag = _framework.ModuleMaterial_reserve_flag

def ModuleMaterial_class_info():
    return _framework.ModuleMaterial_class_info()
ModuleMaterial_class_info = _framework.ModuleMaterial_class_info

def ModuleMaterial____class_destructor__(instance, is_array):
    return _framework.ModuleMaterial____class_destructor__(instance, is_array)
ModuleMaterial____class_destructor__ = _framework.ModuleMaterial____class_destructor__

class ModuleUnknown(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleUnknown, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleUnknown, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleUnknown()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleUnknown
    __del__ = lambda self: None

    def get_unknown_content(self):
        return _framework.ModuleUnknown_get_unknown_content(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleUnknown_class_info)
    else:
        class_info = _framework.ModuleUnknown_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleUnknown____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleUnknown____class_destructor__

    def get_class_info(self):
        return _framework.ModuleUnknown_get_class_info(self)
ModuleUnknown_swigregister = _framework.ModuleUnknown_swigregister
ModuleUnknown_swigregister(ModuleUnknown)

def ModuleUnknown_class_info():
    return _framework.ModuleUnknown_class_info()
ModuleUnknown_class_info = _framework.ModuleUnknown_class_info

def ModuleUnknown____class_destructor__(instance, is_array):
    return _framework.ModuleUnknown____class_destructor__(instance, is_array)
ModuleUnknown____class_destructor__ = _framework.ModuleUnknown____class_destructor__

class ModuleScriptedClass(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleScriptedClass, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleScriptedClass, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleScriptedClass()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleScriptedClass
    __del__ = lambda self: None

    def get_engine(self):
        return _framework.ModuleScriptedClass_get_engine(self)

    def get_instance_data(self):
        return _framework.ModuleScriptedClass_get_instance_data(self)

    def register_scripted_class(*args):
        val = _framework.ModuleScriptedClass_register_scripted_class(*args)

        if args[2].is_shared(): args[2].__disown__()


        return val

    register_scripted_class = staticmethod(register_scripted_class)
    if _newclass:
        class_info = staticmethod(_framework.ModuleScriptedClass_class_info)
    else:
        class_info = _framework.ModuleScriptedClass_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleScriptedClass____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleScriptedClass____class_destructor__

    def get_class_info(self):
        return _framework.ModuleScriptedClass_get_class_info(self)
ModuleScriptedClass_swigregister = _framework.ModuleScriptedClass_swigregister
ModuleScriptedClass_swigregister(ModuleScriptedClass)

def ModuleScriptedClass_register_scripted_class(*args):
    val = _framework.ModuleScriptedClass_register_scripted_class(*args)

    if args[2].is_shared(): args[2].__disown__()


    return val

def ModuleScriptedClass_class_info():
    return _framework.ModuleScriptedClass_class_info()
ModuleScriptedClass_class_info = _framework.ModuleScriptedClass_class_info

def ModuleScriptedClass____class_destructor__(instance, is_array):
    return _framework.ModuleScriptedClass____class_destructor__(instance, is_array)
ModuleScriptedClass____class_destructor__ = _framework.ModuleScriptedClass____class_destructor__

class SceneObjectShadingBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneObjectShadingBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SceneObjectShadingBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.SceneObjectShadingBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_SceneObjectShadingBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_SceneObjectShadingBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.SceneObjectShadingBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.SceneObjectShadingBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.SceneObjectShadingBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.SceneObjectShadingBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.SceneObjectShadingBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.SceneObjectShadingBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.SceneObjectShadingBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.SceneObjectShadingBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.SceneObjectShadingBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.SceneObjectShadingBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.SceneObjectShadingBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.SceneObjectShadingBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.SceneObjectShadingBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.SceneObjectShadingBasicArray_class_info)
    else:
        class_info = _framework.SceneObjectShadingBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.SceneObjectShadingBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.SceneObjectShadingBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.SceneObjectShadingBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.SceneObjectShadingBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

SceneObjectShadingBasicArray_swigregister = _framework.SceneObjectShadingBasicArray_swigregister
SceneObjectShadingBasicArray_swigregister(SceneObjectShadingBasicArray)

def SceneObjectShadingBasicArray_class_info():
    return _framework.SceneObjectShadingBasicArray_class_info()
SceneObjectShadingBasicArray_class_info = _framework.SceneObjectShadingBasicArray_class_info

def SceneObjectShadingBasicArray____class_destructor__(instance, is_array):
    return _framework.SceneObjectShadingBasicArray____class_destructor__(instance, is_array)
SceneObjectShadingBasicArray____class_destructor__ = _framework.SceneObjectShadingBasicArray____class_destructor__

class SceneObjectShadingArray(SceneObjectShadingBasicArray):
    __swig_setmethods__ = {}
    for _s in [SceneObjectShadingBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneObjectShadingArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SceneObjectShadingBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SceneObjectShadingArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_SceneObjectShadingArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_SceneObjectShadingArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.SceneObjectShadingArray_append(self, *args)

    def get_count(self):
        return _framework.SceneObjectShadingArray_get_count(self)

    def remove_all(self):
        return _framework.SceneObjectShadingArray_remove_all(self)

    def resize(self, *args):
        return _framework.SceneObjectShadingArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.SceneObjectShadingArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.SceneObjectShadingArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.SceneObjectShadingArray_get_list(self, list)

    def set_list(self, list):
        return _framework.SceneObjectShadingArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.SceneObjectShadingArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.SceneObjectShadingArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.SceneObjectShadingArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.SceneObjectShadingArray_class_info)
    else:
        class_info = _framework.SceneObjectShadingArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.SceneObjectShadingArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.SceneObjectShadingArray____class_destructor__
SceneObjectShadingArray_swigregister = _framework.SceneObjectShadingArray_swigregister
SceneObjectShadingArray_swigregister(SceneObjectShadingArray)

def SceneObjectShadingArray_class_info():
    return _framework.SceneObjectShadingArray_class_info()
SceneObjectShadingArray_class_info = _framework.SceneObjectShadingArray_class_info

def SceneObjectShadingArray____class_destructor__(instance, is_array):
    return _framework.SceneObjectShadingArray____class_destructor__(instance, is_array)
SceneObjectShadingArray____class_destructor__ = _framework.SceneObjectShadingArray____class_destructor__

class SceneObjectShadingVector(SceneObjectShadingBasicArray):
    __swig_setmethods__ = {}
    for _s in [SceneObjectShadingBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneObjectShadingVector, name, value)
    __swig_getmethods__ = {}
    for _s in [SceneObjectShadingBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SceneObjectShadingVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_SceneObjectShadingVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_SceneObjectShadingVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.SceneObjectShadingVector_append(self, *args)

    def add(self, *args):
        return _framework.SceneObjectShadingVector_add(self, *args)

    def insert(self, element, index):
        return _framework.SceneObjectShadingVector_insert(self, element, index)

    def remove_last(self):
        return _framework.SceneObjectShadingVector_remove_last(self)

    def empty(self):
        return _framework.SceneObjectShadingVector_empty(self)

    def remove_all(self):
        return _framework.SceneObjectShadingVector_remove_all(self)

    def clear(self, *args):
        return _framework.SceneObjectShadingVector_clear(self, *args)

    def remove(self, *args):
        return _framework.SceneObjectShadingVector_remove(self, *args)

    def is_empty(self):
        return _framework.SceneObjectShadingVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.SceneObjectShadingVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.SceneObjectShadingVector_remove_items(self, item)

    def get_count(self):
        return _framework.SceneObjectShadingVector_get_count(self)

    def get_capacity(self):
        return _framework.SceneObjectShadingVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.SceneObjectShadingVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.SceneObjectShadingVector_set_capacity(self, *args)

    def refit(self):
        return _framework.SceneObjectShadingVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.SceneObjectShadingVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.SceneObjectShadingVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.SceneObjectShadingVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.SceneObjectShadingVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.SceneObjectShadingVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.SceneObjectShadingVector_get_list(self, list)

    def set_list(self, list):
        return _framework.SceneObjectShadingVector_set_list(self, list)

    def get_array(self, array):
        return _framework.SceneObjectShadingVector_get_array(self, array)

    def set_array(self, array):
        return _framework.SceneObjectShadingVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.SceneObjectShadingVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.SceneObjectShadingVector_item(self, *args)

    def get_data(self):
        return _framework.SceneObjectShadingVector_get_data(self)

    def get_memory_size(self):
        return _framework.SceneObjectShadingVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.SceneObjectShadingVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.SceneObjectShadingVector_class_info)
    else:
        class_info = _framework.SceneObjectShadingVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.SceneObjectShadingVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.SceneObjectShadingVector____class_destructor__
SceneObjectShadingVector_swigregister = _framework.SceneObjectShadingVector_swigregister
SceneObjectShadingVector_swigregister(SceneObjectShadingVector)

def SceneObjectShadingVector_class_info():
    return _framework.SceneObjectShadingVector_class_info()
SceneObjectShadingVector_class_info = _framework.SceneObjectShadingVector_class_info

def SceneObjectShadingVector____class_destructor__(instance, is_array):
    return _framework.SceneObjectShadingVector____class_destructor__(instance, is_array)
SceneObjectShadingVector____class_destructor__ = _framework.SceneObjectShadingVector____class_destructor__

class ShadingGroupLinksBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingGroupLinksBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingGroupLinksBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ShadingGroupLinksBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ShadingGroupLinksBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingGroupLinksBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ShadingGroupLinksBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ShadingGroupLinksBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ShadingGroupLinksBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ShadingGroupLinksBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ShadingGroupLinksBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ShadingGroupLinksBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ShadingGroupLinksBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ShadingGroupLinksBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ShadingGroupLinksBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ShadingGroupLinksBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ShadingGroupLinksBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ShadingGroupLinksBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ShadingGroupLinksBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ShadingGroupLinksBasicArray_class_info)
    else:
        class_info = _framework.ShadingGroupLinksBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ShadingGroupLinksBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ShadingGroupLinksBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ShadingGroupLinksBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ShadingGroupLinksBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ShadingGroupLinksBasicArray_swigregister = _framework.ShadingGroupLinksBasicArray_swigregister
ShadingGroupLinksBasicArray_swigregister(ShadingGroupLinksBasicArray)

def ShadingGroupLinksBasicArray_class_info():
    return _framework.ShadingGroupLinksBasicArray_class_info()
ShadingGroupLinksBasicArray_class_info = _framework.ShadingGroupLinksBasicArray_class_info

def ShadingGroupLinksBasicArray____class_destructor__(instance, is_array):
    return _framework.ShadingGroupLinksBasicArray____class_destructor__(instance, is_array)
ShadingGroupLinksBasicArray____class_destructor__ = _framework.ShadingGroupLinksBasicArray____class_destructor__

class ShadingGroupLinksArray(ShadingGroupLinksBasicArray):
    __swig_setmethods__ = {}
    for _s in [ShadingGroupLinksBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingGroupLinksArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadingGroupLinksBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingGroupLinksArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ShadingGroupLinksArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingGroupLinksArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ShadingGroupLinksArray_append(self, *args)

    def get_count(self):
        return _framework.ShadingGroupLinksArray_get_count(self)

    def remove_all(self):
        return _framework.ShadingGroupLinksArray_remove_all(self)

    def resize(self, *args):
        return _framework.ShadingGroupLinksArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ShadingGroupLinksArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ShadingGroupLinksArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ShadingGroupLinksArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ShadingGroupLinksArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ShadingGroupLinksArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ShadingGroupLinksArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ShadingGroupLinksArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ShadingGroupLinksArray_class_info)
    else:
        class_info = _framework.ShadingGroupLinksArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ShadingGroupLinksArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ShadingGroupLinksArray____class_destructor__
ShadingGroupLinksArray_swigregister = _framework.ShadingGroupLinksArray_swigregister
ShadingGroupLinksArray_swigregister(ShadingGroupLinksArray)

def ShadingGroupLinksArray_class_info():
    return _framework.ShadingGroupLinksArray_class_info()
ShadingGroupLinksArray_class_info = _framework.ShadingGroupLinksArray_class_info

def ShadingGroupLinksArray____class_destructor__(instance, is_array):
    return _framework.ShadingGroupLinksArray____class_destructor__(instance, is_array)
ShadingGroupLinksArray____class_destructor__ = _framework.ShadingGroupLinksArray____class_destructor__

class ShadingGroupLinksVector(ShadingGroupLinksBasicArray):
    __swig_setmethods__ = {}
    for _s in [ShadingGroupLinksBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingGroupLinksVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadingGroupLinksBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingGroupLinksVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ShadingGroupLinksVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingGroupLinksVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ShadingGroupLinksVector_append(self, *args)

    def add(self, *args):
        return _framework.ShadingGroupLinksVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ShadingGroupLinksVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ShadingGroupLinksVector_remove_last(self)

    def empty(self):
        return _framework.ShadingGroupLinksVector_empty(self)

    def remove_all(self):
        return _framework.ShadingGroupLinksVector_remove_all(self)

    def clear(self, *args):
        return _framework.ShadingGroupLinksVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ShadingGroupLinksVector_remove(self, *args)

    def is_empty(self):
        return _framework.ShadingGroupLinksVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ShadingGroupLinksVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ShadingGroupLinksVector_remove_items(self, item)

    def get_count(self):
        return _framework.ShadingGroupLinksVector_get_count(self)

    def get_capacity(self):
        return _framework.ShadingGroupLinksVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ShadingGroupLinksVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ShadingGroupLinksVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ShadingGroupLinksVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ShadingGroupLinksVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ShadingGroupLinksVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ShadingGroupLinksVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ShadingGroupLinksVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ShadingGroupLinksVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ShadingGroupLinksVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ShadingGroupLinksVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ShadingGroupLinksVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ShadingGroupLinksVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ShadingGroupLinksVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ShadingGroupLinksVector_item(self, *args)

    def get_data(self):
        return _framework.ShadingGroupLinksVector_get_data(self)

    def get_memory_size(self):
        return _framework.ShadingGroupLinksVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ShadingGroupLinksVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ShadingGroupLinksVector_class_info)
    else:
        class_info = _framework.ShadingGroupLinksVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ShadingGroupLinksVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ShadingGroupLinksVector____class_destructor__
ShadingGroupLinksVector_swigregister = _framework.ShadingGroupLinksVector_swigregister
ShadingGroupLinksVector_swigregister(ShadingGroupLinksVector)

def ShadingGroupLinksVector_class_info():
    return _framework.ShadingGroupLinksVector_class_info()
ShadingGroupLinksVector_class_info = _framework.ShadingGroupLinksVector_class_info

def ShadingGroupLinksVector____class_destructor__(instance, is_array):
    return _framework.ShadingGroupLinksVector____class_destructor__(instance, is_array)
ShadingGroupLinksVector____class_destructor__ = _framework.ShadingGroupLinksVector____class_destructor__

class ModuleScriptedClassEngineData(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleScriptedClassEngineData, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleScriptedClassEngineData, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ModuleScriptedClassEngineData:
            _self = None
        else:
            _self = self
        this = _framework.new_ModuleScriptedClassEngineData(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleScriptedClassEngineData
    __del__ = lambda self: None

    def is_initialized(self):
        return _framework.ModuleScriptedClassEngineData_is_initialized(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleScriptedClassEngineData_class_info)
    else:
        class_info = _framework.ModuleScriptedClassEngineData_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleScriptedClassEngineData____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleScriptedClassEngineData____class_destructor__

    def get_class_info(self):
        return _framework.ModuleScriptedClassEngineData_get_class_info(self)

    def __initialize_data__(self):
        return _framework.ModuleScriptedClassEngineData___initialize_data__(self)

    def initialize_data(self):
        self.__initialize_data__()
        self.__disown__()

    def __disown__(self):
        self.this.disown()
        _framework.disown_ModuleScriptedClassEngineData(self)
        return weakref_proxy(self)
ModuleScriptedClassEngineData_swigregister = _framework.ModuleScriptedClassEngineData_swigregister
ModuleScriptedClassEngineData_swigregister(ModuleScriptedClassEngineData)

def ModuleScriptedClassEngineData_class_info():
    return _framework.ModuleScriptedClassEngineData_class_info()
ModuleScriptedClassEngineData_class_info = _framework.ModuleScriptedClassEngineData_class_info

def ModuleScriptedClassEngineData____class_destructor__(instance, is_array):
    return _framework.ModuleScriptedClassEngineData____class_destructor__(instance, is_array)
ModuleScriptedClassEngineData____class_destructor__ = _framework.ModuleScriptedClassEngineData____class_destructor__

class ModuleScriptedClassEngine(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleScriptedClassEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleScriptedClassEngine, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ModuleScriptedClassEngine:
            _self = None
        else:
            _self = self
        this = _framework.new_ModuleScriptedClassEngine(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleScriptedClassEngine
    __del__ = lambda self: None

    def add_action(self, *args):
        return _framework.ModuleScriptedClassEngine_add_action(self, *args)

    def create_instance_data(self, object):
        return _framework.ModuleScriptedClassEngine_create_instance_data(self, object)

    def declare_attributes(self, cls):
        return _framework.ModuleScriptedClassEngine_declare_attributes(self, cls)

    def on_action(self, action, object, data):
        return _framework.ModuleScriptedClassEngine_on_action(self, action, object, data)

    def on_attribute_change(self, object, attr, dirtiness, dirtiness_flags):
        return _framework.ModuleScriptedClassEngine_on_attribute_change(self, object, attr, dirtiness, dirtiness_flags)

    def is_shared(self):
        return _framework.ModuleScriptedClassEngine_is_shared(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleScriptedClassEngine_class_info)
    else:
        class_info = _framework.ModuleScriptedClassEngine_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleScriptedClassEngine____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleScriptedClassEngine____class_destructor__

    def get_class_info(self):
        return _framework.ModuleScriptedClassEngine_get_class_info(self)
    def __disown__(self):
        self.this.disown()
        _framework.disown_ModuleScriptedClassEngine(self)
        return weakref_proxy(self)
ModuleScriptedClassEngine_swigregister = _framework.ModuleScriptedClassEngine_swigregister
ModuleScriptedClassEngine_swigregister(ModuleScriptedClassEngine)

def ModuleScriptedClassEngine_class_info():
    return _framework.ModuleScriptedClassEngine_class_info()
ModuleScriptedClassEngine_class_info = _framework.ModuleScriptedClassEngine_class_info

def ModuleScriptedClassEngine____class_destructor__(instance, is_array):
    return _framework.ModuleScriptedClassEngine____class_destructor__(instance, is_array)
ModuleScriptedClassEngine____class_destructor__ = _framework.ModuleScriptedClassEngine____class_destructor__

class ModuleProcessScriptEngine(ModuleScriptedClassEngine):
    __swig_setmethods__ = {}
    for _s in [ModuleScriptedClassEngine]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleProcessScriptEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleScriptedClassEngine]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleProcessScriptEngine, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ModuleProcessScriptEngine:
            _self = None
        else:
            _self = self
        this = _framework.new_ModuleProcessScriptEngine(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleProcessScriptEngine
    __del__ = lambda self: None

    def run(self, object, options, progress):
        return _framework.ModuleProcessScriptEngine_run(self, object, options, progress)
    if _newclass:
        class_info = staticmethod(_framework.ModuleProcessScriptEngine_class_info)
    else:
        class_info = _framework.ModuleProcessScriptEngine_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleProcessScriptEngine____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleProcessScriptEngine____class_destructor__

    def get_class_info(self):
        return _framework.ModuleProcessScriptEngine_get_class_info(self)
    def __disown__(self):
        self.this.disown()
        _framework.disown_ModuleProcessScriptEngine(self)
        return weakref_proxy(self)
ModuleProcessScriptEngine_swigregister = _framework.ModuleProcessScriptEngine_swigregister
ModuleProcessScriptEngine_swigregister(ModuleProcessScriptEngine)

def ModuleProcessScriptEngine_class_info():
    return _framework.ModuleProcessScriptEngine_class_info()
ModuleProcessScriptEngine_class_info = _framework.ModuleProcessScriptEngine_class_info

def ModuleProcessScriptEngine____class_destructor__(instance, is_array):
    return _framework.ModuleProcessScriptEngine____class_destructor__(instance, is_array)
ModuleProcessScriptEngine____class_destructor__ = _framework.ModuleProcessScriptEngine____class_destructor__

class ModuleProcessScript(ModuleProcess):
    __swig_setmethods__ = {}
    for _s in [ModuleProcess]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleProcessScript, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProcess]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleProcessScript, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleProcessScript()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleProcessScript
    __del__ = lambda self: None

    def run(self, options, progress):
        return _framework.ModuleProcessScript_run(self, options, progress)

    def get_engine(self):
        return _framework.ModuleProcessScript_get_engine(self)

    def get_instance_data(self):
        return _framework.ModuleProcessScript_get_instance_data(self)

    def register_scripted_process(*args):
        val = _framework.ModuleProcessScript_register_scripted_process(*args)

        if args[2].is_shared(): args[2].__disown__()


        return val

    register_scripted_process = staticmethod(register_scripted_process)
    if _newclass:
        class_info = staticmethod(_framework.ModuleProcessScript_class_info)
    else:
        class_info = _framework.ModuleProcessScript_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleProcessScript____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleProcessScript____class_destructor__

    def get_class_info(self):
        return _framework.ModuleProcessScript_get_class_info(self)
ModuleProcessScript_swigregister = _framework.ModuleProcessScript_swigregister
ModuleProcessScript_swigregister(ModuleProcessScript)

def ModuleProcessScript_register_scripted_process(*args):
    val = _framework.ModuleProcessScript_register_scripted_process(*args)

    if args[2].is_shared(): args[2].__disown__()


    return val

def ModuleProcessScript_class_info():
    return _framework.ModuleProcessScript_class_info()
ModuleProcessScript_class_info = _framework.ModuleProcessScript_class_info

def ModuleProcessScript____class_destructor__(instance, is_array):
    return _framework.ModuleProcessScript____class_destructor__(instance, is_array)
ModuleProcessScript____class_destructor__ = _framework.ModuleProcessScript____class_destructor__

class DefaultMaterialConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultMaterialConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultMaterialConfig, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def set(self, cls, material):
        return _framework.DefaultMaterialConfig_set(self, cls, material)

    def get(self, scene_object):
        return _framework.DefaultMaterialConfig_get(self, scene_object)
    __swig_destroy__ = _framework.delete_DefaultMaterialConfig
    __del__ = lambda self: None
DefaultMaterialConfig_swigregister = _framework.DefaultMaterialConfig_swigregister
DefaultMaterialConfig_swigregister(DefaultMaterialConfig)

class ShaderHelpers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShaderHelpers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShaderHelpers, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        filter_resolve_material_callback = staticmethod(_framework.ShaderHelpers_filter_resolve_material_callback)
    else:
        filter_resolve_material_callback = _framework.ShaderHelpers_filter_resolve_material_callback
    if _newclass:
        resolve_material = staticmethod(_framework.ShaderHelpers_resolve_material)
    else:
        resolve_material = _framework.ShaderHelpers_resolve_material
    if _newclass:
        shade = staticmethod(_framework.ShaderHelpers_shade)
    else:
        shade = _framework.ShaderHelpers_shade
    if _newclass:
        shade_opacity = staticmethod(_framework.ShaderHelpers_shade_opacity)
    else:
        shade_opacity = _framework.ShaderHelpers_shade_opacity
    if _newclass:
        raytrace = staticmethod(_framework.ShaderHelpers_raytrace)
    else:
        raytrace = _framework.ShaderHelpers_raytrace
    if _newclass:
        raytrace_opacity = staticmethod(_framework.ShaderHelpers_raytrace_opacity)
    else:
        raytrace_opacity = _framework.ShaderHelpers_raytrace_opacity
    if _newclass:
        clip = staticmethod(_framework.ShaderHelpers_clip)
    else:
        clip = _framework.ShaderHelpers_clip
    if _newclass:
        reflect = staticmethod(_framework.ShaderHelpers_reflect)
    else:
        reflect = _framework.ShaderHelpers_reflect
    if _newclass:
        refract = staticmethod(_framework.ShaderHelpers_refract)
    else:
        refract = _framework.ShaderHelpers_refract
    if _newclass:
        reflect_and_refract = staticmethod(_framework.ShaderHelpers_reflect_and_refract)
    else:
        reflect_and_refract = _framework.ShaderHelpers_reflect_and_refract
    if _newclass:
        fresnel_dielectric = staticmethod(_framework.ShaderHelpers_fresnel_dielectric)
    else:
        fresnel_dielectric = _framework.ShaderHelpers_fresnel_dielectric
    if _newclass:
        fresnel_conductor = staticmethod(_framework.ShaderHelpers_fresnel_conductor)
    else:
        fresnel_conductor = _framework.ShaderHelpers_fresnel_conductor
    if _newclass:
        luminance = staticmethod(_framework.ShaderHelpers_luminance)
    else:
        luminance = _framework.ShaderHelpers_luminance
    if _newclass:
        compute_reflection_ray = staticmethod(_framework.ShaderHelpers_compute_reflection_ray)
    else:
        compute_reflection_ray = _framework.ShaderHelpers_compute_reflection_ray
    if _newclass:
        compute_refraction_ray = staticmethod(_framework.ShaderHelpers_compute_refraction_ray)
    else:
        compute_refraction_ray = _framework.ShaderHelpers_compute_refraction_ray
    if _newclass:
        compute_reflection_and_refraction_rays = staticmethod(_framework.ShaderHelpers_compute_reflection_and_refraction_rays)
    else:
        compute_reflection_and_refraction_rays = _framework.ShaderHelpers_compute_reflection_and_refraction_rays
    if _newclass:
        create_shader_ctx = staticmethod(_framework.ShaderHelpers_create_shader_ctx)
    else:
        create_shader_ctx = _framework.ShaderHelpers_create_shader_ctx
    if _newclass:
        cleanup_shader_ctx = staticmethod(_framework.ShaderHelpers_cleanup_shader_ctx)
    else:
        cleanup_shader_ctx = _framework.ShaderHelpers_cleanup_shader_ctx
    if _newclass:
        raycast = staticmethod(_framework.ShaderHelpers_raycast)
    else:
        raycast = _framework.ShaderHelpers_raycast
    if _newclass:
        compute_bump_normal = staticmethod(_framework.ShaderHelpers_compute_bump_normal)
    else:
        compute_bump_normal = _framework.ShaderHelpers_compute_bump_normal
    if _newclass:
        compute_normal_from_map = staticmethod(_framework.ShaderHelpers_compute_normal_from_map)
    else:
        compute_normal_from_map = _framework.ShaderHelpers_compute_normal_from_map
    if _newclass:
        ray_hit = staticmethod(_framework.ShaderHelpers_ray_hit)
    else:
        ray_hit = _framework.ShaderHelpers_ray_hit
    if _newclass:
        ray_hit_nearest = staticmethod(_framework.ShaderHelpers_ray_hit_nearest)
    else:
        ray_hit_nearest = _framework.ShaderHelpers_ray_hit_nearest
    if _newclass:
        decimate_points = staticmethod(_framework.ShaderHelpers_decimate_points)
    else:
        decimate_points = _framework.ShaderHelpers_decimate_points
    if _newclass:
        merge_fragments = staticmethod(_framework.ShaderHelpers_merge_fragments)
    else:
        merge_fragments = _framework.ShaderHelpers_merge_fragments
    if _newclass:
        evaluate_support_material = staticmethod(_framework.ShaderHelpers_evaluate_support_material)
    else:
        evaluate_support_material = _framework.ShaderHelpers_evaluate_support_material
    if _newclass:
        evaluate_support_texture = staticmethod(_framework.ShaderHelpers_evaluate_support_texture)
    else:
        evaluate_support_texture = _framework.ShaderHelpers_evaluate_support_texture
    if _newclass:
        evaluate_vertices_texture = staticmethod(_framework.ShaderHelpers_evaluate_vertices_texture)
    else:
        evaluate_vertices_texture = _framework.ShaderHelpers_evaluate_vertices_texture
    if _newclass:
        gas_leaf_ray_hit_nearest = staticmethod(_framework.ShaderHelpers_gas_leaf_ray_hit_nearest)
    else:
        gas_leaf_ray_hit_nearest = _framework.ShaderHelpers_gas_leaf_ray_hit_nearest
    if _newclass:
        gas_leaf_ray_hit_nearest_motion = staticmethod(_framework.ShaderHelpers_gas_leaf_ray_hit_nearest_motion)
    else:
        gas_leaf_ray_hit_nearest_motion = _framework.ShaderHelpers_gas_leaf_ray_hit_nearest_motion
    __swig_destroy__ = _framework.delete_ShaderHelpers
    __del__ = lambda self: None
ShaderHelpers_swigregister = _framework.ShaderHelpers_swigregister
ShaderHelpers_swigregister(ShaderHelpers)

def ShaderHelpers_filter_resolve_material_callback(eval_ctx, raytrace_ctx, ray_index, intersection, data):
    return _framework.ShaderHelpers_filter_resolve_material_callback(eval_ctx, raytrace_ctx, ray_index, intersection, data)
ShaderHelpers_filter_resolve_material_callback = _framework.ShaderHelpers_filter_resolve_material_callback

def ShaderHelpers_resolve_material(eval_ctx, intersection, default_materials):
    return _framework.ShaderHelpers_resolve_material(eval_ctx, intersection, default_materials)
ShaderHelpers_resolve_material = _framework.ShaderHelpers_resolve_material

def ShaderHelpers_shade(*args):
    return _framework.ShaderHelpers_shade(*args)
ShaderHelpers_shade = _framework.ShaderHelpers_shade

def ShaderHelpers_shade_opacity(opacity, eval_ctx, shader_ctx, ray_ctx, path_index, shade_transparency=True):
    return _framework.ShaderHelpers_shade_opacity(opacity, eval_ctx, shader_ctx, ray_ctx, path_index, shade_transparency)
ShaderHelpers_shade_opacity = _framework.ShaderHelpers_shade_opacity

def ShaderHelpers_raytrace(*args):
    return _framework.ShaderHelpers_raytrace(*args)
ShaderHelpers_raytrace = _framework.ShaderHelpers_raytrace

def ShaderHelpers_raytrace_opacity(*args):
    return _framework.ShaderHelpers_raytrace_opacity(*args)
ShaderHelpers_raytrace_opacity = _framework.ShaderHelpers_raytrace_opacity

def ShaderHelpers_clip(direction, clip_plane_normal):
    return _framework.ShaderHelpers_clip(direction, clip_plane_normal)
ShaderHelpers_clip = _framework.ShaderHelpers_clip

def ShaderHelpers_reflect(i, n, r):
    return _framework.ShaderHelpers_reflect(i, n, r)
ShaderHelpers_reflect = _framework.ShaderHelpers_reflect

def ShaderHelpers_refract(*args):
    return _framework.ShaderHelpers_refract(*args)
ShaderHelpers_refract = _framework.ShaderHelpers_refract

def ShaderHelpers_reflect_and_refract(i, n, ior, r, t, cos_i, cos_t):
    return _framework.ShaderHelpers_reflect_and_refract(i, n, ior, r, t, cos_i, cos_t)
ShaderHelpers_reflect_and_refract = _framework.ShaderHelpers_reflect_and_refract

def ShaderHelpers_fresnel_dielectric(*args):
    return _framework.ShaderHelpers_fresnel_dielectric(*args)
ShaderHelpers_fresnel_dielectric = _framework.ShaderHelpers_fresnel_dielectric

def ShaderHelpers_fresnel_conductor(cos_i, eta, k):
    return _framework.ShaderHelpers_fresnel_conductor(cos_i, eta, k)
ShaderHelpers_fresnel_conductor = _framework.ShaderHelpers_fresnel_conductor

def ShaderHelpers_luminance(*args):
    return _framework.ShaderHelpers_luminance(*args)
ShaderHelpers_luminance = _framework.ShaderHelpers_luminance

def ShaderHelpers_compute_reflection_ray(eval_ctx, ctx, r_ray):
    return _framework.ShaderHelpers_compute_reflection_ray(eval_ctx, ctx, r_ray)
ShaderHelpers_compute_reflection_ray = _framework.ShaderHelpers_compute_reflection_ray

def ShaderHelpers_compute_refraction_ray(eval_ctx, ctx, ior, t_ray):
    return _framework.ShaderHelpers_compute_refraction_ray(eval_ctx, ctx, ior, t_ray)
ShaderHelpers_compute_refraction_ray = _framework.ShaderHelpers_compute_refraction_ray

def ShaderHelpers_compute_reflection_and_refraction_rays(eval_ctx, ctx, ior, r_ray, t_ray, cos_i, cos_t):
    return _framework.ShaderHelpers_compute_reflection_and_refraction_rays(eval_ctx, ctx, ior, r_ray, t_ray, cos_i, cos_t)
ShaderHelpers_compute_reflection_and_refraction_rays = _framework.ShaderHelpers_compute_reflection_and_refraction_rays

def ShaderHelpers_create_shader_ctx(eval_ctx, ctx, layer):
    return _framework.ShaderHelpers_create_shader_ctx(eval_ctx, ctx, layer)
ShaderHelpers_create_shader_ctx = _framework.ShaderHelpers_create_shader_ctx

def ShaderHelpers_cleanup_shader_ctx(ctx):
    return _framework.ShaderHelpers_cleanup_shader_ctx(ctx)
ShaderHelpers_cleanup_shader_ctx = _framework.ShaderHelpers_cleanup_shader_ctx

def ShaderHelpers_raycast(intersection, ray, eval_ctx, ctx, x, y, width, height, alpha_threshold=0, items=None, exclude=True, filter_unpickable=False, raycast_light=False):
    return _framework.ShaderHelpers_raycast(intersection, ray, eval_ctx, ctx, x, y, width, height, alpha_threshold, items, exclude, filter_unpickable, raycast_light)
ShaderHelpers_raycast = _framework.ShaderHelpers_raycast

def ShaderHelpers_compute_bump_normal(normal, eval_ctx, ctx, texture, smoothed=True, factor=1.0, use_texture_space=True):
    return _framework.ShaderHelpers_compute_bump_normal(normal, eval_ctx, ctx, texture, smoothed, factor, use_texture_space)
ShaderHelpers_compute_bump_normal = _framework.ShaderHelpers_compute_bump_normal

def ShaderHelpers_compute_normal_from_map(normal, eval_ctx, ctx, texture, smoothed=True, factor=1.0, use_tangent_space=True):
    return _framework.ShaderHelpers_compute_normal_from_map(normal, eval_ctx, ctx, texture, smoothed, factor, use_tangent_space)
ShaderHelpers_compute_normal_from_map = _framework.ShaderHelpers_compute_normal_from_map

def ShaderHelpers_ray_hit(*args):
    return _framework.ShaderHelpers_ray_hit(*args)
ShaderHelpers_ray_hit = _framework.ShaderHelpers_ray_hit

def ShaderHelpers_ray_hit_nearest(eval_ctx, shader_ctx, ray_ctx, use_packet=True):
    return _framework.ShaderHelpers_ray_hit_nearest(eval_ctx, shader_ctx, ray_ctx, use_packet)
ShaderHelpers_ray_hit_nearest = _framework.ShaderHelpers_ray_hit_nearest

def ShaderHelpers_decimate_points(factory, points, decimate_value, decimate_texture=None, decimate_seed=0):
    return _framework.ShaderHelpers_decimate_points(factory, points, decimate_value, decimate_texture, decimate_seed)
ShaderHelpers_decimate_points = _framework.ShaderHelpers_decimate_points

def ShaderHelpers_merge_fragments(*args):
    return _framework.ShaderHelpers_merge_fragments(*args)
ShaderHelpers_merge_fragments = _framework.ShaderHelpers_merge_fragments

def ShaderHelpers_evaluate_support_material(point_cloud, material, colors, opacities, layer=None, progress_bar=None):
    return _framework.ShaderHelpers_evaluate_support_material(point_cloud, material, colors, opacities, layer, progress_bar)
ShaderHelpers_evaluate_support_material = _framework.ShaderHelpers_evaluate_support_material

def ShaderHelpers_evaluate_support_texture(point_cloud, texture, colors, layer=None, progress_bar=None):
    return _framework.ShaderHelpers_evaluate_support_texture(point_cloud, texture, colors, layer, progress_bar)
ShaderHelpers_evaluate_support_texture = _framework.ShaderHelpers_evaluate_support_texture

def ShaderHelpers_evaluate_vertices_texture(geometry, vertex_indices, texture, colors, layer=None, progress_bar=None):
    return _framework.ShaderHelpers_evaluate_vertices_texture(geometry, vertex_indices, texture, colors, layer, progress_bar)
ShaderHelpers_evaluate_vertices_texture = _framework.ShaderHelpers_evaluate_vertices_texture

def ShaderHelpers_gas_leaf_ray_hit_nearest(eval_ctx, shader_ctx, raytrace_ctx, leaf_callback, m, inv_m, leaf_index, leaf_module, leaf_override=None):
    return _framework.ShaderHelpers_gas_leaf_ray_hit_nearest(eval_ctx, shader_ctx, raytrace_ctx, leaf_callback, m, inv_m, leaf_index, leaf_module, leaf_override)
ShaderHelpers_gas_leaf_ray_hit_nearest = _framework.ShaderHelpers_gas_leaf_ray_hit_nearest

def ShaderHelpers_gas_leaf_ray_hit_nearest_motion(eval_ctx, shader_ctx, raytrace_ctx, leaf_callback, matrices, leaf_index, leaf_module, leaf_override=None):
    return _framework.ShaderHelpers_gas_leaf_ray_hit_nearest_motion(eval_ctx, shader_ctx, raytrace_ctx, leaf_callback, matrices, leaf_index, leaf_module, leaf_override)
ShaderHelpers_gas_leaf_ray_hit_nearest_motion = _framework.ShaderHelpers_gas_leaf_ray_hit_nearest_motion

class ShadingVariableManagerAccessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingVariableManagerAccessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingVariableManagerAccessor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ShadingVariableManagerAccessor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def is_string(self, value_index):
        return _framework.ShadingVariableManagerAccessor_is_string(self, value_index)

    def get_value_count(self):
        return _framework.ShadingVariableManagerAccessor_get_value_count(self)

    def get_string_value(self, value_index):
        return _framework.ShadingVariableManagerAccessor_get_string_value(self, value_index)

    def set_string_value(self, value, value_index):
        return _framework.ShadingVariableManagerAccessor_set_string_value(self, value, value_index)

    def get_double_value(self, value_index):
        return _framework.ShadingVariableManagerAccessor_get_double_value(self, value_index)

    def set_double_value(self, value, value_index):
        return _framework.ShadingVariableManagerAccessor_set_double_value(self, value, value_index)

    def __eq__(self, other):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ShadingVariableManagerAccessor___eq__(self, other)


    def __ne__(self, other):
        return _framework.ShadingVariableManagerAccessor___ne__(self, other)
    __swig_destroy__ = _framework.delete_ShadingVariableManagerAccessor
    __del__ = lambda self: None
ShadingVariableManagerAccessor_swigregister = _framework.ShadingVariableManagerAccessor_swigregister
ShadingVariableManagerAccessor_swigregister(ShadingVariableManagerAccessor)

class ShadingVariableManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingVariableManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingVariableManager, name)
    __repr__ = _swig_repr
    if _newclass:
        solve_variables = staticmethod(_framework.ShadingVariableManager_solve_variables)
    else:
        solve_variables = _framework.ShadingVariableManager_solve_variables

    def __init__(self):
        this = _framework.new_ShadingVariableManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self, objects):
        return _framework.ShadingVariableManager_init(self, objects)

    def bake(self):
        return _framework.ShadingVariableManager_bake(self)

    def clear(self):
        return _framework.ShadingVariableManager_clear(self)

    def get_variable_accessors(self, variable_name):
        return _framework.ShadingVariableManager_get_variable_accessors(self, variable_name)
    __swig_destroy__ = _framework.delete_ShadingVariableManager
    __del__ = lambda self: None
ShadingVariableManager_swigregister = _framework.ShadingVariableManager_swigregister
ShadingVariableManager_swigregister(ShadingVariableManager)

def ShadingVariableManager_solve_variables(raw_value, factory):
    return _framework.ShadingVariableManager_solve_variables(raw_value, factory)
ShadingVariableManager_solve_variables = _framework.ShadingVariableManager_solve_variables

class RendererDeepBucket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RendererDeepBucket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RendererDeepBucket, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["z_front"] = _framework.RendererDeepBucket_z_front_set
    __swig_getmethods__["z_front"] = _framework.RendererDeepBucket_z_front_get
    if _newclass:
        z_front = _swig_property(_framework.RendererDeepBucket_z_front_get, _framework.RendererDeepBucket_z_front_set)
    __swig_setmethods__["z_back"] = _framework.RendererDeepBucket_z_back_set
    __swig_getmethods__["z_back"] = _framework.RendererDeepBucket_z_back_get
    if _newclass:
        z_back = _swig_property(_framework.RendererDeepBucket_z_back_get, _framework.RendererDeepBucket_z_back_set)
    __swig_setmethods__["a"] = _framework.RendererDeepBucket_a_set
    __swig_getmethods__["a"] = _framework.RendererDeepBucket_a_get
    if _newclass:
        a = _swig_property(_framework.RendererDeepBucket_a_get, _framework.RendererDeepBucket_a_set)
    __swig_setmethods__["r"] = _framework.RendererDeepBucket_r_set
    __swig_getmethods__["r"] = _framework.RendererDeepBucket_r_get
    if _newclass:
        r = _swig_property(_framework.RendererDeepBucket_r_get, _framework.RendererDeepBucket_r_set)
    __swig_setmethods__["g"] = _framework.RendererDeepBucket_g_set
    __swig_getmethods__["g"] = _framework.RendererDeepBucket_g_get
    if _newclass:
        g = _swig_property(_framework.RendererDeepBucket_g_get, _framework.RendererDeepBucket_g_set)
    __swig_setmethods__["b"] = _framework.RendererDeepBucket_b_set
    __swig_getmethods__["b"] = _framework.RendererDeepBucket_b_get
    if _newclass:
        b = _swig_property(_framework.RendererDeepBucket_b_get, _framework.RendererDeepBucket_b_set)
    __swig_destroy__ = _framework.delete_RendererDeepBucket
    __del__ = lambda self: None
RendererDeepBucket_swigregister = _framework.RendererDeepBucket_swigregister
RendererDeepBucket_swigregister(RendererDeepBucket)

class RendererBucket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RendererBucket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RendererBucket, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_RendererBucket
    __del__ = lambda self: None

    def get_output(self):
        return _framework.RendererBucket_get_output(self)

    def get_region(self):
        return _framework.RendererBucket_get_region(self)

    def write_data(self, channels):
        return _framework.RendererBucket_write_data(self, channels)

    def get_deep_bucket(self, output):
        return _framework.RendererBucket_get_deep_bucket(self, output)
RendererBucket_swigregister = _framework.RendererBucket_swigregister
RendererBucket_swigregister(RendererBucket)

class RendererOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RendererOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RendererOutput, name)
    __repr__ = _swig_repr

    def __init__(self, channels):
        this = _framework.new_RendererOutput(channels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_RendererOutput
    __del__ = lambda self: None

    def get_channels(self):
        return _framework.RendererOutput_get_channels(self)

    def get_channel_count(self):
        return _framework.RendererOutput_get_channel_count(self)

    def begin_bucket(self, eval_ctx, region):
        return _framework.RendererOutput_begin_bucket(self, eval_ctx, region)

    def end_bucket(self, eval_ctx, bucket):
        return _framework.RendererOutput_end_bucket(self, eval_ctx, bucket)
RendererOutput_swigregister = _framework.RendererOutput_swigregister
RendererOutput_swigregister(RendererOutput)

class ModuleRendererCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleRendererCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleRendererCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleRendererCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleRendererCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_rasterize"] = _framework.ModuleRendererCallbacks_cb_rasterize_set
    __swig_getmethods__["cb_rasterize"] = _framework.ModuleRendererCallbacks_cb_rasterize_get
    if _newclass:
        cb_rasterize = _swig_property(_framework.ModuleRendererCallbacks_cb_rasterize_get, _framework.ModuleRendererCallbacks_cb_rasterize_set)
    __swig_setmethods__["cb_pre_rasterize"] = _framework.ModuleRendererCallbacks_cb_pre_rasterize_set
    __swig_getmethods__["cb_pre_rasterize"] = _framework.ModuleRendererCallbacks_cb_pre_rasterize_get
    if _newclass:
        cb_pre_rasterize = _swig_property(_framework.ModuleRendererCallbacks_cb_pre_rasterize_get, _framework.ModuleRendererCallbacks_cb_pre_rasterize_set)
    __swig_setmethods__["cb_post_rasterize"] = _framework.ModuleRendererCallbacks_cb_post_rasterize_set
    __swig_getmethods__["cb_post_rasterize"] = _framework.ModuleRendererCallbacks_cb_post_rasterize_get
    if _newclass:
        cb_post_rasterize = _swig_property(_framework.ModuleRendererCallbacks_cb_post_rasterize_get, _framework.ModuleRendererCallbacks_cb_post_rasterize_set)
    __swig_setmethods__["cb_render_bucket"] = _framework.ModuleRendererCallbacks_cb_render_bucket_set
    __swig_getmethods__["cb_render_bucket"] = _framework.ModuleRendererCallbacks_cb_render_bucket_get
    if _newclass:
        cb_render_bucket = _swig_property(_framework.ModuleRendererCallbacks_cb_render_bucket_get, _framework.ModuleRendererCallbacks_cb_render_bucket_set)
    __swig_setmethods__["cb_get_render_dirtiness"] = _framework.ModuleRendererCallbacks_cb_get_render_dirtiness_set
    __swig_getmethods__["cb_get_render_dirtiness"] = _framework.ModuleRendererCallbacks_cb_get_render_dirtiness_get
    if _newclass:
        cb_get_render_dirtiness = _swig_property(_framework.ModuleRendererCallbacks_cb_get_render_dirtiness_get, _framework.ModuleRendererCallbacks_cb_get_render_dirtiness_set)
    __swig_setmethods__["cb_get_aovs"] = _framework.ModuleRendererCallbacks_cb_get_aovs_set
    __swig_getmethods__["cb_get_aovs"] = _framework.ModuleRendererCallbacks_cb_get_aovs_get
    if _newclass:
        cb_get_aovs = _swig_property(_framework.ModuleRendererCallbacks_cb_get_aovs_get, _framework.ModuleRendererCallbacks_cb_get_aovs_set)
    __swig_destroy__ = _framework.delete_ModuleRendererCallbacks
    __del__ = lambda self: None
ModuleRendererCallbacks_swigregister = _framework.ModuleRendererCallbacks_swigregister
ModuleRendererCallbacks_swigregister(ModuleRendererCallbacks)

class ModuleRenderer(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleRenderer, name)
    __repr__ = _swig_repr
    DIRTINESS_NONE = _framework.ModuleRenderer_DIRTINESS_NONE
    DIRTINESS_RASTER = _framework.ModuleRenderer_DIRTINESS_RASTER
    DIRTINESS_SHADING = _framework.ModuleRenderer_DIRTINESS_SHADING
    DIRTINESS_ALL = _framework.ModuleRenderer_DIRTINESS_ALL
    if _newclass:
        get_dirtiness_name = staticmethod(_framework.ModuleRenderer_get_dirtiness_name)
    else:
        get_dirtiness_name = _framework.ModuleRenderer_get_dirtiness_name

    def __init__(self):
        this = _framework.new_ModuleRenderer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleRenderer
    __del__ = lambda self: None

    def get_render_dirtiness(self, dirtiness):
        return _framework.ModuleRenderer_get_render_dirtiness(self, dirtiness)

    def get_aovs_list(self, aov_list):
        return _framework.ModuleRenderer_get_aovs_list(self, aov_list)

    def pre_rasterize(self, eval_ctx, ctx, max_bucket_size, output):
        return _framework.ModuleRenderer_pre_rasterize(self, eval_ctx, ctx, max_bucket_size, output)

    def rasterize(self, eval_ctx, ctx, region, output):
        return _framework.ModuleRenderer_rasterize(self, eval_ctx, ctx, region, output)

    def post_rasterize(self, eval_ctx, ctx, output):
        return _framework.ModuleRenderer_post_rasterize(self, eval_ctx, ctx, output)

    def render_bucket(self, eval_ctx, output):
        return _framework.ModuleRenderer_render_bucket(self, eval_ctx, output)
    if _newclass:
        class_info = staticmethod(_framework.ModuleRenderer_class_info)
    else:
        class_info = _framework.ModuleRenderer_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleRenderer____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleRenderer____class_destructor__

    def get_class_info(self):
        return _framework.ModuleRenderer_get_class_info(self)
ModuleRenderer_swigregister = _framework.ModuleRenderer_swigregister
ModuleRenderer_swigregister(ModuleRenderer)

def ModuleRenderer_get_dirtiness_name(dirtiness):
    return _framework.ModuleRenderer_get_dirtiness_name(dirtiness)
ModuleRenderer_get_dirtiness_name = _framework.ModuleRenderer_get_dirtiness_name

def ModuleRenderer_class_info():
    return _framework.ModuleRenderer_class_info()
ModuleRenderer_class_info = _framework.ModuleRenderer_class_info

def ModuleRenderer____class_destructor__(instance, is_array):
    return _framework.ModuleRenderer____class_destructor__(instance, is_array)
ModuleRenderer____class_destructor__ = _framework.ModuleRenderer____class_destructor__

class ModuleSceneItemCallbacks(ModuleGlObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleGlObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneItemCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleGlObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneItemCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleSceneItemCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleSceneItemCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_get_model_matrix"] = _framework.ModuleSceneItemCallbacks_cb_get_model_matrix_set
    __swig_getmethods__["cb_get_model_matrix"] = _framework.ModuleSceneItemCallbacks_cb_get_model_matrix_get
    if _newclass:
        cb_get_model_matrix = _swig_property(_framework.ModuleSceneItemCallbacks_cb_get_model_matrix_get, _framework.ModuleSceneItemCallbacks_cb_get_model_matrix_set)
    __swig_setmethods__["cb_get_transform_at"] = _framework.ModuleSceneItemCallbacks_cb_get_transform_at_set
    __swig_getmethods__["cb_get_transform_at"] = _framework.ModuleSceneItemCallbacks_cb_get_transform_at_get
    if _newclass:
        cb_get_transform_at = _swig_property(_framework.ModuleSceneItemCallbacks_cb_get_transform_at_get, _framework.ModuleSceneItemCallbacks_cb_get_transform_at_set)
    __swig_setmethods__["cb_is_visibility_driven"] = _framework.ModuleSceneItemCallbacks_cb_is_visibility_driven_set
    __swig_getmethods__["cb_is_visibility_driven"] = _framework.ModuleSceneItemCallbacks_cb_is_visibility_driven_get
    if _newclass:
        cb_is_visibility_driven = _swig_property(_framework.ModuleSceneItemCallbacks_cb_is_visibility_driven_get, _framework.ModuleSceneItemCallbacks_cb_is_visibility_driven_set)
    __swig_destroy__ = _framework.delete_ModuleSceneItemCallbacks
    __del__ = lambda self: None
ModuleSceneItemCallbacks_swigregister = _framework.ModuleSceneItemCallbacks_swigregister
ModuleSceneItemCallbacks_swigregister(ModuleSceneItemCallbacks)

class ModuleSceneItem(ModuleGlObject):
    __swig_setmethods__ = {}
    for _s in [ModuleGlObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneItem, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleGlObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneItem, name)
    __repr__ = _swig_repr
    SPACE_LOCAL = _framework.ModuleSceneItem_SPACE_LOCAL
    SPACE_GLOBAL = _framework.ModuleSceneItem_SPACE_GLOBAL
    VISIBILITY_MODE_OVERRIDE = _framework.ModuleSceneItem_VISIBILITY_MODE_OVERRIDE
    VISIBILITY_MODE_USE_PROPERTY = _framework.ModuleSceneItem_VISIBILITY_MODE_USE_PROPERTY
    VISIBILITY_MODE_USE_PREFERENCES = _framework.ModuleSceneItem_VISIBILITY_MODE_USE_PREFERENCES
    VISIBILITY_MODE_COUNT = _framework.ModuleSceneItem_VISIBILITY_MODE_COUNT

    def __init__(self):
        this = _framework.new_ModuleSceneItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneItem
    __del__ = lambda self: None

    def register_component_implementation(self):
        return _framework.ModuleSceneItem_register_component_implementation(self)

    def is_translatable(self):
        return _framework.ModuleSceneItem_is_translatable(self)

    def is_rotatable(self):
        return _framework.ModuleSceneItem_is_rotatable(self)

    def is_scalable(self):
        return _framework.ModuleSceneItem_is_scalable(self)

    def is_pivot_translatable(self):
        return _framework.ModuleSceneItem_is_pivot_translatable(self)

    def is_pivot_rotatable(self):
        return _framework.ModuleSceneItem_is_pivot_rotatable(self)

    def is_pivot_scalable(self):
        return _framework.ModuleSceneItem_is_pivot_scalable(self)

    def get_parent(self):
        return _framework.ModuleSceneItem_get_parent(self)
    PARENT_IN_PLACE_PREFERENCE = _framework.ModuleSceneItem_PARENT_IN_PLACE_PREFERENCE
    PARENT_IN_PLACE_FORCED_ON = _framework.ModuleSceneItem_PARENT_IN_PLACE_FORCED_ON
    PARENT_IN_PLACE_FORCED_OFF = _framework.ModuleSceneItem_PARENT_IN_PLACE_FORCED_OFF

    def set_parent(self, *args):
        return _framework.ModuleSceneItem_set_parent(self, *args)

    def get_serialized_parent(self):
        return _framework.ModuleSceneItem_get_serialized_parent(self)

    def set_rotation_order(self, order):
        return _framework.ModuleSceneItem_set_rotation_order(self, order)

    def set_rotation_offset_order(self, order):
        return _framework.ModuleSceneItem_set_rotation_offset_order(self, order)

    def get_rotation_order(self):
        return _framework.ModuleSceneItem_get_rotation_order(self)

    def get_rotation_offset_order(self):
        return _framework.ModuleSceneItem_get_rotation_offset_order(self)

    def set_transform(self, xform):
        return _framework.ModuleSceneItem_set_transform(self, xform)

    def set_translation(self, *args):
        return _framework.ModuleSceneItem_set_translation(self, *args)

    def set_rotation(self, *args):
        return _framework.ModuleSceneItem_set_rotation(self, *args)

    def set_scaling(self, *args):
        return _framework.ModuleSceneItem_set_scaling(self, *args)

    def set_shearing(self, *args):
        return _framework.ModuleSceneItem_set_shearing(self, *args)

    def change_translation(self, *args):
        return _framework.ModuleSceneItem_change_translation(self, *args)

    def change_rotation(self, *args):
        return _framework.ModuleSceneItem_change_rotation(self, *args)

    def change_scaling(self, *args):
        return _framework.ModuleSceneItem_change_scaling(self, *args)

    def change_shearing(self, *args):
        return _framework.ModuleSceneItem_change_shearing(self, *args)

    def set_translation_offset(self, *args):
        return _framework.ModuleSceneItem_set_translation_offset(self, *args)

    def set_rotation_offset(self, *args):
        return _framework.ModuleSceneItem_set_rotation_offset(self, *args)

    def set_scaling_offset(self, *args):
        return _framework.ModuleSceneItem_set_scaling_offset(self, *args)

    def change_translation_offset(self, *args):
        return _framework.ModuleSceneItem_change_translation_offset(self, *args)

    def change_rotation_offset(self, *args):
        return _framework.ModuleSceneItem_change_rotation_offset(self, *args)

    def change_scaling_offset(self, *args):
        return _framework.ModuleSceneItem_change_scaling_offset(self, *args)

    def set_rotation_pivot(self, *args):
        return _framework.ModuleSceneItem_set_rotation_pivot(self, *args)

    def set_scaling_pivot(self, *args):
        return _framework.ModuleSceneItem_set_scaling_pivot(self, *args)

    def change_rotation_pivot(self, *args):
        return _framework.ModuleSceneItem_change_rotation_pivot(self, *args)

    def change_scaling_pivot(self, *args):
        return _framework.ModuleSceneItem_change_scaling_pivot(self, *args)

    def reset_rotation_pivot(self):
        return _framework.ModuleSceneItem_reset_rotation_pivot(self)

    def reset_scaling_pivot(self):
        return _framework.ModuleSceneItem_reset_scaling_pivot(self)

    def inplace_set_translation(self, *args):
        return _framework.ModuleSceneItem_inplace_set_translation(self, *args)

    def inplace_set_rotation(self, *args):
        return _framework.ModuleSceneItem_inplace_set_rotation(self, *args)

    def inplace_set_scaling(self, *args):
        return _framework.ModuleSceneItem_inplace_set_scaling(self, *args)

    def inplace_change_translation(self, *args):
        return _framework.ModuleSceneItem_inplace_change_translation(self, *args)

    def inplace_change_rotation(self, *args):
        return _framework.ModuleSceneItem_inplace_change_rotation(self, *args)

    def inplace_change_scaling(self, *args):
        return _framework.ModuleSceneItem_inplace_change_scaling(self, *args)

    def inplace_set_translation_offset(self, *args):
        return _framework.ModuleSceneItem_inplace_set_translation_offset(self, *args)

    def inplace_set_rotation_offset(self, *args):
        return _framework.ModuleSceneItem_inplace_set_rotation_offset(self, *args)

    def inplace_set_scaling_offset(self, *args):
        return _framework.ModuleSceneItem_inplace_set_scaling_offset(self, *args)

    def inplace_change_translation_offset(self, *args):
        return _framework.ModuleSceneItem_inplace_change_translation_offset(self, *args)

    def inplace_change_rotation_offset(self, *args):
        return _framework.ModuleSceneItem_inplace_change_rotation_offset(self, *args)

    def inplace_change_scaling_offset(self, *args):
        return _framework.ModuleSceneItem_inplace_change_scaling_offset(self, *args)

    def set_matrix(self, matrix, space):
        return _framework.ModuleSceneItem_set_matrix(self, matrix, space)

    def get_transform(self, *args):
        return _framework.ModuleSceneItem_get_transform(self, *args)

    def get_transform_at(self, time):
        return _framework.ModuleSceneItem_get_transform_at(self, time)

    def compute_transform_at(self, time):
        return _framework.ModuleSceneItem_compute_transform_at(self, time)

    def get_translation(self, *args):
        return _framework.ModuleSceneItem_get_translation(self, *args)

    def get_rotation(self, *args):
        return _framework.ModuleSceneItem_get_rotation(self, *args)

    def get_scaling(self, *args):
        return _framework.ModuleSceneItem_get_scaling(self, *args)

    def get_shearing(self, *args):
        return _framework.ModuleSceneItem_get_shearing(self, *args)

    def get_translation_offset(self, *args):
        return _framework.ModuleSceneItem_get_translation_offset(self, *args)

    def get_rotation_offset(self, *args):
        return _framework.ModuleSceneItem_get_rotation_offset(self, *args)

    def get_scaling_offset(self, *args):
        return _framework.ModuleSceneItem_get_scaling_offset(self, *args)

    def get_rotation_pivot(self, *args):
        return _framework.ModuleSceneItem_get_rotation_pivot(self, *args)

    def get_scaling_pivot(self, *args):
        return _framework.ModuleSceneItem_get_scaling_pivot(self, *args)

    def get_rotation_pivot_matrix(self, *args):
        return _framework.ModuleSceneItem_get_rotation_pivot_matrix(self, *args)

    def get_scaling_pivot_matrix(self, *args):
        return _framework.ModuleSceneItem_get_scaling_pivot_matrix(self, *args)

    def get_kinematic_matrix(self, *args):
        return _framework.ModuleSceneItem_get_kinematic_matrix(self, *args)

    def get_object_matrix(self, *args):
        return _framework.ModuleSceneItem_get_object_matrix(self, *args)

    def get_global_matrix(self, *args):
        return _framework.ModuleSceneItem_get_global_matrix(self, *args)

    def get_inv_global_matrix(self, *args):
        return _framework.ModuleSceneItem_get_inv_global_matrix(self, *args)

    def get_reference_global_matrix(self):
        return _framework.ModuleSceneItem_get_reference_global_matrix(self)

    def get_global_position(self, *args):
        return _framework.ModuleSceneItem_get_global_position(self, *args)

    def get_translation_at(self, *args):
        return _framework.ModuleSceneItem_get_translation_at(self, *args)

    def get_rotation_at(self, *args):
        return _framework.ModuleSceneItem_get_rotation_at(self, *args)

    def get_scaling_at(self, *args):
        return _framework.ModuleSceneItem_get_scaling_at(self, *args)

    def get_shearing_at(self, *args):
        return _framework.ModuleSceneItem_get_shearing_at(self, *args)

    def get_translation_offset_at(self, *args):
        return _framework.ModuleSceneItem_get_translation_offset_at(self, *args)

    def get_rotation_offset_at(self, *args):
        return _framework.ModuleSceneItem_get_rotation_offset_at(self, *args)

    def get_scaling_offset_at(self, *args):
        return _framework.ModuleSceneItem_get_scaling_offset_at(self, *args)

    def get_model_matrix_at(self, matrix, time):
        return _framework.ModuleSceneItem_get_model_matrix_at(self, matrix, time)

    def get_kinematic_matrix_at(self, time):
        return _framework.ModuleSceneItem_get_kinematic_matrix_at(self, time)

    def get_object_matrix_at(self, time):
        return _framework.ModuleSceneItem_get_object_matrix_at(self, time)

    def get_global_matrix_at(self, time):
        return _framework.ModuleSceneItem_get_global_matrix_at(self, time)

    def get_global_matrix_motion_blur_samples(self, eval_ctx):
        return _framework.ModuleSceneItem_get_global_matrix_motion_blur_samples(self, eval_ctx)

    def get_global_matrix_motion_blur_at(self, eval_ctx, delta_time):
        return _framework.ModuleSceneItem_get_global_matrix_motion_blur_at(self, eval_ctx, delta_time)

    def get_global_position_at(self, position, time):
        return _framework.ModuleSceneItem_get_global_position_at(self, position, time)

    def get_global_orientation(self, *args):
        return _framework.ModuleSceneItem_get_global_orientation(self, *args)

    def get_display_color(self):
        return _framework.ModuleSceneItem_get_display_color(self)

    def is_display_visible(self):
        return _framework.ModuleSceneItem_is_display_visible(self)

    def is_display_pickable(self):
        return _framework.ModuleSceneItem_is_display_pickable(self)

    def is_constrained(self):
        return _framework.ModuleSceneItem_is_constrained(self)

    def get_xform_constraint_modifier(self):
        return _framework.ModuleSceneItem_get_xform_constraint_modifier(self)

    def is_animated(self):
        return _framework.ModuleSceneItem_is_animated(self)

    def is_motion_blur_enabled(self):
        return _framework.ModuleSceneItem_is_motion_blur_enabled(self)

    def is_motion_blur_required(self):
        return _framework.ModuleSceneItem_is_motion_blur_required(self)

    def is_motion_blurred(self):
        return _framework.ModuleSceneItem_is_motion_blurred(self)

    def is_locally_motion_blurred(self):
        return _framework.ModuleSceneItem_is_locally_motion_blurred(self)

    def is_animation_motion_blurred(self):
        return _framework.ModuleSceneItem_is_animation_motion_blurred(self)

    def has_kinematic_expression(self):
        return _framework.ModuleSceneItem_has_kinematic_expression(self)

    def has_local_animation(self):
        return _framework.ModuleSceneItem_has_local_animation(self)

    def enable_motion_blur(self, flag):
        return _framework.ModuleSceneItem_enable_motion_blur(self, flag)

    def require_motion_blur(self, *args):
        return _framework.ModuleSceneItem_require_motion_blur(self, *args)

    def set_matrices_as_dirty(self, *args):
        return _framework.ModuleSceneItem_set_matrices_as_dirty(self, *args)

    def get_memory_size(self):
        return _framework.ModuleSceneItem_get_memory_size(self)

    def get_object_count(self, *args):
        return _framework.ModuleSceneItem_get_object_count(self, *args)

    def get_object_id(self):
        return _framework.ModuleSceneItem_get_object_id(self)
    if _newclass:
        get_all_scene_items = staticmethod(_framework.ModuleSceneItem_get_all_scene_items)
    else:
        get_all_scene_items = _framework.ModuleSceneItem_get_all_scene_items
    if _newclass:
        get_visibility_mode = staticmethod(_framework.ModuleSceneItem_get_visibility_mode)
    else:
        get_visibility_mode = _framework.ModuleSceneItem_get_visibility_mode

    def is_visibility_driven(self):
        return _framework.ModuleSceneItem_is_visibility_driven(self)

    def get_kinematic_full_name(self):
        return _framework.ModuleSceneItem_get_kinematic_full_name(self)

    def set_kinematic_full_name_dirty(self):
        return _framework.ModuleSceneItem_set_kinematic_full_name_dirty(self)

    def is_kinematic_full_name_dirty(self):
        return _framework.ModuleSceneItem_is_kinematic_full_name_dirty(self)

    def is_inherit_transform(self):
        return _framework.ModuleSceneItem_is_inherit_transform(self)

    def get_reference_frame(self):
        return _framework.ModuleSceneItem_get_reference_frame(self)

    def get_reference_time(self):
        return _framework.ModuleSceneItem_get_reference_time(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneItem_class_info)
    else:
        class_info = _framework.ModuleSceneItem_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneItem____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneItem____class_destructor__

    def get_class_info(self):
        return _framework.ModuleSceneItem_get_class_info(self)
    if _newclass:
        get_scene_item = staticmethod(_framework.ModuleSceneItem_get_scene_item)
    else:
        get_scene_item = _framework.ModuleSceneItem_get_scene_item
ModuleSceneItem_swigregister = _framework.ModuleSceneItem_swigregister
ModuleSceneItem_swigregister(ModuleSceneItem)

def ModuleSceneItem_get_all_scene_items(application, items):
    return _framework.ModuleSceneItem_get_all_scene_items(application, items)
ModuleSceneItem_get_all_scene_items = _framework.ModuleSceneItem_get_all_scene_items

def ModuleSceneItem_get_visibility_mode(object):
    return _framework.ModuleSceneItem_get_visibility_mode(object)
ModuleSceneItem_get_visibility_mode = _framework.ModuleSceneItem_get_visibility_mode

def ModuleSceneItem_class_info():
    return _framework.ModuleSceneItem_class_info()
ModuleSceneItem_class_info = _framework.ModuleSceneItem_class_info

def ModuleSceneItem____class_destructor__(instance, is_array):
    return _framework.ModuleSceneItem____class_destructor__(instance, is_array)
ModuleSceneItem____class_destructor__ = _framework.ModuleSceneItem____class_destructor__

def ModuleSceneItem_get_scene_item(application, id):
    return _framework.ModuleSceneItem_get_scene_item(application, id)
ModuleSceneItem_get_scene_item = _framework.ModuleSceneItem_get_scene_item

class ModuleSceneItemInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneItemInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneItemInfo, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_ModuleSceneItemInfo
    __del__ = lambda self: None

    def get_parent(self):
        return _framework.ModuleSceneItemInfo_get_parent(self)

    def global_to_local(self, arg2, local):
        return _framework.ModuleSceneItemInfo_global_to_local(self, arg2, local)

    def local_to_global(self, local, arg3):
        return _framework.ModuleSceneItemInfo_local_to_global(self, local, arg3)
ModuleSceneItemInfo_swigregister = _framework.ModuleSceneItemInfo_swigregister
ModuleSceneItemInfo_swigregister(ModuleSceneItemInfo)

class CameraConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraConfig, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["focal_length"] = _framework.CameraConfig_focal_length_set
    __swig_getmethods__["focal_length"] = _framework.CameraConfig_focal_length_get
    if _newclass:
        focal_length = _swig_property(_framework.CameraConfig_focal_length_get, _framework.CameraConfig_focal_length_set)
    __swig_setmethods__["h_aperture"] = _framework.CameraConfig_h_aperture_set
    __swig_getmethods__["h_aperture"] = _framework.CameraConfig_h_aperture_get
    if _newclass:
        h_aperture = _swig_property(_framework.CameraConfig_h_aperture_get, _framework.CameraConfig_h_aperture_set)
    __swig_setmethods__["v_aperture"] = _framework.CameraConfig_v_aperture_set
    __swig_getmethods__["v_aperture"] = _framework.CameraConfig_v_aperture_get
    if _newclass:
        v_aperture = _swig_property(_framework.CameraConfig_v_aperture_get, _framework.CameraConfig_v_aperture_set)
    __swig_setmethods__["film_offset_x"] = _framework.CameraConfig_film_offset_x_set
    __swig_getmethods__["film_offset_x"] = _framework.CameraConfig_film_offset_x_get
    if _newclass:
        film_offset_x = _swig_property(_framework.CameraConfig_film_offset_x_get, _framework.CameraConfig_film_offset_x_set)
    __swig_setmethods__["film_offset_y"] = _framework.CameraConfig_film_offset_y_set
    __swig_getmethods__["film_offset_y"] = _framework.CameraConfig_film_offset_y_get
    if _newclass:
        film_offset_y = _swig_property(_framework.CameraConfig_film_offset_y_get, _framework.CameraConfig_film_offset_y_set)
    __swig_setmethods__["lens_ratio"] = _framework.CameraConfig_lens_ratio_set
    __swig_getmethods__["lens_ratio"] = _framework.CameraConfig_lens_ratio_get
    if _newclass:
        lens_ratio = _swig_property(_framework.CameraConfig_lens_ratio_get, _framework.CameraConfig_lens_ratio_set)
    __swig_setmethods__["f_stop"] = _framework.CameraConfig_f_stop_set
    __swig_getmethods__["f_stop"] = _framework.CameraConfig_f_stop_get
    if _newclass:
        f_stop = _swig_property(_framework.CameraConfig_f_stop_get, _framework.CameraConfig_f_stop_set)
    __swig_setmethods__["focus_distance"] = _framework.CameraConfig_focus_distance_set
    __swig_getmethods__["focus_distance"] = _framework.CameraConfig_focus_distance_get
    if _newclass:
        focus_distance = _swig_property(_framework.CameraConfig_focus_distance_get, _framework.CameraConfig_focus_distance_set)
    __swig_setmethods__["overscan"] = _framework.CameraConfig_overscan_set
    __swig_getmethods__["overscan"] = _framework.CameraConfig_overscan_get
    if _newclass:
        overscan = _swig_property(_framework.CameraConfig_overscan_get, _framework.CameraConfig_overscan_set)
    __swig_destroy__ = _framework.delete_CameraConfig
    __del__ = lambda self: None
CameraConfig_swigregister = _framework.CameraConfig_swigregister
CameraConfig_swigregister(CameraConfig)

class ModuleCameraCallbacks(ModuleSceneItemCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneItemCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleCameraCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneItemCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleCameraCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleCameraCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleCameraCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_create_ray_generator"] = _framework.ModuleCameraCallbacks_cb_create_ray_generator_set
    __swig_getmethods__["cb_create_ray_generator"] = _framework.ModuleCameraCallbacks_cb_create_ray_generator_get
    if _newclass:
        cb_create_ray_generator = _swig_property(_framework.ModuleCameraCallbacks_cb_create_ray_generator_get, _framework.ModuleCameraCallbacks_cb_create_ray_generator_set)
    __swig_setmethods__["cb_project_point"] = _framework.ModuleCameraCallbacks_cb_project_point_set
    __swig_getmethods__["cb_project_point"] = _framework.ModuleCameraCallbacks_cb_project_point_get
    if _newclass:
        cb_project_point = _swig_property(_framework.ModuleCameraCallbacks_cb_project_point_get, _framework.ModuleCameraCallbacks_cb_project_point_set)
    __swig_setmethods__["cb_project_sample"] = _framework.ModuleCameraCallbacks_cb_project_sample_set
    __swig_getmethods__["cb_project_sample"] = _framework.ModuleCameraCallbacks_cb_project_sample_get
    if _newclass:
        cb_project_sample = _swig_property(_framework.ModuleCameraCallbacks_cb_project_sample_get, _framework.ModuleCameraCallbacks_cb_project_sample_set)
    __swig_setmethods__["cb_unproject_point"] = _framework.ModuleCameraCallbacks_cb_unproject_point_set
    __swig_getmethods__["cb_unproject_point"] = _framework.ModuleCameraCallbacks_cb_unproject_point_get
    if _newclass:
        cb_unproject_point = _swig_property(_framework.ModuleCameraCallbacks_cb_unproject_point_get, _framework.ModuleCameraCallbacks_cb_unproject_point_set)
    __swig_setmethods__["cb_unproject_sample"] = _framework.ModuleCameraCallbacks_cb_unproject_sample_set
    __swig_getmethods__["cb_unproject_sample"] = _framework.ModuleCameraCallbacks_cb_unproject_sample_get
    if _newclass:
        cb_unproject_sample = _swig_property(_framework.ModuleCameraCallbacks_cb_unproject_sample_get, _framework.ModuleCameraCallbacks_cb_unproject_sample_set)
    __swig_setmethods__["cb_get_fovs"] = _framework.ModuleCameraCallbacks_cb_get_fovs_set
    __swig_getmethods__["cb_get_fovs"] = _framework.ModuleCameraCallbacks_cb_get_fovs_get
    if _newclass:
        cb_get_fovs = _swig_property(_framework.ModuleCameraCallbacks_cb_get_fovs_get, _framework.ModuleCameraCallbacks_cb_get_fovs_set)
    __swig_setmethods__["cb_get_offsets"] = _framework.ModuleCameraCallbacks_cb_get_offsets_set
    __swig_getmethods__["cb_get_offsets"] = _framework.ModuleCameraCallbacks_cb_get_offsets_get
    if _newclass:
        cb_get_offsets = _swig_property(_framework.ModuleCameraCallbacks_cb_get_offsets_get, _framework.ModuleCameraCallbacks_cb_get_offsets_set)
    __swig_setmethods__["cb_get_config"] = _framework.ModuleCameraCallbacks_cb_get_config_set
    __swig_getmethods__["cb_get_config"] = _framework.ModuleCameraCallbacks_cb_get_config_get
    if _newclass:
        cb_get_config = _swig_property(_framework.ModuleCameraCallbacks_cb_get_config_get, _framework.ModuleCameraCallbacks_cb_get_config_set)
    __swig_destroy__ = _framework.delete_ModuleCameraCallbacks
    __del__ = lambda self: None
ModuleCameraCallbacks_swigregister = _framework.ModuleCameraCallbacks_swigregister
ModuleCameraCallbacks_swigregister(ModuleCameraCallbacks)

class ModuleCamera(ModuleSceneItem):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleCamera, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleCamera, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleCamera()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleCamera
    __del__ = lambda self: None

    def create_ray_generator(self, motion_blur=None):
        return _framework.ModuleCamera_create_ray_generator(self, motion_blur)

    def configure_ray_generator(self, ray_gen, motion_blur=None):
        return _framework.ModuleCamera_configure_ray_generator(self, ray_gen, motion_blur)

    def project_local_point(self, eval_ctx, local_position, camera_position, aspect_ratio=1.0, delta_time=0.0):
        return _framework.ModuleCamera_project_local_point(self, eval_ctx, local_position, camera_position, aspect_ratio, delta_time)

    def unproject_local_point(self, eval_ctx, camera_position, local_position, aspect_ratio=1.0, delta_time=0.0):
        return _framework.ModuleCamera_unproject_local_point(self, eval_ctx, camera_position, local_position, aspect_ratio, delta_time)

    def project_point(self, eval_ctx, world_position, camera_position, aspect_ratio=1.0, delta_time=0.0):
        return _framework.ModuleCamera_project_point(self, eval_ctx, world_position, camera_position, aspect_ratio, delta_time)

    def unproject_point(self, eval_ctx, camera_position, world_position, aspect_ratio=1.0, delta_time=0.0):
        return _framework.ModuleCamera_unproject_point(self, eval_ctx, camera_position, world_position, aspect_ratio, delta_time)

    def project_local_sample(self, eval_ctx, local_position, local_dpdu, local_dpdv, camera_position, camera_dpdu, camera_dpdv, aspect_ratio=1.0, delta_time=0.0):
        return _framework.ModuleCamera_project_local_sample(self, eval_ctx, local_position, local_dpdu, local_dpdv, camera_position, camera_dpdu, camera_dpdv, aspect_ratio, delta_time)

    def unproject_local_sample(self, eval_ctx, camera_position, camera_dpdu, camera_dpdv, local_position, local_dpdu, local_dpdv, aspect_ratio=1.0, delta_time=0.0):
        return _framework.ModuleCamera_unproject_local_sample(self, eval_ctx, camera_position, camera_dpdu, camera_dpdv, local_position, local_dpdu, local_dpdv, aspect_ratio, delta_time)

    def project_sample(self, eval_ctx, world_position, world_dpdu, world_dpdv, camera_position, camera_dpdu, camera_dpdv, aspect_ratio=1.0, delta_time=0.0):
        return _framework.ModuleCamera_project_sample(self, eval_ctx, world_position, world_dpdu, world_dpdv, camera_position, camera_dpdu, camera_dpdv, aspect_ratio, delta_time)

    def unproject_sample(self, eval_ctx, camera_position, camera_dpdu, camera_dpdv, world_position, world_dpdu, world_dpdv, aspect_ratio=1.0, delta_time=0.0):
        return _framework.ModuleCamera_unproject_sample(self, eval_ctx, camera_position, camera_dpdu, camera_dpdv, world_position, world_dpdu, world_dpdv, aspect_ratio, delta_time)

    def get_fovs(self, ratio, h_fov, v_fov):
        return _framework.ModuleCamera_get_fovs(self, ratio, h_fov, v_fov)

    def get_offsets(self, h_offset, v_offset):
        return _framework.ModuleCamera_get_offsets(self, h_offset, v_offset)

    def get_camera_configuration(self, config):
        return _framework.ModuleCamera_get_camera_configuration(self, config)

    def get_proj_matrix(self, image_ratio, wtn):
        return _framework.ModuleCamera_get_proj_matrix(self, image_ratio, wtn)
    if _newclass:
        class_info = staticmethod(_framework.ModuleCamera_class_info)
    else:
        class_info = _framework.ModuleCamera_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleCamera____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleCamera____class_destructor__

    def get_class_info(self):
        return _framework.ModuleCamera_get_class_info(self)
ModuleCamera_swigregister = _framework.ModuleCamera_swigregister
ModuleCamera_swigregister(ModuleCamera)

def ModuleCamera_class_info():
    return _framework.ModuleCamera_class_info()
ModuleCamera_class_info = _framework.ModuleCamera_class_info

def ModuleCamera____class_destructor__(instance, is_array):
    return _framework.ModuleCamera____class_destructor__(instance, is_array)
ModuleCamera____class_destructor__ = _framework.ModuleCamera____class_destructor__

class ModuleDisplacement(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleDisplacement, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleDisplacement, name)
    __repr__ = _swig_repr
    FRONT_ONLY = _framework.ModuleDisplacement_FRONT_ONLY
    SYMETRIC = _framework.ModuleDisplacement_SYMETRIC
    ASYMETRIC = _framework.ModuleDisplacement_ASYMETRIC
    NORMAL = _framework.ModuleDisplacement_NORMAL
    VECTOR_TANGENT_SPACE = _framework.ModuleDisplacement_VECTOR_TANGENT_SPACE
    VECTOR_OBJECT_SPACE = _framework.ModuleDisplacement_VECTOR_OBJECT_SPACE

    def __init__(self):
        this = _framework.new_ModuleDisplacement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleDisplacement
    __del__ = lambda self: None

    def is_active(self):
        return _framework.ModuleDisplacement_is_active(self)

    def get_mode(self):
        return _framework.ModuleDisplacement_get_mode(self)

    def get_front_direction(self):
        return _framework.ModuleDisplacement_get_front_direction(self)

    def get_back_direction(self):
        return _framework.ModuleDisplacement_get_back_direction(self)

    def get_front_texture(self):
        return _framework.ModuleDisplacement_get_front_texture(self)

    def get_back_texture(self):
        return _framework.ModuleDisplacement_get_back_texture(self)

    def get_front_value(self):
        return _framework.ModuleDisplacement_get_front_value(self)

    def get_back_value(self):
        return _framework.ModuleDisplacement_get_back_value(self)

    def get_front_offset(self):
        return _framework.ModuleDisplacement_get_front_offset(self)

    def get_back_offset(self):
        return _framework.ModuleDisplacement_get_back_offset(self)

    def get_bound(self):
        return _framework.ModuleDisplacement_get_bound(self)

    def add_geometry_override(self, override):
        return _framework.ModuleDisplacement_add_geometry_override(self, override)
    if _newclass:
        class_info = staticmethod(_framework.ModuleDisplacement_class_info)
    else:
        class_info = _framework.ModuleDisplacement_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleDisplacement____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleDisplacement____class_destructor__

    def get_class_info(self):
        return _framework.ModuleDisplacement_get_class_info(self)
ModuleDisplacement_swigregister = _framework.ModuleDisplacement_swigregister
ModuleDisplacement_swigregister(ModuleDisplacement)

def ModuleDisplacement_class_info():
    return _framework.ModuleDisplacement_class_info()
ModuleDisplacement_class_info = _framework.ModuleDisplacement_class_info

def ModuleDisplacement____class_destructor__(instance, is_array):
    return _framework.ModuleDisplacement____class_destructor__(instance, is_array)
ModuleDisplacement____class_destructor__ = _framework.ModuleDisplacement____class_destructor__

class ModuleLight(ModuleSceneItem):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLight, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLight, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleLight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLight
    __del__ = lambda self: None

    def is_enabled(self):
        return _framework.ModuleLight_is_enabled(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleLight_class_info)
    else:
        class_info = _framework.ModuleLight_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleLight____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleLight____class_destructor__

    def get_class_info(self):
        return _framework.ModuleLight_get_class_info(self)
ModuleLight_swigregister = _framework.ModuleLight_swigregister
ModuleLight_swigregister(ModuleLight)

def ModuleLight_class_info():
    return _framework.ModuleLight_class_info()
ModuleLight_class_info = _framework.ModuleLight_class_info

def ModuleLight____class_destructor__(instance, is_array):
    return _framework.ModuleLight____class_destructor__(instance, is_array)
ModuleLight____class_destructor__ = _framework.ModuleLight____class_destructor__

class GeometryOverride(ResourceUser):
    __swig_setmethods__ = {}
    for _s in [ResourceUser]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryOverride, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceUser]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryOverride, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_GeometryOverride
    __del__ = lambda self: None

    def on_object_event(self, event, event_info, data):
        return _framework.GeometryOverride_on_object_event(self, event, event_info, data)

    def get_memory_size(self):
        return _framework.GeometryOverride_get_memory_size(self)
GeometryOverride_swigregister = _framework.GeometryOverride_swigregister
GeometryOverride_swigregister(GeometryOverride)
EVT_ID_MODULE_SCENEOBJECT_LIGHT_LINKING = cvar.EVT_ID_MODULE_SCENEOBJECT_LIGHT_LINKING

class GeometryOverrideConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryOverrideConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryOverrideConfig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryOverrideConfig(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["shading_groups"] = _framework.GeometryOverrideConfig_shading_groups_set
    __swig_getmethods__["shading_groups"] = _framework.GeometryOverrideConfig_shading_groups_get
    if _newclass:
        shading_groups = _swig_property(_framework.GeometryOverrideConfig_shading_groups_get, _framework.GeometryOverrideConfig_shading_groups_set)
    __swig_setmethods__["time_offset"] = _framework.GeometryOverrideConfig_time_offset_set
    __swig_getmethods__["time_offset"] = _framework.GeometryOverrideConfig_time_offset_get
    if _newclass:
        time_offset = _swig_property(_framework.GeometryOverrideConfig_time_offset_get, _framework.GeometryOverrideConfig_time_offset_set)
    __swig_destroy__ = _framework.delete_GeometryOverrideConfig
    __del__ = lambda self: None
GeometryOverrideConfig_swigregister = _framework.GeometryOverrideConfig_swigregister
GeometryOverrideConfig_swigregister(GeometryOverrideConfig)

class ModuleSceneObjectCallbacks(ModuleSceneItemCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneItemCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObjectCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneItemCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObjectCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleSceneObjectCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleSceneObjectCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_get_bbox"] = _framework.ModuleSceneObjectCallbacks_cb_get_bbox_set
    __swig_getmethods__["cb_get_bbox"] = _framework.ModuleSceneObjectCallbacks_cb_get_bbox_get
    if _newclass:
        cb_get_bbox = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_get_bbox_get, _framework.ModuleSceneObjectCallbacks_cb_get_bbox_set)
    __swig_setmethods__["cb_get_bbox_at"] = _framework.ModuleSceneObjectCallbacks_cb_get_bbox_at_set
    __swig_getmethods__["cb_get_bbox_at"] = _framework.ModuleSceneObjectCallbacks_cb_get_bbox_at_get
    if _newclass:
        cb_get_bbox_at = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_get_bbox_at_get, _framework.ModuleSceneObjectCallbacks_cb_get_bbox_at_set)
    __swig_setmethods__["cb_ray_hit"] = _framework.ModuleSceneObjectCallbacks_cb_ray_hit_set
    __swig_getmethods__["cb_ray_hit"] = _framework.ModuleSceneObjectCallbacks_cb_ray_hit_get
    if _newclass:
        cb_ray_hit = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_ray_hit_get, _framework.ModuleSceneObjectCallbacks_cb_ray_hit_set)
    __swig_setmethods__["cb_ray_hit_nearest"] = _framework.ModuleSceneObjectCallbacks_cb_ray_hit_nearest_set
    __swig_getmethods__["cb_ray_hit_nearest"] = _framework.ModuleSceneObjectCallbacks_cb_ray_hit_nearest_get
    if _newclass:
        cb_ray_hit_nearest = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_ray_hit_nearest_get, _framework.ModuleSceneObjectCallbacks_cb_ray_hit_nearest_set)
    __swig_setmethods__["cb_frustum_hit"] = _framework.ModuleSceneObjectCallbacks_cb_frustum_hit_set
    __swig_getmethods__["cb_frustum_hit"] = _framework.ModuleSceneObjectCallbacks_cb_frustum_hit_get
    if _newclass:
        cb_frustum_hit = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_frustum_hit_get, _framework.ModuleSceneObjectCallbacks_cb_frustum_hit_set)
    __swig_setmethods__["cb_ray_frustum_hit"] = _framework.ModuleSceneObjectCallbacks_cb_ray_frustum_hit_set
    __swig_getmethods__["cb_ray_frustum_hit"] = _framework.ModuleSceneObjectCallbacks_cb_ray_frustum_hit_get
    if _newclass:
        cb_ray_frustum_hit = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_ray_frustum_hit_get, _framework.ModuleSceneObjectCallbacks_cb_ray_frustum_hit_set)
    __swig_setmethods__["cb_build_shading_groups"] = _framework.ModuleSceneObjectCallbacks_cb_build_shading_groups_set
    __swig_getmethods__["cb_build_shading_groups"] = _framework.ModuleSceneObjectCallbacks_cb_build_shading_groups_get
    if _newclass:
        cb_build_shading_groups = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_build_shading_groups_get, _framework.ModuleSceneObjectCallbacks_cb_build_shading_groups_set)
    __swig_setmethods__["cb_build_materials"] = _framework.ModuleSceneObjectCallbacks_cb_build_materials_set
    __swig_getmethods__["cb_build_materials"] = _framework.ModuleSceneObjectCallbacks_cb_build_materials_get
    if _newclass:
        cb_build_materials = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_build_materials_get, _framework.ModuleSceneObjectCallbacks_cb_build_materials_set)
    __swig_setmethods__["cb_build_clip_maps"] = _framework.ModuleSceneObjectCallbacks_cb_build_clip_maps_set
    __swig_getmethods__["cb_build_clip_maps"] = _framework.ModuleSceneObjectCallbacks_cb_build_clip_maps_get
    if _newclass:
        cb_build_clip_maps = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_build_clip_maps_get, _framework.ModuleSceneObjectCallbacks_cb_build_clip_maps_set)
    __swig_setmethods__["cb_build_displacements"] = _framework.ModuleSceneObjectCallbacks_cb_build_displacements_set
    __swig_getmethods__["cb_build_displacements"] = _framework.ModuleSceneObjectCallbacks_cb_build_displacements_get
    if _newclass:
        cb_build_displacements = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_build_displacements_get, _framework.ModuleSceneObjectCallbacks_cb_build_displacements_set)
    __swig_setmethods__["cb_build_sg_shading_variables"] = _framework.ModuleSceneObjectCallbacks_cb_build_sg_shading_variables_set
    __swig_getmethods__["cb_build_sg_shading_variables"] = _framework.ModuleSceneObjectCallbacks_cb_build_sg_shading_variables_get
    if _newclass:
        cb_build_sg_shading_variables = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_build_sg_shading_variables_get, _framework.ModuleSceneObjectCallbacks_cb_build_sg_shading_variables_set)
    __swig_setmethods__["cb_get_geometry_override"] = _framework.ModuleSceneObjectCallbacks_cb_get_geometry_override_set
    __swig_getmethods__["cb_get_geometry_override"] = _framework.ModuleSceneObjectCallbacks_cb_get_geometry_override_get
    if _newclass:
        cb_get_geometry_override = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_get_geometry_override_get, _framework.ModuleSceneObjectCallbacks_cb_get_geometry_override_set)
    __swig_setmethods__["cb_get_geometry_attributes_override"] = _framework.ModuleSceneObjectCallbacks_cb_get_geometry_attributes_override_set
    __swig_getmethods__["cb_get_geometry_attributes_override"] = _framework.ModuleSceneObjectCallbacks_cb_get_geometry_attributes_override_get
    if _newclass:
        cb_get_geometry_attributes_override = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_get_geometry_attributes_override_get, _framework.ModuleSceneObjectCallbacks_cb_get_geometry_attributes_override_set)
    __swig_setmethods__["cb_create_resource_override"] = _framework.ModuleSceneObjectCallbacks_cb_create_resource_override_set
    __swig_getmethods__["cb_create_resource_override"] = _framework.ModuleSceneObjectCallbacks_cb_create_resource_override_get
    if _newclass:
        cb_create_resource_override = _swig_property(_framework.ModuleSceneObjectCallbacks_cb_create_resource_override_get, _framework.ModuleSceneObjectCallbacks_cb_create_resource_override_set)
    __swig_destroy__ = _framework.delete_ModuleSceneObjectCallbacks
    __del__ = lambda self: None
ModuleSceneObjectCallbacks_swigregister = _framework.ModuleSceneObjectCallbacks_swigregister
ModuleSceneObjectCallbacks_swigregister(ModuleSceneObjectCallbacks)

class ModuleSceneObjectGeometry(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObjectGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObjectGeometry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleSceneObjectGeometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _framework.ModuleSceneObjectGeometry_set(self, *args)

    def get_scene_object(self):
        return _framework.ModuleSceneObjectGeometry_get_scene_object(self)

    def get_base_geometry(self):
        return _framework.ModuleSceneObjectGeometry_get_base_geometry(self)

    def get_deformed_geometry(self):
        return _framework.ModuleSceneObjectGeometry_get_deformed_geometry(self)

    def get_shading_group_offset(self):
        return _framework.ModuleSceneObjectGeometry_get_shading_group_offset(self)

    def get_global_matrix(self):
        return _framework.ModuleSceneObjectGeometry_get_global_matrix(self)

    def get_global_matrix_dt(self):
        return _framework.ModuleSceneObjectGeometry_get_global_matrix_dt(self)

    def get_global_matrix_reference(self):
        return _framework.ModuleSceneObjectGeometry_get_global_matrix_reference(self)

    def is_animated(self):
        return _framework.ModuleSceneObjectGeometry_is_animated(self)

    def __eq__(self, other):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ModuleSceneObjectGeometry___eq__(self, other)


    def __ne__(self, other):
        return _framework.ModuleSceneObjectGeometry___ne__(self, other)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneObjectGeometry_class_info)
    else:
        class_info = _framework.ModuleSceneObjectGeometry_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneObjectGeometry____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneObjectGeometry____class_destructor__

    def get_class_info(self):
        return _framework.ModuleSceneObjectGeometry_get_class_info(self)
    __swig_destroy__ = _framework.delete_ModuleSceneObjectGeometry
    __del__ = lambda self: None
ModuleSceneObjectGeometry_swigregister = _framework.ModuleSceneObjectGeometry_swigregister
ModuleSceneObjectGeometry_swigregister(ModuleSceneObjectGeometry)

def ModuleSceneObjectGeometry_class_info():
    return _framework.ModuleSceneObjectGeometry_class_info()
ModuleSceneObjectGeometry_class_info = _framework.ModuleSceneObjectGeometry_class_info

def ModuleSceneObjectGeometry____class_destructor__(instance, is_array):
    return _framework.ModuleSceneObjectGeometry____class_destructor__(instance, is_array)
ModuleSceneObjectGeometry____class_destructor__ = _framework.ModuleSceneObjectGeometry____class_destructor__

class ModuleSceneObject(ModuleSceneItem):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObject, name)
    __repr__ = _swig_repr
    DISPLAY_WIREFRAME = _framework.ModuleSceneObject_DISPLAY_WIREFRAME
    DISPLAY_CONSTANT = _framework.ModuleSceneObject_DISPLAY_CONSTANT
    DISPLAY_NORMALS = _framework.ModuleSceneObject_DISPLAY_NORMALS
    DISPLAY_SIMPLE_SHADING = _framework.ModuleSceneObject_DISPLAY_SIMPLE_SHADING
    DISPLAY_PREVIZ = _framework.ModuleSceneObject_DISPLAY_PREVIZ
    HIGHLIGHT_NONE = _framework.ModuleSceneObject_HIGHLIGHT_NONE
    HIGHLIGHT_BBOX = _framework.ModuleSceneObject_HIGHLIGHT_BBOX
    HIGHLIGHT_WIREFRAME = _framework.ModuleSceneObject_HIGHLIGHT_WIREFRAME
    HIGHLIGHT_BOTH = _framework.ModuleSceneObject_HIGHLIGHT_BOTH
    SAMPLING_RANDOM = _framework.ModuleSceneObject_SAMPLING_RANDOM
    SAMPLING_BLUE_NOISE = _framework.ModuleSceneObject_SAMPLING_BLUE_NOISE
    SAMPLING_PRIMITIVE_CENTER = _framework.ModuleSceneObject_SAMPLING_PRIMITIVE_CENTER
    SAMPLING_LOCAL_BASE = _framework.ModuleSceneObject_SAMPLING_LOCAL_BASE
    SAMPLING_LOCAL_DEFORMED = _framework.ModuleSceneObject_SAMPLING_LOCAL_DEFORMED
    SAMPLING_GLOBAL_BASE = _framework.ModuleSceneObject_SAMPLING_GLOBAL_BASE
    SAMPLING_GLOBAL_DEFORMED = _framework.ModuleSceneObject_SAMPLING_GLOBAL_DEFORMED

    def __init__(self):
        this = _framework.new_ModuleSceneObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneObject
    __del__ = lambda self: None

    def register_component_implementation(self):
        return _framework.ModuleSceneObject_register_component_implementation(self)

    def get_bbox(self, deformed=True, override_data=None):
        return _framework.ModuleSceneObject_get_bbox(self, deformed, override_data)

    def get_bbox_at(self, eval_ctx, time, deformed=True, override_data=None):
        return _framework.ModuleSceneObject_get_bbox_at(self, eval_ctx, time, deformed, override_data)

    def get_displacements(self):
        return _framework.ModuleSceneObject_get_displacements(self)

    def get_shading_group_count(self):
        return _framework.ModuleSceneObject_get_shading_group_count(self)

    def get_object_shading_group_count(self, sub_object_index):
        return _framework.ModuleSceneObject_get_object_shading_group_count(self, sub_object_index)

    def get_object_shading_group_offset(self, sub_object_index):
        return _framework.ModuleSceneObject_get_object_shading_group_offset(self, sub_object_index)

    def get_material_count(self):
        return _framework.ModuleSceneObject_get_material_count(self)

    def get_displacement_count(self):
        return _framework.ModuleSceneObject_get_displacement_count(self)

    def get_clip_map_count(self):
        return _framework.ModuleSceneObject_get_clip_map_count(self)

    def get_displacement(self, index):
        return _framework.ModuleSceneObject_get_displacement(self, index)

    def get_sg_shading_variables(self, *args):
        return _framework.ModuleSceneObject_get_sg_shading_variables(self, *args)

    def dirty_shading_groups(self):
        return _framework.ModuleSceneObject_dirty_shading_groups(self)

    def dirty_materials(self):
        return _framework.ModuleSceneObject_dirty_materials(self)

    def dirty_clip_maps(self):
        return _framework.ModuleSceneObject_dirty_clip_maps(self)

    def dirty_displacements(self):
        return _framework.ModuleSceneObject_dirty_displacements(self)

    def dirty_sg_shading_variables(self):
        return _framework.ModuleSceneObject_dirty_sg_shading_variables(self)

    def get_override_material(self):
        return _framework.ModuleSceneObject_get_override_material(self)

    def set_override_material(self, material):
        return _framework.ModuleSceneObject_set_override_material(self, material)

    def get_light_group(self):
        return _framework.ModuleSceneObject_get_light_group(self)

    def get_light_count(self):
        return _framework.ModuleSceneObject_get_light_count(self)

    def has_lights(self):
        return _framework.ModuleSceneObject_has_lights(self)

    def cast_shadows(self):
        return _framework.ModuleSceneObject_cast_shadows(self)

    def receive_shadows(self):
        return _framework.ModuleSceneObject_receive_shadows(self)

    def receive_self_shadows(self):
        return _framework.ModuleSceneObject_receive_self_shadows(self)

    def unseen_by_renderer(self):
        return _framework.ModuleSceneObject_unseen_by_renderer(self)

    def unseen_by_camera(self):
        return _framework.ModuleSceneObject_unseen_by_camera(self)

    def unseen_by_rays(self):
        return _framework.ModuleSceneObject_unseen_by_rays(self)

    def unseen_by_reflections(self):
        return _framework.ModuleSceneObject_unseen_by_reflections(self)

    def unseen_by_refractions(self):
        return _framework.ModuleSceneObject_unseen_by_refractions(self)

    def unseen_by_gi(self):
        return _framework.ModuleSceneObject_unseen_by_gi(self)

    def unseen_by_sss(self):
        return _framework.ModuleSceneObject_unseen_by_sss(self)

    def unseen_by_query(self):
        return _framework.ModuleSceneObject_unseen_by_query(self)

    def set_unseen_by_query(self, value):
        return _framework.ModuleSceneObject_set_unseen_by_query(self, value)

    def seen_by_query(self):
        return _framework.ModuleSceneObject_seen_by_query(self)

    def set_seen_by_query(self, value):
        return _framework.ModuleSceneObject_set_seen_by_query(self, value)

    def is_emitter(self):
        return _framework.ModuleSceneObject_is_emitter(self)

    def is_matte_object(self):
        return _framework.ModuleSceneObject_is_matte_object(self)

    def get_matte_color(self):
        return _framework.ModuleSceneObject_get_matte_color(self)

    def get_matte_alpha(self):
        return _framework.ModuleSceneObject_get_matte_alpha(self)

    def get_display_mode(self):
        return _framework.ModuleSceneObject_get_display_mode(self)

    def get_highlight_mode(self):
        return _framework.ModuleSceneObject_get_highlight_mode(self)

    def get_raytrace_geometric_offset(self):
        return _framework.ModuleSceneObject_get_raytrace_geometric_offset(self)

    def is_visible_by_ray_type(self, ray_type):
        return _framework.ModuleSceneObject_is_visible_by_ray_type(self, ray_type)

    def get_active_material_count(self):
        return _framework.ModuleSceneObject_get_active_material_count(self)

    def get_all_material_flags(self):
        return _framework.ModuleSceneObject_get_all_material_flags(self)

    def get_common_material_flags(self):
        return _framework.ModuleSceneObject_get_common_material_flags(self)

    def get_object_active_material_count(self, sub_object_index=0):
        return _framework.ModuleSceneObject_get_object_active_material_count(self, sub_object_index)

    def get_object_all_material_flags(self, sub_object_index=0):
        return _framework.ModuleSceneObject_get_object_all_material_flags(self, sub_object_index)

    def get_object_common_material_flags(self, sub_object_index=0):
        return _framework.ModuleSceneObject_get_object_common_material_flags(self, sub_object_index)

    def get_geometry_override(self, config):
        return _framework.ModuleSceneObject_get_geometry_override(self, config)

    def get_geometry_attributes_override(self, config, attributes):
        return _framework.ModuleSceneObject_get_geometry_attributes_override(self, config, attributes)

    def get_resource_override(self, resource_id, override_data, data=None):
        return _framework.ModuleSceneObject_get_resource_override(self, resource_id, override_data, data)

    def ray_hit(self, eval_ctx, shader_ctx, raytrace_ctx):
        return _framework.ModuleSceneObject_ray_hit(self, eval_ctx, shader_ctx, raytrace_ctx)

    def ray_hit_nearest(self, eval_ctx, shader_ctx, raytrace_ctx):
        return _framework.ModuleSceneObject_ray_hit_nearest(self, eval_ctx, shader_ctx, raytrace_ctx)

    def frustum_hit(self, eval_ctx, shader_ctx, frustum_ctx):
        return _framework.ModuleSceneObject_frustum_hit(self, eval_ctx, shader_ctx, frustum_ctx)

    def ray_frustum_hit(self, eval_ctx, shader_ctx, ray_frustum_ctx):
        return _framework.ModuleSceneObject_ray_frustum_hit(self, eval_ctx, shader_ctx, ray_frustum_ctx)

    def is_geometry(self):
        return _framework.ModuleSceneObject_is_geometry(self)

    def get_object_count(self):
        return _framework.ModuleSceneObject_get_object_count(self)

    def get_geometry_count(self):
        return _framework.ModuleSceneObject_get_geometry_count(self)

    def get_primitive_count(self):
        return _framework.ModuleSceneObject_get_primitive_count(self)

    def get_point_count(self):
        return _framework.ModuleSceneObject_get_point_count(self)

    def get_geometries(self, geometries, override=None):
        return _framework.ModuleSceneObject_get_geometries(self, geometries, override)

    def get_geometries_at(self, eval_ctx, anim_dt, geometries, override=None):
        return _framework.ModuleSceneObject_get_geometries_at(self, eval_ctx, anim_dt, geometries, override)

    def get_geometry(self, geometry_id_hierarchy, geometries, override=None):
        return _framework.ModuleSceneObject_get_geometry(self, geometry_id_hierarchy, geometries, override)

    def get_geometry_at(self, geometry_id_hierarchy, eval_ctx, anim_dt, geometries, override=None):
        return _framework.ModuleSceneObject_get_geometry_at(self, geometry_id_hierarchy, eval_ctx, anim_dt, geometries, override)

    def sample_geometries_one_point(self, geometries, geometry_samples, seed, jittering=0.0):
        return _framework.ModuleSceneObject_sample_geometries_one_point(self, geometries, geometry_samples, seed, jittering)

    def sample_geometries_count(self, geometries, geometry_samples, eval_ctx, algorithm, space, max_sample_count, seed=0, progress_bar=None):
        return _framework.ModuleSceneObject_sample_geometries_count(self, geometries, geometry_samples, eval_ctx, algorithm, space, max_sample_count, seed, progress_bar)

    def sample_geometries_density(self, geometries, geometry_samples, eval_ctx, algorithm, space, max_density, seed=0, progress_bar=None):
        return _framework.ModuleSceneObject_sample_geometries_density(self, geometries, geometry_samples, eval_ctx, algorithm, space, max_density, seed, progress_bar)
    if _newclass:
        merge_geometries = staticmethod(_framework.ModuleSceneObject_merge_geometries)
    else:
        merge_geometries = _framework.ModuleSceneObject_merge_geometries

    def get_memory_size(self):
        return _framework.ModuleSceneObject_get_memory_size(self)

    def has_shading_variables(self):
        return _framework.ModuleSceneObject_has_shading_variables(self)

    def set_shading_variables(self, text):
        return _framework.ModuleSceneObject_set_shading_variables(self, text)

    def remove_all_shading_variables(self):
        return _framework.ModuleSceneObject_remove_all_shading_variables(self)

    def get_shading_variable(self, variable_name):
        return _framework.ModuleSceneObject_get_shading_variable(self, variable_name)

    def get_shading_variables(self):
        return _framework.ModuleSceneObject_get_shading_variables(self)

    def get_structure(self):
        return _framework.ModuleSceneObject_get_structure(self)

    def is_overriding_children_visibility(self):
        return _framework.ModuleSceneObject_is_overriding_children_visibility(self)

    def add_geometry_override(self, override):
        return _framework.ModuleSceneObject_add_geometry_override(self, override)

    def set_custom_id(self, value):
        return _framework.ModuleSceneObject_set_custom_id(self, value)

    def get_custom_id(self):
        return _framework.ModuleSceneObject_get_custom_id(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneObject_class_info)
    else:
        class_info = _framework.ModuleSceneObject_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneObject____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneObject____class_destructor__

    def get_class_info(self):
        return _framework.ModuleSceneObject_get_class_info(self)

    def get_material(self, index):
        return _framework.ModuleSceneObject_get_material(self, index)

    def get_clip_map(self, index):
        return _framework.ModuleSceneObject_get_clip_map(self, index)

    def get_shading_group(self, index):
        return _framework.ModuleSceneObject_get_shading_group(self, index)

    def get_light(self, index):
        return _framework.ModuleSceneObject_get_light(self, index)
ModuleSceneObject_swigregister = _framework.ModuleSceneObject_swigregister
ModuleSceneObject_swigregister(ModuleSceneObject)

def ModuleSceneObject_merge_geometries(objects, vertices, polygon_indices, polygon_vertex_count, polygon_shading_groups, shading_group_names, uv_maps, normal_maps, color_maps, progress_bar=None):
    return _framework.ModuleSceneObject_merge_geometries(objects, vertices, polygon_indices, polygon_vertex_count, polygon_shading_groups, shading_group_names, uv_maps, normal_maps, color_maps, progress_bar)
ModuleSceneObject_merge_geometries = _framework.ModuleSceneObject_merge_geometries

def ModuleSceneObject_class_info():
    return _framework.ModuleSceneObject_class_info()
ModuleSceneObject_class_info = _framework.ModuleSceneObject_class_info

def ModuleSceneObject____class_destructor__(instance, is_array):
    return _framework.ModuleSceneObject____class_destructor__(instance, is_array)
ModuleSceneObject____class_destructor__ = _framework.ModuleSceneObject____class_destructor__

class ModuleSceneObjectTreeCallbacks(ModuleSceneObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObjectTreeCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObjectTreeCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleSceneObjectTreeCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleSceneObjectTreeCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_get_support_geometry"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_support_geometry_set
    __swig_getmethods__["cb_get_support_geometry"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_support_geometry_get
    if _newclass:
        cb_get_support_geometry = _swig_property(_framework.ModuleSceneObjectTreeCallbacks_cb_get_support_geometry_get, _framework.ModuleSceneObjectTreeCallbacks_cb_get_support_geometry_set)
    __swig_setmethods__["cb_get_sub_objects"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_sub_objects_set
    __swig_getmethods__["cb_get_sub_objects"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_sub_objects_get
    if _newclass:
        cb_get_sub_objects = _swig_property(_framework.ModuleSceneObjectTreeCallbacks_cb_get_sub_objects_get, _framework.ModuleSceneObjectTreeCallbacks_cb_get_sub_objects_set)
    __swig_setmethods__["cb_get_instances"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_set
    __swig_getmethods__["cb_get_instances"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_get
    if _newclass:
        cb_get_instances = _swig_property(_framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_get, _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_set)
    __swig_setmethods__["cb_get_instances_time"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_time_set
    __swig_getmethods__["cb_get_instances_time"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_time_get
    if _newclass:
        cb_get_instances_time = _swig_property(_framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_time_get, _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_time_set)
    __swig_setmethods__["cb_decimate_instances"] = _framework.ModuleSceneObjectTreeCallbacks_cb_decimate_instances_set
    __swig_getmethods__["cb_decimate_instances"] = _framework.ModuleSceneObjectTreeCallbacks_cb_decimate_instances_get
    if _newclass:
        cb_decimate_instances = _swig_property(_framework.ModuleSceneObjectTreeCallbacks_cb_decimate_instances_get, _framework.ModuleSceneObjectTreeCallbacks_cb_decimate_instances_set)
    __swig_setmethods__["cb_get_instances_matrices"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_matrices_set
    __swig_getmethods__["cb_get_instances_matrices"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_matrices_get
    if _newclass:
        cb_get_instances_matrices = _swig_property(_framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_matrices_get, _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_matrices_set)
    __swig_setmethods__["cb_get_instances_matrices_at"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_matrices_at_set
    __swig_getmethods__["cb_get_instances_matrices_at"] = _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_matrices_at_get
    if _newclass:
        cb_get_instances_matrices_at = _swig_property(_framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_matrices_at_get, _framework.ModuleSceneObjectTreeCallbacks_cb_get_instances_matrices_at_set)
    __swig_destroy__ = _framework.delete_ModuleSceneObjectTreeCallbacks
    __del__ = lambda self: None
ModuleSceneObjectTreeCallbacks_swigregister = _framework.ModuleSceneObjectTreeCallbacks_swigregister
ModuleSceneObjectTreeCallbacks_swigregister(ModuleSceneObjectTreeCallbacks)

class ModuleSceneObjectTree(ModuleSceneObject):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObjectTree, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObjectTree, name)
    __repr__ = _swig_repr
    RESOURCE_ID_BASE_OBJECTS = _framework.ModuleSceneObjectTree_RESOURCE_ID_BASE_OBJECTS
    RESOURCE_ID_TOPOLOGY = _framework.ModuleSceneObjectTree_RESOURCE_ID_TOPOLOGY
    RESOURCE_ID_MATRICES = _framework.ModuleSceneObjectTree_RESOURCE_ID_MATRICES
    RESOURCE_ID_TREE = _framework.ModuleSceneObjectTree_RESOURCE_ID_TREE
    RESOURCE_ID_COUNT = _framework.ModuleSceneObjectTree_RESOURCE_ID_COUNT

    def __init__(self):
        this = _framework.new_ModuleSceneObjectTree()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneObjectTree
    __del__ = lambda self: None

    def create_resource(self, id, data):
        return _framework.ModuleSceneObjectTree_create_resource(self, id, data)

    def on_resource_update(self, id, resource):
        return _framework.ModuleSceneObjectTree_on_resource_update(self, id, resource)

    def get_bbox(self, deformed=True, override_data=None):
        return _framework.ModuleSceneObjectTree_get_bbox(self, deformed, override_data)

    def get_bbox_at(self, eval_ctx, time, deformed=True, override_data=None):
        return _framework.ModuleSceneObjectTree_get_bbox_at(self, eval_ctx, time, deformed, override_data)

    def get_object_count(self):
        return _framework.ModuleSceneObjectTree_get_object_count(self)

    def get_geometry_count(self):
        return _framework.ModuleSceneObjectTree_get_geometry_count(self)

    def get_primitive_count(self):
        return _framework.ModuleSceneObjectTree_get_primitive_count(self)

    def get_object_shading_group_count(self, sub_object_index):
        return _framework.ModuleSceneObjectTree_get_object_shading_group_count(self, sub_object_index)

    def get_object_shading_group_offset(self, sub_object_index):
        return _framework.ModuleSceneObjectTree_get_object_shading_group_offset(self, sub_object_index)

    def get_object_active_material_count(self, sub_object_index):
        return _framework.ModuleSceneObjectTree_get_object_active_material_count(self, sub_object_index)

    def get_object_all_material_flags(self, sub_object_index):
        return _framework.ModuleSceneObjectTree_get_object_all_material_flags(self, sub_object_index)

    def get_object_common_material_flags(self, sub_object_index):
        return _framework.ModuleSceneObjectTree_get_object_common_material_flags(self, sub_object_index)

    def get_shading_group_sub_object_index(self, shading_group_index):
        return _framework.ModuleSceneObjectTree_get_shading_group_sub_object_index(self, shading_group_index)

    def get_geometry_override(self, config):
        return _framework.ModuleSceneObjectTree_get_geometry_override(self, config)

    def get_geometries(self, handles, override):
        return _framework.ModuleSceneObjectTree_get_geometries(self, handles, override)

    def get_geometries_at(self, eval_ctx, anim_dt, handles, override):
        return _framework.ModuleSceneObjectTree_get_geometries_at(self, eval_ctx, anim_dt, handles, override)

    def get_geometry(self, geometry_id_hierarchy, handles, override=None):
        return _framework.ModuleSceneObjectTree_get_geometry(self, geometry_id_hierarchy, handles, override)

    def get_geometry_at(self, geometry_id_hierarchy, eval_ctx, anim_dt, handles, override=None):
        return _framework.ModuleSceneObjectTree_get_geometry_at(self, geometry_id_hierarchy, eval_ctx, anim_dt, handles, override)

    def get_support(self):
        return _framework.ModuleSceneObjectTree_get_support(self)

    def get_support_point_indices(self):
        return _framework.ModuleSceneObjectTree_get_support_point_indices(self)

    def get_base_objects(self):
        return _framework.ModuleSceneObjectTree_get_base_objects(self)

    def get_raw_instances(self):
        return _framework.ModuleSceneObjectTree_get_raw_instances(self)

    def get_instances(self):
        return _framework.ModuleSceneObjectTree_get_instances(self)

    def get_instance_count(self):
        return _framework.ModuleSceneObjectTree_get_instance_count(self)

    def get_instance_matrix(self, index):
        return _framework.ModuleSceneObjectTree_get_instance_matrix(self, index)

    def get_instance_matrices(self, matrices):
        return _framework.ModuleSceneObjectTree_get_instance_matrices(self, matrices)

    def get_instance_matrices_at(self, eval_ctx, time, matrices):
        return _framework.ModuleSceneObjectTree_get_instance_matrices_at(self, eval_ctx, time, matrices)

    def dirty_support_geometry(self):
        return _framework.ModuleSceneObjectTree_dirty_support_geometry(self)

    def dirty_base_objects(self):
        return _framework.ModuleSceneObjectTree_dirty_base_objects(self)

    def dirty_reference_bbox(self):
        return _framework.ModuleSceneObjectTree_dirty_reference_bbox(self)

    def get_memory_size(self):
        return _framework.ModuleSceneObjectTree_get_memory_size(self)
    if _newclass:
        module_ray_hit = staticmethod(_framework.ModuleSceneObjectTree_module_ray_hit)
    else:
        module_ray_hit = _framework.ModuleSceneObjectTree_module_ray_hit
    if _newclass:
        module_ray_hit_nearest = staticmethod(_framework.ModuleSceneObjectTree_module_ray_hit_nearest)
    else:
        module_ray_hit_nearest = _framework.ModuleSceneObjectTree_module_ray_hit_nearest
    if _newclass:
        module_frustum_hit = staticmethod(_framework.ModuleSceneObjectTree_module_frustum_hit)
    else:
        module_frustum_hit = _framework.ModuleSceneObjectTree_module_frustum_hit

    def set_matrices_compression(self, use_compression):
        return _framework.ModuleSceneObjectTree_set_matrices_compression(self, use_compression)

    def is_compression_enabled(self):
        return _framework.ModuleSceneObjectTree_is_compression_enabled(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneObjectTree_class_info)
    else:
        class_info = _framework.ModuleSceneObjectTree_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneObjectTree____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneObjectTree____class_destructor__

    def get_class_info(self):
        return _framework.ModuleSceneObjectTree_get_class_info(self)
ModuleSceneObjectTree_swigregister = _framework.ModuleSceneObjectTree_swigregister
ModuleSceneObjectTree_swigregister(ModuleSceneObjectTree)

def ModuleSceneObjectTree_module_ray_hit(object, eval_ctx, shader_ctx, raytrace_ctx):
    return _framework.ModuleSceneObjectTree_module_ray_hit(object, eval_ctx, shader_ctx, raytrace_ctx)
ModuleSceneObjectTree_module_ray_hit = _framework.ModuleSceneObjectTree_module_ray_hit

def ModuleSceneObjectTree_module_ray_hit_nearest(object, eval_ctx, shader_ctx, raytrace_ctx):
    return _framework.ModuleSceneObjectTree_module_ray_hit_nearest(object, eval_ctx, shader_ctx, raytrace_ctx)
ModuleSceneObjectTree_module_ray_hit_nearest = _framework.ModuleSceneObjectTree_module_ray_hit_nearest

def ModuleSceneObjectTree_module_frustum_hit(object, eval_ctx, shader_ctx, frustum_ctx):
    return _framework.ModuleSceneObjectTree_module_frustum_hit(object, eval_ctx, shader_ctx, frustum_ctx)
ModuleSceneObjectTree_module_frustum_hit = _framework.ModuleSceneObjectTree_module_frustum_hit

def ModuleSceneObjectTree_class_info():
    return _framework.ModuleSceneObjectTree_class_info()
ModuleSceneObjectTree_class_info = _framework.ModuleSceneObjectTree_class_info

def ModuleSceneObjectTree____class_destructor__(instance, is_array):
    return _framework.ModuleSceneObjectTree____class_destructor__(instance, is_array)
ModuleSceneObjectTree____class_destructor__ = _framework.ModuleSceneObjectTree____class_destructor__

class ModuleGeometryCallbacks(ModuleSceneObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleGeometryCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleGeometryCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleGeometryCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleGeometryCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_get_default_material"] = _framework.ModuleGeometryCallbacks_cb_get_default_material_set
    __swig_getmethods__["cb_get_default_material"] = _framework.ModuleGeometryCallbacks_cb_get_default_material_get
    if _newclass:
        cb_get_default_material = _swig_property(_framework.ModuleGeometryCallbacks_cb_get_default_material_get, _framework.ModuleGeometryCallbacks_cb_get_default_material_set)
    __swig_destroy__ = _framework.delete_ModuleGeometryCallbacks
    __del__ = lambda self: None
ModuleGeometryCallbacks_swigregister = _framework.ModuleGeometryCallbacks_swigregister
ModuleGeometryCallbacks_swigregister(ModuleGeometryCallbacks)
EVT_ID_MODULE_GEOMETRY_CREATE_GAS = cvar.EVT_ID_MODULE_GEOMETRY_CREATE_GAS
EVT_ID_MODULE_GEOMETRY_DESTROY_GAS = cvar.EVT_ID_MODULE_GEOMETRY_DESTROY_GAS
EVT_ID_MODULE_GEOMETRY_UV_MAP_NAMES_UPDATED = cvar.EVT_ID_MODULE_GEOMETRY_UV_MAP_NAMES_UPDATED

class ModuleGeometry(ModuleSceneObject):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleGeometry, name)
    __repr__ = _swig_repr
    RESOURCE_ID_GEOMETRY = _framework.ModuleGeometry_RESOURCE_ID_GEOMETRY
    RESOURCE_ID_GEOMETRY_ANIMATED = _framework.ModuleGeometry_RESOURCE_ID_GEOMETRY_ANIMATED
    RESOURCE_ID_GEOMETRY_DEFORMED = _framework.ModuleGeometry_RESOURCE_ID_GEOMETRY_DEFORMED
    RESOURCE_ID_GEOMETRY_PROPERTIES = _framework.ModuleGeometry_RESOURCE_ID_GEOMETRY_PROPERTIES
    RESOURCE_ID_TESSELLATION = _framework.ModuleGeometry_RESOURCE_ID_TESSELLATION
    RESOURCE_ID_TESSELLATION_DEFORMED = _framework.ModuleGeometry_RESOURCE_ID_TESSELLATION_DEFORMED
    RESOURCE_ID_TESSELLATION_PROPERTIES = _framework.ModuleGeometry_RESOURCE_ID_TESSELLATION_PROPERTIES
    RESOURCE_ID_SURFACE = _framework.ModuleGeometry_RESOURCE_ID_SURFACE
    RESOURCE_ID_SURFACE_DEFORMED = _framework.ModuleGeometry_RESOURCE_ID_SURFACE_DEFORMED
    RESOURCE_ID_SURFACE_PROPERTIES = _framework.ModuleGeometry_RESOURCE_ID_SURFACE_PROPERTIES
    RESOURCE_ID_DISPLACEMENT_TOPOLOGY = _framework.ModuleGeometry_RESOURCE_ID_DISPLACEMENT_TOPOLOGY
    RESOURCE_ID_DISPLACEMENT_GEOMETRY_FRONT = _framework.ModuleGeometry_RESOURCE_ID_DISPLACEMENT_GEOMETRY_FRONT
    RESOURCE_ID_DISPLACEMENT_GEOMETRY_BACK = _framework.ModuleGeometry_RESOURCE_ID_DISPLACEMENT_GEOMETRY_BACK
    RESOURCE_ID_GAS = _framework.ModuleGeometry_RESOURCE_ID_GAS
    RESOURCE_ID_COUNT = _framework.ModuleGeometry_RESOURCE_ID_COUNT

    def __init__(self):
        this = _framework.new_ModuleGeometry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleGeometry
    __del__ = lambda self: None

    def get_bbox(self, deformed=True, override_data=None):
        return _framework.ModuleGeometry_get_bbox(self, deformed, override_data)

    def get_bbox_at(self, eval_ctx, time, deformed=True, override_data=None):
        return _framework.ModuleGeometry_get_bbox_at(self, eval_ctx, time, deformed, override_data)

    def get_uv_tiles(self, *args):
        return _framework.ModuleGeometry_get_uv_tiles(self, *args)

    def get_uv_range(self, *args):
        return _framework.ModuleGeometry_get_uv_range(self, *args)

    def get_shading_group_bbox(self, id, deformed=True, override_data=None):
        return _framework.ModuleGeometry_get_shading_group_bbox(self, id, deformed, override_data)

    def dirty_geometries(self):
        return _framework.ModuleGeometry_dirty_geometries(self)

    def get_surface(self, deformed=True):
        return _framework.ModuleGeometry_get_surface(self, deformed)

    def get_tessellation(self, deformed=True):
        return _framework.ModuleGeometry_get_tessellation(self, deformed)

    def get_displaced_geometry(self, front=True):
        return _framework.ModuleGeometry_get_displaced_geometry(self, front)
    if _newclass:
        get_property_id = staticmethod(_framework.ModuleGeometry_get_property_id)
    else:
        get_property_id = _framework.ModuleGeometry_get_property_id
    if _newclass:
        lock_properties = staticmethod(_framework.ModuleGeometry_lock_properties)
    else:
        lock_properties = _framework.ModuleGeometry_lock_properties

    def get_properties(self):
        return _framework.ModuleGeometry_get_properties(self)

    def get_geometry_property(self, property_id, override_data=None):
        return _framework.ModuleGeometry_get_geometry_property(self, property_id, override_data)

    def get_tessellation_property(self, property_id, override_data=None):
        return _framework.ModuleGeometry_get_tessellation_property(self, property_id, override_data)

    def get_property(self, *args):
        return _framework.ModuleGeometry_get_property(self, *args)
    if _newclass:
        get_global_property_names = staticmethod(_framework.ModuleGeometry_get_global_property_names)
    else:
        get_global_property_names = _framework.ModuleGeometry_get_global_property_names
    if _newclass:
        register_properties = staticmethod(_framework.ModuleGeometry_register_properties)
    else:
        register_properties = _framework.ModuleGeometry_register_properties

    def get_gas(self, override_data=None):
        return _framework.ModuleGeometry_get_gas(self, override_data)

    def is_deformed(self):
        return _framework.ModuleGeometry_is_deformed(self)

    def is_geometry_animated(self):
        return _framework.ModuleGeometry_is_geometry_animated(self)

    def is_displaced(self, front=True):
        return _framework.ModuleGeometry_is_displaced(self, front)

    def get_displaced_shading_groups(self, front=True):
        return _framework.ModuleGeometry_get_displaced_shading_groups(self, front)

    def get_max_displacement_bound(self):
        return _framework.ModuleGeometry_get_max_displacement_bound(self)

    def is_shading_group_displaced(self, index):
        return _framework.ModuleGeometry_is_shading_group_displaced(self, index)

    def is_geometry(self):
        return _framework.ModuleGeometry_is_geometry(self)

    def get_uv_map_names(self, blocking=True):
        return _framework.ModuleGeometry_get_uv_map_names(self, blocking)

    def get_geometry_count(self):
        return _framework.ModuleGeometry_get_geometry_count(self)

    def get_primitive_count(self):
        return _framework.ModuleGeometry_get_primitive_count(self)

    def get_geometries(self, handles, override):
        return _framework.ModuleGeometry_get_geometries(self, handles, override)

    def get_geometries_at(self, eval_ctx, anim_dt, handles, override):
        return _framework.ModuleGeometry_get_geometries_at(self, eval_ctx, anim_dt, handles, override)

    def get_geometry(self, *args):
        return _framework.ModuleGeometry_get_geometry(self, *args)

    def get_geometry_at(self, geometry_id_hierarchy, eval_ctx, anim_dt, handles, override):
        return _framework.ModuleGeometry_get_geometry_at(self, geometry_id_hierarchy, eval_ctx, anim_dt, handles, override)

    def get_default_material(self):
        return _framework.ModuleGeometry_get_default_material(self)

    def get_raytrace_quality(self):
        return _framework.ModuleGeometry_get_raytrace_quality(self)

    def get_smoothing_approximation(self):
        return _framework.ModuleGeometry_get_smoothing_approximation(self)

    def pre_evaluate(self, eval_ctx):
        return _framework.ModuleGeometry_pre_evaluate(self, eval_ctx)

    def get_memory_size(self):
        return _framework.ModuleGeometry_get_memory_size(self)

    def end_evaluation(self):
        return _framework.ModuleGeometry_end_evaluation(self)

    def stop_evaluation(self):
        return _framework.ModuleGeometry_stop_evaluation(self)

    def on_displacement_storage_mode_change(self):
        return _framework.ModuleGeometry_on_displacement_storage_mode_change(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleGeometry_class_info)
    else:
        class_info = _framework.ModuleGeometry_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleGeometry____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleGeometry____class_destructor__

    def get_class_info(self):
        return _framework.ModuleGeometry_get_class_info(self)

    def assign_material(self, material, shading_group_index):
        return _framework.ModuleGeometry_assign_material(self, material, shading_group_index)

    def assign_clip_map(self, clip_map, shading_group_index):
        return _framework.ModuleGeometry_assign_clip_map(self, clip_map, shading_group_index)

    def assign_displacement(self, displacement, shading_group_index):
        return _framework.ModuleGeometry_assign_displacement(self, displacement, shading_group_index)

    def set_shading_group_visibility(self, shading_group_index, visible):
        return _framework.ModuleGeometry_set_shading_group_visibility(self, shading_group_index, visible)

    def get_shading_group_visibility(self, shading_group_index):
        return _framework.ModuleGeometry_get_shading_group_visibility(self, shading_group_index)
ModuleGeometry_swigregister = _framework.ModuleGeometry_swigregister
ModuleGeometry_swigregister(ModuleGeometry)

def ModuleGeometry_get_property_id(name):
    return _framework.ModuleGeometry_get_property_id(name)
ModuleGeometry_get_property_id = _framework.ModuleGeometry_get_property_id

def ModuleGeometry_lock_properties(lock):
    return _framework.ModuleGeometry_lock_properties(lock)
ModuleGeometry_lock_properties = _framework.ModuleGeometry_lock_properties

def ModuleGeometry_get_global_property_names(names):
    return _framework.ModuleGeometry_get_global_property_names(names)
ModuleGeometry_get_global_property_names = _framework.ModuleGeometry_get_global_property_names

def ModuleGeometry_register_properties(names):
    return _framework.ModuleGeometry_register_properties(names)
ModuleGeometry_register_properties = _framework.ModuleGeometry_register_properties

def ModuleGeometry_class_info():
    return _framework.ModuleGeometry_class_info()
ModuleGeometry_class_info = _framework.ModuleGeometry_class_info

def ModuleGeometry____class_destructor__(instance, is_array):
    return _framework.ModuleGeometry____class_destructor__(instance, is_array)
ModuleGeometry____class_destructor__ = _framework.ModuleGeometry____class_destructor__

class ModuleLanguageCallbacks(ModuleObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLanguageCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLanguageCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleLanguageCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleLanguageCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_build_completion_list"] = _framework.ModuleLanguageCallbacks_cb_build_completion_list_set
    __swig_getmethods__["cb_build_completion_list"] = _framework.ModuleLanguageCallbacks_cb_build_completion_list_get
    if _newclass:
        cb_build_completion_list = _swig_property(_framework.ModuleLanguageCallbacks_cb_build_completion_list_get, _framework.ModuleLanguageCallbacks_cb_build_completion_list_set)
    __swig_destroy__ = _framework.delete_ModuleLanguageCallbacks
    __del__ = lambda self: None
ModuleLanguageCallbacks_swigregister = _framework.ModuleLanguageCallbacks_swigregister
ModuleLanguageCallbacks_swigregister(ModuleLanguageCallbacks)

class ModuleLanguage(ModuleObject):
    __swig_setmethods__ = {}
    for _s in [ModuleObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLanguage, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLanguage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleLanguage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLanguage
    __del__ = lambda self: None
    if _newclass:
        get_language = staticmethod(_framework.ModuleLanguage_get_language)
    else:
        get_language = _framework.ModuleLanguage_get_language

    def get_extensions(self):
        return _framework.ModuleLanguage_get_extensions(self)

    def get_keywords(self):
        return _framework.ModuleLanguage_get_keywords(self)

    def get_reserved_keywords(self):
        return _framework.ModuleLanguage_get_reserved_keywords(self)

    def get_preprocessor_keywords(self):
        return _framework.ModuleLanguage_get_preprocessor_keywords(self)

    def get_block_comments(self):
        return _framework.ModuleLanguage_get_block_comments(self)

    def get_line_comments(self):
        return _framework.ModuleLanguage_get_line_comments(self)

    def get_completion(self):
        return _framework.ModuleLanguage_get_completion(self)

    def get_help(self):
        return _framework.ModuleLanguage_get_help(self)

    def set_help(self, help):
        return _framework.ModuleLanguage_set_help(self, help)

    def set_completion(self, completion):
        return _framework.ModuleLanguage_set_completion(self, completion)

    def clear_completion(self):
        return _framework.ModuleLanguage_clear_completion(self)

    def add_completion(self, completion):
        return _framework.ModuleLanguage_add_completion(self, completion)

    def set_rebuild_completion(self, state):
        return _framework.ModuleLanguage_set_rebuild_completion(self, state)

    def is_rebuild_completion(self):
        return _framework.ModuleLanguage_is_rebuild_completion(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleLanguage_class_info)
    else:
        class_info = _framework.ModuleLanguage_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleLanguage____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleLanguage____class_destructor__

    def get_class_info(self):
        return _framework.ModuleLanguage_get_class_info(self)
ModuleLanguage_swigregister = _framework.ModuleLanguage_swigregister
ModuleLanguage_swigregister(ModuleLanguage)

def ModuleLanguage_get_language(app, name):
    return _framework.ModuleLanguage_get_language(app, name)
ModuleLanguage_get_language = _framework.ModuleLanguage_get_language

def ModuleLanguage_class_info():
    return _framework.ModuleLanguage_class_info()
ModuleLanguage_class_info = _framework.ModuleLanguage_class_info

def ModuleLanguage____class_destructor__(instance, is_array):
    return _framework.ModuleLanguage____class_destructor__(instance, is_array)
ModuleLanguage____class_destructor__ = _framework.ModuleLanguage____class_destructor__

class ModuleParticle(ModuleGeometry):
    __swig_setmethods__ = {}
    for _s in [ModuleGeometry]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleGeometry]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleParticle, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleParticle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleParticle
    __del__ = lambda self: None

    def dirty_gl(self):
        return _framework.ModuleParticle_dirty_gl(self)

    def get_point_count(self):
        return _framework.ModuleParticle_get_point_count(self)

    def get_particles(self):
        return _framework.ModuleParticle_get_particles(self)

    def get_properties(self):
        return _framework.ModuleParticle_get_properties(self)

    def set_particles(self, particles):
        return _framework.ModuleParticle_set_particles(self, particles)

    def set_properties(self, properties):
        return _framework.ModuleParticle_set_properties(self, properties)

    def share_properties(self, source_module):
        return _framework.ModuleParticle_share_properties(self, source_module)
    if _newclass:
        class_info = staticmethod(_framework.ModuleParticle_class_info)
    else:
        class_info = _framework.ModuleParticle_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleParticle____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleParticle____class_destructor__

    def get_class_info(self):
        return _framework.ModuleParticle_get_class_info(self)
ModuleParticle_swigregister = _framework.ModuleParticle_swigregister
ModuleParticle_swigregister(ModuleParticle)

def ModuleParticle_class_info():
    return _framework.ModuleParticle_class_info()
ModuleParticle_class_info = _framework.ModuleParticle_class_info

def ModuleParticle____class_destructor__(instance, is_array):
    return _framework.ModuleParticle____class_destructor__(instance, is_array)
ModuleParticle____class_destructor__ = _framework.ModuleParticle____class_destructor__

class ShadingGroupLinks(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingGroupLinks, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingGroupLinks, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ShadingGroupLinks(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, src):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ShadingGroupLinks___eq__(self, src)


    def __ne__(self, src):
        return _framework.ShadingGroupLinks___ne__(self, src)

    def get_material(self):
        return _framework.ShadingGroupLinks_get_material(self)

    def get_clip_map(self):
        return _framework.ShadingGroupLinks_get_clip_map(self)

    def get_displacement(self):
        return _framework.ShadingGroupLinks_get_displacement(self)

    def get_shading_variables(self):
        return _framework.ShadingGroupLinks_get_shading_variables(self)

    def is_material_invalid(self):
        return _framework.ShadingGroupLinks_is_material_invalid(self)

    def is_clip_map_invalid(self):
        return _framework.ShadingGroupLinks_is_clip_map_invalid(self)

    def is_displacement_invalid(self):
        return _framework.ShadingGroupLinks_is_displacement_invalid(self)

    def is_shading_variables_invalid(self):
        return _framework.ShadingGroupLinks_is_shading_variables_invalid(self)

    def set_material_invalid(self):
        return _framework.ShadingGroupLinks_set_material_invalid(self)

    def set_clip_map_invalid(self):
        return _framework.ShadingGroupLinks_set_clip_map_invalid(self)

    def set_displacement_invalid(self):
        return _framework.ShadingGroupLinks_set_displacement_invalid(self)

    def set_shading_variables_invalid(self):
        return _framework.ShadingGroupLinks_set_shading_variables_invalid(self)

    def is_material_empty(self):
        return _framework.ShadingGroupLinks_is_material_empty(self)

    def is_clip_map_empty(self):
        return _framework.ShadingGroupLinks_is_clip_map_empty(self)

    def is_displacement_empty(self):
        return _framework.ShadingGroupLinks_is_displacement_empty(self)

    def is_shading_variables_empty(self):
        return _framework.ShadingGroupLinks_is_shading_variables_empty(self)

    def set_material_empty(self):
        return _framework.ShadingGroupLinks_set_material_empty(self)

    def set_clip_map_empty(self):
        return _framework.ShadingGroupLinks_set_clip_map_empty(self)

    def set_displacement_empty(self):
        return _framework.ShadingGroupLinks_set_displacement_empty(self)

    def set_shading_variables_empty(self):
        return _framework.ShadingGroupLinks_set_shading_variables_empty(self)

    def set_material(self, mat):
        return _framework.ShadingGroupLinks_set_material(self, mat)

    def set_clip_map(self, cm):
        return _framework.ShadingGroupLinks_set_clip_map(self, cm)

    def set_displacement(self, disp):
        return _framework.ShadingGroupLinks_set_displacement(self, disp)

    def set_shading_variables(self, sv):
        return _framework.ShadingGroupLinks_set_shading_variables(self, sv)
    __swig_destroy__ = _framework.delete_ShadingGroupLinks
    __del__ = lambda self: None
ShadingGroupLinks_swigregister = _framework.ShadingGroupLinks_swigregister
ShadingGroupLinks_swigregister(ShadingGroupLinks)

class SceneObjectShading(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneObjectShading, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneObjectShading, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_SceneObjectShading()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, src):

        if not isinstance(obj, type(self)):
            return False


        return _framework.SceneObjectShading___eq__(self, src)


    def __ne__(self, src):
        return _framework.SceneObjectShading___ne__(self, src)

    def get_links(self):
        return _framework.SceneObjectShading_get_links(self)
    __swig_setmethods__["sg_links"] = _framework.SceneObjectShading_sg_links_set
    __swig_getmethods__["sg_links"] = _framework.SceneObjectShading_sg_links_get
    if _newclass:
        sg_links = _swig_property(_framework.SceneObjectShading_sg_links_get, _framework.SceneObjectShading_sg_links_set)
    __swig_setmethods__["sub_objects"] = _framework.SceneObjectShading_sub_objects_set
    __swig_getmethods__["sub_objects"] = _framework.SceneObjectShading_sub_objects_get
    if _newclass:
        sub_objects = _swig_property(_framework.SceneObjectShading_sub_objects_get, _framework.SceneObjectShading_sub_objects_set)
    __swig_destroy__ = _framework.delete_SceneObjectShading
    __del__ = lambda self: None
SceneObjectShading_swigregister = _framework.SceneObjectShading_swigregister
SceneObjectShading_swigregister(SceneObjectShading)

class SceneShadingTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneShadingTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneShadingTable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_SceneShadingTable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_SceneShadingTable
    __del__ = lambda self: None

    def clear(self):
        return _framework.SceneShadingTable_clear(self)

    def get_data(self):
        return _framework.SceneShadingTable_get_data(self)

    def get_count(self):
        return _framework.SceneShadingTable_get_count(self)

    def get_array(self):
        return _framework.SceneShadingTable_get_array(self)

    def __len__(self):
        return _framework.SceneShadingTable___len__(self)

    def ___wrap_getitem__(self, index):
        return _framework.SceneShadingTable____wrap_getitem__(self, index)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.___wrap_getitem__(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

SceneShadingTable_swigregister = _framework.SceneShadingTable_swigregister
SceneShadingTable_swigregister(SceneShadingTable)

class SceneShadingData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SceneShadingData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SceneShadingData, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_SceneShadingData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_SceneShadingData
    __del__ = lambda self: None

    def init(self, objects, shading_table):
        return _framework.SceneShadingData_init(self, objects, shading_table)

    def clear(self):
        return _framework.SceneShadingData_clear(self)

    def get_data(self):
        return _framework.SceneShadingData_get_data(self)

    def get_count(self):
        return _framework.SceneShadingData_get_count(self)

    def get_array(self):
        return _framework.SceneShadingData_get_array(self)
SceneShadingData_swigregister = _framework.SceneShadingData_swigregister
SceneShadingData_swigregister(SceneShadingData)

class ShadingLayerColumnValues(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingLayerColumnValues, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingLayerColumnValues, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_ShadingLayerColumnValues
    __del__ = lambda self: None

    def get_value(self, *args):
        return _framework.ShadingLayerColumnValues_get_value(self, *args)

    def swap_values(self, idx1, idx2):
        return _framework.ShadingLayerColumnValues_swap_values(self, idx1, idx2)

    def remove_value(self, idx):
        return _framework.ShadingLayerColumnValues_remove_value(self, idx)
ShadingLayerColumnValues_swigregister = _framework.ShadingLayerColumnValues_swigregister
ShadingLayerColumnValues_swigregister(ShadingLayerColumnValues)
EVT_ID_SHADING_LAYER_DIRTY = cvar.EVT_ID_SHADING_LAYER_DIRTY
EVT_ID_SHADING_LAYER_MODIFIED = cvar.EVT_ID_SHADING_LAYER_MODIFIED
EVT_ID_SHADING_LAYER_NEW_RULE = cvar.EVT_ID_SHADING_LAYER_NEW_RULE
EVT_ID_SHADING_LAYER_INSERT_RULE = cvar.EVT_ID_SHADING_LAYER_INSERT_RULE
EVT_ID_SHADING_LAYER_RULE_REMOVED = cvar.EVT_ID_SHADING_LAYER_RULE_REMOVED
EVT_ID_SHADING_LAYER_RULES_REMOVED = cvar.EVT_ID_SHADING_LAYER_RULES_REMOVED
EVT_ID_SHADING_LAYER_COLUMN_ADDED = cvar.EVT_ID_SHADING_LAYER_COLUMN_ADDED
EVT_ID_SHADING_LAYER_COLUMN_REMOVED = cvar.EVT_ID_SHADING_LAYER_COLUMN_REMOVED
EVT_ID_SHADING_LAYER_CLEAR = cvar.EVT_ID_SHADING_LAYER_CLEAR
EVT_ID_SHADING_LAYER_REFRESH = cvar.EVT_ID_SHADING_LAYER_REFRESH
EVT_ID_SHADING_LAYER_RULE_MODIFIED = cvar.EVT_ID_SHADING_LAYER_RULE_MODIFIED
EVT_ID_SHADING_LAYER_RULE_MOVED = cvar.EVT_ID_SHADING_LAYER_RULE_MOVED

class ShadingLayerRuleFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingLayerRuleFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingLayerRuleFilter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ShadingLayerRuleFilter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingLayerRuleFilter
    __del__ = lambda self: None

    def check_string_matches(self, first_part, second_part):
        return _framework.ShadingLayerRuleFilter_check_string_matches(self, first_part, second_part)

    def validate_filter_syntax(self, filter):
        return _framework.ShadingLayerRuleFilter_validate_filter_syntax(self, filter)

    def split_filter(self, filter, split_output, relative_start):
        return _framework.ShadingLayerRuleFilter_split_filter(self, filter, split_output, relative_start)

    def build_filter_content(self, filter):
        return _framework.ShadingLayerRuleFilter_build_filter_content(self, filter)

    def get_raw_string(self):
        return _framework.ShadingLayerRuleFilter_get_raw_string(self)

    def get_evaluated_string(self):
        return _framework.ShadingLayerRuleFilter_get_evaluated_string(self)

    def set_filter(self, filter):
        return _framework.ShadingLayerRuleFilter_set_filter(self, filter)

    def check_refresh_filter(self):
        return _framework.ShadingLayerRuleFilter_check_refresh_filter(self)

    def is_generic(self):
        return _framework.ShadingLayerRuleFilter_is_generic(self)

    def is_world(self):
        return _framework.ShadingLayerRuleFilter_is_world(self)

    def is_world_relative(self):
        return _framework.ShadingLayerRuleFilter_is_world_relative(self)

    def is_valid(self):
        return _framework.ShadingLayerRuleFilter_is_valid(self)

    def is_relative(self):
        return _framework.ShadingLayerRuleFilter_is_relative(self)
    __swig_setmethods__["m_factory"] = _framework.ShadingLayerRuleFilter_m_factory_set
    __swig_getmethods__["m_factory"] = _framework.ShadingLayerRuleFilter_m_factory_get
    if _newclass:
        m_factory = _swig_property(_framework.ShadingLayerRuleFilter_m_factory_get, _framework.ShadingLayerRuleFilter_m_factory_set)
    __swig_setmethods__["m_sl"] = _framework.ShadingLayerRuleFilter_m_sl_set
    __swig_getmethods__["m_sl"] = _framework.ShadingLayerRuleFilter_m_sl_get
    if _newclass:
        m_sl = _swig_property(_framework.ShadingLayerRuleFilter_m_sl_get, _framework.ShadingLayerRuleFilter_m_sl_set)
    __swig_setmethods__["m_raw_string"] = _framework.ShadingLayerRuleFilter_m_raw_string_set
    __swig_getmethods__["m_raw_string"] = _framework.ShadingLayerRuleFilter_m_raw_string_get
    if _newclass:
        m_raw_string = _swig_property(_framework.ShadingLayerRuleFilter_m_raw_string_get, _framework.ShadingLayerRuleFilter_m_raw_string_set)
    __swig_setmethods__["m_evaluated_string"] = _framework.ShadingLayerRuleFilter_m_evaluated_string_set
    __swig_getmethods__["m_evaluated_string"] = _framework.ShadingLayerRuleFilter_m_evaluated_string_get
    if _newclass:
        m_evaluated_string = _swig_property(_framework.ShadingLayerRuleFilter_m_evaluated_string_get, _framework.ShadingLayerRuleFilter_m_evaluated_string_set)
    __swig_setmethods__["m_first_part"] = _framework.ShadingLayerRuleFilter_m_first_part_set
    __swig_getmethods__["m_first_part"] = _framework.ShadingLayerRuleFilter_m_first_part_get
    if _newclass:
        m_first_part = _swig_property(_framework.ShadingLayerRuleFilter_m_first_part_get, _framework.ShadingLayerRuleFilter_m_first_part_set)
    __swig_setmethods__["m_first_part_wild_start"] = _framework.ShadingLayerRuleFilter_m_first_part_wild_start_set
    __swig_getmethods__["m_first_part_wild_start"] = _framework.ShadingLayerRuleFilter_m_first_part_wild_start_get
    if _newclass:
        m_first_part_wild_start = _swig_property(_framework.ShadingLayerRuleFilter_m_first_part_wild_start_get, _framework.ShadingLayerRuleFilter_m_first_part_wild_start_set)
    __swig_setmethods__["m_first_part_wild_end"] = _framework.ShadingLayerRuleFilter_m_first_part_wild_end_set
    __swig_getmethods__["m_first_part_wild_end"] = _framework.ShadingLayerRuleFilter_m_first_part_wild_end_get
    if _newclass:
        m_first_part_wild_end = _swig_property(_framework.ShadingLayerRuleFilter_m_first_part_wild_end_get, _framework.ShadingLayerRuleFilter_m_first_part_wild_end_set)
    __swig_setmethods__["m_first_part_relative"] = _framework.ShadingLayerRuleFilter_m_first_part_relative_set
    __swig_getmethods__["m_first_part_relative"] = _framework.ShadingLayerRuleFilter_m_first_part_relative_get
    if _newclass:
        m_first_part_relative = _swig_property(_framework.ShadingLayerRuleFilter_m_first_part_relative_get, _framework.ShadingLayerRuleFilter_m_first_part_relative_set)
    __swig_setmethods__["m_world_filter"] = _framework.ShadingLayerRuleFilter_m_world_filter_set
    __swig_getmethods__["m_world_filter"] = _framework.ShadingLayerRuleFilter_m_world_filter_get
    if _newclass:
        m_world_filter = _swig_property(_framework.ShadingLayerRuleFilter_m_world_filter_get, _framework.ShadingLayerRuleFilter_m_world_filter_set)
    __swig_setmethods__["m_world_relative_filter"] = _framework.ShadingLayerRuleFilter_m_world_relative_filter_set
    __swig_getmethods__["m_world_relative_filter"] = _framework.ShadingLayerRuleFilter_m_world_relative_filter_get
    if _newclass:
        m_world_relative_filter = _swig_property(_framework.ShadingLayerRuleFilter_m_world_relative_filter_get, _framework.ShadingLayerRuleFilter_m_world_relative_filter_set)
    __swig_setmethods__["m_second_part"] = _framework.ShadingLayerRuleFilter_m_second_part_set
    __swig_getmethods__["m_second_part"] = _framework.ShadingLayerRuleFilter_m_second_part_get
    if _newclass:
        m_second_part = _swig_property(_framework.ShadingLayerRuleFilter_m_second_part_get, _framework.ShadingLayerRuleFilter_m_second_part_set)
    __swig_setmethods__["m_second_part_wild_start"] = _framework.ShadingLayerRuleFilter_m_second_part_wild_start_set
    __swig_getmethods__["m_second_part_wild_start"] = _framework.ShadingLayerRuleFilter_m_second_part_wild_start_get
    if _newclass:
        m_second_part_wild_start = _swig_property(_framework.ShadingLayerRuleFilter_m_second_part_wild_start_get, _framework.ShadingLayerRuleFilter_m_second_part_wild_start_set)
    __swig_setmethods__["m_second_part_wild_end"] = _framework.ShadingLayerRuleFilter_m_second_part_wild_end_set
    __swig_getmethods__["m_second_part_wild_end"] = _framework.ShadingLayerRuleFilter_m_second_part_wild_end_get
    if _newclass:
        m_second_part_wild_end = _swig_property(_framework.ShadingLayerRuleFilter_m_second_part_wild_end_get, _framework.ShadingLayerRuleFilter_m_second_part_wild_end_set)
    __swig_setmethods__["m_separator"] = _framework.ShadingLayerRuleFilter_m_separator_set
    __swig_getmethods__["m_separator"] = _framework.ShadingLayerRuleFilter_m_separator_get
    if _newclass:
        m_separator = _swig_property(_framework.ShadingLayerRuleFilter_m_separator_get, _framework.ShadingLayerRuleFilter_m_separator_set)
    __swig_setmethods__["m_filter_is_valid"] = _framework.ShadingLayerRuleFilter_m_filter_is_valid_set
    __swig_getmethods__["m_filter_is_valid"] = _framework.ShadingLayerRuleFilter_m_filter_is_valid_get
    if _newclass:
        m_filter_is_valid = _swig_property(_framework.ShadingLayerRuleFilter_m_filter_is_valid_get, _framework.ShadingLayerRuleFilter_m_filter_is_valid_set)
ShadingLayerRuleFilter_swigregister = _framework.ShadingLayerRuleFilter_swigregister
ShadingLayerRuleFilter_swigregister(ShadingLayerRuleFilter)

class ShadingLayerRule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingLayerRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingLayerRule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ShadingLayerRule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingLayerRule
    __del__ = lambda self: None

    def init_default_values(self):
        return _framework.ShadingLayerRule_init_default_values(self)

    def init_default_column_value(self, column):
        return _framework.ShadingLayerRule_init_default_column_value(self, column)

    def remove_values(self):
        return _framework.ShadingLayerRule_remove_values(self)

    def get_raw_string(self):
        return _framework.ShadingLayerRule_get_raw_string(self)

    def get_evaluated_string(self):
        return _framework.ShadingLayerRule_get_evaluated_string(self)

    def set_filter(self, filter):
        return _framework.ShadingLayerRule_set_filter(self, filter)

    def check_refresh_filter(self):
        return _framework.ShadingLayerRule_check_refresh_filter(self)

    def check_string_matches(self, first_part, second_part):
        return _framework.ShadingLayerRule_check_string_matches(self, first_part, second_part)

    def is_generic(self):
        return _framework.ShadingLayerRule_is_generic(self)

    def is_object_only(self):
        return _framework.ShadingLayerRule_is_object_only(self)

    def make_object_relative(self):
        return _framework.ShadingLayerRule_make_object_relative(self)

    def is_world(self):
        return _framework.ShadingLayerRule_is_world(self)

    def get_is_filter_valid(self):
        return _framework.ShadingLayerRule_get_is_filter_valid(self)

    def set_index(self, idx):
        return _framework.ShadingLayerRule_set_index(self, idx)

    def get_index(self):
        return _framework.ShadingLayerRule_get_index(self)

    def get_is_active(self):
        return _framework.ShadingLayerRule_get_is_active(self)

    def set_is_active(self, is_active):
        return _framework.ShadingLayerRule_set_is_active(self, is_active)

    def get_column_value(self, *args):
        return _framework.ShadingLayerRule_get_column_value(self, *args)

    def get_shading_layer(self):
        return _framework.ShadingLayerRule_get_shading_layer(self)
    __swig_setmethods__["m_shading_layer"] = _framework.ShadingLayerRule_m_shading_layer_set
    __swig_getmethods__["m_shading_layer"] = _framework.ShadingLayerRule_m_shading_layer_get
    if _newclass:
        m_shading_layer = _swig_property(_framework.ShadingLayerRule_m_shading_layer_get, _framework.ShadingLayerRule_m_shading_layer_set)
    __swig_setmethods__["m_is_active"] = _framework.ShadingLayerRule_m_is_active_set
    __swig_getmethods__["m_is_active"] = _framework.ShadingLayerRule_m_is_active_get
    if _newclass:
        m_is_active = _swig_property(_framework.ShadingLayerRule_m_is_active_get, _framework.ShadingLayerRule_m_is_active_set)
    __swig_setmethods__["m_filter"] = _framework.ShadingLayerRule_m_filter_set
    __swig_getmethods__["m_filter"] = _framework.ShadingLayerRule_m_filter_get
    if _newclass:
        m_filter = _swig_property(_framework.ShadingLayerRule_m_filter_get, _framework.ShadingLayerRule_m_filter_set)
    __swig_setmethods__["m_index"] = _framework.ShadingLayerRule_m_index_set
    __swig_getmethods__["m_index"] = _framework.ShadingLayerRule_m_index_get
    if _newclass:
        m_index = _swig_property(_framework.ShadingLayerRule_m_index_get, _framework.ShadingLayerRule_m_index_set)
ShadingLayerRule_swigregister = _framework.ShadingLayerRule_swigregister
ShadingLayerRule_swigregister(ShadingLayerRule)

class ShadingLayerColumnItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingLayerColumnItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingLayerColumnItem, name)
    __repr__ = _swig_repr
    TYPE_STRING = _framework.ShadingLayerColumnItem_TYPE_STRING
    TYPE_SCRIPT = _framework.ShadingLayerColumnItem_TYPE_SCRIPT
    TYPE_DOUBLE = _framework.ShadingLayerColumnItem_TYPE_DOUBLE
    TYPE_BOOL = _framework.ShadingLayerColumnItem_TYPE_BOOL
    TYPE_REFERENCE = _framework.ShadingLayerColumnItem_TYPE_REFERENCE
    TYPE_COLOR = _framework.ShadingLayerColumnItem_TYPE_COLOR

    def __init__(self, name, type):
        this = _framework.new_ShadingLayerColumnItem(name, type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ShadingLayerColumnItem___eq__(self, *args)


    def get_name(self):
        return _framework.ShadingLayerColumnItem_get_name(self)

    def get_type(self):
        return _framework.ShadingLayerColumnItem_get_type(self)

    def add_reference_class_filter(self, of_class):
        return _framework.ShadingLayerColumnItem_add_reference_class_filter(self, of_class)

    def get_reference_class_filters(self):
        return _framework.ShadingLayerColumnItem_get_reference_class_filters(self)

    def set_is_static(self):
        return _framework.ShadingLayerColumnItem_set_is_static(self)

    def get_is_static(self):
        return _framework.ShadingLayerColumnItem_get_is_static(self)
    __swig_destroy__ = _framework.delete_ShadingLayerColumnItem
    __del__ = lambda self: None
ShadingLayerColumnItem_swigregister = _framework.ShadingLayerColumnItem_swigregister
ShadingLayerColumnItem_swigregister(ShadingLayerColumnItem)

SL_ADD_RULE = _framework.SL_ADD_RULE
SL_REMOVE_RULE = _framework.SL_REMOVE_RULE
SL_MOVE_RULE = _framework.SL_MOVE_RULE
SL_EDIT_RULE = _framework.SL_EDIT_RULE
SL_UNKNOWN = _framework.SL_UNKNOWN
SL_RULE_FROM_FULL_NAMES = _framework.SL_RULE_FROM_FULL_NAMES
SL_RULE_FROM_RELATIVE_NAMES = _framework.SL_RULE_FROM_RELATIVE_NAMES
SL_RULE_FROM_KINEMATICS = _framework.SL_RULE_FROM_KINEMATICS
SL_RULE_FROM_SG_NAMES = _framework.SL_RULE_FROM_SG_NAMES
SL_RULE_COUNT = _framework.SL_RULE_COUNT
class ModuleShadingLayer(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleShadingLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleShadingLayer, name)
    __repr__ = _swig_repr

    def get_override_info_label(self, value):
        return _framework.ModuleShadingLayer_get_override_info_label(self, value)

    def get_override_info(self, label):
        return _framework.ModuleShadingLayer_get_override_info(self, label)
    PRIORITY_RULES_FIRST = _framework.ModuleShadingLayer_PRIORITY_RULES_FIRST
    PRIORITY_OBJECTS_FIRST = _framework.ModuleShadingLayer_PRIORITY_OBJECTS_FIRST
    if _newclass:
        rule_invalid_index = staticmethod(_framework.ModuleShadingLayer_rule_invalid_index)
    else:
        rule_invalid_index = _framework.ModuleShadingLayer_rule_invalid_index
    if _newclass:
        rule_invisible_index = staticmethod(_framework.ModuleShadingLayer_rule_invisible_index)
    else:
        rule_invisible_index = _framework.ModuleShadingLayer_rule_invisible_index
    if _newclass:
        get_static_column_names = staticmethod(_framework.ModuleShadingLayer_get_static_column_names)
    else:
        get_static_column_names = _framework.ModuleShadingLayer_get_static_column_names

    def __init__(self, object):
        this = _framework.new_ModuleShadingLayer(object)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleShadingLayer
    __del__ = lambda self: None

    def update_rules_type(self):
        return _framework.ModuleShadingLayer_update_rules_type(self)

    def init(self, object):
        return _framework.ModuleShadingLayer_init(self, object)

    def create_scene_object_rules(self, module_scene_object, new_rules, creation_mode, insertion_index, uniques_filters):
        return _framework.ModuleShadingLayer_create_scene_object_rules(self, module_scene_object, new_rules, creation_mode, insertion_index, uniques_filters)

    def create_rules_from_items(self, items_pathes, creation_mode, insert_row_index=-1):
        return _framework.ModuleShadingLayer_create_rules_from_items(self, items_pathes, creation_mode, insert_row_index)

    def fill_object(self, object):
        return _framework.ModuleShadingLayer_fill_object(self, object)

    def set_is_dirty(self):
        return _framework.ModuleShadingLayer_set_is_dirty(self)

    def build_rules_indexes(self, rules_hash, padding):
        return _framework.ModuleShadingLayer_build_rules_indexes(self, rules_hash, padding)

    def get_objects_shading(self, objects, shading_table):
        return _framework.ModuleShadingLayer_get_objects_shading(self, objects, shading_table)

    def resolve_objects_shading(self, *args):
        return _framework.ModuleShadingLayer_resolve_objects_shading(self, *args)

    def get_first_matching_rule_index(self, filter):
        return _framework.ModuleShadingLayer_get_first_matching_rule_index(self, filter)

    def get_rules(self):
        return _framework.ModuleShadingLayer_get_rules(self)

    def get_rules_recursively(self, rules):
        return _framework.ModuleShadingLayer_get_rules_recursively(self, rules)

    def get_objects_only_rules_recursively(self, rules, include_path_rules=True, include_world_rules=True):
        return _framework.ModuleShadingLayer_get_objects_only_rules_recursively(self, rules, include_path_rules, include_world_rules)

    def get_generic_rules_recursively(self, rules, include_path_rules=True, include_world_rules=True):
        return _framework.ModuleShadingLayer_get_generic_rules_recursively(self, rules, include_path_rules, include_world_rules)

    def check_static_rule_recursively(self, key):
        return _framework.ModuleShadingLayer_check_static_rule_recursively(self, key)

    def set_rules_object_relative(self, rules):
        return _framework.ModuleShadingLayer_set_rules_object_relative(self, rules)

    def add_shading_layer_rule(self, *args):
        return _framework.ModuleShadingLayer_add_shading_layer_rule(self, *args)

    def add_shading_layer_rules(self, rules):
        return _framework.ModuleShadingLayer_add_shading_layer_rules(self, rules)

    def remove_shading_layer_rule(self, index):
        return _framework.ModuleShadingLayer_remove_shading_layer_rule(self, index)

    def remove_shading_layer_rules(self, indexes):
        return _framework.ModuleShadingLayer_remove_shading_layer_rules(self, indexes)

    def move_shading_layer_rule(self, index, move_to_index):
        return _framework.ModuleShadingLayer_move_shading_layer_rule(self, index, move_to_index)

    def insert_shading_layer_rule(self, *args):
        return _framework.ModuleShadingLayer_insert_shading_layer_rule(self, *args)

    def clear_shading_layer_rules(self):
        return _framework.ModuleShadingLayer_clear_shading_layer_rules(self)

    def clear_selected_columns(self):
        return _framework.ModuleShadingLayer_clear_selected_columns(self)

    def set_sl_is_active(self, index, value):
        return _framework.ModuleShadingLayer_set_sl_is_active(self, index, value)

    def set_sl_filter(self, index, filter):
        return _framework.ModuleShadingLayer_set_sl_filter(self, index, filter)

    def set_rules_value(self, rules_indexes, column_name, value):
        return _framework.ModuleShadingLayer_set_rules_value(self, rules_indexes, column_name, value)

    def set_rule_value(self, rule_index, column_name, value):
        return _framework.ModuleShadingLayer_set_rule_value(self, rule_index, column_name, value)

    def set_rule_state(self, rule_index, column_name, state):
        return _framework.ModuleShadingLayer_set_rule_state(self, rule_index, column_name, state)

    def get_rule_value(self, rule_index, column_name):
        return _framework.ModuleShadingLayer_get_rule_value(self, rule_index, column_name)

    def add_child(self, child):
        return _framework.ModuleShadingLayer_add_child(self, child)

    def remove_child(self, *args):
        return _framework.ModuleShadingLayer_remove_child(self, *args)

    def get_children_count(self):
        return _framework.ModuleShadingLayer_get_children_count(self)

    def get_child(self, index):
        return _framework.ModuleShadingLayer_get_child(self, index)

    def get_children(self):
        return _framework.ModuleShadingLayer_get_children(self)

    def get_parents(self):
        return _framework.ModuleShadingLayer_get_parents(self)

    def has_world_rules(self):
        return _framework.ModuleShadingLayer_has_world_rules(self)

    def has_path_rules(self):
        return _framework.ModuleShadingLayer_has_path_rules(self)

    def is_column_selected(self, column_name):
        return _framework.ModuleShadingLayer_is_column_selected(self, column_name)

    def get_selected_column_items(self):
        return _framework.ModuleShadingLayer_get_selected_column_items(self)

    def get_selected_column_index(self, *args):
        return _framework.ModuleShadingLayer_get_selected_column_index(self, *args)

    def has_values_for_column(self, column_name):
        return _framework.ModuleShadingLayer_has_values_for_column(self, column_name)
    if _newclass:
        init_available_columns = staticmethod(_framework.ModuleShadingLayer_init_available_columns)
    else:
        init_available_columns = _framework.ModuleShadingLayer_init_available_columns
    if _newclass:
        get_available_column_items = staticmethod(_framework.ModuleShadingLayer_get_available_column_items)
    else:
        get_available_column_items = _framework.ModuleShadingLayer_get_available_column_items
    if _newclass:
        get_available_column_item = staticmethod(_framework.ModuleShadingLayer_get_available_column_item)
    else:
        get_available_column_item = _framework.ModuleShadingLayer_get_available_column_item
    if _newclass:
        get_column_value_index = staticmethod(_framework.ModuleShadingLayer_get_column_value_index)
    else:
        get_column_value_index = _framework.ModuleShadingLayer_get_column_value_index

    def select_column(self, column):
        return _framework.ModuleShadingLayer_select_column(self, column)

    def unselect_column(self, column):
        return _framework.ModuleShadingLayer_unselect_column(self, column)
    if _newclass:
        color_to_string = staticmethod(_framework.ModuleShadingLayer_color_to_string)
    else:
        color_to_string = _framework.ModuleShadingLayer_color_to_string
    if _newclass:
        string_to_color = staticmethod(_framework.ModuleShadingLayer_string_to_color)
    else:
        string_to_color = _framework.ModuleShadingLayer_string_to_color

    def get_root_contexts(self):
        return _framework.ModuleShadingLayer_get_root_contexts(self)

    def get_root_kinematic_paths(self):
        return _framework.ModuleShadingLayer_get_root_kinematic_paths(self)
    if _newclass:
        get_matching_objects = staticmethod(_framework.ModuleShadingLayer_get_matching_objects)
    else:
        get_matching_objects = _framework.ModuleShadingLayer_get_matching_objects
    if _newclass:
        class_info = staticmethod(_framework.ModuleShadingLayer_class_info)
    else:
        class_info = _framework.ModuleShadingLayer_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleShadingLayer____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleShadingLayer____class_destructor__

    def get_class_info(self):
        return _framework.ModuleShadingLayer_get_class_info(self)
ModuleShadingLayer_swigregister = _framework.ModuleShadingLayer_swigregister
ModuleShadingLayer_swigregister(ModuleShadingLayer)

def ModuleShadingLayer_rule_invalid_index():
    return _framework.ModuleShadingLayer_rule_invalid_index()
ModuleShadingLayer_rule_invalid_index = _framework.ModuleShadingLayer_rule_invalid_index

def ModuleShadingLayer_rule_invisible_index():
    return _framework.ModuleShadingLayer_rule_invisible_index()
ModuleShadingLayer_rule_invisible_index = _framework.ModuleShadingLayer_rule_invisible_index

def ModuleShadingLayer_get_static_column_names(columns):
    return _framework.ModuleShadingLayer_get_static_column_names(columns)
ModuleShadingLayer_get_static_column_names = _framework.ModuleShadingLayer_get_static_column_names

def ModuleShadingLayer_init_available_columns(app):
    return _framework.ModuleShadingLayer_init_available_columns(app)
ModuleShadingLayer_init_available_columns = _framework.ModuleShadingLayer_init_available_columns

def ModuleShadingLayer_get_available_column_items():
    return _framework.ModuleShadingLayer_get_available_column_items()
ModuleShadingLayer_get_available_column_items = _framework.ModuleShadingLayer_get_available_column_items

def ModuleShadingLayer_get_available_column_item(name):
    return _framework.ModuleShadingLayer_get_available_column_item(name)
ModuleShadingLayer_get_available_column_item = _framework.ModuleShadingLayer_get_available_column_item

def ModuleShadingLayer_get_column_value_index(name):
    return _framework.ModuleShadingLayer_get_column_value_index(name)
ModuleShadingLayer_get_column_value_index = _framework.ModuleShadingLayer_get_column_value_index

def ModuleShadingLayer_color_to_string(color):
    return _framework.ModuleShadingLayer_color_to_string(color)
ModuleShadingLayer_color_to_string = _framework.ModuleShadingLayer_color_to_string

def ModuleShadingLayer_string_to_color(str):
    return _framework.ModuleShadingLayer_string_to_color(str)
ModuleShadingLayer_string_to_color = _framework.ModuleShadingLayer_string_to_color

def ModuleShadingLayer_get_matching_objects(app, filter, output_objects):
    return _framework.ModuleShadingLayer_get_matching_objects(app, filter, output_objects)
ModuleShadingLayer_get_matching_objects = _framework.ModuleShadingLayer_get_matching_objects

def ModuleShadingLayer_class_info():
    return _framework.ModuleShadingLayer_class_info()
ModuleShadingLayer_class_info = _framework.ModuleShadingLayer_class_info

def ModuleShadingLayer____class_destructor__(instance, is_array):
    return _framework.ModuleShadingLayer____class_destructor__(instance, is_array)
ModuleShadingLayer____class_destructor__ = _framework.ModuleShadingLayer____class_destructor__

class ModuleTextureCallbacks(ModuleGlObjectCallbacks):
    __swig_setmethods__ = {}
    for _s in [ModuleGlObjectCallbacks]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleTextureCallbacks, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleGlObjectCallbacks]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleTextureCallbacks, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleTextureCallbacks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init_callbacks(self, callbacks):
        return _framework.ModuleTextureCallbacks_init_callbacks(self, callbacks)
    __swig_setmethods__["cb_pre_evaluate"] = _framework.ModuleTextureCallbacks_cb_pre_evaluate_set
    __swig_getmethods__["cb_pre_evaluate"] = _framework.ModuleTextureCallbacks_cb_pre_evaluate_get
    if _newclass:
        cb_pre_evaluate = _swig_property(_framework.ModuleTextureCallbacks_cb_pre_evaluate_get, _framework.ModuleTextureCallbacks_cb_pre_evaluate_set)
    __swig_setmethods__["cb_evaluate"] = _framework.ModuleTextureCallbacks_cb_evaluate_set
    __swig_getmethods__["cb_evaluate"] = _framework.ModuleTextureCallbacks_cb_evaluate_get
    if _newclass:
        cb_evaluate = _swig_property(_framework.ModuleTextureCallbacks_cb_evaluate_get, _framework.ModuleTextureCallbacks_cb_evaluate_set)
    __swig_destroy__ = _framework.delete_ModuleTextureCallbacks
    __del__ = lambda self: None
ModuleTextureCallbacks_swigregister = _framework.ModuleTextureCallbacks_swigregister
ModuleTextureCallbacks_swigregister(ModuleTextureCallbacks)

class ModuleTexture(ModuleGlObject):
    __swig_setmethods__ = {}
    for _s in [ModuleGlObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleTexture, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleGlObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleTexture, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleTexture()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleTexture
    __del__ = lambda self: None

    def pre_evaluate(self, eval_ctx, ctx):
        return _framework.ModuleTexture_pre_evaluate(self, eval_ctx, ctx)

    def evaluate(self, *args):
        return _framework.ModuleTexture_evaluate(self, *args)
    if _newclass:
        get_object_count = staticmethod(_framework.ModuleTexture_get_object_count)
    else:
        get_object_count = _framework.ModuleTexture_get_object_count

    def get_object_id(self):
        return _framework.ModuleTexture_get_object_id(self)

    def get_opacity(self, eval_ctx, ctx):
        return _framework.ModuleTexture_get_opacity(self, eval_ctx, ctx)

    def is_inverted(self):
        return _framework.ModuleTexture_is_inverted(self)

    def set_master_input_value(self, attr_name):
        return _framework.ModuleTexture_set_master_input_value(self, attr_name)

    def get_master_input_value(self):
        return _framework.ModuleTexture_get_master_input_value(self)

    def get_pass_through(self):
        return _framework.ModuleTexture_get_pass_through(self)

    def get_master_input(self):
        return _framework.ModuleTexture_get_master_input(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleTexture_class_info)
    else:
        class_info = _framework.ModuleTexture_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleTexture____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleTexture____class_destructor__

    def get_class_info(self):
        return _framework.ModuleTexture_get_class_info(self)
ModuleTexture_swigregister = _framework.ModuleTexture_swigregister
ModuleTexture_swigregister(ModuleTexture)

def ModuleTexture_get_object_count(application):
    return _framework.ModuleTexture_get_object_count(application)
ModuleTexture_get_object_count = _framework.ModuleTexture_get_object_count

def ModuleTexture_class_info():
    return _framework.ModuleTexture_class_info()
ModuleTexture_class_info = _framework.ModuleTexture_class_info

def ModuleTexture____class_destructor__(instance, is_array):
    return _framework.ModuleTexture____class_destructor__(instance, is_array)
ModuleTexture____class_destructor__ = _framework.ModuleTexture____class_destructor__

class ModuleTextureSpatial(ModuleTexture):
    __swig_setmethods__ = {}
    for _s in [ModuleTexture]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleTextureSpatial, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleTexture]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleTextureSpatial, name)
    __repr__ = _swig_repr
    PROJECTION_PLANAR = _framework.ModuleTextureSpatial_PROJECTION_PLANAR
    PROJECTION_CYLINDRICAL = _framework.ModuleTextureSpatial_PROJECTION_CYLINDRICAL
    PROJECTION_SPHERICAL = _framework.ModuleTextureSpatial_PROJECTION_SPHERICAL
    PROJECTION_CUBIC = _framework.ModuleTextureSpatial_PROJECTION_CUBIC
    PROJECTION_CAMERA = _framework.ModuleTextureSpatial_PROJECTION_CAMERA
    PROJECTION_PARAMETRIC = _framework.ModuleTextureSpatial_PROJECTION_PARAMETRIC
    PROJECTION_UV = _framework.ModuleTextureSpatial_PROJECTION_UV
    PROJECTION_UV_PROPERTY = _framework.ModuleTextureSpatial_PROJECTION_UV_PROPERTY
    PROJECTION_ENVIRONMENT = _framework.ModuleTextureSpatial_PROJECTION_ENVIRONMENT
    PROJECTION_COUNT = _framework.ModuleTextureSpatial_PROJECTION_COUNT
    if _newclass:
        get_projection_name = staticmethod(_framework.ModuleTextureSpatial_get_projection_name)
    else:
        get_projection_name = _framework.ModuleTextureSpatial_get_projection_name
    AXIS_X = _framework.ModuleTextureSpatial_AXIS_X
    AXIS_Y = _framework.ModuleTextureSpatial_AXIS_Y
    AXIS_Z = _framework.ModuleTextureSpatial_AXIS_Z
    AXIS_COUNT = _framework.ModuleTextureSpatial_AXIS_COUNT
    SPACE_OBJECT_BASE = _framework.ModuleTextureSpatial_SPACE_OBJECT_BASE
    SPACE_OBJECT_DEFORMED = _framework.ModuleTextureSpatial_SPACE_OBJECT_DEFORMED
    SPACE_INSTANCE = _framework.ModuleTextureSpatial_SPACE_INSTANCE
    SPACE_WORLD = _framework.ModuleTextureSpatial_SPACE_WORLD
    if _newclass:
        get_axis_name = staticmethod(_framework.ModuleTextureSpatial_get_axis_name)
    else:
        get_axis_name = _framework.ModuleTextureSpatial_get_axis_name

    def __init__(self):
        this = _framework.new_ModuleTextureSpatial()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleTextureSpatial
    __del__ = lambda self: None

    def get_uv_matrix(self):
        return _framework.ModuleTextureSpatial_get_uv_matrix(self)

    def eval_uv_matrix(self, eval_ctx, ctx, m):
        return _framework.ModuleTextureSpatial_eval_uv_matrix(self, eval_ctx, ctx, m)

    def get_proj_matrix(self):
        return _framework.ModuleTextureSpatial_get_proj_matrix(self)

    def is_2d(self):
        return _framework.ModuleTextureSpatial_is_2d(self)

    def is_3d(self):
        return _framework.ModuleTextureSpatial_is_3d(self)

    def get_projection_type(self):
        return _framework.ModuleTextureSpatial_get_projection_type(self)

    def get_axis(self):
        return _framework.ModuleTextureSpatial_get_axis(self)

    def get_object_space(self):
        return _framework.ModuleTextureSpatial_get_object_space(self)

    def get_uv_slot(self):
        return _framework.ModuleTextureSpatial_get_uv_slot(self)

    def get_camera(self):
        return _framework.ModuleTextureSpatial_get_camera(self)

    def get_camera_occluders(self):
        return _framework.ModuleTextureSpatial_get_camera_occluders(self)

    def is_camera_occlusion(self):
        return _framework.ModuleTextureSpatial_is_camera_occlusion(self)

    def is_sticky_projection(self):
        return _framework.ModuleTextureSpatial_is_sticky_projection(self)

    def get_reference_frame(self):
        return _framework.ModuleTextureSpatial_get_reference_frame(self)

    def get_reference_time(self):
        return _framework.ModuleTextureSpatial_get_reference_time(self)

    def get_aspect_ratio(self):
        return _framework.ModuleTextureSpatial_get_aspect_ratio(self)

    def get_inv_aspect_ratio(self):
        return _framework.ModuleTextureSpatial_get_inv_aspect_ratio(self)

    def set_aspect_ratio(self, ratio):
        return _framework.ModuleTextureSpatial_set_aspect_ratio(self, ratio)
    if _newclass:
        get_max_reference_frame_count = staticmethod(_framework.ModuleTextureSpatial_get_max_reference_frame_count)
    else:
        get_max_reference_frame_count = _framework.ModuleTextureSpatial_get_max_reference_frame_count
    if _newclass:
        class_info = staticmethod(_framework.ModuleTextureSpatial_class_info)
    else:
        class_info = _framework.ModuleTextureSpatial_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleTextureSpatial____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleTextureSpatial____class_destructor__

    def get_class_info(self):
        return _framework.ModuleTextureSpatial_get_class_info(self)
ModuleTextureSpatial_swigregister = _framework.ModuleTextureSpatial_swigregister
ModuleTextureSpatial_swigregister(ModuleTextureSpatial)

def ModuleTextureSpatial_get_projection_name(projection):
    return _framework.ModuleTextureSpatial_get_projection_name(projection)
ModuleTextureSpatial_get_projection_name = _framework.ModuleTextureSpatial_get_projection_name

def ModuleTextureSpatial_get_axis_name(axis):
    return _framework.ModuleTextureSpatial_get_axis_name(axis)
ModuleTextureSpatial_get_axis_name = _framework.ModuleTextureSpatial_get_axis_name

def ModuleTextureSpatial_get_max_reference_frame_count():
    return _framework.ModuleTextureSpatial_get_max_reference_frame_count()
ModuleTextureSpatial_get_max_reference_frame_count = _framework.ModuleTextureSpatial_get_max_reference_frame_count

def ModuleTextureSpatial_class_info():
    return _framework.ModuleTextureSpatial_class_info()
ModuleTextureSpatial_class_info = _framework.ModuleTextureSpatial_class_info

def ModuleTextureSpatial____class_destructor__(instance, is_array):
    return _framework.ModuleTextureSpatial____class_destructor__(instance, is_array)
ModuleTextureSpatial____class_destructor__ = _framework.ModuleTextureSpatial____class_destructor__

class ModuleUvSlot(ModuleProjectItem):
    __swig_setmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleUvSlot, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleProjectItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleUvSlot, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_ModuleUvSlot()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleUvSlot
    __del__ = lambda self: None

    def get_index(self):
        return _framework.ModuleUvSlot_get_index(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleUvSlot_class_info)
    else:
        class_info = _framework.ModuleUvSlot_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleUvSlot____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleUvSlot____class_destructor__

    def get_class_info(self):
        return _framework.ModuleUvSlot_get_class_info(self)
ModuleUvSlot_swigregister = _framework.ModuleUvSlot_swigregister
ModuleUvSlot_swigregister(ModuleUvSlot)

def ModuleUvSlot_class_info():
    return _framework.ModuleUvSlot_class_info()
ModuleUvSlot_class_info = _framework.ModuleUvSlot_class_info

def ModuleUvSlot____class_destructor__(instance, is_array):
    return _framework.ModuleUvSlot____class_destructor__(instance, is_array)
ModuleUvSlot____class_destructor__ = _framework.ModuleUvSlot____class_destructor__

class ModuleObjectBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleObjectBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleObjectBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ModuleObjectBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ModuleObjectBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleObjectBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleObjectBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ModuleObjectBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ModuleObjectBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ModuleObjectBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ModuleObjectBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ModuleObjectBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ModuleObjectBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ModuleObjectBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ModuleObjectBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleObjectBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleObjectBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleObjectBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ModuleObjectBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleObjectBasicArray_class_info)
    else:
        class_info = _framework.ModuleObjectBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleObjectBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleObjectBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ModuleObjectBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleObjectBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleObjectBasicArray_swigregister = _framework.ModuleObjectBasicArray_swigregister
ModuleObjectBasicArray_swigregister(ModuleObjectBasicArray)

def ModuleObjectBasicArray_class_info():
    return _framework.ModuleObjectBasicArray_class_info()
ModuleObjectBasicArray_class_info = _framework.ModuleObjectBasicArray_class_info

def ModuleObjectBasicArray____class_destructor__(instance, is_array):
    return _framework.ModuleObjectBasicArray____class_destructor__(instance, is_array)
ModuleObjectBasicArray____class_destructor__ = _framework.ModuleObjectBasicArray____class_destructor__

class ModuleObjectArray(ModuleObjectBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleObjectArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleObjectArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleObjectArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleObjectArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleObjectArray_append(self, *args)

    def get_count(self):
        return _framework.ModuleObjectArray_get_count(self)

    def remove_all(self):
        return _framework.ModuleObjectArray_remove_all(self)

    def resize(self, *args):
        return _framework.ModuleObjectArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleObjectArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleObjectArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleObjectArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleObjectArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ModuleObjectArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleObjectArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleObjectArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleObjectArray_class_info)
    else:
        class_info = _framework.ModuleObjectArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleObjectArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleObjectArray____class_destructor__
ModuleObjectArray_swigregister = _framework.ModuleObjectArray_swigregister
ModuleObjectArray_swigregister(ModuleObjectArray)

def ModuleObjectArray_class_info():
    return _framework.ModuleObjectArray_class_info()
ModuleObjectArray_class_info = _framework.ModuleObjectArray_class_info

def ModuleObjectArray____class_destructor__(instance, is_array):
    return _framework.ModuleObjectArray____class_destructor__(instance, is_array)
ModuleObjectArray____class_destructor__ = _framework.ModuleObjectArray____class_destructor__

class ModuleObjectVector(ModuleObjectBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleObjectBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleObjectVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleObjectBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleObjectVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleObjectVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleObjectVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleObjectVector_append(self, *args)

    def add(self, *args):
        return _framework.ModuleObjectVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ModuleObjectVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ModuleObjectVector_remove_last(self)

    def empty(self):
        return _framework.ModuleObjectVector_empty(self)

    def remove_all(self):
        return _framework.ModuleObjectVector_remove_all(self)

    def clear(self, *args):
        return _framework.ModuleObjectVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ModuleObjectVector_remove(self, *args)

    def is_empty(self):
        return _framework.ModuleObjectVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ModuleObjectVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ModuleObjectVector_remove_items(self, item)

    def get_count(self):
        return _framework.ModuleObjectVector_get_count(self)

    def get_capacity(self):
        return _framework.ModuleObjectVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ModuleObjectVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ModuleObjectVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ModuleObjectVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ModuleObjectVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ModuleObjectVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ModuleObjectVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleObjectVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleObjectVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleObjectVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleObjectVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ModuleObjectVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ModuleObjectVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ModuleObjectVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ModuleObjectVector_item(self, *args)

    def get_data(self):
        return _framework.ModuleObjectVector_get_data(self)

    def get_memory_size(self):
        return _framework.ModuleObjectVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleObjectVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleObjectVector_class_info)
    else:
        class_info = _framework.ModuleObjectVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleObjectVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleObjectVector____class_destructor__
ModuleObjectVector_swigregister = _framework.ModuleObjectVector_swigregister
ModuleObjectVector_swigregister(ModuleObjectVector)

def ModuleObjectVector_class_info():
    return _framework.ModuleObjectVector_class_info()
ModuleObjectVector_class_info = _framework.ModuleObjectVector_class_info

def ModuleObjectVector____class_destructor__(instance, is_array):
    return _framework.ModuleObjectVector____class_destructor__(instance, is_array)
ModuleObjectVector____class_destructor__ = _framework.ModuleObjectVector____class_destructor__

class ModuleObjectSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleObjectSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleObjectSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleObjectSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleObjectSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleObjectSet_get_count(self)

    def is_empty(self):
        return _framework.ModuleObjectSet_is_empty(self)

    def exists(self, *args):
        return _framework.ModuleObjectSet_exists(self, *args)

    def add(self, *args):
        return _framework.ModuleObjectSet_add(self, *args)

    def remove(self, index):
        return _framework.ModuleObjectSet_remove(self, index)

    def remove_item(self, item):
        return _framework.ModuleObjectSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ModuleObjectSet_remove_set(self, set)

    def remove_all(self):
        return _framework.ModuleObjectSet_remove_all(self)

    def toggle(self, item):
        return _framework.ModuleObjectSet_toggle(self, item)

    def back(self, *args):
        return _framework.ModuleObjectSet_back(self, *args)

    def unite(self, set):
        return _framework.ModuleObjectSet_unite(self, set)

    def intersect(self, set):
        return _framework.ModuleObjectSet_intersect(self, set)

    def is_included(self, set):
        return _framework.ModuleObjectSet_is_included(self, set)

    def get_item(self, index):
        return _framework.ModuleObjectSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ModuleObjectSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ModuleObjectSet___ne__(self, set)

    def get_items(self):
        return _framework.ModuleObjectSet_get_items(self)

    def get_array(self, array):
        return _framework.ModuleObjectSet_get_array(self, array)

    def get_list(self, list):
        return _framework.ModuleObjectSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ModuleObjectSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ModuleObjectSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleObjectSet_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleObjectSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ModuleObjectSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleObjectSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleObjectSet_swigregister = _framework.ModuleObjectSet_swigregister
ModuleObjectSet_swigregister(ModuleObjectSet)

class ModuleMaterialBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleMaterialBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleMaterialBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ModuleMaterialBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ModuleMaterialBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleMaterialBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleMaterialBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ModuleMaterialBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ModuleMaterialBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ModuleMaterialBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ModuleMaterialBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ModuleMaterialBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ModuleMaterialBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ModuleMaterialBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ModuleMaterialBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleMaterialBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleMaterialBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleMaterialBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ModuleMaterialBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleMaterialBasicArray_class_info)
    else:
        class_info = _framework.ModuleMaterialBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleMaterialBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleMaterialBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ModuleMaterialBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleMaterialBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleMaterialBasicArray_swigregister = _framework.ModuleMaterialBasicArray_swigregister
ModuleMaterialBasicArray_swigregister(ModuleMaterialBasicArray)

def ModuleMaterialBasicArray_class_info():
    return _framework.ModuleMaterialBasicArray_class_info()
ModuleMaterialBasicArray_class_info = _framework.ModuleMaterialBasicArray_class_info

def ModuleMaterialBasicArray____class_destructor__(instance, is_array):
    return _framework.ModuleMaterialBasicArray____class_destructor__(instance, is_array)
ModuleMaterialBasicArray____class_destructor__ = _framework.ModuleMaterialBasicArray____class_destructor__

class ModuleMaterialArray(ModuleMaterialBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleMaterialBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleMaterialArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleMaterialBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleMaterialArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleMaterialArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleMaterialArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleMaterialArray_append(self, *args)

    def get_count(self):
        return _framework.ModuleMaterialArray_get_count(self)

    def remove_all(self):
        return _framework.ModuleMaterialArray_remove_all(self)

    def resize(self, *args):
        return _framework.ModuleMaterialArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleMaterialArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleMaterialArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleMaterialArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleMaterialArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ModuleMaterialArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleMaterialArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleMaterialArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleMaterialArray_class_info)
    else:
        class_info = _framework.ModuleMaterialArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleMaterialArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleMaterialArray____class_destructor__
ModuleMaterialArray_swigregister = _framework.ModuleMaterialArray_swigregister
ModuleMaterialArray_swigregister(ModuleMaterialArray)

def ModuleMaterialArray_class_info():
    return _framework.ModuleMaterialArray_class_info()
ModuleMaterialArray_class_info = _framework.ModuleMaterialArray_class_info

def ModuleMaterialArray____class_destructor__(instance, is_array):
    return _framework.ModuleMaterialArray____class_destructor__(instance, is_array)
ModuleMaterialArray____class_destructor__ = _framework.ModuleMaterialArray____class_destructor__

class ModuleMaterialVector(ModuleMaterialBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleMaterialBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleMaterialVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleMaterialBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleMaterialVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleMaterialVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleMaterialVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleMaterialVector_append(self, *args)

    def add(self, *args):
        return _framework.ModuleMaterialVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ModuleMaterialVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ModuleMaterialVector_remove_last(self)

    def empty(self):
        return _framework.ModuleMaterialVector_empty(self)

    def remove_all(self):
        return _framework.ModuleMaterialVector_remove_all(self)

    def clear(self, *args):
        return _framework.ModuleMaterialVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ModuleMaterialVector_remove(self, *args)

    def is_empty(self):
        return _framework.ModuleMaterialVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ModuleMaterialVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ModuleMaterialVector_remove_items(self, item)

    def get_count(self):
        return _framework.ModuleMaterialVector_get_count(self)

    def get_capacity(self):
        return _framework.ModuleMaterialVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ModuleMaterialVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ModuleMaterialVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ModuleMaterialVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ModuleMaterialVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ModuleMaterialVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ModuleMaterialVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleMaterialVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleMaterialVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleMaterialVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleMaterialVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ModuleMaterialVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ModuleMaterialVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ModuleMaterialVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ModuleMaterialVector_item(self, *args)

    def get_data(self):
        return _framework.ModuleMaterialVector_get_data(self)

    def get_memory_size(self):
        return _framework.ModuleMaterialVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleMaterialVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleMaterialVector_class_info)
    else:
        class_info = _framework.ModuleMaterialVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleMaterialVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleMaterialVector____class_destructor__
ModuleMaterialVector_swigregister = _framework.ModuleMaterialVector_swigregister
ModuleMaterialVector_swigregister(ModuleMaterialVector)

def ModuleMaterialVector_class_info():
    return _framework.ModuleMaterialVector_class_info()
ModuleMaterialVector_class_info = _framework.ModuleMaterialVector_class_info

def ModuleMaterialVector____class_destructor__(instance, is_array):
    return _framework.ModuleMaterialVector____class_destructor__(instance, is_array)
ModuleMaterialVector____class_destructor__ = _framework.ModuleMaterialVector____class_destructor__

class ModuleMaterialSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleMaterialSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleMaterialSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleMaterialSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleMaterialSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleMaterialSet_get_count(self)

    def is_empty(self):
        return _framework.ModuleMaterialSet_is_empty(self)

    def exists(self, *args):
        return _framework.ModuleMaterialSet_exists(self, *args)

    def add(self, *args):
        return _framework.ModuleMaterialSet_add(self, *args)

    def remove(self, index):
        return _framework.ModuleMaterialSet_remove(self, index)

    def remove_item(self, item):
        return _framework.ModuleMaterialSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ModuleMaterialSet_remove_set(self, set)

    def remove_all(self):
        return _framework.ModuleMaterialSet_remove_all(self)

    def toggle(self, item):
        return _framework.ModuleMaterialSet_toggle(self, item)

    def back(self, *args):
        return _framework.ModuleMaterialSet_back(self, *args)

    def unite(self, set):
        return _framework.ModuleMaterialSet_unite(self, set)

    def intersect(self, set):
        return _framework.ModuleMaterialSet_intersect(self, set)

    def is_included(self, set):
        return _framework.ModuleMaterialSet_is_included(self, set)

    def get_item(self, index):
        return _framework.ModuleMaterialSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ModuleMaterialSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ModuleMaterialSet___ne__(self, set)

    def get_items(self):
        return _framework.ModuleMaterialSet_get_items(self)

    def get_array(self, array):
        return _framework.ModuleMaterialSet_get_array(self, array)

    def get_list(self, list):
        return _framework.ModuleMaterialSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ModuleMaterialSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ModuleMaterialSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleMaterialSet_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleMaterialSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ModuleMaterialSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleMaterialSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleMaterialSet_swigregister = _framework.ModuleMaterialSet_swigregister
ModuleMaterialSet_swigregister(ModuleMaterialSet)

class ModuleTextureBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleTextureBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleTextureBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ModuleTextureBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ModuleTextureBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleTextureBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleTextureBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ModuleTextureBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ModuleTextureBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ModuleTextureBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ModuleTextureBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ModuleTextureBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ModuleTextureBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ModuleTextureBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ModuleTextureBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleTextureBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleTextureBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleTextureBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ModuleTextureBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleTextureBasicArray_class_info)
    else:
        class_info = _framework.ModuleTextureBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleTextureBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleTextureBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ModuleTextureBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleTextureBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleTextureBasicArray_swigregister = _framework.ModuleTextureBasicArray_swigregister
ModuleTextureBasicArray_swigregister(ModuleTextureBasicArray)

def ModuleTextureBasicArray_class_info():
    return _framework.ModuleTextureBasicArray_class_info()
ModuleTextureBasicArray_class_info = _framework.ModuleTextureBasicArray_class_info

def ModuleTextureBasicArray____class_destructor__(instance, is_array):
    return _framework.ModuleTextureBasicArray____class_destructor__(instance, is_array)
ModuleTextureBasicArray____class_destructor__ = _framework.ModuleTextureBasicArray____class_destructor__

class ModuleTextureArray(ModuleTextureBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleTextureBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleTextureArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleTextureBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleTextureArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleTextureArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleTextureArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleTextureArray_append(self, *args)

    def get_count(self):
        return _framework.ModuleTextureArray_get_count(self)

    def remove_all(self):
        return _framework.ModuleTextureArray_remove_all(self)

    def resize(self, *args):
        return _framework.ModuleTextureArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleTextureArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleTextureArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleTextureArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleTextureArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ModuleTextureArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleTextureArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleTextureArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleTextureArray_class_info)
    else:
        class_info = _framework.ModuleTextureArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleTextureArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleTextureArray____class_destructor__
ModuleTextureArray_swigregister = _framework.ModuleTextureArray_swigregister
ModuleTextureArray_swigregister(ModuleTextureArray)

def ModuleTextureArray_class_info():
    return _framework.ModuleTextureArray_class_info()
ModuleTextureArray_class_info = _framework.ModuleTextureArray_class_info

def ModuleTextureArray____class_destructor__(instance, is_array):
    return _framework.ModuleTextureArray____class_destructor__(instance, is_array)
ModuleTextureArray____class_destructor__ = _framework.ModuleTextureArray____class_destructor__

class ModuleTextureVector(ModuleTextureBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleTextureBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleTextureVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleTextureBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleTextureVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleTextureVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleTextureVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleTextureVector_append(self, *args)

    def add(self, *args):
        return _framework.ModuleTextureVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ModuleTextureVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ModuleTextureVector_remove_last(self)

    def empty(self):
        return _framework.ModuleTextureVector_empty(self)

    def remove_all(self):
        return _framework.ModuleTextureVector_remove_all(self)

    def clear(self, *args):
        return _framework.ModuleTextureVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ModuleTextureVector_remove(self, *args)

    def is_empty(self):
        return _framework.ModuleTextureVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ModuleTextureVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ModuleTextureVector_remove_items(self, item)

    def get_count(self):
        return _framework.ModuleTextureVector_get_count(self)

    def get_capacity(self):
        return _framework.ModuleTextureVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ModuleTextureVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ModuleTextureVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ModuleTextureVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ModuleTextureVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ModuleTextureVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ModuleTextureVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleTextureVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleTextureVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleTextureVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleTextureVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ModuleTextureVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ModuleTextureVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ModuleTextureVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ModuleTextureVector_item(self, *args)

    def get_data(self):
        return _framework.ModuleTextureVector_get_data(self)

    def get_memory_size(self):
        return _framework.ModuleTextureVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleTextureVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleTextureVector_class_info)
    else:
        class_info = _framework.ModuleTextureVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleTextureVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleTextureVector____class_destructor__
ModuleTextureVector_swigregister = _framework.ModuleTextureVector_swigregister
ModuleTextureVector_swigregister(ModuleTextureVector)

def ModuleTextureVector_class_info():
    return _framework.ModuleTextureVector_class_info()
ModuleTextureVector_class_info = _framework.ModuleTextureVector_class_info

def ModuleTextureVector____class_destructor__(instance, is_array):
    return _framework.ModuleTextureVector____class_destructor__(instance, is_array)
ModuleTextureVector____class_destructor__ = _framework.ModuleTextureVector____class_destructor__

class ModuleTextureSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleTextureSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleTextureSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleTextureSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleTextureSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleTextureSet_get_count(self)

    def is_empty(self):
        return _framework.ModuleTextureSet_is_empty(self)

    def exists(self, *args):
        return _framework.ModuleTextureSet_exists(self, *args)

    def add(self, *args):
        return _framework.ModuleTextureSet_add(self, *args)

    def remove(self, index):
        return _framework.ModuleTextureSet_remove(self, index)

    def remove_item(self, item):
        return _framework.ModuleTextureSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ModuleTextureSet_remove_set(self, set)

    def remove_all(self):
        return _framework.ModuleTextureSet_remove_all(self)

    def toggle(self, item):
        return _framework.ModuleTextureSet_toggle(self, item)

    def back(self, *args):
        return _framework.ModuleTextureSet_back(self, *args)

    def unite(self, set):
        return _framework.ModuleTextureSet_unite(self, set)

    def intersect(self, set):
        return _framework.ModuleTextureSet_intersect(self, set)

    def is_included(self, set):
        return _framework.ModuleTextureSet_is_included(self, set)

    def get_item(self, index):
        return _framework.ModuleTextureSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ModuleTextureSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ModuleTextureSet___ne__(self, set)

    def get_items(self):
        return _framework.ModuleTextureSet_get_items(self)

    def get_array(self, array):
        return _framework.ModuleTextureSet_get_array(self, array)

    def get_list(self, list):
        return _framework.ModuleTextureSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ModuleTextureSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ModuleTextureSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleTextureSet_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleTextureSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ModuleTextureSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleTextureSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleTextureSet_swigregister = _framework.ModuleTextureSet_swigregister
ModuleTextureSet_swigregister(ModuleTextureSet)

class ModuleGeometryBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleGeometryBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleGeometryBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ModuleGeometryBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ModuleGeometryBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleGeometryBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleGeometryBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ModuleGeometryBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ModuleGeometryBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ModuleGeometryBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ModuleGeometryBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ModuleGeometryBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ModuleGeometryBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ModuleGeometryBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ModuleGeometryBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleGeometryBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleGeometryBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleGeometryBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ModuleGeometryBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleGeometryBasicArray_class_info)
    else:
        class_info = _framework.ModuleGeometryBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleGeometryBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleGeometryBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ModuleGeometryBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleGeometryBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleGeometryBasicArray_swigregister = _framework.ModuleGeometryBasicArray_swigregister
ModuleGeometryBasicArray_swigregister(ModuleGeometryBasicArray)

def ModuleGeometryBasicArray_class_info():
    return _framework.ModuleGeometryBasicArray_class_info()
ModuleGeometryBasicArray_class_info = _framework.ModuleGeometryBasicArray_class_info

def ModuleGeometryBasicArray____class_destructor__(instance, is_array):
    return _framework.ModuleGeometryBasicArray____class_destructor__(instance, is_array)
ModuleGeometryBasicArray____class_destructor__ = _framework.ModuleGeometryBasicArray____class_destructor__

class ModuleGeometryArray(ModuleGeometryBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleGeometryBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleGeometryArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleGeometryBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleGeometryArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleGeometryArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleGeometryArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleGeometryArray_append(self, *args)

    def get_count(self):
        return _framework.ModuleGeometryArray_get_count(self)

    def remove_all(self):
        return _framework.ModuleGeometryArray_remove_all(self)

    def resize(self, *args):
        return _framework.ModuleGeometryArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleGeometryArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleGeometryArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleGeometryArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleGeometryArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ModuleGeometryArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleGeometryArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleGeometryArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleGeometryArray_class_info)
    else:
        class_info = _framework.ModuleGeometryArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleGeometryArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleGeometryArray____class_destructor__
ModuleGeometryArray_swigregister = _framework.ModuleGeometryArray_swigregister
ModuleGeometryArray_swigregister(ModuleGeometryArray)

def ModuleGeometryArray_class_info():
    return _framework.ModuleGeometryArray_class_info()
ModuleGeometryArray_class_info = _framework.ModuleGeometryArray_class_info

def ModuleGeometryArray____class_destructor__(instance, is_array):
    return _framework.ModuleGeometryArray____class_destructor__(instance, is_array)
ModuleGeometryArray____class_destructor__ = _framework.ModuleGeometryArray____class_destructor__

class ModuleGeometryVector(ModuleGeometryBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleGeometryBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleGeometryVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleGeometryBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleGeometryVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleGeometryVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleGeometryVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleGeometryVector_append(self, *args)

    def add(self, *args):
        return _framework.ModuleGeometryVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ModuleGeometryVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ModuleGeometryVector_remove_last(self)

    def empty(self):
        return _framework.ModuleGeometryVector_empty(self)

    def remove_all(self):
        return _framework.ModuleGeometryVector_remove_all(self)

    def clear(self, *args):
        return _framework.ModuleGeometryVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ModuleGeometryVector_remove(self, *args)

    def is_empty(self):
        return _framework.ModuleGeometryVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ModuleGeometryVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ModuleGeometryVector_remove_items(self, item)

    def get_count(self):
        return _framework.ModuleGeometryVector_get_count(self)

    def get_capacity(self):
        return _framework.ModuleGeometryVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ModuleGeometryVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ModuleGeometryVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ModuleGeometryVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ModuleGeometryVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ModuleGeometryVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ModuleGeometryVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleGeometryVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleGeometryVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleGeometryVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleGeometryVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ModuleGeometryVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ModuleGeometryVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ModuleGeometryVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ModuleGeometryVector_item(self, *args)

    def get_data(self):
        return _framework.ModuleGeometryVector_get_data(self)

    def get_memory_size(self):
        return _framework.ModuleGeometryVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleGeometryVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleGeometryVector_class_info)
    else:
        class_info = _framework.ModuleGeometryVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleGeometryVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleGeometryVector____class_destructor__
ModuleGeometryVector_swigregister = _framework.ModuleGeometryVector_swigregister
ModuleGeometryVector_swigregister(ModuleGeometryVector)

def ModuleGeometryVector_class_info():
    return _framework.ModuleGeometryVector_class_info()
ModuleGeometryVector_class_info = _framework.ModuleGeometryVector_class_info

def ModuleGeometryVector____class_destructor__(instance, is_array):
    return _framework.ModuleGeometryVector____class_destructor__(instance, is_array)
ModuleGeometryVector____class_destructor__ = _framework.ModuleGeometryVector____class_destructor__

class ModuleGeometrySet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleGeometrySet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleGeometrySet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleGeometrySet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleGeometrySet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleGeometrySet_get_count(self)

    def is_empty(self):
        return _framework.ModuleGeometrySet_is_empty(self)

    def exists(self, *args):
        return _framework.ModuleGeometrySet_exists(self, *args)

    def add(self, *args):
        return _framework.ModuleGeometrySet_add(self, *args)

    def remove(self, index):
        return _framework.ModuleGeometrySet_remove(self, index)

    def remove_item(self, item):
        return _framework.ModuleGeometrySet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ModuleGeometrySet_remove_set(self, set)

    def remove_all(self):
        return _framework.ModuleGeometrySet_remove_all(self)

    def toggle(self, item):
        return _framework.ModuleGeometrySet_toggle(self, item)

    def back(self, *args):
        return _framework.ModuleGeometrySet_back(self, *args)

    def unite(self, set):
        return _framework.ModuleGeometrySet_unite(self, set)

    def intersect(self, set):
        return _framework.ModuleGeometrySet_intersect(self, set)

    def is_included(self, set):
        return _framework.ModuleGeometrySet_is_included(self, set)

    def get_item(self, index):
        return _framework.ModuleGeometrySet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ModuleGeometrySet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ModuleGeometrySet___ne__(self, set)

    def get_items(self):
        return _framework.ModuleGeometrySet_get_items(self)

    def get_array(self, array):
        return _framework.ModuleGeometrySet_get_array(self, array)

    def get_list(self, list):
        return _framework.ModuleGeometrySet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ModuleGeometrySet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ModuleGeometrySet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleGeometrySet_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleGeometrySet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ModuleGeometrySet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleGeometrySet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleGeometrySet_swigregister = _framework.ModuleGeometrySet_swigregister
ModuleGeometrySet_swigregister(ModuleGeometrySet)

class ModuleDisplacementBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleDisplacementBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleDisplacementBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ModuleDisplacementBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ModuleDisplacementBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleDisplacementBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleDisplacementBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ModuleDisplacementBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ModuleDisplacementBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ModuleDisplacementBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ModuleDisplacementBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ModuleDisplacementBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ModuleDisplacementBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ModuleDisplacementBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ModuleDisplacementBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleDisplacementBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleDisplacementBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleDisplacementBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ModuleDisplacementBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleDisplacementBasicArray_class_info)
    else:
        class_info = _framework.ModuleDisplacementBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleDisplacementBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleDisplacementBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ModuleDisplacementBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleDisplacementBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleDisplacementBasicArray_swigregister = _framework.ModuleDisplacementBasicArray_swigregister
ModuleDisplacementBasicArray_swigregister(ModuleDisplacementBasicArray)

def ModuleDisplacementBasicArray_class_info():
    return _framework.ModuleDisplacementBasicArray_class_info()
ModuleDisplacementBasicArray_class_info = _framework.ModuleDisplacementBasicArray_class_info

def ModuleDisplacementBasicArray____class_destructor__(instance, is_array):
    return _framework.ModuleDisplacementBasicArray____class_destructor__(instance, is_array)
ModuleDisplacementBasicArray____class_destructor__ = _framework.ModuleDisplacementBasicArray____class_destructor__

class ModuleDisplacementArray(ModuleDisplacementBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleDisplacementBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleDisplacementArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleDisplacementBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleDisplacementArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleDisplacementArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleDisplacementArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleDisplacementArray_append(self, *args)

    def get_count(self):
        return _framework.ModuleDisplacementArray_get_count(self)

    def remove_all(self):
        return _framework.ModuleDisplacementArray_remove_all(self)

    def resize(self, *args):
        return _framework.ModuleDisplacementArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleDisplacementArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleDisplacementArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleDisplacementArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleDisplacementArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ModuleDisplacementArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleDisplacementArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleDisplacementArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleDisplacementArray_class_info)
    else:
        class_info = _framework.ModuleDisplacementArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleDisplacementArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleDisplacementArray____class_destructor__
ModuleDisplacementArray_swigregister = _framework.ModuleDisplacementArray_swigregister
ModuleDisplacementArray_swigregister(ModuleDisplacementArray)

def ModuleDisplacementArray_class_info():
    return _framework.ModuleDisplacementArray_class_info()
ModuleDisplacementArray_class_info = _framework.ModuleDisplacementArray_class_info

def ModuleDisplacementArray____class_destructor__(instance, is_array):
    return _framework.ModuleDisplacementArray____class_destructor__(instance, is_array)
ModuleDisplacementArray____class_destructor__ = _framework.ModuleDisplacementArray____class_destructor__

class ModuleDisplacementVector(ModuleDisplacementBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleDisplacementBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleDisplacementVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleDisplacementBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleDisplacementVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleDisplacementVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleDisplacementVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleDisplacementVector_append(self, *args)

    def add(self, *args):
        return _framework.ModuleDisplacementVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ModuleDisplacementVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ModuleDisplacementVector_remove_last(self)

    def empty(self):
        return _framework.ModuleDisplacementVector_empty(self)

    def remove_all(self):
        return _framework.ModuleDisplacementVector_remove_all(self)

    def clear(self, *args):
        return _framework.ModuleDisplacementVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ModuleDisplacementVector_remove(self, *args)

    def is_empty(self):
        return _framework.ModuleDisplacementVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ModuleDisplacementVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ModuleDisplacementVector_remove_items(self, item)

    def get_count(self):
        return _framework.ModuleDisplacementVector_get_count(self)

    def get_capacity(self):
        return _framework.ModuleDisplacementVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ModuleDisplacementVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ModuleDisplacementVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ModuleDisplacementVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ModuleDisplacementVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ModuleDisplacementVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ModuleDisplacementVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleDisplacementVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleDisplacementVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleDisplacementVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleDisplacementVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ModuleDisplacementVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ModuleDisplacementVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ModuleDisplacementVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ModuleDisplacementVector_item(self, *args)

    def get_data(self):
        return _framework.ModuleDisplacementVector_get_data(self)

    def get_memory_size(self):
        return _framework.ModuleDisplacementVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleDisplacementVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleDisplacementVector_class_info)
    else:
        class_info = _framework.ModuleDisplacementVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleDisplacementVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleDisplacementVector____class_destructor__
ModuleDisplacementVector_swigregister = _framework.ModuleDisplacementVector_swigregister
ModuleDisplacementVector_swigregister(ModuleDisplacementVector)

def ModuleDisplacementVector_class_info():
    return _framework.ModuleDisplacementVector_class_info()
ModuleDisplacementVector_class_info = _framework.ModuleDisplacementVector_class_info

def ModuleDisplacementVector____class_destructor__(instance, is_array):
    return _framework.ModuleDisplacementVector____class_destructor__(instance, is_array)
ModuleDisplacementVector____class_destructor__ = _framework.ModuleDisplacementVector____class_destructor__

class ModuleDisplacementSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleDisplacementSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleDisplacementSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleDisplacementSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleDisplacementSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleDisplacementSet_get_count(self)

    def is_empty(self):
        return _framework.ModuleDisplacementSet_is_empty(self)

    def exists(self, *args):
        return _framework.ModuleDisplacementSet_exists(self, *args)

    def add(self, *args):
        return _framework.ModuleDisplacementSet_add(self, *args)

    def remove(self, index):
        return _framework.ModuleDisplacementSet_remove(self, index)

    def remove_item(self, item):
        return _framework.ModuleDisplacementSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ModuleDisplacementSet_remove_set(self, set)

    def remove_all(self):
        return _framework.ModuleDisplacementSet_remove_all(self)

    def toggle(self, item):
        return _framework.ModuleDisplacementSet_toggle(self, item)

    def back(self, *args):
        return _framework.ModuleDisplacementSet_back(self, *args)

    def unite(self, set):
        return _framework.ModuleDisplacementSet_unite(self, set)

    def intersect(self, set):
        return _framework.ModuleDisplacementSet_intersect(self, set)

    def is_included(self, set):
        return _framework.ModuleDisplacementSet_is_included(self, set)

    def get_item(self, index):
        return _framework.ModuleDisplacementSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ModuleDisplacementSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ModuleDisplacementSet___ne__(self, set)

    def get_items(self):
        return _framework.ModuleDisplacementSet_get_items(self)

    def get_array(self, array):
        return _framework.ModuleDisplacementSet_get_array(self, array)

    def get_list(self, list):
        return _framework.ModuleDisplacementSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ModuleDisplacementSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ModuleDisplacementSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleDisplacementSet_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleDisplacementSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ModuleDisplacementSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleDisplacementSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleDisplacementSet_swigregister = _framework.ModuleDisplacementSet_swigregister
ModuleDisplacementSet_swigregister(ModuleDisplacementSet)

class ModuleSceneObjectBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObjectBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObjectBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ModuleSceneObjectBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ModuleSceneObjectBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneObjectBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleSceneObjectBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ModuleSceneObjectBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ModuleSceneObjectBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ModuleSceneObjectBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ModuleSceneObjectBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ModuleSceneObjectBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ModuleSceneObjectBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ModuleSceneObjectBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ModuleSceneObjectBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleSceneObjectBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleSceneObjectBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleSceneObjectBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ModuleSceneObjectBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneObjectBasicArray_class_info)
    else:
        class_info = _framework.ModuleSceneObjectBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneObjectBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneObjectBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ModuleSceneObjectBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleSceneObjectBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleSceneObjectBasicArray_swigregister = _framework.ModuleSceneObjectBasicArray_swigregister
ModuleSceneObjectBasicArray_swigregister(ModuleSceneObjectBasicArray)

def ModuleSceneObjectBasicArray_class_info():
    return _framework.ModuleSceneObjectBasicArray_class_info()
ModuleSceneObjectBasicArray_class_info = _framework.ModuleSceneObjectBasicArray_class_info

def ModuleSceneObjectBasicArray____class_destructor__(instance, is_array):
    return _framework.ModuleSceneObjectBasicArray____class_destructor__(instance, is_array)
ModuleSceneObjectBasicArray____class_destructor__ = _framework.ModuleSceneObjectBasicArray____class_destructor__

class ModuleSceneObjectArray(ModuleSceneObjectBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneObjectBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObjectArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneObjectBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObjectArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleSceneObjectArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneObjectArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleSceneObjectArray_append(self, *args)

    def get_count(self):
        return _framework.ModuleSceneObjectArray_get_count(self)

    def remove_all(self):
        return _framework.ModuleSceneObjectArray_remove_all(self)

    def resize(self, *args):
        return _framework.ModuleSceneObjectArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleSceneObjectArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleSceneObjectArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleSceneObjectArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleSceneObjectArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ModuleSceneObjectArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleSceneObjectArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleSceneObjectArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneObjectArray_class_info)
    else:
        class_info = _framework.ModuleSceneObjectArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneObjectArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneObjectArray____class_destructor__
ModuleSceneObjectArray_swigregister = _framework.ModuleSceneObjectArray_swigregister
ModuleSceneObjectArray_swigregister(ModuleSceneObjectArray)

def ModuleSceneObjectArray_class_info():
    return _framework.ModuleSceneObjectArray_class_info()
ModuleSceneObjectArray_class_info = _framework.ModuleSceneObjectArray_class_info

def ModuleSceneObjectArray____class_destructor__(instance, is_array):
    return _framework.ModuleSceneObjectArray____class_destructor__(instance, is_array)
ModuleSceneObjectArray____class_destructor__ = _framework.ModuleSceneObjectArray____class_destructor__

class ModuleSceneObjectVector(ModuleSceneObjectBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneObjectBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObjectVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneObjectBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObjectVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleSceneObjectVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneObjectVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleSceneObjectVector_append(self, *args)

    def add(self, *args):
        return _framework.ModuleSceneObjectVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ModuleSceneObjectVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ModuleSceneObjectVector_remove_last(self)

    def empty(self):
        return _framework.ModuleSceneObjectVector_empty(self)

    def remove_all(self):
        return _framework.ModuleSceneObjectVector_remove_all(self)

    def clear(self, *args):
        return _framework.ModuleSceneObjectVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ModuleSceneObjectVector_remove(self, *args)

    def is_empty(self):
        return _framework.ModuleSceneObjectVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ModuleSceneObjectVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ModuleSceneObjectVector_remove_items(self, item)

    def get_count(self):
        return _framework.ModuleSceneObjectVector_get_count(self)

    def get_capacity(self):
        return _framework.ModuleSceneObjectVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ModuleSceneObjectVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ModuleSceneObjectVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ModuleSceneObjectVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ModuleSceneObjectVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ModuleSceneObjectVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ModuleSceneObjectVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleSceneObjectVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleSceneObjectVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleSceneObjectVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleSceneObjectVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ModuleSceneObjectVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ModuleSceneObjectVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ModuleSceneObjectVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ModuleSceneObjectVector_item(self, *args)

    def get_data(self):
        return _framework.ModuleSceneObjectVector_get_data(self)

    def get_memory_size(self):
        return _framework.ModuleSceneObjectVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleSceneObjectVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneObjectVector_class_info)
    else:
        class_info = _framework.ModuleSceneObjectVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneObjectVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneObjectVector____class_destructor__
ModuleSceneObjectVector_swigregister = _framework.ModuleSceneObjectVector_swigregister
ModuleSceneObjectVector_swigregister(ModuleSceneObjectVector)

def ModuleSceneObjectVector_class_info():
    return _framework.ModuleSceneObjectVector_class_info()
ModuleSceneObjectVector_class_info = _framework.ModuleSceneObjectVector_class_info

def ModuleSceneObjectVector____class_destructor__(instance, is_array):
    return _framework.ModuleSceneObjectVector____class_destructor__(instance, is_array)
ModuleSceneObjectVector____class_destructor__ = _framework.ModuleSceneObjectVector____class_destructor__

class ModuleSceneObjectSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObjectSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObjectSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleSceneObjectSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneObjectSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleSceneObjectSet_get_count(self)

    def is_empty(self):
        return _framework.ModuleSceneObjectSet_is_empty(self)

    def exists(self, *args):
        return _framework.ModuleSceneObjectSet_exists(self, *args)

    def add(self, *args):
        return _framework.ModuleSceneObjectSet_add(self, *args)

    def remove(self, index):
        return _framework.ModuleSceneObjectSet_remove(self, index)

    def remove_item(self, item):
        return _framework.ModuleSceneObjectSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ModuleSceneObjectSet_remove_set(self, set)

    def remove_all(self):
        return _framework.ModuleSceneObjectSet_remove_all(self)

    def toggle(self, item):
        return _framework.ModuleSceneObjectSet_toggle(self, item)

    def back(self, *args):
        return _framework.ModuleSceneObjectSet_back(self, *args)

    def unite(self, set):
        return _framework.ModuleSceneObjectSet_unite(self, set)

    def intersect(self, set):
        return _framework.ModuleSceneObjectSet_intersect(self, set)

    def is_included(self, set):
        return _framework.ModuleSceneObjectSet_is_included(self, set)

    def get_item(self, index):
        return _framework.ModuleSceneObjectSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ModuleSceneObjectSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ModuleSceneObjectSet___ne__(self, set)

    def get_items(self):
        return _framework.ModuleSceneObjectSet_get_items(self)

    def get_array(self, array):
        return _framework.ModuleSceneObjectSet_get_array(self, array)

    def get_list(self, list):
        return _framework.ModuleSceneObjectSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ModuleSceneObjectSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ModuleSceneObjectSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleSceneObjectSet_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleSceneObjectSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ModuleSceneObjectSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleSceneObjectSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleSceneObjectSet_swigregister = _framework.ModuleSceneObjectSet_swigregister
ModuleSceneObjectSet_swigregister(ModuleSceneObjectSet)

class ModuleSceneObjectGeometryBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObjectGeometryBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObjectGeometryBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ModuleSceneObjectGeometryBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ModuleSceneObjectGeometryBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneObjectGeometryBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleSceneObjectGeometryBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ModuleSceneObjectGeometryBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ModuleSceneObjectGeometryBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ModuleSceneObjectGeometryBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ModuleSceneObjectGeometryBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ModuleSceneObjectGeometryBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ModuleSceneObjectGeometryBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ModuleSceneObjectGeometryBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ModuleSceneObjectGeometryBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleSceneObjectGeometryBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleSceneObjectGeometryBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleSceneObjectGeometryBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ModuleSceneObjectGeometryBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneObjectGeometryBasicArray_class_info)
    else:
        class_info = _framework.ModuleSceneObjectGeometryBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneObjectGeometryBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneObjectGeometryBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ModuleSceneObjectGeometryBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleSceneObjectGeometryBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleSceneObjectGeometryBasicArray_swigregister = _framework.ModuleSceneObjectGeometryBasicArray_swigregister
ModuleSceneObjectGeometryBasicArray_swigregister(ModuleSceneObjectGeometryBasicArray)

def ModuleSceneObjectGeometryBasicArray_class_info():
    return _framework.ModuleSceneObjectGeometryBasicArray_class_info()
ModuleSceneObjectGeometryBasicArray_class_info = _framework.ModuleSceneObjectGeometryBasicArray_class_info

def ModuleSceneObjectGeometryBasicArray____class_destructor__(instance, is_array):
    return _framework.ModuleSceneObjectGeometryBasicArray____class_destructor__(instance, is_array)
ModuleSceneObjectGeometryBasicArray____class_destructor__ = _framework.ModuleSceneObjectGeometryBasicArray____class_destructor__

class ModuleSceneObjectGeometryArray(ModuleSceneObjectGeometryBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneObjectGeometryBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObjectGeometryArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneObjectGeometryBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObjectGeometryArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleSceneObjectGeometryArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneObjectGeometryArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleSceneObjectGeometryArray_append(self, *args)

    def get_count(self):
        return _framework.ModuleSceneObjectGeometryArray_get_count(self)

    def remove_all(self):
        return _framework.ModuleSceneObjectGeometryArray_remove_all(self)

    def resize(self, *args):
        return _framework.ModuleSceneObjectGeometryArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleSceneObjectGeometryArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleSceneObjectGeometryArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleSceneObjectGeometryArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleSceneObjectGeometryArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ModuleSceneObjectGeometryArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleSceneObjectGeometryArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleSceneObjectGeometryArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneObjectGeometryArray_class_info)
    else:
        class_info = _framework.ModuleSceneObjectGeometryArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneObjectGeometryArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneObjectGeometryArray____class_destructor__
ModuleSceneObjectGeometryArray_swigregister = _framework.ModuleSceneObjectGeometryArray_swigregister
ModuleSceneObjectGeometryArray_swigregister(ModuleSceneObjectGeometryArray)

def ModuleSceneObjectGeometryArray_class_info():
    return _framework.ModuleSceneObjectGeometryArray_class_info()
ModuleSceneObjectGeometryArray_class_info = _framework.ModuleSceneObjectGeometryArray_class_info

def ModuleSceneObjectGeometryArray____class_destructor__(instance, is_array):
    return _framework.ModuleSceneObjectGeometryArray____class_destructor__(instance, is_array)
ModuleSceneObjectGeometryArray____class_destructor__ = _framework.ModuleSceneObjectGeometryArray____class_destructor__

class ModuleSceneObjectGeometryVector(ModuleSceneObjectGeometryBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneObjectGeometryBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneObjectGeometryVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneObjectGeometryBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneObjectGeometryVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleSceneObjectGeometryVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneObjectGeometryVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleSceneObjectGeometryVector_append(self, *args)

    def add(self, *args):
        return _framework.ModuleSceneObjectGeometryVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ModuleSceneObjectGeometryVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ModuleSceneObjectGeometryVector_remove_last(self)

    def empty(self):
        return _framework.ModuleSceneObjectGeometryVector_empty(self)

    def remove_all(self):
        return _framework.ModuleSceneObjectGeometryVector_remove_all(self)

    def clear(self, *args):
        return _framework.ModuleSceneObjectGeometryVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ModuleSceneObjectGeometryVector_remove(self, *args)

    def is_empty(self):
        return _framework.ModuleSceneObjectGeometryVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ModuleSceneObjectGeometryVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ModuleSceneObjectGeometryVector_remove_items(self, item)

    def get_count(self):
        return _framework.ModuleSceneObjectGeometryVector_get_count(self)

    def get_capacity(self):
        return _framework.ModuleSceneObjectGeometryVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ModuleSceneObjectGeometryVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ModuleSceneObjectGeometryVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ModuleSceneObjectGeometryVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ModuleSceneObjectGeometryVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ModuleSceneObjectGeometryVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ModuleSceneObjectGeometryVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleSceneObjectGeometryVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleSceneObjectGeometryVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleSceneObjectGeometryVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleSceneObjectGeometryVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ModuleSceneObjectGeometryVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ModuleSceneObjectGeometryVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ModuleSceneObjectGeometryVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ModuleSceneObjectGeometryVector_item(self, *args)

    def get_data(self):
        return _framework.ModuleSceneObjectGeometryVector_get_data(self)

    def get_memory_size(self):
        return _framework.ModuleSceneObjectGeometryVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleSceneObjectGeometryVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneObjectGeometryVector_class_info)
    else:
        class_info = _framework.ModuleSceneObjectGeometryVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneObjectGeometryVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneObjectGeometryVector____class_destructor__
ModuleSceneObjectGeometryVector_swigregister = _framework.ModuleSceneObjectGeometryVector_swigregister
ModuleSceneObjectGeometryVector_swigregister(ModuleSceneObjectGeometryVector)

def ModuleSceneObjectGeometryVector_class_info():
    return _framework.ModuleSceneObjectGeometryVector_class_info()
ModuleSceneObjectGeometryVector_class_info = _framework.ModuleSceneObjectGeometryVector_class_info

def ModuleSceneObjectGeometryVector____class_destructor__(instance, is_array):
    return _framework.ModuleSceneObjectGeometryVector____class_destructor__(instance, is_array)
ModuleSceneObjectGeometryVector____class_destructor__ = _framework.ModuleSceneObjectGeometryVector____class_destructor__

class ModuleSceneItemBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneItemBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneItemBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ModuleSceneItemBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ModuleSceneItemBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneItemBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleSceneItemBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ModuleSceneItemBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ModuleSceneItemBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ModuleSceneItemBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ModuleSceneItemBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ModuleSceneItemBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ModuleSceneItemBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ModuleSceneItemBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ModuleSceneItemBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleSceneItemBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleSceneItemBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleSceneItemBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ModuleSceneItemBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneItemBasicArray_class_info)
    else:
        class_info = _framework.ModuleSceneItemBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneItemBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneItemBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ModuleSceneItemBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleSceneItemBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleSceneItemBasicArray_swigregister = _framework.ModuleSceneItemBasicArray_swigregister
ModuleSceneItemBasicArray_swigregister(ModuleSceneItemBasicArray)

def ModuleSceneItemBasicArray_class_info():
    return _framework.ModuleSceneItemBasicArray_class_info()
ModuleSceneItemBasicArray_class_info = _framework.ModuleSceneItemBasicArray_class_info

def ModuleSceneItemBasicArray____class_destructor__(instance, is_array):
    return _framework.ModuleSceneItemBasicArray____class_destructor__(instance, is_array)
ModuleSceneItemBasicArray____class_destructor__ = _framework.ModuleSceneItemBasicArray____class_destructor__

class ModuleSceneItemArray(ModuleSceneItemBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneItemBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneItemArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneItemBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneItemArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleSceneItemArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneItemArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleSceneItemArray_append(self, *args)

    def get_count(self):
        return _framework.ModuleSceneItemArray_get_count(self)

    def remove_all(self):
        return _framework.ModuleSceneItemArray_remove_all(self)

    def resize(self, *args):
        return _framework.ModuleSceneItemArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleSceneItemArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleSceneItemArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleSceneItemArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleSceneItemArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ModuleSceneItemArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleSceneItemArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleSceneItemArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneItemArray_class_info)
    else:
        class_info = _framework.ModuleSceneItemArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneItemArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneItemArray____class_destructor__
ModuleSceneItemArray_swigregister = _framework.ModuleSceneItemArray_swigregister
ModuleSceneItemArray_swigregister(ModuleSceneItemArray)

def ModuleSceneItemArray_class_info():
    return _framework.ModuleSceneItemArray_class_info()
ModuleSceneItemArray_class_info = _framework.ModuleSceneItemArray_class_info

def ModuleSceneItemArray____class_destructor__(instance, is_array):
    return _framework.ModuleSceneItemArray____class_destructor__(instance, is_array)
ModuleSceneItemArray____class_destructor__ = _framework.ModuleSceneItemArray____class_destructor__

class ModuleSceneItemVector(ModuleSceneItemBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleSceneItemBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneItemVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleSceneItemBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneItemVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleSceneItemVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneItemVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleSceneItemVector_append(self, *args)

    def add(self, *args):
        return _framework.ModuleSceneItemVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ModuleSceneItemVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ModuleSceneItemVector_remove_last(self)

    def empty(self):
        return _framework.ModuleSceneItemVector_empty(self)

    def remove_all(self):
        return _framework.ModuleSceneItemVector_remove_all(self)

    def clear(self, *args):
        return _framework.ModuleSceneItemVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ModuleSceneItemVector_remove(self, *args)

    def is_empty(self):
        return _framework.ModuleSceneItemVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ModuleSceneItemVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ModuleSceneItemVector_remove_items(self, item)

    def get_count(self):
        return _framework.ModuleSceneItemVector_get_count(self)

    def get_capacity(self):
        return _framework.ModuleSceneItemVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ModuleSceneItemVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ModuleSceneItemVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ModuleSceneItemVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ModuleSceneItemVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ModuleSceneItemVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ModuleSceneItemVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleSceneItemVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleSceneItemVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleSceneItemVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleSceneItemVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ModuleSceneItemVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ModuleSceneItemVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ModuleSceneItemVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ModuleSceneItemVector_item(self, *args)

    def get_data(self):
        return _framework.ModuleSceneItemVector_get_data(self)

    def get_memory_size(self):
        return _framework.ModuleSceneItemVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleSceneItemVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleSceneItemVector_class_info)
    else:
        class_info = _framework.ModuleSceneItemVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleSceneItemVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleSceneItemVector____class_destructor__
ModuleSceneItemVector_swigregister = _framework.ModuleSceneItemVector_swigregister
ModuleSceneItemVector_swigregister(ModuleSceneItemVector)

def ModuleSceneItemVector_class_info():
    return _framework.ModuleSceneItemVector_class_info()
ModuleSceneItemVector_class_info = _framework.ModuleSceneItemVector_class_info

def ModuleSceneItemVector____class_destructor__(instance, is_array):
    return _framework.ModuleSceneItemVector____class_destructor__(instance, is_array)
ModuleSceneItemVector____class_destructor__ = _framework.ModuleSceneItemVector____class_destructor__

class ModuleSceneItemSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleSceneItemSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleSceneItemSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleSceneItemSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleSceneItemSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleSceneItemSet_get_count(self)

    def is_empty(self):
        return _framework.ModuleSceneItemSet_is_empty(self)

    def exists(self, *args):
        return _framework.ModuleSceneItemSet_exists(self, *args)

    def add(self, *args):
        return _framework.ModuleSceneItemSet_add(self, *args)

    def remove(self, index):
        return _framework.ModuleSceneItemSet_remove(self, index)

    def remove_item(self, item):
        return _framework.ModuleSceneItemSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ModuleSceneItemSet_remove_set(self, set)

    def remove_all(self):
        return _framework.ModuleSceneItemSet_remove_all(self)

    def toggle(self, item):
        return _framework.ModuleSceneItemSet_toggle(self, item)

    def back(self, *args):
        return _framework.ModuleSceneItemSet_back(self, *args)

    def unite(self, set):
        return _framework.ModuleSceneItemSet_unite(self, set)

    def intersect(self, set):
        return _framework.ModuleSceneItemSet_intersect(self, set)

    def is_included(self, set):
        return _framework.ModuleSceneItemSet_is_included(self, set)

    def get_item(self, index):
        return _framework.ModuleSceneItemSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ModuleSceneItemSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ModuleSceneItemSet___ne__(self, set)

    def get_items(self):
        return _framework.ModuleSceneItemSet_get_items(self)

    def get_array(self, array):
        return _framework.ModuleSceneItemSet_get_array(self, array)

    def get_list(self, list):
        return _framework.ModuleSceneItemSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ModuleSceneItemSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ModuleSceneItemSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleSceneItemSet_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleSceneItemSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ModuleSceneItemSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleSceneItemSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleSceneItemSet_swigregister = _framework.ModuleSceneItemSet_swigregister
ModuleSceneItemSet_swigregister(ModuleSceneItemSet)

class ModuleLightBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLightBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLightBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ModuleLightBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ModuleLightBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLightBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleLightBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ModuleLightBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ModuleLightBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ModuleLightBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ModuleLightBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ModuleLightBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ModuleLightBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ModuleLightBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ModuleLightBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleLightBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleLightBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleLightBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ModuleLightBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleLightBasicArray_class_info)
    else:
        class_info = _framework.ModuleLightBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleLightBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleLightBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ModuleLightBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleLightBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleLightBasicArray_swigregister = _framework.ModuleLightBasicArray_swigregister
ModuleLightBasicArray_swigregister(ModuleLightBasicArray)

def ModuleLightBasicArray_class_info():
    return _framework.ModuleLightBasicArray_class_info()
ModuleLightBasicArray_class_info = _framework.ModuleLightBasicArray_class_info

def ModuleLightBasicArray____class_destructor__(instance, is_array):
    return _framework.ModuleLightBasicArray____class_destructor__(instance, is_array)
ModuleLightBasicArray____class_destructor__ = _framework.ModuleLightBasicArray____class_destructor__

class ModuleLightArray(ModuleLightBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleLightBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLightArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleLightBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLightArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleLightArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLightArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleLightArray_append(self, *args)

    def get_count(self):
        return _framework.ModuleLightArray_get_count(self)

    def remove_all(self):
        return _framework.ModuleLightArray_remove_all(self)

    def resize(self, *args):
        return _framework.ModuleLightArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleLightArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleLightArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleLightArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleLightArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ModuleLightArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleLightArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleLightArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleLightArray_class_info)
    else:
        class_info = _framework.ModuleLightArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleLightArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleLightArray____class_destructor__
ModuleLightArray_swigregister = _framework.ModuleLightArray_swigregister
ModuleLightArray_swigregister(ModuleLightArray)

def ModuleLightArray_class_info():
    return _framework.ModuleLightArray_class_info()
ModuleLightArray_class_info = _framework.ModuleLightArray_class_info

def ModuleLightArray____class_destructor__(instance, is_array):
    return _framework.ModuleLightArray____class_destructor__(instance, is_array)
ModuleLightArray____class_destructor__ = _framework.ModuleLightArray____class_destructor__

class ModuleLightVector(ModuleLightBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleLightBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLightVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleLightBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLightVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleLightVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLightVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleLightVector_append(self, *args)

    def add(self, *args):
        return _framework.ModuleLightVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ModuleLightVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ModuleLightVector_remove_last(self)

    def empty(self):
        return _framework.ModuleLightVector_empty(self)

    def remove_all(self):
        return _framework.ModuleLightVector_remove_all(self)

    def clear(self, *args):
        return _framework.ModuleLightVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ModuleLightVector_remove(self, *args)

    def is_empty(self):
        return _framework.ModuleLightVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ModuleLightVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ModuleLightVector_remove_items(self, item)

    def get_count(self):
        return _framework.ModuleLightVector_get_count(self)

    def get_capacity(self):
        return _framework.ModuleLightVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ModuleLightVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ModuleLightVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ModuleLightVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ModuleLightVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ModuleLightVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ModuleLightVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleLightVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleLightVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleLightVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleLightVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ModuleLightVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ModuleLightVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ModuleLightVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ModuleLightVector_item(self, *args)

    def get_data(self):
        return _framework.ModuleLightVector_get_data(self)

    def get_memory_size(self):
        return _framework.ModuleLightVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleLightVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleLightVector_class_info)
    else:
        class_info = _framework.ModuleLightVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleLightVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleLightVector____class_destructor__
ModuleLightVector_swigregister = _framework.ModuleLightVector_swigregister
ModuleLightVector_swigregister(ModuleLightVector)

def ModuleLightVector_class_info():
    return _framework.ModuleLightVector_class_info()
ModuleLightVector_class_info = _framework.ModuleLightVector_class_info

def ModuleLightVector____class_destructor__(instance, is_array):
    return _framework.ModuleLightVector____class_destructor__(instance, is_array)
ModuleLightVector____class_destructor__ = _framework.ModuleLightVector____class_destructor__

class ModuleLightSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLightSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLightSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleLightSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLightSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleLightSet_get_count(self)

    def is_empty(self):
        return _framework.ModuleLightSet_is_empty(self)

    def exists(self, *args):
        return _framework.ModuleLightSet_exists(self, *args)

    def add(self, *args):
        return _framework.ModuleLightSet_add(self, *args)

    def remove(self, index):
        return _framework.ModuleLightSet_remove(self, index)

    def remove_item(self, item):
        return _framework.ModuleLightSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ModuleLightSet_remove_set(self, set)

    def remove_all(self):
        return _framework.ModuleLightSet_remove_all(self)

    def toggle(self, item):
        return _framework.ModuleLightSet_toggle(self, item)

    def back(self, *args):
        return _framework.ModuleLightSet_back(self, *args)

    def unite(self, set):
        return _framework.ModuleLightSet_unite(self, set)

    def intersect(self, set):
        return _framework.ModuleLightSet_intersect(self, set)

    def is_included(self, set):
        return _framework.ModuleLightSet_is_included(self, set)

    def get_item(self, index):
        return _framework.ModuleLightSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ModuleLightSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ModuleLightSet___ne__(self, set)

    def get_items(self):
        return _framework.ModuleLightSet_get_items(self)

    def get_array(self, array):
        return _framework.ModuleLightSet_get_array(self, array)

    def get_list(self, list):
        return _framework.ModuleLightSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ModuleLightSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ModuleLightSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleLightSet_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleLightSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ModuleLightSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleLightSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleLightSet_swigregister = _framework.ModuleLightSet_swigregister
ModuleLightSet_swigregister(ModuleLightSet)

class ModuleShadingLayerBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleShadingLayerBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleShadingLayerBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ModuleShadingLayerBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ModuleShadingLayerBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleShadingLayerBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleShadingLayerBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ModuleShadingLayerBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ModuleShadingLayerBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ModuleShadingLayerBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ModuleShadingLayerBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ModuleShadingLayerBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ModuleShadingLayerBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ModuleShadingLayerBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ModuleShadingLayerBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleShadingLayerBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleShadingLayerBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleShadingLayerBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ModuleShadingLayerBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleShadingLayerBasicArray_class_info)
    else:
        class_info = _framework.ModuleShadingLayerBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleShadingLayerBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleShadingLayerBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ModuleShadingLayerBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleShadingLayerBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleShadingLayerBasicArray_swigregister = _framework.ModuleShadingLayerBasicArray_swigregister
ModuleShadingLayerBasicArray_swigregister(ModuleShadingLayerBasicArray)

def ModuleShadingLayerBasicArray_class_info():
    return _framework.ModuleShadingLayerBasicArray_class_info()
ModuleShadingLayerBasicArray_class_info = _framework.ModuleShadingLayerBasicArray_class_info

def ModuleShadingLayerBasicArray____class_destructor__(instance, is_array):
    return _framework.ModuleShadingLayerBasicArray____class_destructor__(instance, is_array)
ModuleShadingLayerBasicArray____class_destructor__ = _framework.ModuleShadingLayerBasicArray____class_destructor__

class ModuleShadingLayerArray(ModuleShadingLayerBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleShadingLayerBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleShadingLayerArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleShadingLayerBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleShadingLayerArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleShadingLayerArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleShadingLayerArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleShadingLayerArray_append(self, *args)

    def get_count(self):
        return _framework.ModuleShadingLayerArray_get_count(self)

    def remove_all(self):
        return _framework.ModuleShadingLayerArray_remove_all(self)

    def resize(self, *args):
        return _framework.ModuleShadingLayerArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleShadingLayerArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleShadingLayerArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleShadingLayerArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleShadingLayerArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ModuleShadingLayerArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleShadingLayerArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleShadingLayerArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleShadingLayerArray_class_info)
    else:
        class_info = _framework.ModuleShadingLayerArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleShadingLayerArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleShadingLayerArray____class_destructor__
ModuleShadingLayerArray_swigregister = _framework.ModuleShadingLayerArray_swigregister
ModuleShadingLayerArray_swigregister(ModuleShadingLayerArray)

def ModuleShadingLayerArray_class_info():
    return _framework.ModuleShadingLayerArray_class_info()
ModuleShadingLayerArray_class_info = _framework.ModuleShadingLayerArray_class_info

def ModuleShadingLayerArray____class_destructor__(instance, is_array):
    return _framework.ModuleShadingLayerArray____class_destructor__(instance, is_array)
ModuleShadingLayerArray____class_destructor__ = _framework.ModuleShadingLayerArray____class_destructor__

class ModuleShadingLayerVector(ModuleShadingLayerBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleShadingLayerBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleShadingLayerVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleShadingLayerBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleShadingLayerVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleShadingLayerVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleShadingLayerVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleShadingLayerVector_append(self, *args)

    def add(self, *args):
        return _framework.ModuleShadingLayerVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ModuleShadingLayerVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ModuleShadingLayerVector_remove_last(self)

    def empty(self):
        return _framework.ModuleShadingLayerVector_empty(self)

    def remove_all(self):
        return _framework.ModuleShadingLayerVector_remove_all(self)

    def clear(self, *args):
        return _framework.ModuleShadingLayerVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ModuleShadingLayerVector_remove(self, *args)

    def is_empty(self):
        return _framework.ModuleShadingLayerVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ModuleShadingLayerVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ModuleShadingLayerVector_remove_items(self, item)

    def get_count(self):
        return _framework.ModuleShadingLayerVector_get_count(self)

    def get_capacity(self):
        return _framework.ModuleShadingLayerVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ModuleShadingLayerVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ModuleShadingLayerVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ModuleShadingLayerVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ModuleShadingLayerVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ModuleShadingLayerVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ModuleShadingLayerVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleShadingLayerVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleShadingLayerVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleShadingLayerVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleShadingLayerVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ModuleShadingLayerVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ModuleShadingLayerVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ModuleShadingLayerVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ModuleShadingLayerVector_item(self, *args)

    def get_data(self):
        return _framework.ModuleShadingLayerVector_get_data(self)

    def get_memory_size(self):
        return _framework.ModuleShadingLayerVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleShadingLayerVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleShadingLayerVector_class_info)
    else:
        class_info = _framework.ModuleShadingLayerVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleShadingLayerVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleShadingLayerVector____class_destructor__
ModuleShadingLayerVector_swigregister = _framework.ModuleShadingLayerVector_swigregister
ModuleShadingLayerVector_swigregister(ModuleShadingLayerVector)

def ModuleShadingLayerVector_class_info():
    return _framework.ModuleShadingLayerVector_class_info()
ModuleShadingLayerVector_class_info = _framework.ModuleShadingLayerVector_class_info

def ModuleShadingLayerVector____class_destructor__(instance, is_array):
    return _framework.ModuleShadingLayerVector____class_destructor__(instance, is_array)
ModuleShadingLayerVector____class_destructor__ = _framework.ModuleShadingLayerVector____class_destructor__

class ModuleShadingLayerSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleShadingLayerSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleShadingLayerSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleShadingLayerSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleShadingLayerSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleShadingLayerSet_get_count(self)

    def is_empty(self):
        return _framework.ModuleShadingLayerSet_is_empty(self)

    def exists(self, *args):
        return _framework.ModuleShadingLayerSet_exists(self, *args)

    def add(self, *args):
        return _framework.ModuleShadingLayerSet_add(self, *args)

    def remove(self, index):
        return _framework.ModuleShadingLayerSet_remove(self, index)

    def remove_item(self, item):
        return _framework.ModuleShadingLayerSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ModuleShadingLayerSet_remove_set(self, set)

    def remove_all(self):
        return _framework.ModuleShadingLayerSet_remove_all(self)

    def toggle(self, item):
        return _framework.ModuleShadingLayerSet_toggle(self, item)

    def back(self, *args):
        return _framework.ModuleShadingLayerSet_back(self, *args)

    def unite(self, set):
        return _framework.ModuleShadingLayerSet_unite(self, set)

    def intersect(self, set):
        return _framework.ModuleShadingLayerSet_intersect(self, set)

    def is_included(self, set):
        return _framework.ModuleShadingLayerSet_is_included(self, set)

    def get_item(self, index):
        return _framework.ModuleShadingLayerSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ModuleShadingLayerSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ModuleShadingLayerSet___ne__(self, set)

    def get_items(self):
        return _framework.ModuleShadingLayerSet_get_items(self)

    def get_array(self, array):
        return _framework.ModuleShadingLayerSet_get_array(self, array)

    def get_list(self, list):
        return _framework.ModuleShadingLayerSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ModuleShadingLayerSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ModuleShadingLayerSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleShadingLayerSet_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleShadingLayerSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ModuleShadingLayerSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleShadingLayerSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleShadingLayerSet_swigregister = _framework.ModuleShadingLayerSet_swigregister
ModuleShadingLayerSet_swigregister(ModuleShadingLayerSet)

class ModuleLayerBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLayerBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLayerBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ModuleLayerBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ModuleLayerBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLayerBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleLayerBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ModuleLayerBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ModuleLayerBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ModuleLayerBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ModuleLayerBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ModuleLayerBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ModuleLayerBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ModuleLayerBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ModuleLayerBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleLayerBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleLayerBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleLayerBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ModuleLayerBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleLayerBasicArray_class_info)
    else:
        class_info = _framework.ModuleLayerBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleLayerBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleLayerBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ModuleLayerBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleLayerBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleLayerBasicArray_swigregister = _framework.ModuleLayerBasicArray_swigregister
ModuleLayerBasicArray_swigregister(ModuleLayerBasicArray)

def ModuleLayerBasicArray_class_info():
    return _framework.ModuleLayerBasicArray_class_info()
ModuleLayerBasicArray_class_info = _framework.ModuleLayerBasicArray_class_info

def ModuleLayerBasicArray____class_destructor__(instance, is_array):
    return _framework.ModuleLayerBasicArray____class_destructor__(instance, is_array)
ModuleLayerBasicArray____class_destructor__ = _framework.ModuleLayerBasicArray____class_destructor__

class ModuleLayerArray(ModuleLayerBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleLayerBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLayerArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleLayerBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLayerArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleLayerArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLayerArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleLayerArray_append(self, *args)

    def get_count(self):
        return _framework.ModuleLayerArray_get_count(self)

    def remove_all(self):
        return _framework.ModuleLayerArray_remove_all(self)

    def resize(self, *args):
        return _framework.ModuleLayerArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleLayerArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleLayerArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleLayerArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleLayerArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ModuleLayerArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ModuleLayerArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleLayerArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleLayerArray_class_info)
    else:
        class_info = _framework.ModuleLayerArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleLayerArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleLayerArray____class_destructor__
ModuleLayerArray_swigregister = _framework.ModuleLayerArray_swigregister
ModuleLayerArray_swigregister(ModuleLayerArray)

def ModuleLayerArray_class_info():
    return _framework.ModuleLayerArray_class_info()
ModuleLayerArray_class_info = _framework.ModuleLayerArray_class_info

def ModuleLayerArray____class_destructor__(instance, is_array):
    return _framework.ModuleLayerArray____class_destructor__(instance, is_array)
ModuleLayerArray____class_destructor__ = _framework.ModuleLayerArray____class_destructor__

class ModuleLayerVector(ModuleLayerBasicArray):
    __swig_setmethods__ = {}
    for _s in [ModuleLayerBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLayerVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ModuleLayerBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLayerVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleLayerVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLayerVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ModuleLayerVector_append(self, *args)

    def add(self, *args):
        return _framework.ModuleLayerVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ModuleLayerVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ModuleLayerVector_remove_last(self)

    def empty(self):
        return _framework.ModuleLayerVector_empty(self)

    def remove_all(self):
        return _framework.ModuleLayerVector_remove_all(self)

    def clear(self, *args):
        return _framework.ModuleLayerVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ModuleLayerVector_remove(self, *args)

    def is_empty(self):
        return _framework.ModuleLayerVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ModuleLayerVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ModuleLayerVector_remove_items(self, item)

    def get_count(self):
        return _framework.ModuleLayerVector_get_count(self)

    def get_capacity(self):
        return _framework.ModuleLayerVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ModuleLayerVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ModuleLayerVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ModuleLayerVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ModuleLayerVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ModuleLayerVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ModuleLayerVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ModuleLayerVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ModuleLayerVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ModuleLayerVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ModuleLayerVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ModuleLayerVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ModuleLayerVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ModuleLayerVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ModuleLayerVector_item(self, *args)

    def get_data(self):
        return _framework.ModuleLayerVector_get_data(self)

    def get_memory_size(self):
        return _framework.ModuleLayerVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ModuleLayerVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ModuleLayerVector_class_info)
    else:
        class_info = _framework.ModuleLayerVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ModuleLayerVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ModuleLayerVector____class_destructor__
ModuleLayerVector_swigregister = _framework.ModuleLayerVector_swigregister
ModuleLayerVector_swigregister(ModuleLayerVector)

def ModuleLayerVector_class_info():
    return _framework.ModuleLayerVector_class_info()
ModuleLayerVector_class_info = _framework.ModuleLayerVector_class_info

def ModuleLayerVector____class_destructor__(instance, is_array):
    return _framework.ModuleLayerVector____class_destructor__(instance, is_array)
ModuleLayerVector____class_destructor__ = _framework.ModuleLayerVector____class_destructor__

class ModuleLayerSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleLayerSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleLayerSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ModuleLayerSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ModuleLayerSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ModuleLayerSet_get_count(self)

    def is_empty(self):
        return _framework.ModuleLayerSet_is_empty(self)

    def exists(self, *args):
        return _framework.ModuleLayerSet_exists(self, *args)

    def add(self, *args):
        return _framework.ModuleLayerSet_add(self, *args)

    def remove(self, index):
        return _framework.ModuleLayerSet_remove(self, index)

    def remove_item(self, item):
        return _framework.ModuleLayerSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ModuleLayerSet_remove_set(self, set)

    def remove_all(self):
        return _framework.ModuleLayerSet_remove_all(self)

    def toggle(self, item):
        return _framework.ModuleLayerSet_toggle(self, item)

    def back(self, *args):
        return _framework.ModuleLayerSet_back(self, *args)

    def unite(self, set):
        return _framework.ModuleLayerSet_unite(self, set)

    def intersect(self, set):
        return _framework.ModuleLayerSet_intersect(self, set)

    def is_included(self, set):
        return _framework.ModuleLayerSet_is_included(self, set)

    def get_item(self, index):
        return _framework.ModuleLayerSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ModuleLayerSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ModuleLayerSet___ne__(self, set)

    def get_items(self):
        return _framework.ModuleLayerSet_get_items(self)

    def get_array(self, array):
        return _framework.ModuleLayerSet_get_array(self, array)

    def get_list(self, list):
        return _framework.ModuleLayerSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ModuleLayerSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ModuleLayerSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ModuleLayerSet_begin(self, *args)

    def end(self, *args):
        return _framework.ModuleLayerSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ModuleLayerSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ModuleLayerSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ModuleLayerSet_swigregister = _framework.ModuleLayerSet_swigregister
ModuleLayerSet_swigregister(ModuleLayerSet)

class ShadingLayerRuleBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingLayerRuleBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingLayerRuleBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ShadingLayerRuleBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ShadingLayerRuleBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingLayerRuleBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ShadingLayerRuleBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ShadingLayerRuleBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ShadingLayerRuleBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ShadingLayerRuleBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ShadingLayerRuleBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ShadingLayerRuleBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ShadingLayerRuleBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ShadingLayerRuleBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ShadingLayerRuleBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ShadingLayerRuleBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ShadingLayerRuleBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ShadingLayerRuleBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ShadingLayerRuleBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ShadingLayerRuleBasicArray_class_info)
    else:
        class_info = _framework.ShadingLayerRuleBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ShadingLayerRuleBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ShadingLayerRuleBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ShadingLayerRuleBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ShadingLayerRuleBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ShadingLayerRuleBasicArray_swigregister = _framework.ShadingLayerRuleBasicArray_swigregister
ShadingLayerRuleBasicArray_swigregister(ShadingLayerRuleBasicArray)

def ShadingLayerRuleBasicArray_class_info():
    return _framework.ShadingLayerRuleBasicArray_class_info()
ShadingLayerRuleBasicArray_class_info = _framework.ShadingLayerRuleBasicArray_class_info

def ShadingLayerRuleBasicArray____class_destructor__(instance, is_array):
    return _framework.ShadingLayerRuleBasicArray____class_destructor__(instance, is_array)
ShadingLayerRuleBasicArray____class_destructor__ = _framework.ShadingLayerRuleBasicArray____class_destructor__

class ShadingLayerRuleArray(ShadingLayerRuleBasicArray):
    __swig_setmethods__ = {}
    for _s in [ShadingLayerRuleBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingLayerRuleArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadingLayerRuleBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingLayerRuleArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ShadingLayerRuleArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingLayerRuleArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ShadingLayerRuleArray_append(self, *args)

    def get_count(self):
        return _framework.ShadingLayerRuleArray_get_count(self)

    def remove_all(self):
        return _framework.ShadingLayerRuleArray_remove_all(self)

    def resize(self, *args):
        return _framework.ShadingLayerRuleArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ShadingLayerRuleArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ShadingLayerRuleArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ShadingLayerRuleArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ShadingLayerRuleArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ShadingLayerRuleArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ShadingLayerRuleArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ShadingLayerRuleArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ShadingLayerRuleArray_class_info)
    else:
        class_info = _framework.ShadingLayerRuleArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ShadingLayerRuleArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ShadingLayerRuleArray____class_destructor__
ShadingLayerRuleArray_swigregister = _framework.ShadingLayerRuleArray_swigregister
ShadingLayerRuleArray_swigregister(ShadingLayerRuleArray)

def ShadingLayerRuleArray_class_info():
    return _framework.ShadingLayerRuleArray_class_info()
ShadingLayerRuleArray_class_info = _framework.ShadingLayerRuleArray_class_info

def ShadingLayerRuleArray____class_destructor__(instance, is_array):
    return _framework.ShadingLayerRuleArray____class_destructor__(instance, is_array)
ShadingLayerRuleArray____class_destructor__ = _framework.ShadingLayerRuleArray____class_destructor__

class ShadingLayerRuleVector(ShadingLayerRuleBasicArray):
    __swig_setmethods__ = {}
    for _s in [ShadingLayerRuleBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingLayerRuleVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadingLayerRuleBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingLayerRuleVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ShadingLayerRuleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingLayerRuleVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ShadingLayerRuleVector_append(self, *args)

    def add(self, *args):
        return _framework.ShadingLayerRuleVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ShadingLayerRuleVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ShadingLayerRuleVector_remove_last(self)

    def empty(self):
        return _framework.ShadingLayerRuleVector_empty(self)

    def remove_all(self):
        return _framework.ShadingLayerRuleVector_remove_all(self)

    def clear(self, *args):
        return _framework.ShadingLayerRuleVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ShadingLayerRuleVector_remove(self, *args)

    def is_empty(self):
        return _framework.ShadingLayerRuleVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ShadingLayerRuleVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ShadingLayerRuleVector_remove_items(self, item)

    def get_count(self):
        return _framework.ShadingLayerRuleVector_get_count(self)

    def get_capacity(self):
        return _framework.ShadingLayerRuleVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ShadingLayerRuleVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ShadingLayerRuleVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ShadingLayerRuleVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ShadingLayerRuleVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ShadingLayerRuleVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ShadingLayerRuleVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ShadingLayerRuleVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ShadingLayerRuleVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ShadingLayerRuleVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ShadingLayerRuleVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ShadingLayerRuleVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ShadingLayerRuleVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ShadingLayerRuleVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ShadingLayerRuleVector_item(self, *args)

    def get_data(self):
        return _framework.ShadingLayerRuleVector_get_data(self)

    def get_memory_size(self):
        return _framework.ShadingLayerRuleVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ShadingLayerRuleVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ShadingLayerRuleVector_class_info)
    else:
        class_info = _framework.ShadingLayerRuleVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ShadingLayerRuleVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ShadingLayerRuleVector____class_destructor__
ShadingLayerRuleVector_swigregister = _framework.ShadingLayerRuleVector_swigregister
ShadingLayerRuleVector_swigregister(ShadingLayerRuleVector)

def ShadingLayerRuleVector_class_info():
    return _framework.ShadingLayerRuleVector_class_info()
ShadingLayerRuleVector_class_info = _framework.ShadingLayerRuleVector_class_info

def ShadingLayerRuleVector____class_destructor__(instance, is_array):
    return _framework.ShadingLayerRuleVector____class_destructor__(instance, is_array)
ShadingLayerRuleVector____class_destructor__ = _framework.ShadingLayerRuleVector____class_destructor__

class ShadingLayerRuleSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingLayerRuleSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingLayerRuleSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ShadingLayerRuleSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingLayerRuleSet
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ShadingLayerRuleSet_get_count(self)

    def is_empty(self):
        return _framework.ShadingLayerRuleSet_is_empty(self)

    def exists(self, *args):
        return _framework.ShadingLayerRuleSet_exists(self, *args)

    def add(self, *args):
        return _framework.ShadingLayerRuleSet_add(self, *args)

    def remove(self, index):
        return _framework.ShadingLayerRuleSet_remove(self, index)

    def remove_item(self, item):
        return _framework.ShadingLayerRuleSet_remove_item(self, item)

    def remove_set(self, set):
        return _framework.ShadingLayerRuleSet_remove_set(self, set)

    def remove_all(self):
        return _framework.ShadingLayerRuleSet_remove_all(self)

    def toggle(self, item):
        return _framework.ShadingLayerRuleSet_toggle(self, item)

    def back(self, *args):
        return _framework.ShadingLayerRuleSet_back(self, *args)

    def unite(self, set):
        return _framework.ShadingLayerRuleSet_unite(self, set)

    def intersect(self, set):
        return _framework.ShadingLayerRuleSet_intersect(self, set)

    def is_included(self, set):
        return _framework.ShadingLayerRuleSet_is_included(self, set)

    def get_item(self, index):
        return _framework.ShadingLayerRuleSet_get_item(self, index)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _framework.ShadingLayerRuleSet___eq__(self, set)


    def __ne__(self, set):
        return _framework.ShadingLayerRuleSet___ne__(self, set)

    def get_items(self):
        return _framework.ShadingLayerRuleSet_get_items(self)

    def get_array(self, array):
        return _framework.ShadingLayerRuleSet_get_array(self, array)

    def get_list(self, list):
        return _framework.ShadingLayerRuleSet_get_list(self, list)

    def get_vector(self, vector):
        return _framework.ShadingLayerRuleSet_get_vector(self, vector)

    def get_memory_size(self):
        return _framework.ShadingLayerRuleSet_get_memory_size(self)

    def begin(self, *args):
        return _framework.ShadingLayerRuleSet_begin(self, *args)

    def end(self, *args):
        return _framework.ShadingLayerRuleSet_end(self, *args)

    def __setitem__(self, index, value):
        return _framework.ShadingLayerRuleSet___setitem__(self, index, value)

    def __len__(self):
        return _framework.ShadingLayerRuleSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ShadingLayerRuleSet_swigregister = _framework.ShadingLayerRuleSet_swigregister
ShadingLayerRuleSet_swigregister(ShadingLayerRuleSet)

class ShadingVariableManagerAccessorBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingVariableManagerAccessorBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingVariableManagerAccessorBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.ShadingVariableManagerAccessorBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_ShadingVariableManagerAccessorBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingVariableManagerAccessorBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.ShadingVariableManagerAccessorBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.ShadingVariableManagerAccessorBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.ShadingVariableManagerAccessorBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.ShadingVariableManagerAccessorBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.ShadingVariableManagerAccessorBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.ShadingVariableManagerAccessorBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.ShadingVariableManagerAccessorBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.ShadingVariableManagerAccessorBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.ShadingVariableManagerAccessorBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ShadingVariableManagerAccessorBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.ShadingVariableManagerAccessorBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.ShadingVariableManagerAccessorBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.ShadingVariableManagerAccessorBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ShadingVariableManagerAccessorBasicArray_class_info)
    else:
        class_info = _framework.ShadingVariableManagerAccessorBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ShadingVariableManagerAccessorBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ShadingVariableManagerAccessorBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.ShadingVariableManagerAccessorBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.ShadingVariableManagerAccessorBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

ShadingVariableManagerAccessorBasicArray_swigregister = _framework.ShadingVariableManagerAccessorBasicArray_swigregister
ShadingVariableManagerAccessorBasicArray_swigregister(ShadingVariableManagerAccessorBasicArray)

def ShadingVariableManagerAccessorBasicArray_class_info():
    return _framework.ShadingVariableManagerAccessorBasicArray_class_info()
ShadingVariableManagerAccessorBasicArray_class_info = _framework.ShadingVariableManagerAccessorBasicArray_class_info

def ShadingVariableManagerAccessorBasicArray____class_destructor__(instance, is_array):
    return _framework.ShadingVariableManagerAccessorBasicArray____class_destructor__(instance, is_array)
ShadingVariableManagerAccessorBasicArray____class_destructor__ = _framework.ShadingVariableManagerAccessorBasicArray____class_destructor__

class ShadingVariableManagerAccessorArray(ShadingVariableManagerAccessorBasicArray):
    __swig_setmethods__ = {}
    for _s in [ShadingVariableManagerAccessorBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingVariableManagerAccessorArray, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadingVariableManagerAccessorBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingVariableManagerAccessorArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ShadingVariableManagerAccessorArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingVariableManagerAccessorArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ShadingVariableManagerAccessorArray_append(self, *args)

    def get_count(self):
        return _framework.ShadingVariableManagerAccessorArray_get_count(self)

    def remove_all(self):
        return _framework.ShadingVariableManagerAccessorArray_remove_all(self)

    def resize(self, *args):
        return _framework.ShadingVariableManagerAccessorArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.ShadingVariableManagerAccessorArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ShadingVariableManagerAccessorArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ShadingVariableManagerAccessorArray_get_list(self, list)

    def set_list(self, list):
        return _framework.ShadingVariableManagerAccessorArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.ShadingVariableManagerAccessorArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.ShadingVariableManagerAccessorArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.ShadingVariableManagerAccessorArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ShadingVariableManagerAccessorArray_class_info)
    else:
        class_info = _framework.ShadingVariableManagerAccessorArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ShadingVariableManagerAccessorArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.ShadingVariableManagerAccessorArray____class_destructor__
ShadingVariableManagerAccessorArray_swigregister = _framework.ShadingVariableManagerAccessorArray_swigregister
ShadingVariableManagerAccessorArray_swigregister(ShadingVariableManagerAccessorArray)

def ShadingVariableManagerAccessorArray_class_info():
    return _framework.ShadingVariableManagerAccessorArray_class_info()
ShadingVariableManagerAccessorArray_class_info = _framework.ShadingVariableManagerAccessorArray_class_info

def ShadingVariableManagerAccessorArray____class_destructor__(instance, is_array):
    return _framework.ShadingVariableManagerAccessorArray____class_destructor__(instance, is_array)
ShadingVariableManagerAccessorArray____class_destructor__ = _framework.ShadingVariableManagerAccessorArray____class_destructor__

class ShadingVariableManagerAccessorVector(ShadingVariableManagerAccessorBasicArray):
    __swig_setmethods__ = {}
    for _s in [ShadingVariableManagerAccessorBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadingVariableManagerAccessorVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadingVariableManagerAccessorBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadingVariableManagerAccessorVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_ShadingVariableManagerAccessorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_ShadingVariableManagerAccessorVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.ShadingVariableManagerAccessorVector_append(self, *args)

    def add(self, *args):
        return _framework.ShadingVariableManagerAccessorVector_add(self, *args)

    def insert(self, element, index):
        return _framework.ShadingVariableManagerAccessorVector_insert(self, element, index)

    def remove_last(self):
        return _framework.ShadingVariableManagerAccessorVector_remove_last(self)

    def empty(self):
        return _framework.ShadingVariableManagerAccessorVector_empty(self)

    def remove_all(self):
        return _framework.ShadingVariableManagerAccessorVector_remove_all(self)

    def clear(self, *args):
        return _framework.ShadingVariableManagerAccessorVector_clear(self, *args)

    def remove(self, *args):
        return _framework.ShadingVariableManagerAccessorVector_remove(self, *args)

    def is_empty(self):
        return _framework.ShadingVariableManagerAccessorVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.ShadingVariableManagerAccessorVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.ShadingVariableManagerAccessorVector_remove_items(self, item)

    def get_count(self):
        return _framework.ShadingVariableManagerAccessorVector_get_count(self)

    def get_capacity(self):
        return _framework.ShadingVariableManagerAccessorVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.ShadingVariableManagerAccessorVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.ShadingVariableManagerAccessorVector_set_capacity(self, *args)

    def refit(self):
        return _framework.ShadingVariableManagerAccessorVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.ShadingVariableManagerAccessorVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.ShadingVariableManagerAccessorVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.ShadingVariableManagerAccessorVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.ShadingVariableManagerAccessorVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.ShadingVariableManagerAccessorVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.ShadingVariableManagerAccessorVector_get_list(self, list)

    def set_list(self, list):
        return _framework.ShadingVariableManagerAccessorVector_set_list(self, list)

    def get_array(self, array):
        return _framework.ShadingVariableManagerAccessorVector_get_array(self, array)

    def set_array(self, array):
        return _framework.ShadingVariableManagerAccessorVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.ShadingVariableManagerAccessorVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.ShadingVariableManagerAccessorVector_item(self, *args)

    def get_data(self):
        return _framework.ShadingVariableManagerAccessorVector_get_data(self)

    def get_memory_size(self):
        return _framework.ShadingVariableManagerAccessorVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.ShadingVariableManagerAccessorVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.ShadingVariableManagerAccessorVector_class_info)
    else:
        class_info = _framework.ShadingVariableManagerAccessorVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.ShadingVariableManagerAccessorVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.ShadingVariableManagerAccessorVector____class_destructor__
ShadingVariableManagerAccessorVector_swigregister = _framework.ShadingVariableManagerAccessorVector_swigregister
ShadingVariableManagerAccessorVector_swigregister(ShadingVariableManagerAccessorVector)

def ShadingVariableManagerAccessorVector_class_info():
    return _framework.ShadingVariableManagerAccessorVector_class_info()
ShadingVariableManagerAccessorVector_class_info = _framework.ShadingVariableManagerAccessorVector_class_info

def ShadingVariableManagerAccessorVector____class_destructor__(instance, is_array):
    return _framework.ShadingVariableManagerAccessorVector____class_destructor__(instance, is_array)
ShadingVariableManagerAccessorVector____class_destructor__ = _framework.ShadingVariableManagerAccessorVector____class_destructor__

class GeometryPropertyBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPropertyBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPropertyBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.GeometryPropertyBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_GeometryPropertyBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPropertyBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.GeometryPropertyBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.GeometryPropertyBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.GeometryPropertyBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.GeometryPropertyBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.GeometryPropertyBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.GeometryPropertyBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.GeometryPropertyBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.GeometryPropertyBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.GeometryPropertyBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryPropertyBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.GeometryPropertyBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.GeometryPropertyBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.GeometryPropertyBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryPropertyBasicArray_class_info)
    else:
        class_info = _framework.GeometryPropertyBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryPropertyBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryPropertyBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.GeometryPropertyBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.GeometryPropertyBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GeometryPropertyBasicArray_swigregister = _framework.GeometryPropertyBasicArray_swigregister
GeometryPropertyBasicArray_swigregister(GeometryPropertyBasicArray)

def GeometryPropertyBasicArray_class_info():
    return _framework.GeometryPropertyBasicArray_class_info()
GeometryPropertyBasicArray_class_info = _framework.GeometryPropertyBasicArray_class_info

def GeometryPropertyBasicArray____class_destructor__(instance, is_array):
    return _framework.GeometryPropertyBasicArray____class_destructor__(instance, is_array)
GeometryPropertyBasicArray____class_destructor__ = _framework.GeometryPropertyBasicArray____class_destructor__

class GeometryPropertyArray(GeometryPropertyBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryPropertyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPropertyArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryPropertyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPropertyArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryPropertyArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPropertyArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryPropertyArray_append(self, *args)

    def get_count(self):
        return _framework.GeometryPropertyArray_get_count(self)

    def remove_all(self):
        return _framework.GeometryPropertyArray_remove_all(self)

    def resize(self, *args):
        return _framework.GeometryPropertyArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryPropertyArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryPropertyArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryPropertyArray_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryPropertyArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.GeometryPropertyArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryPropertyArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryPropertyArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryPropertyArray_class_info)
    else:
        class_info = _framework.GeometryPropertyArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryPropertyArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryPropertyArray____class_destructor__
GeometryPropertyArray_swigregister = _framework.GeometryPropertyArray_swigregister
GeometryPropertyArray_swigregister(GeometryPropertyArray)

def GeometryPropertyArray_class_info():
    return _framework.GeometryPropertyArray_class_info()
GeometryPropertyArray_class_info = _framework.GeometryPropertyArray_class_info

def GeometryPropertyArray____class_destructor__(instance, is_array):
    return _framework.GeometryPropertyArray____class_destructor__(instance, is_array)
GeometryPropertyArray____class_destructor__ = _framework.GeometryPropertyArray____class_destructor__

class GeometryPropertyVector(GeometryPropertyBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryPropertyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPropertyVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryPropertyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPropertyVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryPropertyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPropertyVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryPropertyVector_append(self, *args)

    def add(self, *args):
        return _framework.GeometryPropertyVector_add(self, *args)

    def insert(self, element, index):
        return _framework.GeometryPropertyVector_insert(self, element, index)

    def remove_last(self):
        return _framework.GeometryPropertyVector_remove_last(self)

    def empty(self):
        return _framework.GeometryPropertyVector_empty(self)

    def remove_all(self):
        return _framework.GeometryPropertyVector_remove_all(self)

    def clear(self, *args):
        return _framework.GeometryPropertyVector_clear(self, *args)

    def remove(self, *args):
        return _framework.GeometryPropertyVector_remove(self, *args)

    def is_empty(self):
        return _framework.GeometryPropertyVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.GeometryPropertyVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.GeometryPropertyVector_remove_items(self, item)

    def get_count(self):
        return _framework.GeometryPropertyVector_get_count(self)

    def get_capacity(self):
        return _framework.GeometryPropertyVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.GeometryPropertyVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.GeometryPropertyVector_set_capacity(self, *args)

    def refit(self):
        return _framework.GeometryPropertyVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.GeometryPropertyVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.GeometryPropertyVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.GeometryPropertyVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryPropertyVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryPropertyVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryPropertyVector_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryPropertyVector_set_list(self, list)

    def get_array(self, array):
        return _framework.GeometryPropertyVector_get_array(self, array)

    def set_array(self, array):
        return _framework.GeometryPropertyVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.GeometryPropertyVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.GeometryPropertyVector_item(self, *args)

    def get_data(self):
        return _framework.GeometryPropertyVector_get_data(self)

    def get_memory_size(self):
        return _framework.GeometryPropertyVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryPropertyVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryPropertyVector_class_info)
    else:
        class_info = _framework.GeometryPropertyVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryPropertyVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryPropertyVector____class_destructor__
GeometryPropertyVector_swigregister = _framework.GeometryPropertyVector_swigregister
GeometryPropertyVector_swigregister(GeometryPropertyVector)

def GeometryPropertyVector_class_info():
    return _framework.GeometryPropertyVector_class_info()
GeometryPropertyVector_class_info = _framework.GeometryPropertyVector_class_info

def GeometryPropertyVector____class_destructor__(instance, is_array):
    return _framework.GeometryPropertyVector____class_destructor__(instance, is_array)
GeometryPropertyVector____class_destructor__ = _framework.GeometryPropertyVector____class_destructor__

class GeometryPointPropertyBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPointPropertyBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPointPropertyBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.GeometryPointPropertyBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_GeometryPointPropertyBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPointPropertyBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.GeometryPointPropertyBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.GeometryPointPropertyBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.GeometryPointPropertyBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.GeometryPointPropertyBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.GeometryPointPropertyBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.GeometryPointPropertyBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.GeometryPointPropertyBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.GeometryPointPropertyBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.GeometryPointPropertyBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryPointPropertyBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.GeometryPointPropertyBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.GeometryPointPropertyBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.GeometryPointPropertyBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryPointPropertyBasicArray_class_info)
    else:
        class_info = _framework.GeometryPointPropertyBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryPointPropertyBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryPointPropertyBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.GeometryPointPropertyBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.GeometryPointPropertyBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GeometryPointPropertyBasicArray_swigregister = _framework.GeometryPointPropertyBasicArray_swigregister
GeometryPointPropertyBasicArray_swigregister(GeometryPointPropertyBasicArray)

def GeometryPointPropertyBasicArray_class_info():
    return _framework.GeometryPointPropertyBasicArray_class_info()
GeometryPointPropertyBasicArray_class_info = _framework.GeometryPointPropertyBasicArray_class_info

def GeometryPointPropertyBasicArray____class_destructor__(instance, is_array):
    return _framework.GeometryPointPropertyBasicArray____class_destructor__(instance, is_array)
GeometryPointPropertyBasicArray____class_destructor__ = _framework.GeometryPointPropertyBasicArray____class_destructor__

class GeometryPointPropertyArray(GeometryPointPropertyBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryPointPropertyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPointPropertyArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryPointPropertyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPointPropertyArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryPointPropertyArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPointPropertyArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryPointPropertyArray_append(self, *args)

    def get_count(self):
        return _framework.GeometryPointPropertyArray_get_count(self)

    def remove_all(self):
        return _framework.GeometryPointPropertyArray_remove_all(self)

    def resize(self, *args):
        return _framework.GeometryPointPropertyArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryPointPropertyArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryPointPropertyArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryPointPropertyArray_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryPointPropertyArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.GeometryPointPropertyArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryPointPropertyArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryPointPropertyArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryPointPropertyArray_class_info)
    else:
        class_info = _framework.GeometryPointPropertyArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryPointPropertyArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryPointPropertyArray____class_destructor__
GeometryPointPropertyArray_swigregister = _framework.GeometryPointPropertyArray_swigregister
GeometryPointPropertyArray_swigregister(GeometryPointPropertyArray)

def GeometryPointPropertyArray_class_info():
    return _framework.GeometryPointPropertyArray_class_info()
GeometryPointPropertyArray_class_info = _framework.GeometryPointPropertyArray_class_info

def GeometryPointPropertyArray____class_destructor__(instance, is_array):
    return _framework.GeometryPointPropertyArray____class_destructor__(instance, is_array)
GeometryPointPropertyArray____class_destructor__ = _framework.GeometryPointPropertyArray____class_destructor__

class GeometryPointPropertyVector(GeometryPointPropertyBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryPointPropertyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPointPropertyVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryPointPropertyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPointPropertyVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryPointPropertyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPointPropertyVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryPointPropertyVector_append(self, *args)

    def add(self, *args):
        return _framework.GeometryPointPropertyVector_add(self, *args)

    def insert(self, element, index):
        return _framework.GeometryPointPropertyVector_insert(self, element, index)

    def remove_last(self):
        return _framework.GeometryPointPropertyVector_remove_last(self)

    def empty(self):
        return _framework.GeometryPointPropertyVector_empty(self)

    def remove_all(self):
        return _framework.GeometryPointPropertyVector_remove_all(self)

    def clear(self, *args):
        return _framework.GeometryPointPropertyVector_clear(self, *args)

    def remove(self, *args):
        return _framework.GeometryPointPropertyVector_remove(self, *args)

    def is_empty(self):
        return _framework.GeometryPointPropertyVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.GeometryPointPropertyVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.GeometryPointPropertyVector_remove_items(self, item)

    def get_count(self):
        return _framework.GeometryPointPropertyVector_get_count(self)

    def get_capacity(self):
        return _framework.GeometryPointPropertyVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.GeometryPointPropertyVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.GeometryPointPropertyVector_set_capacity(self, *args)

    def refit(self):
        return _framework.GeometryPointPropertyVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.GeometryPointPropertyVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.GeometryPointPropertyVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.GeometryPointPropertyVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryPointPropertyVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryPointPropertyVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryPointPropertyVector_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryPointPropertyVector_set_list(self, list)

    def get_array(self, array):
        return _framework.GeometryPointPropertyVector_get_array(self, array)

    def set_array(self, array):
        return _framework.GeometryPointPropertyVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.GeometryPointPropertyVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.GeometryPointPropertyVector_item(self, *args)

    def get_data(self):
        return _framework.GeometryPointPropertyVector_get_data(self)

    def get_memory_size(self):
        return _framework.GeometryPointPropertyVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryPointPropertyVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryPointPropertyVector_class_info)
    else:
        class_info = _framework.GeometryPointPropertyVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryPointPropertyVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryPointPropertyVector____class_destructor__
GeometryPointPropertyVector_swigregister = _framework.GeometryPointPropertyVector_swigregister
GeometryPointPropertyVector_swigregister(GeometryPointPropertyVector)

def GeometryPointPropertyVector_class_info():
    return _framework.GeometryPointPropertyVector_class_info()
GeometryPointPropertyVector_class_info = _framework.GeometryPointPropertyVector_class_info

def GeometryPointPropertyVector____class_destructor__(instance, is_array):
    return _framework.GeometryPointPropertyVector____class_destructor__(instance, is_array)
GeometryPointPropertyVector____class_destructor__ = _framework.GeometryPointPropertyVector____class_destructor__

class GeometryUvMapBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryUvMapBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryUvMapBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.GeometryUvMapBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_GeometryUvMapBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryUvMapBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.GeometryUvMapBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.GeometryUvMapBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.GeometryUvMapBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.GeometryUvMapBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.GeometryUvMapBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.GeometryUvMapBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.GeometryUvMapBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.GeometryUvMapBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.GeometryUvMapBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryUvMapBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.GeometryUvMapBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.GeometryUvMapBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.GeometryUvMapBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryUvMapBasicArray_class_info)
    else:
        class_info = _framework.GeometryUvMapBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryUvMapBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryUvMapBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.GeometryUvMapBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.GeometryUvMapBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GeometryUvMapBasicArray_swigregister = _framework.GeometryUvMapBasicArray_swigregister
GeometryUvMapBasicArray_swigregister(GeometryUvMapBasicArray)

def GeometryUvMapBasicArray_class_info():
    return _framework.GeometryUvMapBasicArray_class_info()
GeometryUvMapBasicArray_class_info = _framework.GeometryUvMapBasicArray_class_info

def GeometryUvMapBasicArray____class_destructor__(instance, is_array):
    return _framework.GeometryUvMapBasicArray____class_destructor__(instance, is_array)
GeometryUvMapBasicArray____class_destructor__ = _framework.GeometryUvMapBasicArray____class_destructor__

class GeometryUvMapArray(GeometryUvMapBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryUvMapBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryUvMapArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryUvMapBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryUvMapArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryUvMapArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryUvMapArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryUvMapArray_append(self, *args)

    def get_count(self):
        return _framework.GeometryUvMapArray_get_count(self)

    def remove_all(self):
        return _framework.GeometryUvMapArray_remove_all(self)

    def resize(self, *args):
        return _framework.GeometryUvMapArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryUvMapArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryUvMapArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryUvMapArray_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryUvMapArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.GeometryUvMapArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryUvMapArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryUvMapArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryUvMapArray_class_info)
    else:
        class_info = _framework.GeometryUvMapArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryUvMapArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryUvMapArray____class_destructor__
GeometryUvMapArray_swigregister = _framework.GeometryUvMapArray_swigregister
GeometryUvMapArray_swigregister(GeometryUvMapArray)

def GeometryUvMapArray_class_info():
    return _framework.GeometryUvMapArray_class_info()
GeometryUvMapArray_class_info = _framework.GeometryUvMapArray_class_info

def GeometryUvMapArray____class_destructor__(instance, is_array):
    return _framework.GeometryUvMapArray____class_destructor__(instance, is_array)
GeometryUvMapArray____class_destructor__ = _framework.GeometryUvMapArray____class_destructor__

class GeometryUvMapVector(GeometryUvMapBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryUvMapBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryUvMapVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryUvMapBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryUvMapVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryUvMapVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryUvMapVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryUvMapVector_append(self, *args)

    def add(self, *args):
        return _framework.GeometryUvMapVector_add(self, *args)

    def insert(self, element, index):
        return _framework.GeometryUvMapVector_insert(self, element, index)

    def remove_last(self):
        return _framework.GeometryUvMapVector_remove_last(self)

    def empty(self):
        return _framework.GeometryUvMapVector_empty(self)

    def remove_all(self):
        return _framework.GeometryUvMapVector_remove_all(self)

    def clear(self, *args):
        return _framework.GeometryUvMapVector_clear(self, *args)

    def remove(self, *args):
        return _framework.GeometryUvMapVector_remove(self, *args)

    def is_empty(self):
        return _framework.GeometryUvMapVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.GeometryUvMapVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.GeometryUvMapVector_remove_items(self, item)

    def get_count(self):
        return _framework.GeometryUvMapVector_get_count(self)

    def get_capacity(self):
        return _framework.GeometryUvMapVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.GeometryUvMapVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.GeometryUvMapVector_set_capacity(self, *args)

    def refit(self):
        return _framework.GeometryUvMapVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.GeometryUvMapVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.GeometryUvMapVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.GeometryUvMapVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryUvMapVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryUvMapVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryUvMapVector_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryUvMapVector_set_list(self, list)

    def get_array(self, array):
        return _framework.GeometryUvMapVector_get_array(self, array)

    def set_array(self, array):
        return _framework.GeometryUvMapVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.GeometryUvMapVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.GeometryUvMapVector_item(self, *args)

    def get_data(self):
        return _framework.GeometryUvMapVector_get_data(self)

    def get_memory_size(self):
        return _framework.GeometryUvMapVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryUvMapVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryUvMapVector_class_info)
    else:
        class_info = _framework.GeometryUvMapVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryUvMapVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryUvMapVector____class_destructor__
GeometryUvMapVector_swigregister = _framework.GeometryUvMapVector_swigregister
GeometryUvMapVector_swigregister(GeometryUvMapVector)

def GeometryUvMapVector_class_info():
    return _framework.GeometryUvMapVector_class_info()
GeometryUvMapVector_class_info = _framework.GeometryUvMapVector_class_info

def GeometryUvMapVector____class_destructor__(instance, is_array):
    return _framework.GeometryUvMapVector____class_destructor__(instance, is_array)
GeometryUvMapVector____class_destructor__ = _framework.GeometryUvMapVector____class_destructor__

class GeometryColorMapBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryColorMapBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryColorMapBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.GeometryColorMapBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_GeometryColorMapBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryColorMapBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.GeometryColorMapBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.GeometryColorMapBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.GeometryColorMapBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.GeometryColorMapBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.GeometryColorMapBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.GeometryColorMapBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.GeometryColorMapBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.GeometryColorMapBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.GeometryColorMapBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryColorMapBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.GeometryColorMapBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.GeometryColorMapBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.GeometryColorMapBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryColorMapBasicArray_class_info)
    else:
        class_info = _framework.GeometryColorMapBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryColorMapBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryColorMapBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.GeometryColorMapBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.GeometryColorMapBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GeometryColorMapBasicArray_swigregister = _framework.GeometryColorMapBasicArray_swigregister
GeometryColorMapBasicArray_swigregister(GeometryColorMapBasicArray)

def GeometryColorMapBasicArray_class_info():
    return _framework.GeometryColorMapBasicArray_class_info()
GeometryColorMapBasicArray_class_info = _framework.GeometryColorMapBasicArray_class_info

def GeometryColorMapBasicArray____class_destructor__(instance, is_array):
    return _framework.GeometryColorMapBasicArray____class_destructor__(instance, is_array)
GeometryColorMapBasicArray____class_destructor__ = _framework.GeometryColorMapBasicArray____class_destructor__

class GeometryColorMapArray(GeometryColorMapBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryColorMapBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryColorMapArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryColorMapBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryColorMapArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryColorMapArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryColorMapArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryColorMapArray_append(self, *args)

    def get_count(self):
        return _framework.GeometryColorMapArray_get_count(self)

    def remove_all(self):
        return _framework.GeometryColorMapArray_remove_all(self)

    def resize(self, *args):
        return _framework.GeometryColorMapArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryColorMapArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryColorMapArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryColorMapArray_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryColorMapArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.GeometryColorMapArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryColorMapArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryColorMapArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryColorMapArray_class_info)
    else:
        class_info = _framework.GeometryColorMapArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryColorMapArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryColorMapArray____class_destructor__
GeometryColorMapArray_swigregister = _framework.GeometryColorMapArray_swigregister
GeometryColorMapArray_swigregister(GeometryColorMapArray)

def GeometryColorMapArray_class_info():
    return _framework.GeometryColorMapArray_class_info()
GeometryColorMapArray_class_info = _framework.GeometryColorMapArray_class_info

def GeometryColorMapArray____class_destructor__(instance, is_array):
    return _framework.GeometryColorMapArray____class_destructor__(instance, is_array)
GeometryColorMapArray____class_destructor__ = _framework.GeometryColorMapArray____class_destructor__

class GeometryColorMapVector(GeometryColorMapBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryColorMapBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryColorMapVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryColorMapBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryColorMapVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryColorMapVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryColorMapVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryColorMapVector_append(self, *args)

    def add(self, *args):
        return _framework.GeometryColorMapVector_add(self, *args)

    def insert(self, element, index):
        return _framework.GeometryColorMapVector_insert(self, element, index)

    def remove_last(self):
        return _framework.GeometryColorMapVector_remove_last(self)

    def empty(self):
        return _framework.GeometryColorMapVector_empty(self)

    def remove_all(self):
        return _framework.GeometryColorMapVector_remove_all(self)

    def clear(self, *args):
        return _framework.GeometryColorMapVector_clear(self, *args)

    def remove(self, *args):
        return _framework.GeometryColorMapVector_remove(self, *args)

    def is_empty(self):
        return _framework.GeometryColorMapVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.GeometryColorMapVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.GeometryColorMapVector_remove_items(self, item)

    def get_count(self):
        return _framework.GeometryColorMapVector_get_count(self)

    def get_capacity(self):
        return _framework.GeometryColorMapVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.GeometryColorMapVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.GeometryColorMapVector_set_capacity(self, *args)

    def refit(self):
        return _framework.GeometryColorMapVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.GeometryColorMapVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.GeometryColorMapVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.GeometryColorMapVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryColorMapVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryColorMapVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryColorMapVector_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryColorMapVector_set_list(self, list)

    def get_array(self, array):
        return _framework.GeometryColorMapVector_get_array(self, array)

    def set_array(self, array):
        return _framework.GeometryColorMapVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.GeometryColorMapVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.GeometryColorMapVector_item(self, *args)

    def get_data(self):
        return _framework.GeometryColorMapVector_get_data(self)

    def get_memory_size(self):
        return _framework.GeometryColorMapVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryColorMapVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryColorMapVector_class_info)
    else:
        class_info = _framework.GeometryColorMapVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryColorMapVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryColorMapVector____class_destructor__
GeometryColorMapVector_swigregister = _framework.GeometryColorMapVector_swigregister
GeometryColorMapVector_swigregister(GeometryColorMapVector)

def GeometryColorMapVector_class_info():
    return _framework.GeometryColorMapVector_class_info()
GeometryColorMapVector_class_info = _framework.GeometryColorMapVector_class_info

def GeometryColorMapVector____class_destructor__(instance, is_array):
    return _framework.GeometryColorMapVector____class_destructor__(instance, is_array)
GeometryColorMapVector____class_destructor__ = _framework.GeometryColorMapVector____class_destructor__

class GeometryNormalMapBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryNormalMapBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryNormalMapBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.GeometryNormalMapBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_GeometryNormalMapBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryNormalMapBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.GeometryNormalMapBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.GeometryNormalMapBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.GeometryNormalMapBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.GeometryNormalMapBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.GeometryNormalMapBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.GeometryNormalMapBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.GeometryNormalMapBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.GeometryNormalMapBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.GeometryNormalMapBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryNormalMapBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.GeometryNormalMapBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.GeometryNormalMapBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.GeometryNormalMapBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryNormalMapBasicArray_class_info)
    else:
        class_info = _framework.GeometryNormalMapBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryNormalMapBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryNormalMapBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.GeometryNormalMapBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.GeometryNormalMapBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GeometryNormalMapBasicArray_swigregister = _framework.GeometryNormalMapBasicArray_swigregister
GeometryNormalMapBasicArray_swigregister(GeometryNormalMapBasicArray)

def GeometryNormalMapBasicArray_class_info():
    return _framework.GeometryNormalMapBasicArray_class_info()
GeometryNormalMapBasicArray_class_info = _framework.GeometryNormalMapBasicArray_class_info

def GeometryNormalMapBasicArray____class_destructor__(instance, is_array):
    return _framework.GeometryNormalMapBasicArray____class_destructor__(instance, is_array)
GeometryNormalMapBasicArray____class_destructor__ = _framework.GeometryNormalMapBasicArray____class_destructor__

class GeometryNormalMapArray(GeometryNormalMapBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryNormalMapBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryNormalMapArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryNormalMapBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryNormalMapArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryNormalMapArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryNormalMapArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryNormalMapArray_append(self, *args)

    def get_count(self):
        return _framework.GeometryNormalMapArray_get_count(self)

    def remove_all(self):
        return _framework.GeometryNormalMapArray_remove_all(self)

    def resize(self, *args):
        return _framework.GeometryNormalMapArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryNormalMapArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryNormalMapArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryNormalMapArray_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryNormalMapArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.GeometryNormalMapArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryNormalMapArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryNormalMapArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryNormalMapArray_class_info)
    else:
        class_info = _framework.GeometryNormalMapArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryNormalMapArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryNormalMapArray____class_destructor__
GeometryNormalMapArray_swigregister = _framework.GeometryNormalMapArray_swigregister
GeometryNormalMapArray_swigregister(GeometryNormalMapArray)

def GeometryNormalMapArray_class_info():
    return _framework.GeometryNormalMapArray_class_info()
GeometryNormalMapArray_class_info = _framework.GeometryNormalMapArray_class_info

def GeometryNormalMapArray____class_destructor__(instance, is_array):
    return _framework.GeometryNormalMapArray____class_destructor__(instance, is_array)
GeometryNormalMapArray____class_destructor__ = _framework.GeometryNormalMapArray____class_destructor__

class GeometryNormalMapVector(GeometryNormalMapBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryNormalMapBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryNormalMapVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryNormalMapBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryNormalMapVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryNormalMapVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryNormalMapVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryNormalMapVector_append(self, *args)

    def add(self, *args):
        return _framework.GeometryNormalMapVector_add(self, *args)

    def insert(self, element, index):
        return _framework.GeometryNormalMapVector_insert(self, element, index)

    def remove_last(self):
        return _framework.GeometryNormalMapVector_remove_last(self)

    def empty(self):
        return _framework.GeometryNormalMapVector_empty(self)

    def remove_all(self):
        return _framework.GeometryNormalMapVector_remove_all(self)

    def clear(self, *args):
        return _framework.GeometryNormalMapVector_clear(self, *args)

    def remove(self, *args):
        return _framework.GeometryNormalMapVector_remove(self, *args)

    def is_empty(self):
        return _framework.GeometryNormalMapVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.GeometryNormalMapVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.GeometryNormalMapVector_remove_items(self, item)

    def get_count(self):
        return _framework.GeometryNormalMapVector_get_count(self)

    def get_capacity(self):
        return _framework.GeometryNormalMapVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.GeometryNormalMapVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.GeometryNormalMapVector_set_capacity(self, *args)

    def refit(self):
        return _framework.GeometryNormalMapVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.GeometryNormalMapVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.GeometryNormalMapVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.GeometryNormalMapVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryNormalMapVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryNormalMapVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryNormalMapVector_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryNormalMapVector_set_list(self, list)

    def get_array(self, array):
        return _framework.GeometryNormalMapVector_get_array(self, array)

    def set_array(self, array):
        return _framework.GeometryNormalMapVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.GeometryNormalMapVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.GeometryNormalMapVector_item(self, *args)

    def get_data(self):
        return _framework.GeometryNormalMapVector_get_data(self)

    def get_memory_size(self):
        return _framework.GeometryNormalMapVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryNormalMapVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryNormalMapVector_class_info)
    else:
        class_info = _framework.GeometryNormalMapVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryNormalMapVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryNormalMapVector____class_destructor__
GeometryNormalMapVector_swigregister = _framework.GeometryNormalMapVector_swigregister
GeometryNormalMapVector_swigregister(GeometryNormalMapVector)

def GeometryNormalMapVector_class_info():
    return _framework.GeometryNormalMapVector_class_info()
GeometryNormalMapVector_class_info = _framework.GeometryNormalMapVector_class_info

def GeometryNormalMapVector____class_destructor__(instance, is_array):
    return _framework.GeometryNormalMapVector____class_destructor__(instance, is_array)
GeometryNormalMapVector____class_destructor__ = _framework.GeometryNormalMapVector____class_destructor__

class GeometryUvTileBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryUvTileBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryUvTileBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.GeometryUvTileBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_GeometryUvTileBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryUvTileBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.GeometryUvTileBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.GeometryUvTileBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.GeometryUvTileBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.GeometryUvTileBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.GeometryUvTileBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.GeometryUvTileBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.GeometryUvTileBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.GeometryUvTileBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.GeometryUvTileBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryUvTileBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.GeometryUvTileBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.GeometryUvTileBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.GeometryUvTileBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryUvTileBasicArray_class_info)
    else:
        class_info = _framework.GeometryUvTileBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryUvTileBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryUvTileBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.GeometryUvTileBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.GeometryUvTileBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GeometryUvTileBasicArray_swigregister = _framework.GeometryUvTileBasicArray_swigregister
GeometryUvTileBasicArray_swigregister(GeometryUvTileBasicArray)

def GeometryUvTileBasicArray_class_info():
    return _framework.GeometryUvTileBasicArray_class_info()
GeometryUvTileBasicArray_class_info = _framework.GeometryUvTileBasicArray_class_info

def GeometryUvTileBasicArray____class_destructor__(instance, is_array):
    return _framework.GeometryUvTileBasicArray____class_destructor__(instance, is_array)
GeometryUvTileBasicArray____class_destructor__ = _framework.GeometryUvTileBasicArray____class_destructor__

class GeometryUvTileArray(GeometryUvTileBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryUvTileBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryUvTileArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryUvTileBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryUvTileArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryUvTileArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryUvTileArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryUvTileArray_append(self, *args)

    def get_count(self):
        return _framework.GeometryUvTileArray_get_count(self)

    def remove_all(self):
        return _framework.GeometryUvTileArray_remove_all(self)

    def resize(self, *args):
        return _framework.GeometryUvTileArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryUvTileArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryUvTileArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryUvTileArray_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryUvTileArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.GeometryUvTileArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.GeometryUvTileArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryUvTileArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryUvTileArray_class_info)
    else:
        class_info = _framework.GeometryUvTileArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryUvTileArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryUvTileArray____class_destructor__
GeometryUvTileArray_swigregister = _framework.GeometryUvTileArray_swigregister
GeometryUvTileArray_swigregister(GeometryUvTileArray)

def GeometryUvTileArray_class_info():
    return _framework.GeometryUvTileArray_class_info()
GeometryUvTileArray_class_info = _framework.GeometryUvTileArray_class_info

def GeometryUvTileArray____class_destructor__(instance, is_array):
    return _framework.GeometryUvTileArray____class_destructor__(instance, is_array)
GeometryUvTileArray____class_destructor__ = _framework.GeometryUvTileArray____class_destructor__

class GeometryUvTileVector(GeometryUvTileBasicArray):
    __swig_setmethods__ = {}
    for _s in [GeometryUvTileBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryUvTileVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryUvTileBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryUvTileVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryUvTileVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryUvTileVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.GeometryUvTileVector_append(self, *args)

    def add(self, *args):
        return _framework.GeometryUvTileVector_add(self, *args)

    def insert(self, element, index):
        return _framework.GeometryUvTileVector_insert(self, element, index)

    def remove_last(self):
        return _framework.GeometryUvTileVector_remove_last(self)

    def empty(self):
        return _framework.GeometryUvTileVector_empty(self)

    def remove_all(self):
        return _framework.GeometryUvTileVector_remove_all(self)

    def clear(self, *args):
        return _framework.GeometryUvTileVector_clear(self, *args)

    def remove(self, *args):
        return _framework.GeometryUvTileVector_remove(self, *args)

    def is_empty(self):
        return _framework.GeometryUvTileVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.GeometryUvTileVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.GeometryUvTileVector_remove_items(self, item)

    def get_count(self):
        return _framework.GeometryUvTileVector_get_count(self)

    def get_capacity(self):
        return _framework.GeometryUvTileVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.GeometryUvTileVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.GeometryUvTileVector_set_capacity(self, *args)

    def refit(self):
        return _framework.GeometryUvTileVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.GeometryUvTileVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.GeometryUvTileVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.GeometryUvTileVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.GeometryUvTileVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.GeometryUvTileVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.GeometryUvTileVector_get_list(self, list)

    def set_list(self, list):
        return _framework.GeometryUvTileVector_set_list(self, list)

    def get_array(self, array):
        return _framework.GeometryUvTileVector_get_array(self, array)

    def set_array(self, array):
        return _framework.GeometryUvTileVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.GeometryUvTileVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.GeometryUvTileVector_item(self, *args)

    def get_data(self):
        return _framework.GeometryUvTileVector_get_data(self)

    def get_memory_size(self):
        return _framework.GeometryUvTileVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.GeometryUvTileVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryUvTileVector_class_info)
    else:
        class_info = _framework.GeometryUvTileVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryUvTileVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryUvTileVector____class_destructor__
GeometryUvTileVector_swigregister = _framework.GeometryUvTileVector_swigregister
GeometryUvTileVector_swigregister(GeometryUvTileVector)

def GeometryUvTileVector_class_info():
    return _framework.GeometryUvTileVector_class_info()
GeometryUvTileVector_class_info = _framework.GeometryUvTileVector_class_info

def GeometryUvTileVector____class_destructor__(instance, is_array):
    return _framework.GeometryUvTileVector____class_destructor__(instance, is_array)
GeometryUvTileVector____class_destructor__ = _framework.GeometryUvTileVector____class_destructor__

class PolyMeshPropertyBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyMeshPropertyBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyMeshPropertyBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.PolyMeshPropertyBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_PolyMeshPropertyBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_PolyMeshPropertyBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.PolyMeshPropertyBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.PolyMeshPropertyBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.PolyMeshPropertyBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.PolyMeshPropertyBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.PolyMeshPropertyBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.PolyMeshPropertyBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.PolyMeshPropertyBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.PolyMeshPropertyBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.PolyMeshPropertyBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.PolyMeshPropertyBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.PolyMeshPropertyBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.PolyMeshPropertyBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.PolyMeshPropertyBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.PolyMeshPropertyBasicArray_class_info)
    else:
        class_info = _framework.PolyMeshPropertyBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.PolyMeshPropertyBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.PolyMeshPropertyBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.PolyMeshPropertyBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.PolyMeshPropertyBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

PolyMeshPropertyBasicArray_swigregister = _framework.PolyMeshPropertyBasicArray_swigregister
PolyMeshPropertyBasicArray_swigregister(PolyMeshPropertyBasicArray)

def PolyMeshPropertyBasicArray_class_info():
    return _framework.PolyMeshPropertyBasicArray_class_info()
PolyMeshPropertyBasicArray_class_info = _framework.PolyMeshPropertyBasicArray_class_info

def PolyMeshPropertyBasicArray____class_destructor__(instance, is_array):
    return _framework.PolyMeshPropertyBasicArray____class_destructor__(instance, is_array)
PolyMeshPropertyBasicArray____class_destructor__ = _framework.PolyMeshPropertyBasicArray____class_destructor__

class PolyMeshPropertyArray(PolyMeshPropertyBasicArray):
    __swig_setmethods__ = {}
    for _s in [PolyMeshPropertyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyMeshPropertyArray, name, value)
    __swig_getmethods__ = {}
    for _s in [PolyMeshPropertyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyMeshPropertyArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_PolyMeshPropertyArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_PolyMeshPropertyArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.PolyMeshPropertyArray_append(self, *args)

    def get_count(self):
        return _framework.PolyMeshPropertyArray_get_count(self)

    def remove_all(self):
        return _framework.PolyMeshPropertyArray_remove_all(self)

    def resize(self, *args):
        return _framework.PolyMeshPropertyArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.PolyMeshPropertyArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.PolyMeshPropertyArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.PolyMeshPropertyArray_get_list(self, list)

    def set_list(self, list):
        return _framework.PolyMeshPropertyArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.PolyMeshPropertyArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.PolyMeshPropertyArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.PolyMeshPropertyArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.PolyMeshPropertyArray_class_info)
    else:
        class_info = _framework.PolyMeshPropertyArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.PolyMeshPropertyArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.PolyMeshPropertyArray____class_destructor__
PolyMeshPropertyArray_swigregister = _framework.PolyMeshPropertyArray_swigregister
PolyMeshPropertyArray_swigregister(PolyMeshPropertyArray)

def PolyMeshPropertyArray_class_info():
    return _framework.PolyMeshPropertyArray_class_info()
PolyMeshPropertyArray_class_info = _framework.PolyMeshPropertyArray_class_info

def PolyMeshPropertyArray____class_destructor__(instance, is_array):
    return _framework.PolyMeshPropertyArray____class_destructor__(instance, is_array)
PolyMeshPropertyArray____class_destructor__ = _framework.PolyMeshPropertyArray____class_destructor__

class PolyMeshPropertyVector(PolyMeshPropertyBasicArray):
    __swig_setmethods__ = {}
    for _s in [PolyMeshPropertyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyMeshPropertyVector, name, value)
    __swig_getmethods__ = {}
    for _s in [PolyMeshPropertyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyMeshPropertyVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_PolyMeshPropertyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_PolyMeshPropertyVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.PolyMeshPropertyVector_append(self, *args)

    def add(self, *args):
        return _framework.PolyMeshPropertyVector_add(self, *args)

    def insert(self, element, index):
        return _framework.PolyMeshPropertyVector_insert(self, element, index)

    def remove_last(self):
        return _framework.PolyMeshPropertyVector_remove_last(self)

    def empty(self):
        return _framework.PolyMeshPropertyVector_empty(self)

    def remove_all(self):
        return _framework.PolyMeshPropertyVector_remove_all(self)

    def clear(self, *args):
        return _framework.PolyMeshPropertyVector_clear(self, *args)

    def remove(self, *args):
        return _framework.PolyMeshPropertyVector_remove(self, *args)

    def is_empty(self):
        return _framework.PolyMeshPropertyVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.PolyMeshPropertyVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.PolyMeshPropertyVector_remove_items(self, item)

    def get_count(self):
        return _framework.PolyMeshPropertyVector_get_count(self)

    def get_capacity(self):
        return _framework.PolyMeshPropertyVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.PolyMeshPropertyVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.PolyMeshPropertyVector_set_capacity(self, *args)

    def refit(self):
        return _framework.PolyMeshPropertyVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.PolyMeshPropertyVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.PolyMeshPropertyVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.PolyMeshPropertyVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.PolyMeshPropertyVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.PolyMeshPropertyVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.PolyMeshPropertyVector_get_list(self, list)

    def set_list(self, list):
        return _framework.PolyMeshPropertyVector_set_list(self, list)

    def get_array(self, array):
        return _framework.PolyMeshPropertyVector_get_array(self, array)

    def set_array(self, array):
        return _framework.PolyMeshPropertyVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.PolyMeshPropertyVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.PolyMeshPropertyVector_item(self, *args)

    def get_data(self):
        return _framework.PolyMeshPropertyVector_get_data(self)

    def get_memory_size(self):
        return _framework.PolyMeshPropertyVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.PolyMeshPropertyVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.PolyMeshPropertyVector_class_info)
    else:
        class_info = _framework.PolyMeshPropertyVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.PolyMeshPropertyVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.PolyMeshPropertyVector____class_destructor__
PolyMeshPropertyVector_swigregister = _framework.PolyMeshPropertyVector_swigregister
PolyMeshPropertyVector_swigregister(PolyMeshPropertyVector)

def PolyMeshPropertyVector_class_info():
    return _framework.PolyMeshPropertyVector_class_info()
PolyMeshPropertyVector_class_info = _framework.PolyMeshPropertyVector_class_info

def PolyMeshPropertyVector____class_destructor__(instance, is_array):
    return _framework.PolyMeshPropertyVector____class_destructor__(instance, is_array)
PolyMeshPropertyVector____class_destructor__ = _framework.PolyMeshPropertyVector____class_destructor__

class CurveMeshPropertyBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveMeshPropertyBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveMeshPropertyBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.CurveMeshPropertyBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_CurveMeshPropertyBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_CurveMeshPropertyBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _framework.CurveMeshPropertyBasicArray_get_count(self)

    def get_item(self, index):
        return _framework.CurveMeshPropertyBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _framework.CurveMeshPropertyBasicArray_set_item(self, index, item)

    def front(self, *args):
        return _framework.CurveMeshPropertyBasicArray_front(self, *args)

    def back(self, *args):
        return _framework.CurveMeshPropertyBasicArray_back(self, *args)

    def exists(self, item):
        return _framework.CurveMeshPropertyBasicArray_exists(self, item)

    def get_index(self, item):
        return _framework.CurveMeshPropertyBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _framework.CurveMeshPropertyBasicArray_sub(self, index, count)

    def get_data(self, *args):
        return _framework.CurveMeshPropertyBasicArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.CurveMeshPropertyBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _framework.CurveMeshPropertyBasicArray_begin(self, *args)

    def end(self, *args):
        return _framework.CurveMeshPropertyBasicArray_end(self, *args)

    def get_class_info(self):
        return _framework.CurveMeshPropertyBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.CurveMeshPropertyBasicArray_class_info)
    else:
        class_info = _framework.CurveMeshPropertyBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.CurveMeshPropertyBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.CurveMeshPropertyBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _framework.CurveMeshPropertyBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _framework.CurveMeshPropertyBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

CurveMeshPropertyBasicArray_swigregister = _framework.CurveMeshPropertyBasicArray_swigregister
CurveMeshPropertyBasicArray_swigregister(CurveMeshPropertyBasicArray)

def CurveMeshPropertyBasicArray_class_info():
    return _framework.CurveMeshPropertyBasicArray_class_info()
CurveMeshPropertyBasicArray_class_info = _framework.CurveMeshPropertyBasicArray_class_info

def CurveMeshPropertyBasicArray____class_destructor__(instance, is_array):
    return _framework.CurveMeshPropertyBasicArray____class_destructor__(instance, is_array)
CurveMeshPropertyBasicArray____class_destructor__ = _framework.CurveMeshPropertyBasicArray____class_destructor__

class CurveMeshPropertyArray(CurveMeshPropertyBasicArray):
    __swig_setmethods__ = {}
    for _s in [CurveMeshPropertyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveMeshPropertyArray, name, value)
    __swig_getmethods__ = {}
    for _s in [CurveMeshPropertyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveMeshPropertyArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_CurveMeshPropertyArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_CurveMeshPropertyArray
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.CurveMeshPropertyArray_append(self, *args)

    def get_count(self):
        return _framework.CurveMeshPropertyArray_get_count(self)

    def remove_all(self):
        return _framework.CurveMeshPropertyArray_remove_all(self)

    def resize(self, *args):
        return _framework.CurveMeshPropertyArray_resize(self, *args)

    def copy_from(self, *args):
        return _framework.CurveMeshPropertyArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.CurveMeshPropertyArray_copy_to(self, dest)

    def get_list(self, list):
        return _framework.CurveMeshPropertyArray_get_list(self, list)

    def set_list(self, list):
        return _framework.CurveMeshPropertyArray_set_list(self, list)

    def get_data(self, *args):
        return _framework.CurveMeshPropertyArray_get_data(self, *args)

    def get_memory_size(self):
        return _framework.CurveMeshPropertyArray_get_memory_size(self)

    def get_class_info(self):
        return _framework.CurveMeshPropertyArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.CurveMeshPropertyArray_class_info)
    else:
        class_info = _framework.CurveMeshPropertyArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.CurveMeshPropertyArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.CurveMeshPropertyArray____class_destructor__
CurveMeshPropertyArray_swigregister = _framework.CurveMeshPropertyArray_swigregister
CurveMeshPropertyArray_swigregister(CurveMeshPropertyArray)

def CurveMeshPropertyArray_class_info():
    return _framework.CurveMeshPropertyArray_class_info()
CurveMeshPropertyArray_class_info = _framework.CurveMeshPropertyArray_class_info

def CurveMeshPropertyArray____class_destructor__(instance, is_array):
    return _framework.CurveMeshPropertyArray____class_destructor__(instance, is_array)
CurveMeshPropertyArray____class_destructor__ = _framework.CurveMeshPropertyArray____class_destructor__

class CurveMeshPropertyVector(CurveMeshPropertyBasicArray):
    __swig_setmethods__ = {}
    for _s in [CurveMeshPropertyBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveMeshPropertyVector, name, value)
    __swig_getmethods__ = {}
    for _s in [CurveMeshPropertyBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveMeshPropertyVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_CurveMeshPropertyVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_CurveMeshPropertyVector
    __del__ = lambda self: None

    def append(self, *args):
        return _framework.CurveMeshPropertyVector_append(self, *args)

    def add(self, *args):
        return _framework.CurveMeshPropertyVector_add(self, *args)

    def insert(self, element, index):
        return _framework.CurveMeshPropertyVector_insert(self, element, index)

    def remove_last(self):
        return _framework.CurveMeshPropertyVector_remove_last(self)

    def empty(self):
        return _framework.CurveMeshPropertyVector_empty(self)

    def remove_all(self):
        return _framework.CurveMeshPropertyVector_remove_all(self)

    def clear(self, *args):
        return _framework.CurveMeshPropertyVector_clear(self, *args)

    def remove(self, *args):
        return _framework.CurveMeshPropertyVector_remove(self, *args)

    def is_empty(self):
        return _framework.CurveMeshPropertyVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _framework.CurveMeshPropertyVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _framework.CurveMeshPropertyVector_remove_items(self, item)

    def get_count(self):
        return _framework.CurveMeshPropertyVector_get_count(self)

    def get_capacity(self):
        return _framework.CurveMeshPropertyVector_get_capacity(self)

    def set_count(self, *args):
        return _framework.CurveMeshPropertyVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _framework.CurveMeshPropertyVector_set_capacity(self, *args)

    def refit(self):
        return _framework.CurveMeshPropertyVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _framework.CurveMeshPropertyVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _framework.CurveMeshPropertyVector_resize(self, *args)

    def reserve(self, *args):
        return _framework.CurveMeshPropertyVector_reserve(self, *args)

    def copy_from(self, *args):
        return _framework.CurveMeshPropertyVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _framework.CurveMeshPropertyVector_copy_to(self, dest)

    def get_list(self, list):
        return _framework.CurveMeshPropertyVector_get_list(self, list)

    def set_list(self, list):
        return _framework.CurveMeshPropertyVector_set_list(self, list)

    def get_array(self, array):
        return _framework.CurveMeshPropertyVector_get_array(self, array)

    def set_array(self, array):
        return _framework.CurveMeshPropertyVector_set_array(self, array)

    def move(self, arg2, to):
        return _framework.CurveMeshPropertyVector_move(self, arg2, to)

    def item(self, *args):
        return _framework.CurveMeshPropertyVector_item(self, *args)

    def get_data(self):
        return _framework.CurveMeshPropertyVector_get_data(self)

    def get_memory_size(self):
        return _framework.CurveMeshPropertyVector_get_memory_size(self)

    def get_class_info(self):
        return _framework.CurveMeshPropertyVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_framework.CurveMeshPropertyVector_class_info)
    else:
        class_info = _framework.CurveMeshPropertyVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.CurveMeshPropertyVector____class_destructor__)
    else:
        ___class_destructor__ = _framework.CurveMeshPropertyVector____class_destructor__
CurveMeshPropertyVector_swigregister = _framework.CurveMeshPropertyVector_swigregister
CurveMeshPropertyVector_swigregister(CurveMeshPropertyVector)

def CurveMeshPropertyVector_class_info():
    return _framework.CurveMeshPropertyVector_class_info()
CurveMeshPropertyVector_class_info = _framework.CurveMeshPropertyVector_class_info

def CurveMeshPropertyVector____class_destructor__(instance, is_array):
    return _framework.CurveMeshPropertyVector____class_destructor__(instance, is_array)
CurveMeshPropertyVector____class_destructor__ = _framework.CurveMeshPropertyVector____class_destructor__

class GeometryDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryDescriptor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene_object"] = _framework.GeometryDescriptor_scene_object_set
    __swig_getmethods__["scene_object"] = _framework.GeometryDescriptor_scene_object_get
    if _newclass:
        scene_object = _swig_property(_framework.GeometryDescriptor_scene_object_get, _framework.GeometryDescriptor_scene_object_set)
    __swig_setmethods__["base_geometry"] = _framework.GeometryDescriptor_base_geometry_set
    __swig_getmethods__["base_geometry"] = _framework.GeometryDescriptor_base_geometry_get
    if _newclass:
        base_geometry = _swig_property(_framework.GeometryDescriptor_base_geometry_get, _framework.GeometryDescriptor_base_geometry_set)
    __swig_setmethods__["deformed_geometry"] = _framework.GeometryDescriptor_deformed_geometry_set
    __swig_getmethods__["deformed_geometry"] = _framework.GeometryDescriptor_deformed_geometry_get
    if _newclass:
        deformed_geometry = _swig_property(_framework.GeometryDescriptor_deformed_geometry_get, _framework.GeometryDescriptor_deformed_geometry_set)
    __swig_setmethods__["matrix"] = _framework.GeometryDescriptor_matrix_set
    __swig_getmethods__["matrix"] = _framework.GeometryDescriptor_matrix_get
    if _newclass:
        matrix = _swig_property(_framework.GeometryDescriptor_matrix_get, _framework.GeometryDescriptor_matrix_set)

    def __init__(self):
        this = _framework.new_GeometryDescriptor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryDescriptor
    __del__ = lambda self: None
GeometryDescriptor_swigregister = _framework.GeometryDescriptor_swigregister
GeometryDescriptor_swigregister(GeometryDescriptor)

class GeometryPrimitiveSampleDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPrimitiveSampleDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPrimitiveSampleDescriptor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _framework.GeometryPrimitiveSampleDescriptor_id_set
    __swig_getmethods__["id"] = _framework.GeometryPrimitiveSampleDescriptor_id_get
    if _newclass:
        id = _swig_property(_framework.GeometryPrimitiveSampleDescriptor_id_get, _framework.GeometryPrimitiveSampleDescriptor_id_set)
    __swig_setmethods__["u"] = _framework.GeometryPrimitiveSampleDescriptor_u_set
    __swig_getmethods__["u"] = _framework.GeometryPrimitiveSampleDescriptor_u_get
    if _newclass:
        u = _swig_property(_framework.GeometryPrimitiveSampleDescriptor_u_get, _framework.GeometryPrimitiveSampleDescriptor_u_set)
    __swig_setmethods__["v"] = _framework.GeometryPrimitiveSampleDescriptor_v_set
    __swig_getmethods__["v"] = _framework.GeometryPrimitiveSampleDescriptor_v_get
    if _newclass:
        v = _swig_property(_framework.GeometryPrimitiveSampleDescriptor_v_get, _framework.GeometryPrimitiveSampleDescriptor_v_set)

    def __init__(self):
        this = _framework.new_GeometryPrimitiveSampleDescriptor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPrimitiveSampleDescriptor
    __del__ = lambda self: None
GeometryPrimitiveSampleDescriptor_swigregister = _framework.GeometryPrimitiveSampleDescriptor_swigregister
GeometryPrimitiveSampleDescriptor_swigregister(GeometryPrimitiveSampleDescriptor)

class GeometryPointSample(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPointSample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPointSample, name)
    __repr__ = _swig_repr
    __swig_setmethods__["support"] = _framework.GeometryPointSample_support_set
    __swig_getmethods__["support"] = _framework.GeometryPointSample_support_get
    if _newclass:
        support = _swig_property(_framework.GeometryPointSample_support_get, _framework.GeometryPointSample_support_set)
    __swig_setmethods__["primitive"] = _framework.GeometryPointSample_primitive_set
    __swig_getmethods__["primitive"] = _framework.GeometryPointSample_primitive_get
    if _newclass:
        primitive = _swig_property(_framework.GeometryPointSample_primitive_get, _framework.GeometryPointSample_primitive_set)
    __swig_setmethods__["position"] = _framework.GeometryPointSample_position_set
    __swig_getmethods__["position"] = _framework.GeometryPointSample_position_get
    if _newclass:
        position = _swig_property(_framework.GeometryPointSample_position_get, _framework.GeometryPointSample_position_set)
    __swig_setmethods__["normal"] = _framework.GeometryPointSample_normal_set
    __swig_getmethods__["normal"] = _framework.GeometryPointSample_normal_get
    if _newclass:
        normal = _swig_property(_framework.GeometryPointSample_normal_get, _framework.GeometryPointSample_normal_set)
    __swig_setmethods__["velocity"] = _framework.GeometryPointSample_velocity_set
    __swig_getmethods__["velocity"] = _framework.GeometryPointSample_velocity_get
    if _newclass:
        velocity = _swig_property(_framework.GeometryPointSample_velocity_get, _framework.GeometryPointSample_velocity_set)

    def __init__(self):
        this = _framework.new_GeometryPointSample()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPointSample
    __del__ = lambda self: None
GeometryPointSample_swigregister = _framework.GeometryPointSample_swigregister
GeometryPointSample_swigregister(GeometryPointSample)

class GeometryPositionDifferential(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPositionDifferential, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPositionDifferential, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dpdx"] = _framework.GeometryPositionDifferential_dpdx_set
    __swig_getmethods__["dpdx"] = _framework.GeometryPositionDifferential_dpdx_get
    if _newclass:
        dpdx = _swig_property(_framework.GeometryPositionDifferential_dpdx_get, _framework.GeometryPositionDifferential_dpdx_set)
    __swig_setmethods__["dpdy"] = _framework.GeometryPositionDifferential_dpdy_set
    __swig_getmethods__["dpdy"] = _framework.GeometryPositionDifferential_dpdy_get
    if _newclass:
        dpdy = _swig_property(_framework.GeometryPositionDifferential_dpdy_get, _framework.GeometryPositionDifferential_dpdy_set)
    __swig_setmethods__["area"] = _framework.GeometryPositionDifferential_area_set
    __swig_getmethods__["area"] = _framework.GeometryPositionDifferential_area_get
    if _newclass:
        area = _swig_property(_framework.GeometryPositionDifferential_area_get, _framework.GeometryPositionDifferential_area_set)

    def __init__(self):
        this = _framework.new_GeometryPositionDifferential()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPositionDifferential
    __del__ = lambda self: None
GeometryPositionDifferential_swigregister = _framework.GeometryPositionDifferential_swigregister
GeometryPositionDifferential_swigregister(GeometryPositionDifferential)

class GeometryDifferential(GeometryPositionDifferential):
    __swig_setmethods__ = {}
    for _s in [GeometryPositionDifferential]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryDifferential, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryPositionDifferential]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryDifferential, name)
    __repr__ = _swig_repr
    __swig_setmethods__["duvdx"] = _framework.GeometryDifferential_duvdx_set
    __swig_getmethods__["duvdx"] = _framework.GeometryDifferential_duvdx_get
    if _newclass:
        duvdx = _swig_property(_framework.GeometryDifferential_duvdx_get, _framework.GeometryDifferential_duvdx_set)
    __swig_setmethods__["duvdy"] = _framework.GeometryDifferential_duvdy_set
    __swig_getmethods__["duvdy"] = _framework.GeometryDifferential_duvdy_get
    if _newclass:
        duvdy = _swig_property(_framework.GeometryDifferential_duvdy_get, _framework.GeometryDifferential_duvdy_set)
    __swig_setmethods__["sub_duvdx"] = _framework.GeometryDifferential_sub_duvdx_set
    __swig_getmethods__["sub_duvdx"] = _framework.GeometryDifferential_sub_duvdx_get
    if _newclass:
        sub_duvdx = _swig_property(_framework.GeometryDifferential_sub_duvdx_get, _framework.GeometryDifferential_sub_duvdx_set)
    __swig_setmethods__["sub_duvdy"] = _framework.GeometryDifferential_sub_duvdy_set
    __swig_getmethods__["sub_duvdy"] = _framework.GeometryDifferential_sub_duvdy_get
    if _newclass:
        sub_duvdy = _swig_property(_framework.GeometryDifferential_sub_duvdy_get, _framework.GeometryDifferential_sub_duvdy_set)

    def __init__(self):
        this = _framework.new_GeometryDifferential()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryDifferential
    __del__ = lambda self: None
GeometryDifferential_swigregister = _framework.GeometryDifferential_swigregister
GeometryDifferential_swigregister(GeometryDifferential)

class GeometryObjectDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryObjectDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryObjectDescriptor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_GeometryObjectDescriptor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clear(self):
        return _framework.GeometryObjectDescriptor_clear(self)
    __swig_setmethods__["scene_objects"] = _framework.GeometryObjectDescriptor_scene_objects_set
    __swig_getmethods__["scene_objects"] = _framework.GeometryObjectDescriptor_scene_objects_get
    if _newclass:
        scene_objects = _swig_property(_framework.GeometryObjectDescriptor_scene_objects_get, _framework.GeometryObjectDescriptor_scene_objects_set)
    __swig_setmethods__["geometry_index"] = _framework.GeometryObjectDescriptor_geometry_index_set
    __swig_getmethods__["geometry_index"] = _framework.GeometryObjectDescriptor_geometry_index_get
    if _newclass:
        geometry_index = _swig_property(_framework.GeometryObjectDescriptor_geometry_index_get, _framework.GeometryObjectDescriptor_geometry_index_set)
    __swig_setmethods__["material_index"] = _framework.GeometryObjectDescriptor_material_index_set
    __swig_getmethods__["material_index"] = _framework.GeometryObjectDescriptor_material_index_get
    if _newclass:
        material_index = _swig_property(_framework.GeometryObjectDescriptor_material_index_get, _framework.GeometryObjectDescriptor_material_index_set)
    __swig_setmethods__["visibility_index"] = _framework.GeometryObjectDescriptor_visibility_index_set
    __swig_getmethods__["visibility_index"] = _framework.GeometryObjectDescriptor_visibility_index_get
    if _newclass:
        visibility_index = _swig_property(_framework.GeometryObjectDescriptor_visibility_index_get, _framework.GeometryObjectDescriptor_visibility_index_set)
    __swig_setmethods__["local_geometry_index"] = _framework.GeometryObjectDescriptor_local_geometry_index_set
    __swig_getmethods__["local_geometry_index"] = _framework.GeometryObjectDescriptor_local_geometry_index_get
    if _newclass:
        local_geometry_index = _swig_property(_framework.GeometryObjectDescriptor_local_geometry_index_get, _framework.GeometryObjectDescriptor_local_geometry_index_set)
    __swig_setmethods__["base_geometry"] = _framework.GeometryObjectDescriptor_base_geometry_set
    __swig_getmethods__["base_geometry"] = _framework.GeometryObjectDescriptor_base_geometry_get
    if _newclass:
        base_geometry = _swig_property(_framework.GeometryObjectDescriptor_base_geometry_get, _framework.GeometryObjectDescriptor_base_geometry_set)
    __swig_setmethods__["deformed_geometry"] = _framework.GeometryObjectDescriptor_deformed_geometry_set
    __swig_getmethods__["deformed_geometry"] = _framework.GeometryObjectDescriptor_deformed_geometry_get
    if _newclass:
        deformed_geometry = _swig_property(_framework.GeometryObjectDescriptor_deformed_geometry_get, _framework.GeometryObjectDescriptor_deformed_geometry_set)
    __swig_destroy__ = _framework.delete_GeometryObjectDescriptor
    __del__ = lambda self: None
GeometryObjectDescriptor_swigregister = _framework.GeometryObjectDescriptor_swigregister
GeometryObjectDescriptor_swigregister(GeometryObjectDescriptor)

class GeometrySampleDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometrySampleDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometrySampleDescriptor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_GeometrySampleDescriptor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clear(self):
        return _framework.GeometrySampleDescriptor_clear(self)
    __swig_setmethods__["vertex_id"] = _framework.GeometrySampleDescriptor_vertex_id_set
    __swig_getmethods__["vertex_id"] = _framework.GeometrySampleDescriptor_vertex_id_get
    if _newclass:
        vertex_id = _swig_property(_framework.GeometrySampleDescriptor_vertex_id_get, _framework.GeometrySampleDescriptor_vertex_id_set)
    __swig_setmethods__["primitive_id"] = _framework.GeometrySampleDescriptor_primitive_id_set
    __swig_getmethods__["primitive_id"] = _framework.GeometrySampleDescriptor_primitive_id_get
    if _newclass:
        primitive_id = _swig_property(_framework.GeometrySampleDescriptor_primitive_id_get, _framework.GeometrySampleDescriptor_primitive_id_set)
    __swig_setmethods__["sub_primitive_id"] = _framework.GeometrySampleDescriptor_sub_primitive_id_set
    __swig_getmethods__["sub_primitive_id"] = _framework.GeometrySampleDescriptor_sub_primitive_id_get
    if _newclass:
        sub_primitive_id = _swig_property(_framework.GeometrySampleDescriptor_sub_primitive_id_get, _framework.GeometrySampleDescriptor_sub_primitive_id_set)
    __swig_setmethods__["u"] = _framework.GeometrySampleDescriptor_u_set
    __swig_getmethods__["u"] = _framework.GeometrySampleDescriptor_u_get
    if _newclass:
        u = _swig_property(_framework.GeometrySampleDescriptor_u_get, _framework.GeometrySampleDescriptor_u_set)
    __swig_setmethods__["v"] = _framework.GeometrySampleDescriptor_v_set
    __swig_getmethods__["v"] = _framework.GeometrySampleDescriptor_v_get
    if _newclass:
        v = _swig_property(_framework.GeometrySampleDescriptor_v_get, _framework.GeometrySampleDescriptor_v_set)
    __swig_setmethods__["w"] = _framework.GeometrySampleDescriptor_w_set
    __swig_getmethods__["w"] = _framework.GeometrySampleDescriptor_w_get
    if _newclass:
        w = _swig_property(_framework.GeometrySampleDescriptor_w_get, _framework.GeometrySampleDescriptor_w_set)
    __swig_setmethods__["su"] = _framework.GeometrySampleDescriptor_su_set
    __swig_getmethods__["su"] = _framework.GeometrySampleDescriptor_su_get
    if _newclass:
        su = _swig_property(_framework.GeometrySampleDescriptor_su_get, _framework.GeometrySampleDescriptor_su_set)
    __swig_setmethods__["sv"] = _framework.GeometrySampleDescriptor_sv_set
    __swig_getmethods__["sv"] = _framework.GeometrySampleDescriptor_sv_get
    if _newclass:
        sv = _swig_property(_framework.GeometrySampleDescriptor_sv_get, _framework.GeometrySampleDescriptor_sv_set)
    __swig_setmethods__["sw"] = _framework.GeometrySampleDescriptor_sw_set
    __swig_getmethods__["sw"] = _framework.GeometrySampleDescriptor_sw_get
    if _newclass:
        sw = _swig_property(_framework.GeometrySampleDescriptor_sw_get, _framework.GeometrySampleDescriptor_sw_set)
    __swig_setmethods__["time"] = _framework.GeometrySampleDescriptor_time_set
    __swig_getmethods__["time"] = _framework.GeometrySampleDescriptor_time_get
    if _newclass:
        time = _swig_property(_framework.GeometrySampleDescriptor_time_get, _framework.GeometrySampleDescriptor_time_set)
    __swig_setmethods__["time_delta"] = _framework.GeometrySampleDescriptor_time_delta_set
    __swig_getmethods__["time_delta"] = _framework.GeometrySampleDescriptor_time_delta_get
    if _newclass:
        time_delta = _swig_property(_framework.GeometrySampleDescriptor_time_delta_get, _framework.GeometrySampleDescriptor_time_delta_set)
    __swig_setmethods__["eye_dir"] = _framework.GeometrySampleDescriptor_eye_dir_set
    __swig_getmethods__["eye_dir"] = _framework.GeometrySampleDescriptor_eye_dir_get
    if _newclass:
        eye_dir = _swig_property(_framework.GeometrySampleDescriptor_eye_dir_get, _framework.GeometrySampleDescriptor_eye_dir_set)
    __swig_destroy__ = _framework.delete_GeometrySampleDescriptor
    __del__ = lambda self: None
GeometrySampleDescriptor_swigregister = _framework.GeometrySampleDescriptor_swigregister
GeometrySampleDescriptor_swigregister(GeometrySampleDescriptor)

class GeometryMediumDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryMediumDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryMediumDescriptor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_GeometryMediumDescriptor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clear(self):
        return _framework.GeometryMediumDescriptor_clear(self)
    __swig_setmethods__["opacity"] = _framework.GeometryMediumDescriptor_opacity_set
    __swig_getmethods__["opacity"] = _framework.GeometryMediumDescriptor_opacity_get
    if _newclass:
        opacity = _swig_property(_framework.GeometryMediumDescriptor_opacity_get, _framework.GeometryMediumDescriptor_opacity_set)
    __swig_setmethods__["thickness"] = _framework.GeometryMediumDescriptor_thickness_set
    __swig_getmethods__["thickness"] = _framework.GeometryMediumDescriptor_thickness_get
    if _newclass:
        thickness = _swig_property(_framework.GeometryMediumDescriptor_thickness_get, _framework.GeometryMediumDescriptor_thickness_set)
    __swig_setmethods__["density"] = _framework.GeometryMediumDescriptor_density_set
    __swig_getmethods__["density"] = _framework.GeometryMediumDescriptor_density_get
    if _newclass:
        density = _swig_property(_framework.GeometryMediumDescriptor_density_get, _framework.GeometryMediumDescriptor_density_set)
    __swig_setmethods__["density_diff"] = _framework.GeometryMediumDescriptor_density_diff_set
    __swig_getmethods__["density_diff"] = _framework.GeometryMediumDescriptor_density_diff_get
    if _newclass:
        density_diff = _swig_property(_framework.GeometryMediumDescriptor_density_diff_get, _framework.GeometryMediumDescriptor_density_diff_set)
    __swig_destroy__ = _framework.delete_GeometryMediumDescriptor
    __del__ = lambda self: None
GeometryMediumDescriptor_swigregister = _framework.GeometryMediumDescriptor_swigregister
GeometryMediumDescriptor_swigregister(GeometryMediumDescriptor)

class GeometryMotionBlurSample(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryMotionBlurSample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryMotionBlurSample, name)
    __repr__ = _swig_repr
    __swig_setmethods__["span_index"] = _framework.GeometryMotionBlurSample_span_index_set
    __swig_getmethods__["span_index"] = _framework.GeometryMotionBlurSample_span_index_get
    if _newclass:
        span_index = _swig_property(_framework.GeometryMotionBlurSample_span_index_get, _framework.GeometryMotionBlurSample_span_index_set)
    __swig_setmethods__["delta_index"] = _framework.GeometryMotionBlurSample_delta_index_set
    __swig_getmethods__["delta_index"] = _framework.GeometryMotionBlurSample_delta_index_get
    if _newclass:
        delta_index = _swig_property(_framework.GeometryMotionBlurSample_delta_index_get, _framework.GeometryMotionBlurSample_delta_index_set)
    __swig_setmethods__["span_weight"] = _framework.GeometryMotionBlurSample_span_weight_set
    __swig_getmethods__["span_weight"] = _framework.GeometryMotionBlurSample_span_weight_get
    if _newclass:
        span_weight = _swig_property(_framework.GeometryMotionBlurSample_span_weight_get, _framework.GeometryMotionBlurSample_span_weight_set)
    __swig_setmethods__["delta_time"] = _framework.GeometryMotionBlurSample_delta_time_set
    __swig_getmethods__["delta_time"] = _framework.GeometryMotionBlurSample_delta_time_get
    if _newclass:
        delta_time = _swig_property(_framework.GeometryMotionBlurSample_delta_time_get, _framework.GeometryMotionBlurSample_delta_time_set)

    def __init__(self):
        this = _framework.new_GeometryMotionBlurSample()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryMotionBlurSample
    __del__ = lambda self: None
GeometryMotionBlurSample_swigregister = _framework.GeometryMotionBlurSample_swigregister
GeometryMotionBlurSample_swigregister(GeometryMotionBlurSample)

class GeometryFragment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryFragment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryFragment, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_GeometryFragment()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clear(self):
        return _framework.GeometryFragment_clear(self)

    def init(self, *args):
        return _framework.GeometryFragment_init(self, *args)

    def set_object_desc(self, object):
        return _framework.GeometryFragment_set_object_desc(self, object)

    def set_sample_desc(self, sample):
        return _framework.GeometryFragment_set_sample_desc(self, sample)

    def set_medium_desc(self, medium):
        return _framework.GeometryFragment_set_medium_desc(self, medium)

    def is_facing(self, *args):
        return _framework.GeometryFragment_is_facing(self, *args)

    def set_scene_object_count(self, count):
        return _framework.GeometryFragment_set_scene_object_count(self, count)

    def set_scene_object(self, *args):
        return _framework.GeometryFragment_set_scene_object(self, *args)

    def set_geometry_index(self, geometry_index):
        return _framework.GeometryFragment_set_geometry_index(self, geometry_index)

    def set_local_geometry_index(self, geometry_index):
        return _framework.GeometryFragment_set_local_geometry_index(self, geometry_index)

    def set_vertex_id(self, vertex_id):
        return _framework.GeometryFragment_set_vertex_id(self, vertex_id)

    def set_primitive_id(self, primitive_id):
        return _framework.GeometryFragment_set_primitive_id(self, primitive_id)

    def set_sub_primitive_id(self, primitive_id):
        return _framework.GeometryFragment_set_sub_primitive_id(self, primitive_id)

    def set_material_index(self, material_index):
        return _framework.GeometryFragment_set_material_index(self, material_index)

    def reset_world_matrix(self):
        return _framework.GeometryFragment_reset_world_matrix(self)

    def set_world_matrix(self, xform):
        return _framework.GeometryFragment_set_world_matrix(self, xform)

    def multiply_world_matrix(self, xform):
        return _framework.GeometryFragment_multiply_world_matrix(self, xform)

    def set_world_matrix_dt(self, xform):
        return _framework.GeometryFragment_set_world_matrix_dt(self, xform)

    def set_ray(self, ray):
        return _framework.GeometryFragment_set_ray(self, ray)

    def set_local_eye_dir(self, eye_dir):
        return _framework.GeometryFragment_set_local_eye_dir(self, eye_dir)

    def set_time(self, time, delta=0.0):
        return _framework.GeometryFragment_set_time(self, time, delta)

    def set_uv(self, u, v):
        return _framework.GeometryFragment_set_uv(self, u, v)

    def set_uvw(self, u, v, w):
        return _framework.GeometryFragment_set_uvw(self, u, v, w)

    def set_sub_uv(self, u, v):
        return _framework.GeometryFragment_set_sub_uv(self, u, v)

    def set_sub_uvw(self, u, v, w):
        return _framework.GeometryFragment_set_sub_uvw(self, u, v, w)

    def set_geometry(self, base_geometry, deformed_geometry=None):
        return _framework.GeometryFragment_set_geometry(self, base_geometry, deformed_geometry)

    def set_medium_opacity(self, opacity):
        return _framework.GeometryFragment_set_medium_opacity(self, opacity)

    def set_medium_thickness(self, thickness):
        return _framework.GeometryFragment_set_medium_thickness(self, thickness)

    def set_medium_density(self, density):
        return _framework.GeometryFragment_set_medium_density(self, density)

    def set_medium_density_diff(self, density_diff):
        return _framework.GeometryFragment_set_medium_density_diff(self, density_diff)

    def set_custom_data(self, data):
        return _framework.GeometryFragment_set_custom_data(self, data)

    def get_scene_objects(self):
        return _framework.GeometryFragment_get_scene_objects(self)

    def get_scene_object_count(self):
        return _framework.GeometryFragment_get_scene_object_count(self)

    def get_scene_object_index(self, i):
        return _framework.GeometryFragment_get_scene_object_index(self, i)

    def get_first_scene_object_index(self):
        return _framework.GeometryFragment_get_first_scene_object_index(self)

    def get_last_scene_object_index(self):
        return _framework.GeometryFragment_get_last_scene_object_index(self)

    def get_first_visibility_object_index(self):
        return _framework.GeometryFragment_get_first_visibility_object_index(self)

    def get_scene_object(self, i):
        return _framework.GeometryFragment_get_scene_object(self, i)

    def get_first_scene_object(self):
        return _framework.GeometryFragment_get_first_scene_object(self)

    def get_last_scene_object(self):
        return _framework.GeometryFragment_get_last_scene_object(self)

    def get_first_visibility_object(self):
        return _framework.GeometryFragment_get_first_visibility_object(self)

    def get_geometry_override(self, i):
        return _framework.GeometryFragment_get_geometry_override(self, i)

    def get_first_geometry_override(self):
        return _framework.GeometryFragment_get_first_geometry_override(self)

    def get_last_geometry_override(self):
        return _framework.GeometryFragment_get_last_geometry_override(self)

    def get_first_visibility_geometry_override(self):
        return _framework.GeometryFragment_get_first_visibility_geometry_override(self)

    def get_geometry_index(self):
        return _framework.GeometryFragment_get_geometry_index(self)

    def get_local_geometry_index(self):
        return _framework.GeometryFragment_get_local_geometry_index(self)

    def get_vertex_id(self):
        return _framework.GeometryFragment_get_vertex_id(self)

    def get_primitive_id(self):
        return _framework.GeometryFragment_get_primitive_id(self)

    def get_sub_primitive_id(self):
        return _framework.GeometryFragment_get_sub_primitive_id(self)

    def get_material_index(self):
        return _framework.GeometryFragment_get_material_index(self)

    def has_world_matrix(self):
        return _framework.GeometryFragment_has_world_matrix(self)

    def get_world_matrix(self):
        return _framework.GeometryFragment_get_world_matrix(self)

    def get_world_matrix_dt(self):
        return _framework.GeometryFragment_get_world_matrix_dt(self)

    def get_ray(self):
        return _framework.GeometryFragment_get_ray(self)

    def get_local_eye_dir(self):
        return _framework.GeometryFragment_get_local_eye_dir(self)

    def get_uvw(self):
        return _framework.GeometryFragment_get_uvw(self)

    def get_sub_uvw(self):
        return _framework.GeometryFragment_get_sub_uvw(self)

    def get_time(self):
        return _framework.GeometryFragment_get_time(self)

    def get_time_delta(self):
        return _framework.GeometryFragment_get_time_delta(self)

    def get_u(self):
        return _framework.GeometryFragment_get_u(self)

    def get_v(self):
        return _framework.GeometryFragment_get_v(self)

    def get_w(self):
        return _framework.GeometryFragment_get_w(self)

    def get_sub_u(self):
        return _framework.GeometryFragment_get_sub_u(self)

    def get_sub_v(self):
        return _framework.GeometryFragment_get_sub_v(self)

    def get_sub_w(self):
        return _framework.GeometryFragment_get_sub_w(self)

    def get_base_geometry(self):
        return _framework.GeometryFragment_get_base_geometry(self)

    def get_deformed_geometry(self):
        return _framework.GeometryFragment_get_deformed_geometry(self)

    def get_medium_opacity(self):
        return _framework.GeometryFragment_get_medium_opacity(self)

    def get_medium_thickness(self):
        return _framework.GeometryFragment_get_medium_thickness(self)

    def get_medium_density(self):
        return _framework.GeometryFragment_get_medium_density(self)

    def get_medium_density_diff(self):
        return _framework.GeometryFragment_get_medium_density_diff(self)

    def get_object_desc(self):
        return _framework.GeometryFragment_get_object_desc(self)

    def get_sample_desc(self):
        return _framework.GeometryFragment_get_sample_desc(self)

    def get_medium_desc(self):
        return _framework.GeometryFragment_get_medium_desc(self)

    def get_custom_data(self):
        return _framework.GeometryFragment_get_custom_data(self)

    def get_local_sample(self, eval_ctx):
        return _framework.GeometryFragment_get_local_sample(self, eval_ctx)

    def get_world_sample(self, eval_ctx):
        return _framework.GeometryFragment_get_world_sample(self, eval_ctx)

    def get_differentials(self, eval_ctx):
        return _framework.GeometryFragment_get_differentials(self, eval_ctx)

    def get_primitive_area(self, eval_ctx):
        return _framework.GeometryFragment_get_primitive_area(self, eval_ctx)

    def set_user_sample(self, *args):
        return _framework.GeometryFragment_set_user_sample(self, *args)

    def set_user_surface_sample(self, *args):
        return _framework.GeometryFragment_set_user_surface_sample(self, *args)

    def set_user_point_sample(self, *args):
        return _framework.GeometryFragment_set_user_point_sample(self, *args)

    def set_user_differentials(self, *args):
        return _framework.GeometryFragment_set_user_differentials(self, *args)

    def set_user_primitive_area(self, area):
        return _framework.GeometryFragment_set_user_primitive_area(self, area)

    def copy_params(self, other):
        return _framework.GeometryFragment_copy_params(self, other)

    def copy_params_and_matrix_dt(self, other):
        return _framework.GeometryFragment_copy_params_and_matrix_dt(self, other)

    def is_near_edge(self, eval_ctx, edge_width, weight):
        return _framework.GeometryFragment_is_near_edge(self, eval_ctx, edge_width, weight)

    def is_near_visible_edge(self, eval_ctx, edge_width, weight):
        return _framework.GeometryFragment_is_near_visible_edge(self, eval_ctx, edge_width, weight)

    def is_near_sub_edge(self, eval_ctx, edge_width, weight):
        return _framework.GeometryFragment_is_near_sub_edge(self, eval_ctx, edge_width, weight)
    if _newclass:
        compute_differentials = staticmethod(_framework.GeometryFragment_compute_differentials)
    else:
        compute_differentials = _framework.GeometryFragment_compute_differentials
    if _newclass:
        compute_position_differentials = staticmethod(_framework.GeometryFragment_compute_position_differentials)
    else:
        compute_position_differentials = _framework.GeometryFragment_compute_position_differentials
    if _newclass:
        compute_parametric_differentials = staticmethod(_framework.GeometryFragment_compute_parametric_differentials)
    else:
        compute_parametric_differentials = _framework.GeometryFragment_compute_parametric_differentials
    __swig_destroy__ = _framework.delete_GeometryFragment
    __del__ = lambda self: None
GeometryFragment_swigregister = _framework.GeometryFragment_swigregister
GeometryFragment_swigregister(GeometryFragment)

def GeometryFragment_compute_differentials(*args):
    return _framework.GeometryFragment_compute_differentials(*args)
GeometryFragment_compute_differentials = _framework.GeometryFragment_compute_differentials

def GeometryFragment_compute_position_differentials(position, normal, ray, diff):
    return _framework.GeometryFragment_compute_position_differentials(position, normal, ray, diff)
GeometryFragment_compute_position_differentials = _framework.GeometryFragment_compute_position_differentials

def GeometryFragment_compute_parametric_differentials(normal, dpdu, dpdv, dpdx, dpdy, duvdx, duvdy):
    return _framework.GeometryFragment_compute_parametric_differentials(normal, dpdu, dpdv, dpdx, dpdy, duvdx, duvdy)
GeometryFragment_compute_parametric_differentials = _framework.GeometryFragment_compute_parametric_differentials

class GeometryUvMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryUvMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryUvMap, name)
    __repr__ = _swig_repr

    def get_memory_size(self):
        return _framework.GeometryUvMap_get_memory_size(self)

    def __eq__(self, uvm):

        if not isinstance(obj, type(self)):
            return False


        return _framework.GeometryUvMap___eq__(self, uvm)


    def __ne__(self, uvm):
        return _framework.GeometryUvMap___ne__(self, uvm)
    __swig_setmethods__["vertices"] = _framework.GeometryUvMap_vertices_set
    __swig_getmethods__["vertices"] = _framework.GeometryUvMap_vertices_get
    if _newclass:
        vertices = _swig_property(_framework.GeometryUvMap_vertices_get, _framework.GeometryUvMap_vertices_set)
    __swig_setmethods__["polygon_indices"] = _framework.GeometryUvMap_polygon_indices_set
    __swig_getmethods__["polygon_indices"] = _framework.GeometryUvMap_polygon_indices_get
    if _newclass:
        polygon_indices = _swig_property(_framework.GeometryUvMap_polygon_indices_get, _framework.GeometryUvMap_polygon_indices_set)
    __swig_setmethods__["name"] = _framework.GeometryUvMap_name_set
    __swig_getmethods__["name"] = _framework.GeometryUvMap_name_get
    if _newclass:
        name = _swig_property(_framework.GeometryUvMap_name_get, _framework.GeometryUvMap_name_set)

    def __init__(self):
        this = _framework.new_GeometryUvMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryUvMap
    __del__ = lambda self: None
GeometryUvMap_swigregister = _framework.GeometryUvMap_swigregister
GeometryUvMap_swigregister(GeometryUvMap)

class GeometryNormalMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryNormalMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryNormalMap, name)
    __repr__ = _swig_repr

    def get_memory_size(self):
        return _framework.GeometryNormalMap_get_memory_size(self)

    def __eq__(self, nm):

        if not isinstance(obj, type(self)):
            return False


        return _framework.GeometryNormalMap___eq__(self, nm)


    def __ne__(self, nm):
        return _framework.GeometryNormalMap___ne__(self, nm)
    __swig_setmethods__["normals"] = _framework.GeometryNormalMap_normals_set
    __swig_getmethods__["normals"] = _framework.GeometryNormalMap_normals_get
    if _newclass:
        normals = _swig_property(_framework.GeometryNormalMap_normals_get, _framework.GeometryNormalMap_normals_set)
    __swig_setmethods__["polygon_indices"] = _framework.GeometryNormalMap_polygon_indices_set
    __swig_getmethods__["polygon_indices"] = _framework.GeometryNormalMap_polygon_indices_get
    if _newclass:
        polygon_indices = _swig_property(_framework.GeometryNormalMap_polygon_indices_get, _framework.GeometryNormalMap_polygon_indices_set)
    __swig_setmethods__["name"] = _framework.GeometryNormalMap_name_set
    __swig_getmethods__["name"] = _framework.GeometryNormalMap_name_get
    if _newclass:
        name = _swig_property(_framework.GeometryNormalMap_name_get, _framework.GeometryNormalMap_name_set)

    def __init__(self):
        this = _framework.new_GeometryNormalMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryNormalMap
    __del__ = lambda self: None
GeometryNormalMap_swigregister = _framework.GeometryNormalMap_swigregister
GeometryNormalMap_swigregister(GeometryNormalMap)

class GeometryColorMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryColorMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryColorMap, name)
    __repr__ = _swig_repr

    def get_memory_size(self):
        return _framework.GeometryColorMap_get_memory_size(self)

    def __eq__(self, cm):

        if not isinstance(obj, type(self)):
            return False


        return _framework.GeometryColorMap___eq__(self, cm)


    def __ne__(self, cm):
        return _framework.GeometryColorMap___ne__(self, cm)
    __swig_setmethods__["colors"] = _framework.GeometryColorMap_colors_set
    __swig_getmethods__["colors"] = _framework.GeometryColorMap_colors_get
    if _newclass:
        colors = _swig_property(_framework.GeometryColorMap_colors_get, _framework.GeometryColorMap_colors_set)
    __swig_setmethods__["polygon_indices"] = _framework.GeometryColorMap_polygon_indices_set
    __swig_getmethods__["polygon_indices"] = _framework.GeometryColorMap_polygon_indices_get
    if _newclass:
        polygon_indices = _swig_property(_framework.GeometryColorMap_polygon_indices_get, _framework.GeometryColorMap_polygon_indices_set)
    __swig_setmethods__["name"] = _framework.GeometryColorMap_name_set
    __swig_getmethods__["name"] = _framework.GeometryColorMap_name_get
    if _newclass:
        name = _swig_property(_framework.GeometryColorMap_name_get, _framework.GeometryColorMap_name_set)

    def __init__(self):
        this = _framework.new_GeometryColorMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryColorMap
    __del__ = lambda self: None
GeometryColorMap_swigregister = _framework.GeometryColorMap_swigregister
GeometryColorMap_swigregister(GeometryColorMap)

class GeometryUvTile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryUvTile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryUvTile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryUvTile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, uvt):

        if not isinstance(obj, type(self)):
            return False


        return _framework.GeometryUvTile___eq__(self, uvt)


    def __ne__(self, uvt):
        return _framework.GeometryUvTile___ne__(self, uvt)

    def get_udim(self):
        return _framework.GeometryUvTile_get_udim(self)

    def get_bbox(self):
        return _framework.GeometryUvTile_get_bbox(self)
    __swig_setmethods__["tu"] = _framework.GeometryUvTile_tu_set
    __swig_getmethods__["tu"] = _framework.GeometryUvTile_tu_get
    if _newclass:
        tu = _swig_property(_framework.GeometryUvTile_tu_get, _framework.GeometryUvTile_tu_set)
    __swig_setmethods__["tv"] = _framework.GeometryUvTile_tv_set
    __swig_getmethods__["tv"] = _framework.GeometryUvTile_tv_get
    if _newclass:
        tv = _swig_property(_framework.GeometryUvTile_tv_get, _framework.GeometryUvTile_tv_set)
    __swig_destroy__ = _framework.delete_GeometryUvTile
    __del__ = lambda self: None
GeometryUvTile_swigregister = _framework.GeometryUvTile_swigregister
GeometryUvTile_swigregister(GeometryUvTile)

class GeometryObject(ResourceData):
    __swig_setmethods__ = {}
    for _s in [ResourceData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _framework.delete_GeometryObject
    __del__ = lambda self: None

    def get_copy(self):
        return _framework.GeometryObject_get_copy(self)

    def get_bbox(self):
        return _framework.GeometryObject_get_bbox(self)

    def get_bbox_at(self, eval_ctx, time):
        return _framework.GeometryObject_get_bbox_at(self, eval_ctx, time)

    def get_shading_group_names(self):
        return _framework.GeometryObject_get_shading_group_names(self)

    def get_shading_group_bbox(self, id):
        return _framework.GeometryObject_get_shading_group_bbox(self, id)

    def get_primitive_indices(self, indices):
        return _framework.GeometryObject_get_primitive_indices(self, indices)

    def is_animated(self):
        return _framework.GeometryObject_is_animated(self)

    def get_point_cloud(self):
        return _framework.GeometryObject_get_point_cloud(self)

    def set_point_cloud(self, point_cloud, progress_bar=None):
        return _framework.GeometryObject_set_point_cloud(self, point_cloud, progress_bar)

    def get_vertex_count(self):
        return _framework.GeometryObject_get_vertex_count(self)

    def get_primitive_count(self):
        return _framework.GeometryObject_get_primitive_count(self)

    def get_primitive_edge_count(self, id):
        return _framework.GeometryObject_get_primitive_edge_count(self, id)

    def compute_primitive_bbox(self, eval_ctx, id, bbox):
        return _framework.GeometryObject_compute_primitive_bbox(self, eval_ctx, id, bbox)

    def compute_primitive_bbox_at(self, eval_ctx, id, time, bbox):
        return _framework.GeometryObject_compute_primitive_bbox_at(self, eval_ctx, id, time, bbox)

    def estimate_area(self, eval_ctx, xform):
        return _framework.GeometryObject_estimate_area(self, eval_ctx, xform)

    def estimate_shading_group_area(self, eval_ctx, id, xform):
        return _framework.GeometryObject_estimate_shading_group_area(self, eval_ctx, id, xform)

    def estimate_primitive_area(self, eval_ctx, id, xform):
        return _framework.GeometryObject_estimate_primitive_area(self, eval_ctx, id, xform)

    def get_primitive_shading_group_index(self, id):
        return _framework.GeometryObject_get_primitive_shading_group_index(self, id)

    def get_primitive_shading_group_name(self, id):
        return _framework.GeometryObject_get_primitive_shading_group_name(self, id)

    def get_uv_map_count(self):
        return _framework.GeometryObject_get_uv_map_count(self)

    def get_uv_map_name(self, uv_map_index):
        return _framework.GeometryObject_get_uv_map_name(self, uv_map_index)

    def get_uv_map_index(self, uv_map_name, uv_map_index):
        return _framework.GeometryObject_get_uv_map_index(self, uv_map_name, uv_map_index)

    def get_uv_map_data(self, uv_map_index, uvs, indices):
        return _framework.GeometryObject_get_uv_map_data(self, uv_map_index, uvs, indices)

    def get_uv_map(self, uv_map_index, uv_map):
        return _framework.GeometryObject_get_uv_map(self, uv_map_index, uv_map)

    def get_uv_maps(self, uv_maps):
        return _framework.GeometryObject_get_uv_maps(self, uv_maps)

    def compute_fragment_uvw(self, eval_ctx, fragment, uv_map_index, coord, dcdu, dcdv):
        return _framework.GeometryObject_compute_fragment_uvw(self, eval_ctx, fragment, uv_map_index, coord, dcdu, dcdv)

    def compute_edge_uvw(self, eval_ctx, primitive_index, edge_index, uv_map_index, t, coord):
        return _framework.GeometryObject_compute_edge_uvw(self, eval_ctx, primitive_index, edge_index, uv_map_index, t, coord)

    def get_color_map_count(self):
        return _framework.GeometryObject_get_color_map_count(self)

    def get_color_map_name(self, color_map_index):
        return _framework.GeometryObject_get_color_map_name(self, color_map_index)

    def get_color_map_data(self, color_map_index, colors, indices):
        return _framework.GeometryObject_get_color_map_data(self, color_map_index, colors, indices)

    def get_color_map(self, color_map_index, color_map):
        return _framework.GeometryObject_get_color_map(self, color_map_index, color_map)

    def get_color_maps(self, color_maps):
        return _framework.GeometryObject_get_color_maps(self, color_maps)

    def compute_fragment_color(self, eval_ctx, fragment, color_map_index, color):
        return _framework.GeometryObject_compute_fragment_color(self, eval_ctx, fragment, color_map_index, color)

    def get_normal_map_count(self):
        return _framework.GeometryObject_get_normal_map_count(self)

    def get_normal_map_name(self, normal_map_index):
        return _framework.GeometryObject_get_normal_map_name(self, normal_map_index)

    def get_normal_map_data(self, normal_map_index, normals, indices):
        return _framework.GeometryObject_get_normal_map_data(self, normal_map_index, normals, indices)

    def get_normal_map(self, normal_map_index, normal_map):
        return _framework.GeometryObject_get_normal_map(self, normal_map_index, normal_map)

    def get_normal_maps(self, normal_maps):
        return _framework.GeometryObject_get_normal_maps(self, normal_maps)

    def is_primitive_uv_mapped(self, primitive_id, uv_map_index):
        return _framework.GeometryObject_is_primitive_uv_mapped(self, primitive_id, uv_map_index)

    def is_primitive_edge_visible(self, primitive_index, edge_index):
        return _framework.GeometryObject_is_primitive_edge_visible(self, primitive_index, edge_index)

    def is_geometry_linear(self):
        return _framework.GeometryObject_is_geometry_linear(self)

    def is_primitive_linear(self, primitive_index):
        return _framework.GeometryObject_is_primitive_linear(self, primitive_index)

    def is_primitive_edge_linear(self, primitive_index, edge_index):
        return _framework.GeometryObject_is_primitive_edge_linear(self, primitive_index, edge_index)

    def compute_fragment_sample(self, eval_ctx, fragment, sample):
        return _framework.GeometryObject_compute_fragment_sample(self, eval_ctx, fragment, sample)

    def compute_edge_sample(self, eval_ctx, primitive_id, edge_index, t, eye_dir, sample):
        return _framework.GeometryObject_compute_edge_sample(self, eval_ctx, primitive_id, edge_index, t, eye_dir, sample)

    def intersect_primitive(self, *args):
        return _framework.GeometryObject_intersect_primitive(self, *args)

    def get_uv_tiles(self, *args):
        return _framework.GeometryObject_get_uv_tiles(self, *args)

    def get_uv_range(self, *args):
        return _framework.GeometryObject_get_uv_range(self, *args)
    if _newclass:
        class_info = staticmethod(_framework.GeometryObject_class_info)
    else:
        class_info = _framework.GeometryObject_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryObject____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryObject____class_destructor__

    def get_class_info(self):
        return _framework.GeometryObject_get_class_info(self)
GeometryObject_swigregister = _framework.GeometryObject_swigregister
GeometryObject_swigregister(GeometryObject)

def GeometryObject_class_info():
    return _framework.GeometryObject_class_info()
GeometryObject_class_info = _framework.GeometryObject_class_info

def GeometryObject____class_destructor__(instance, is_array):
    return _framework.GeometryObject____class_destructor__(instance, is_array)
GeometryObject____class_destructor__ = _framework.GeometryObject____class_destructor__

class GeometryPointCloud(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPointCloud, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPointCloud, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryPointCloud(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPointCloud
    __del__ = lambda self: None

    def get_topology(self, *args):
        return _framework.GeometryPointCloud_get_topology(self, *args)

    def get_geometry(self, *args):
        return _framework.GeometryPointCloud_get_geometry(self, *args)

    def is_compatible_with(self, other):
        return _framework.GeometryPointCloud_is_compatible_with(self, other)

    def get_memory_size(self):
        return _framework.GeometryPointCloud_get_memory_size(self)

    def get_point_count(self):
        return _framework.GeometryPointCloud_get_point_count(self)

    def get_sample(self, point_index, sample):
        return _framework.GeometryPointCloud_get_sample(self, point_index, sample)

    def has_support(self):
        return _framework.GeometryPointCloud_has_support(self)

    def has_positions(self):
        return _framework.GeometryPointCloud_has_positions(self)

    def has_normals(self):
        return _framework.GeometryPointCloud_has_normals(self)

    def has_velocities(self):
        return _framework.GeometryPointCloud_has_velocities(self)

    def has_sampling(self):
        return _framework.GeometryPointCloud_has_sampling(self)

    def is_animated(self):
        return _framework.GeometryPointCloud_is_animated(self)

    def get_sampling(self):
        return _framework.GeometryPointCloud_get_sampling(self)

    def init(self, *args):
        return _framework.GeometryPointCloud_init(self, *args)

    def init_support(self, *args):
        return _framework.GeometryPointCloud_init_support(self, *args)

    def init_geometry(self, *args):
        return _framework.GeometryPointCloud_init_geometry(self, *args)

    def init_positions(self, *args):
        return _framework.GeometryPointCloud_init_positions(self, *args)

    def init_normals(self, *args):
        return _framework.GeometryPointCloud_init_normals(self, *args)

    def init_velocities(self, *args):
        return _framework.GeometryPointCloud_init_velocities(self, *args)

    def init_sampling(self, time_sampling, loader):
        return _framework.GeometryPointCloud_init_sampling(self, time_sampling, loader)

    def get_position(self, index):
        return _framework.GeometryPointCloud_get_position(self, index)

    def get_positions(self, *args):
        return _framework.GeometryPointCloud_get_positions(self, *args)

    def get_positions_at(self, time):
        return _framework.GeometryPointCloud_get_positions_at(self, time)

    def get_normal(self, index):
        return _framework.GeometryPointCloud_get_normal(self, index)

    def get_normals(self, *args):
        return _framework.GeometryPointCloud_get_normals(self, *args)

    def get_velocity(self, index):
        return _framework.GeometryPointCloud_get_velocity(self, index)

    def get_velocities(self, *args):
        return _framework.GeometryPointCloud_get_velocities(self, *args)

    def set_position(self, position, index):
        return _framework.GeometryPointCloud_set_position(self, position, index)

    def set_positions(self, *args):
        return _framework.GeometryPointCloud_set_positions(self, *args)

    def set_normal(self, normal, index):
        return _framework.GeometryPointCloud_set_normal(self, normal, index)

    def set_normals(self, *args):
        return _framework.GeometryPointCloud_set_normals(self, *args)

    def set_velocity(self, velocity, index):
        return _framework.GeometryPointCloud_set_velocity(self, velocity, index)

    def set_velocities(self, *args):
        return _framework.GeometryPointCloud_set_velocities(self, *args)
    if _newclass:
        class_info = staticmethod(_framework.GeometryPointCloud_class_info)
    else:
        class_info = _framework.GeometryPointCloud_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryPointCloud____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryPointCloud____class_destructor__

    def get_class_info(self):
        return _framework.GeometryPointCloud_get_class_info(self)
GeometryPointCloud_swigregister = _framework.GeometryPointCloud_swigregister
GeometryPointCloud_swigregister(GeometryPointCloud)

def GeometryPointCloud_class_info():
    return _framework.GeometryPointCloud_class_info()
GeometryPointCloud_class_info = _framework.GeometryPointCloud_class_info

def GeometryPointCloud____class_destructor__(instance, is_array):
    return _framework.GeometryPointCloud____class_destructor__(instance, is_array)
GeometryPointCloud____class_destructor__ = _framework.GeometryPointCloud____class_destructor__

class GeometrySphere(GeometryObject):
    __swig_setmethods__ = {}
    for _s in [GeometryObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometrySphere, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometrySphere, name)
    __repr__ = _swig_repr

    def __init__(self, radius=0.5):
        this = _framework.new_GeometrySphere(radius)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_copy(self):
        return _framework.GeometrySphere_get_copy(self)

    def get_bbox(self):
        return _framework.GeometrySphere_get_bbox(self)

    def get_shading_group_names(self):
        return _framework.GeometrySphere_get_shading_group_names(self)

    def get_primitive_count(self):
        return _framework.GeometrySphere_get_primitive_count(self)

    def get_primitive_edge_count(self, id):
        return _framework.GeometrySphere_get_primitive_edge_count(self, id)

    def compute_primitive_bbox(self, eval_ctx, id, bbox):
        return _framework.GeometrySphere_compute_primitive_bbox(self, eval_ctx, id, bbox)

    def get_primitive_shading_group_index(self, id):
        return _framework.GeometrySphere_get_primitive_shading_group_index(self, id)

    def intersect_primitive(self, *args):
        return _framework.GeometrySphere_intersect_primitive(self, *args)

    def get_radius(self):
        return _framework.GeometrySphere_get_radius(self)

    def set_radius(self, radius):
        return _framework.GeometrySphere_set_radius(self, radius)

    def compute_edge_uvw(self, eval_ctx, primitive_index, edge_index, uv_map_index, t, coord):
        return _framework.GeometrySphere_compute_edge_uvw(self, eval_ctx, primitive_index, edge_index, uv_map_index, t, coord)

    def compute_fragment_sample(self, eval_ctx, fragment, sample):
        return _framework.GeometrySphere_compute_fragment_sample(self, eval_ctx, fragment, sample)

    def estimate_area(self, eval_ctx, xform):
        return _framework.GeometrySphere_estimate_area(self, eval_ctx, xform)

    def estimate_shading_group_area(self, eval_ctx, id, xform):
        return _framework.GeometrySphere_estimate_shading_group_area(self, eval_ctx, id, xform)

    def estimate_primitive_area(self, eval_ctx, id, xform):
        return _framework.GeometrySphere_estimate_primitive_area(self, eval_ctx, id, xform)

    def compute_uv(self, pos, u, v):
        return _framework.GeometrySphere_compute_uv(self, pos, u, v)
    if _newclass:
        class_info = staticmethod(_framework.GeometrySphere_class_info)
    else:
        class_info = _framework.GeometrySphere_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometrySphere____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometrySphere____class_destructor__

    def get_class_info(self):
        return _framework.GeometrySphere_get_class_info(self)
    __swig_destroy__ = _framework.delete_GeometrySphere
    __del__ = lambda self: None
GeometrySphere_swigregister = _framework.GeometrySphere_swigregister
GeometrySphere_swigregister(GeometrySphere)

def GeometrySphere_class_info():
    return _framework.GeometrySphere_class_info()
GeometrySphere_class_info = _framework.GeometrySphere_class_info

def GeometrySphere____class_destructor__(instance, is_array):
    return _framework.GeometrySphere____class_destructor__(instance, is_array)
GeometrySphere____class_destructor__ = _framework.GeometrySphere____class_destructor__

INVALID_INDEX = _framework.INVALID_INDEX
class GeometrySample(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometrySample, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometrySample, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_GeometrySample()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clear(self):
        return _framework.GeometrySample_clear(self)

    def normalize(self):
        return _framework.GeometrySample_normalize(self)

    def transform(self, *args):
        return _framework.GeometrySample_transform(self, *args)

    def init_surface(self, *args):
        return _framework.GeometrySample_init_surface(self, *args)

    def set_smoothing(self, *args):
        return _framework.GeometrySample_set_smoothing(self, *args)

    def init_point(self, *args):
        return _framework.GeometrySample_init_point(self, *args)

    def set_sub_differentials(self, *args):
        return _framework.GeometrySample_set_sub_differentials(self, *args)

    def set_position(self, *args):
        return _framework.GeometrySample_set_position(self, *args)

    def set_geometric_position(self, *args):
        return _framework.GeometrySample_set_geometric_position(self, *args)

    def set_smoothed_position(self, *args):
        return _framework.GeometrySample_set_smoothed_position(self, *args)

    def set_geometric_position_dt(self, *args):
        return _framework.GeometrySample_set_geometric_position_dt(self, *args)

    def get_geometric_position(self):
        return _framework.GeometrySample_get_geometric_position(self)

    def get_geometric_position_dt(self):
        return _framework.GeometrySample_get_geometric_position_dt(self)

    def get_geometric_dpdu(self):
        return _framework.GeometrySample_get_geometric_dpdu(self)

    def get_geometric_dpdv(self):
        return _framework.GeometrySample_get_geometric_dpdv(self)

    def get_geometric_dndu(self):
        return _framework.GeometrySample_get_geometric_dndu(self)

    def get_geometric_dndv(self):
        return _framework.GeometrySample_get_geometric_dndv(self)

    def get_geometric_sub_dpdu(self):
        return _framework.GeometrySample_get_geometric_sub_dpdu(self)

    def get_geometric_sub_dpdv(self):
        return _framework.GeometrySample_get_geometric_sub_dpdv(self)

    def get_geometric_normal(self):
        return _framework.GeometrySample_get_geometric_normal(self)

    def get_smoothed_position(self):
        return _framework.GeometrySample_get_smoothed_position(self)

    def get_smoothed_dpdu(self):
        return _framework.GeometrySample_get_smoothed_dpdu(self)

    def get_smoothed_dpdv(self):
        return _framework.GeometrySample_get_smoothed_dpdv(self)

    def get_smoothed_dndu(self):
        return _framework.GeometrySample_get_smoothed_dndu(self)

    def get_smoothed_dndv(self):
        return _framework.GeometrySample_get_smoothed_dndv(self)

    def get_smoothed_normal(self):
        return _framework.GeometrySample_get_smoothed_normal(self)

    def has_differentials(self):
        return _framework.GeometrySample_has_differentials(self)

    def has_sub_differentials(self):
        return _framework.GeometrySample_has_sub_differentials(self)

    def has_motion(self):
        return _framework.GeometrySample_has_motion(self)

    def has_normal(self):
        return _framework.GeometrySample_has_normal(self)

    def is_normalized(self):
        return _framework.GeometrySample_is_normalized(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometrySample_class_info)
    else:
        class_info = _framework.GeometrySample_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometrySample____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometrySample____class_destructor__

    def get_class_info(self):
        return _framework.GeometrySample_get_class_info(self)
    __swig_destroy__ = _framework.delete_GeometrySample
    __del__ = lambda self: None
GeometrySample_swigregister = _framework.GeometrySample_swigregister
GeometrySample_swigregister(GeometrySample)

def GeometrySample_class_info():
    return _framework.GeometrySample_class_info()
GeometrySample_class_info = _framework.GeometrySample_class_info

def GeometrySample____class_destructor__(instance, is_array):
    return _framework.GeometrySample____class_destructor__(instance, is_array)
GeometrySample____class_destructor__ = _framework.GeometrySample____class_destructor__

class GeometryProperty(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryProperty
    __del__ = lambda self: None

    def set_deferred_loading(self, load_data_cb, load_data_cb_info):
        return _framework.GeometryProperty_set_deferred_loading(self, load_data_cb, load_data_cb_info)

    def get_name(self):
        return _framework.GeometryProperty_get_name(self)

    def get_time_sampling(self):
        return _framework.GeometryProperty_get_time_sampling(self)

    def get_value_type(self):
        return _framework.GeometryProperty_get_value_type(self)

    def get_value_count(self):
        return _framework.GeometryProperty_get_value_count(self)

    def get_value_extent(self):
        return _framework.GeometryProperty_get_value_extent(self)

    def get_index_count(self):
        return _framework.GeometryProperty_get_index_count(self)

    def is_sampled(self):
        return _framework.GeometryProperty_is_sampled(self)

    def load_data(self, sample_index):
        return _framework.GeometryProperty_load_data(self, sample_index)

    def evaluate(self, *args):
        return _framework.GeometryProperty_evaluate(self, *args)
    if _newclass:
        class_info = staticmethod(_framework.GeometryProperty_class_info)
    else:
        class_info = _framework.GeometryProperty_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryProperty____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryProperty____class_destructor__

    def get_class_info(self):
        return _framework.GeometryProperty_get_class_info(self)
GeometryProperty_swigregister = _framework.GeometryProperty_swigregister
GeometryProperty_swigregister(GeometryProperty)

def GeometryProperty_class_info():
    return _framework.GeometryProperty_class_info()
GeometryProperty_class_info = _framework.GeometryProperty_class_info

def GeometryProperty____class_destructor__(instance, is_array):
    return _framework.GeometryProperty____class_destructor__(instance, is_array)
GeometryProperty____class_destructor__ = _framework.GeometryProperty____class_destructor__

class GeometryPropertyCollection(ResourceData):
    __swig_setmethods__ = {}
    for _s in [ResourceData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPropertyCollection, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPropertyCollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_GeometryPropertyCollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPropertyCollection
    __del__ = lambda self: None

    def clear(self):
        return _framework.GeometryPropertyCollection_clear(self)

    def set(self, properties):
        return _framework.GeometryPropertyCollection_set(self, properties)

    def get_property_count(self):
        return _framework.GeometryPropertyCollection_get_property_count(self)

    def get_property(self, index):
        return _framework.GeometryPropertyCollection_get_property(self, index)

    def get_property_index(self, name):
        return _framework.GeometryPropertyCollection_get_property_index(self, name)

    def get_memory_size(self):
        return _framework.GeometryPropertyCollection_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryPropertyCollection_class_info)
    else:
        class_info = _framework.GeometryPropertyCollection_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryPropertyCollection____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryPropertyCollection____class_destructor__

    def get_class_info(self):
        return _framework.GeometryPropertyCollection_get_class_info(self)
GeometryPropertyCollection_swigregister = _framework.GeometryPropertyCollection_swigregister
GeometryPropertyCollection_swigregister(GeometryPropertyCollection)

def GeometryPropertyCollection_class_info():
    return _framework.GeometryPropertyCollection_class_info()
GeometryPropertyCollection_class_info = _framework.GeometryPropertyCollection_class_info

def GeometryPropertyCollection____class_destructor__(instance, is_array):
    return _framework.GeometryPropertyCollection____class_destructor__(instance, is_array)
GeometryPropertyCollection____class_destructor__ = _framework.GeometryPropertyCollection____class_destructor__

class GeometryPointProperty(GeometryProperty):
    __swig_setmethods__ = {}
    for _s in [GeometryProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPointProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPointProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryPointProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPointProperty
    __del__ = lambda self: None

    def has_indices(self):
        return _framework.GeometryPointProperty_has_indices(self)

    def init_indices(self, indices):
        return _framework.GeometryPointProperty_init_indices(self, indices)

    def remove_indices(self):
        return _framework.GeometryPointProperty_remove_indices(self)

    def init(self, sample_index, data):
        return _framework.GeometryPointProperty_init(self, sample_index, data)

    def compute_hash_key(self):
        return _framework.GeometryPointProperty_compute_hash_key(self)

    def get_copy(self):
        return _framework.GeometryPointProperty_get_copy(self)

    def get_hash_key(self):
        return _framework.GeometryPointProperty_get_hash_key(self)

    def get_serial_size(self):
        return _framework.GeometryPointProperty_get_serial_size(self)

    def serialize(self, serial):
        return _framework.GeometryPointProperty_serialize(self, serial)

    def deserialize(self, serial):
        return _framework.GeometryPointProperty_deserialize(self, serial)

    def get_memory_size(self):
        return _framework.GeometryPointProperty_get_memory_size(self)

    def get_values_property(self, sample_index):
        return _framework.GeometryPointProperty_get_values_property(self, sample_index)

    def get_indices(self):
        return _framework.GeometryPointProperty_get_indices(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryPointProperty_class_info)
    else:
        class_info = _framework.GeometryPointProperty_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryPointProperty____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryPointProperty____class_destructor__

    def get_class_info(self):
        return _framework.GeometryPointProperty_get_class_info(self)
GeometryPointProperty_swigregister = _framework.GeometryPointProperty_swigregister
GeometryPointProperty_swigregister(GeometryPointProperty)

def GeometryPointProperty_class_info():
    return _framework.GeometryPointProperty_class_info()
GeometryPointProperty_class_info = _framework.GeometryPointProperty_class_info

def GeometryPointProperty____class_destructor__(instance, is_array):
    return _framework.GeometryPointProperty____class_destructor__(instance, is_array)
GeometryPointProperty____class_destructor__ = _framework.GeometryPointProperty____class_destructor__

class GeometryPointPropertyCollection(GeometryPropertyCollection):
    __swig_setmethods__ = {}
    for _s in [GeometryPropertyCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPointPropertyCollection, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryPropertyCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPointPropertyCollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _framework.new_GeometryPointPropertyCollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_GeometryPointPropertyCollection
    __del__ = lambda self: None

    def clear(self):
        return _framework.GeometryPointPropertyCollection_clear(self)

    def set(self, properties):
        return _framework.GeometryPointPropertyCollection_set(self, properties)

    def serialize(self, serial_size):
        return _framework.GeometryPointPropertyCollection_serialize(self, serial_size)

    def deserialize(self, serial, serial_size):
        return _framework.GeometryPointPropertyCollection_deserialize(self, serial, serial_size)

    def get_hash_key(self):
        return _framework.GeometryPointPropertyCollection_get_hash_key(self)
    if _newclass:
        class_info = staticmethod(_framework.GeometryPointPropertyCollection_class_info)
    else:
        class_info = _framework.GeometryPointPropertyCollection_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryPointPropertyCollection____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryPointPropertyCollection____class_destructor__

    def get_class_info(self):
        return _framework.GeometryPointPropertyCollection_get_class_info(self)
GeometryPointPropertyCollection_swigregister = _framework.GeometryPointPropertyCollection_swigregister
GeometryPointPropertyCollection_swigregister(GeometryPointPropertyCollection)

def GeometryPointPropertyCollection_class_info():
    return _framework.GeometryPointPropertyCollection_class_info()
GeometryPointPropertyCollection_class_info = _framework.GeometryPointPropertyCollection_class_info

def GeometryPointPropertyCollection____class_destructor__(instance, is_array):
    return _framework.GeometryPointPropertyCollection____class_destructor__(instance, is_array)
GeometryPointPropertyCollection____class_destructor__ = _framework.GeometryPointPropertyCollection____class_destructor__

class GeometryVertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryVertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryVertex, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _framework.GeometryVertex_INVALID_INDEX

    def __init__(self, *args):
        this = _framework.new_GeometryVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_position"] = _framework.GeometryVertex_m_position_set
    __swig_getmethods__["m_position"] = _framework.GeometryVertex_m_position_get
    if _newclass:
        m_position = _swig_property(_framework.GeometryVertex_m_position_get, _framework.GeometryVertex_m_position_set)
    __swig_setmethods__["m_geometry"] = _framework.GeometryVertex_m_geometry_set
    __swig_getmethods__["m_geometry"] = _framework.GeometryVertex_m_geometry_get
    if _newclass:
        m_geometry = _swig_property(_framework.GeometryVertex_m_geometry_get, _framework.GeometryVertex_m_geometry_set)
    __swig_setmethods__["m_vertex_id"] = _framework.GeometryVertex_m_vertex_id_set
    __swig_getmethods__["m_vertex_id"] = _framework.GeometryVertex_m_vertex_id_get
    if _newclass:
        m_vertex_id = _swig_property(_framework.GeometryVertex_m_vertex_id_get, _framework.GeometryVertex_m_vertex_id_set)
    __swig_setmethods__["m_scene_object"] = _framework.GeometryVertex_m_scene_object_set
    __swig_getmethods__["m_scene_object"] = _framework.GeometryVertex_m_scene_object_get
    if _newclass:
        m_scene_object = _swig_property(_framework.GeometryVertex_m_scene_object_get, _framework.GeometryVertex_m_scene_object_set)
    __swig_destroy__ = _framework.delete_GeometryVertex
    __del__ = lambda self: None
GeometryVertex_swigregister = _framework.GeometryVertex_swigregister
GeometryVertex_swigregister(GeometryVertex)

class GeometryPositionArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryPositionArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryPositionArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _framework.new_GeometryPositionArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def clear(self):
        return _framework.GeometryPositionArray_clear(self)

    def get_count(self):
        return _framework.GeometryPositionArray_get_count(self)

    def get_source_count(self):
        return _framework.GeometryPositionArray_get_source_count(self)

    def add_source(self, values, weight):
        return _framework.GeometryPositionArray_add_source(self, values, weight)
    if _newclass:
        class_info = staticmethod(_framework.GeometryPositionArray_class_info)
    else:
        class_info = _framework.GeometryPositionArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.GeometryPositionArray____class_destructor__)
    else:
        ___class_destructor__ = _framework.GeometryPositionArray____class_destructor__

    def get_class_info(self):
        return _framework.GeometryPositionArray_get_class_info(self)
    __swig_destroy__ = _framework.delete_GeometryPositionArray
    __del__ = lambda self: None
GeometryPositionArray_swigregister = _framework.GeometryPositionArray_swigregister
GeometryPositionArray_swigregister(GeometryPositionArray)

def GeometryPositionArray_class_info():
    return _framework.GeometryPositionArray_class_info()
GeometryPositionArray_class_info = _framework.GeometryPositionArray_class_info

def GeometryPositionArray____class_destructor__(instance, is_array):
    return _framework.GeometryPositionArray____class_destructor__(instance, is_array)
GeometryPositionArray____class_destructor__ = _framework.GeometryPositionArray____class_destructor__

class PolyMeshProperty(GeometryProperty):
    __swig_setmethods__ = {}
    for _s in [GeometryProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyMeshProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyMeshProperty, name)
    __repr__ = _swig_repr
    TYPE_VERTEX_ARRAY = _framework.PolyMeshProperty_TYPE_VERTEX_ARRAY
    TYPE_POLYGON_ARRAY = _framework.PolyMeshProperty_TYPE_POLYGON_ARRAY
    TYPE_SCALAR = _framework.PolyMeshProperty_TYPE_SCALAR

    def __init__(self, mesh, type, value_type, value_count, value_extent, index_count, name, time_sampling, take_data_ownership=True):
        this = _framework.new_PolyMeshProperty(mesh, type, value_type, value_count, value_extent, index_count, name, time_sampling, take_data_ownership)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_PolyMeshProperty
    __del__ = lambda self: None

    def get_mesh(self):
        return _framework.PolyMeshProperty_get_mesh(self)

    def get_type(self):
        return _framework.PolyMeshProperty_get_type(self)

    def has_indices(self):
        return _framework.PolyMeshProperty_has_indices(self)

    def init_indices(self, indices):
        return _framework.PolyMeshProperty_init_indices(self, indices)

    def init(self, sample_index, data):
        return _framework.PolyMeshProperty_init(self, sample_index, data)

    def get_values_property(self, sample_index):
        return _framework.PolyMeshProperty_get_values_property(self, sample_index)

    def get_memory_size(self):
        return _framework.PolyMeshProperty_get_memory_size(self)

    def get_indices(self):
        return _framework.PolyMeshProperty_get_indices(self)
    if _newclass:
        class_info = staticmethod(_framework.PolyMeshProperty_class_info)
    else:
        class_info = _framework.PolyMeshProperty_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.PolyMeshProperty____class_destructor__)
    else:
        ___class_destructor__ = _framework.PolyMeshProperty____class_destructor__

    def get_class_info(self):
        return _framework.PolyMeshProperty_get_class_info(self)
PolyMeshProperty_swigregister = _framework.PolyMeshProperty_swigregister
PolyMeshProperty_swigregister(PolyMeshProperty)

def PolyMeshProperty_class_info():
    return _framework.PolyMeshProperty_class_info()
PolyMeshProperty_class_info = _framework.PolyMeshProperty_class_info

def PolyMeshProperty____class_destructor__(instance, is_array):
    return _framework.PolyMeshProperty____class_destructor__(instance, is_array)
PolyMeshProperty____class_destructor__ = _framework.PolyMeshProperty____class_destructor__

class CurveMeshProperty(GeometryProperty):
    __swig_setmethods__ = {}
    for _s in [GeometryProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveMeshProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurveMeshProperty, name)
    __repr__ = _swig_repr
    TYPE_VERTEX_ARRAY = _framework.CurveMeshProperty_TYPE_VERTEX_ARRAY
    TYPE_CURVE_ARRAY = _framework.CurveMeshProperty_TYPE_CURVE_ARRAY
    TYPE_SCALAR = _framework.CurveMeshProperty_TYPE_SCALAR

    def __init__(self, mesh, type, value_type, value_count, value_extent, index_count, name, time_sampling, take_data_ownership=True):
        this = _framework.new_CurveMeshProperty(mesh, type, value_type, value_count, value_extent, index_count, name, time_sampling, take_data_ownership)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _framework.delete_CurveMeshProperty
    __del__ = lambda self: None

    def get_mesh(self):
        return _framework.CurveMeshProperty_get_mesh(self)

    def get_type(self):
        return _framework.CurveMeshProperty_get_type(self)

    def init(self, sample_index, data):
        return _framework.CurveMeshProperty_init(self, sample_index, data)

    def get_memory_size(self):
        return _framework.CurveMeshProperty_get_memory_size(self)

    def get_values_property(self, sample_index):
        return _framework.CurveMeshProperty_get_values_property(self, sample_index)
    if _newclass:
        class_info = staticmethod(_framework.CurveMeshProperty_class_info)
    else:
        class_info = _framework.CurveMeshProperty_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_framework.CurveMeshProperty____class_destructor__)
    else:
        ___class_destructor__ = _framework.CurveMeshProperty____class_destructor__

    def get_class_info(self):
        return _framework.CurveMeshProperty_get_class_info(self)
CurveMeshProperty_swigregister = _framework.CurveMeshProperty_swigregister
CurveMeshProperty_swigregister(CurveMeshProperty)

def CurveMeshProperty_class_info():
    return _framework.CurveMeshProperty_class_info()
CurveMeshProperty_class_info = _framework.CurveMeshProperty_class_info

def CurveMeshProperty____class_destructor__(instance, is_array):
    return _framework.CurveMeshProperty____class_destructor__(instance, is_array)
CurveMeshProperty____class_destructor__ = _framework.CurveMeshProperty____class_destructor__

# This file is compatible with both classic and new-style classes.


