# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gui')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gui')
    _gui = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gui', [dirname(__file__)])
        except ImportError:
            import _gui
            return _gui
        try:
            _mod = imp.load_module('_gui', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gui = swig_import_helper()
    del swig_import_helper
else:
    import _gui
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import helpers
import framework
import base
class PyGuiGarbageCollector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyGuiGarbageCollector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyGuiGarbageCollector, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gui.new_PyGuiGarbageCollector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_PyGuiGarbageCollector
    __del__ = lambda self: None

    def add(self, widget):
        return _gui.PyGuiGarbageCollector_add(self, widget)

    def remove(self, widget):
        return _gui.PyGuiGarbageCollector_remove(self, widget)

    def cleanup(self):
        return _gui.PyGuiGarbageCollector_cleanup(self)

    def get_count(self):
        return _gui.PyGuiGarbageCollector_get_count(self)
    if _newclass:
        get_garbage_collector = staticmethod(_gui.PyGuiGarbageCollector_get_garbage_collector)
    else:
        get_garbage_collector = _gui.PyGuiGarbageCollector_get_garbage_collector
PyGuiGarbageCollector_swigregister = _gui.PyGuiGarbageCollector_swigregister
PyGuiGarbageCollector_swigregister(PyGuiGarbageCollector)

def PyGuiGarbageCollector_get_garbage_collector():
    return _gui.PyGuiGarbageCollector_get_garbage_collector()
PyGuiGarbageCollector_get_garbage_collector = _gui.PyGuiGarbageCollector_get_garbage_collector

class GuiApp(framework.AppObject):
    __swig_setmethods__ = {}
    for _s in [framework.AppObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiApp, name, value)
    __swig_getmethods__ = {}
    for _s in [framework.AppObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiApp, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gui.delete_GuiApp
    __del__ = lambda self: None

    def get_color_scheme(self):
        return _gui.GuiApp_get_color_scheme(self)

    def create_window(self, *args):
        return _gui.GuiApp_create_window(self, *args)

    def get_top_window(self):
        return _gui.GuiApp_get_top_window(self)

    def maximize_view(self, view):
        return _gui.GuiApp_maximize_view(self, view)

    def restore_view(self):
        return _gui.GuiApp_restore_view(self)

    def add_mouse_listener(self, cbk, data=None):
        return _gui.GuiApp_add_mouse_listener(self, cbk, data)

    def remove_mouse_listener(self, cbk, data=None):
        return _gui.GuiApp_remove_mouse_listener(self, cbk, data)

    def message_box(self, *args):
        return _gui.GuiApp_message_box(self, *args)

    def check_for_events(self, *args):
        return _gui.GuiApp_check_for_events(self, *args)

    def force_redraw(self):
        return _gui.GuiApp_force_redraw(self)

    def enable(self):
        return _gui.GuiApp_enable(self)

    def disable(self):
        return _gui.GuiApp_disable(self)

    def is_enabled(self):
        return _gui.GuiApp_is_enabled(self)

    def get_color_dialog(self):
        return _gui.GuiApp_get_color_dialog(self)

    def reset_color_dialog(self):
        return _gui.GuiApp_reset_color_dialog(self)

    def get_browser_picker(self):
        return _gui.GuiApp_get_browser_picker(self)

    def get_file_browser(self):
        return _gui.GuiApp_get_file_browser(self)

    def open_default_widget(self, *args):
        return _gui.GuiApp_open_default_widget(self, *args)

    def open_items_in_widget(self, widget_class_name, selected_items, open_new_window=False, update_selection=True, viewport_custom_data=None):
        return _gui.GuiApp_open_items_in_widget(self, widget_class_name, selected_items, open_new_window, update_selection, viewport_custom_data)

    def open_new_floating_widget_window(self, window, class_name, title, x, y, width, height, use_viewport=True, viewport_custom_data=None):
        return _gui.GuiApp_open_new_floating_widget_window(self, window, class_name, title, x, y, width, height, use_viewport, viewport_custom_data)

    def get_event_window(self):
        return _gui.GuiApp_get_event_window(self)

    def set_preferences(self):
        return _gui.GuiApp_set_preferences(self)

    def populate_prefs(self):
        return _gui.GuiApp_populate_prefs(self)

    def get_foreground_color(self):
        return _gui.GuiApp_get_foreground_color(self)

    def set_foreground_color(self, color):
        return _gui.GuiApp_set_foreground_color(self, color)

    def get_background_color(self):
        return _gui.GuiApp_get_background_color(self)

    def set_background_color(self, color):
        return _gui.GuiApp_set_background_color(self, color)

    def set_color_scheme(self, scheme):
        return _gui.GuiApp_set_color_scheme(self, scheme)

    def update_color_scheme(self, scheme):
        return _gui.GuiApp_update_color_scheme(self, scheme)

    def new_project(self):
        return _gui.GuiApp_new_project(self)

    def lock_draw(self):
        return _gui.GuiApp_lock_draw(self)

    def unlock_draw(self):
        return _gui.GuiApp_unlock_draw(self)

    def get_clipboard(self):
        return _gui.GuiApp_get_clipboard(self)

    def set_clipboard(self, clipboard):
        return _gui.GuiApp_set_clipboard(self, clipboard)

    def quit(self):
        return _gui.GuiApp_quit(self)

    def get_image_view_bilinear_filtering(self):
        return _gui.GuiApp_get_image_view_bilinear_filtering(self)

    def set_image_view_bilinear_filtering(self, filter):
        return _gui.GuiApp_set_image_view_bilinear_filtering(self, filter)

    def set_image_view_overscan_opacity(self, value):
        return _gui.GuiApp_set_image_view_overscan_opacity(self, value)

    def get_image_view_overscan_opacity(self):
        return _gui.GuiApp_get_image_view_overscan_opacity(self)

    def set_auto_eval_changed(self, normal_mode, state):
        return _gui.GuiApp_set_auto_eval_changed(self, normal_mode, state)

    def get_max_log_widget_lines_number(self):
        return _gui.GuiApp_get_max_log_widget_lines_number(self)

    def set_max_log_widget_lines_number(self, count):
        return _gui.GuiApp_set_max_log_widget_lines_number(self, count)

    def get_default_display_color_space_name(self):
        return _gui.GuiApp_get_default_display_color_space_name(self)

    def set_default_display_color_space(self, name):
        return _gui.GuiApp_set_default_display_color_space(self, name)

    def get_color_picker_color_space_name(self, real_value=False):
        return _gui.GuiApp_get_color_picker_color_space_name(self, real_value)

    def set_color_picker_color_space(self, name):
        return _gui.GuiApp_set_color_picker_color_space(self, name)

    def convert_linear_to_default(self, color):
        return _gui.GuiApp_convert_linear_to_default(self, color)

    def get_linear_to_default_converter(self):
        return _gui.GuiApp_get_linear_to_default_converter(self)

    def get_always_compute_full_quality(self):
        return _gui.GuiApp_get_always_compute_full_quality(self)

    def set_always_compute_full_quality(self, enable):
        return _gui.GuiApp_set_always_compute_full_quality(self, enable)

    def is_progress_update(self):
        return _gui.GuiApp_is_progress_update(self)

    def get_image_history_size(self):
        return _gui.GuiApp_get_image_history_size(self)

    def set_image_history_size(self, size):
        return _gui.GuiApp_set_image_history_size(self, size)

    def get_clear_history_on_new_project(self):
        return _gui.GuiApp_get_clear_history_on_new_project(self)

    def set_clear_history_on_new_project(self, value):
        return _gui.GuiApp_set_clear_history_on_new_project(self, value)

    def is_image_history_autosave(self):
        return _gui.GuiApp_is_image_history_autosave(self)

    def set_image_history_autosave(self, enable):
        return _gui.GuiApp_set_image_history_autosave(self, enable)

    def get_image_history_cache_path(self):
        return _gui.GuiApp_get_image_history_cache_path(self)

    def set_image_history_cache_path(self, value):
        return _gui.GuiApp_set_image_history_cache_path(self, value)

    def get_image_history_cache_max_count(self):
        return _gui.GuiApp_get_image_history_cache_max_count(self)

    def set_image_history_cache_max_count(self, value):
        return _gui.GuiApp_set_image_history_cache_max_count(self, value)

    def get_image_history_cache_max_size(self):
        return _gui.GuiApp_get_image_history_cache_max_size(self)

    def set_image_history_cache_max_size(self, value):
        return _gui.GuiApp_set_image_history_cache_max_size(self, value)

    def set_snapshot_mode(self, mode):
        return _gui.GuiApp_set_snapshot_mode(self, mode)

    def get_clear_history_cache_on_exit(self):
        return _gui.GuiApp_get_clear_history_cache_on_exit(self)

    def set_clear_history_cache_on_exit(self, value):
        return _gui.GuiApp_set_clear_history_cache_on_exit(self, value)

    def get_clear_history_cache_on_new_project(self):
        return _gui.GuiApp_get_clear_history_cache_on_new_project(self)

    def set_clear_history_cache_on_new_project(self, value):
        return _gui.GuiApp_set_clear_history_cache_on_new_project(self, value)

    def get_input_device_type(self):
        return _gui.GuiApp_get_input_device_type(self)

    def clear_recent_script_files(self):
        return _gui.GuiApp_clear_recent_script_files(self)

    def add_recent_script_file(self, file):
        return _gui.GuiApp_add_recent_script_file(self, file)

    def get_recent_script_files(self):
        return _gui.GuiApp_get_recent_script_files(self)

    def get_associations_file_path(self):
        return _gui.GuiApp_get_associations_file_path(self)

    def get_associations(self):
        return _gui.GuiApp_get_associations(self)

    def get_image_history(self):
        return _gui.GuiApp_get_image_history(self)

    def get_statistics(self, stats):
        return _gui.GuiApp_get_statistics(self, stats)

    def get_memory_size(self):
        return _gui.GuiApp_get_memory_size(self)

    def get_placeholder_icon(self, placeholder_label):
        return _gui.GuiApp_get_placeholder_icon(self, placeholder_label)

    def get_placeholder_labels(self):
        return _gui.GuiApp_get_placeholder_labels(self)

    def retrieve_context(self, *args):
        return _gui.GuiApp_retrieve_context(self, *args)

    def retrieve_object(self, *args):
        return _gui.GuiApp_retrieve_object(self, *args)

    def set_status_bar_message(self, msg):
        return _gui.GuiApp_set_status_bar_message(self, msg)
    if _newclass:
        class_info = staticmethod(_gui.GuiApp_class_info)
    else:
        class_info = _gui.GuiApp_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiApp____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiApp____class_destructor__

    def get_class_info(self):
        return _gui.GuiApp_get_class_info(self)
GuiApp_swigregister = _gui.GuiApp_swigregister
GuiApp_swigregister(GuiApp)
cvar = _gui.cvar
EVT_ID_APPLICATION_FOREGROUND_COLOR_CHANGE = cvar.EVT_ID_APPLICATION_FOREGROUND_COLOR_CHANGE
EVT_ID_APPLICATION_BACKGROUND_COLOR_CHANGE = cvar.EVT_ID_APPLICATION_BACKGROUND_COLOR_CHANGE
EVT_ID_APPLICATION_BILINEAR_FILTERING_CHANGED = cvar.EVT_ID_APPLICATION_BILINEAR_FILTERING_CHANGED
EVT_ID_APPLICATION_OVERSCAN_OPACITY_CHANGED = cvar.EVT_ID_APPLICATION_OVERSCAN_OPACITY_CHANGED
EVT_ID_APPLICATION_AUTO_EVAL_DEFAULT = cvar.EVT_ID_APPLICATION_AUTO_EVAL_DEFAULT
EVT_ID_APPLICATION_AUTO_EVAL_PLAY = cvar.EVT_ID_APPLICATION_AUTO_EVAL_PLAY
EVT_ID_APPLICATION_AUTO_EVAL_PAUSE = cvar.EVT_ID_APPLICATION_AUTO_EVAL_PAUSE
EVT_ID_APPLICATION_AUTO_EVAL_REFRESH = cvar.EVT_ID_APPLICATION_AUTO_EVAL_REFRESH
EVT_ID_APPLICATION_COMPUTE_ALL_QUALITIES_CHANGED = cvar.EVT_ID_APPLICATION_COMPUTE_ALL_QUALITIES_CHANGED
EVT_ID_APPLICATION_USE_OCIO_CONFIG_FILE_CHANGED = cvar.EVT_ID_APPLICATION_USE_OCIO_CONFIG_FILE_CHANGED
EVT_ID_APPLICATION_DISPLAY_COLOR_SPACE_NAME_CHANGED = cvar.EVT_ID_APPLICATION_DISPLAY_COLOR_SPACE_NAME_CHANGED
EVT_ID_APPLICATION_COLOR_PICKER_COLOR_SPACE_NAME_CHANGED = cvar.EVT_ID_APPLICATION_COLOR_PICKER_COLOR_SPACE_NAME_CHANGED
EVT_ID_APPLICATION_MAX_LOG_WIDGET_LINES_NUMBER_CHANGED = cvar.EVT_ID_APPLICATION_MAX_LOG_WIDGET_LINES_NUMBER_CHANGED
EVT_ID_APPLICATION_SCRIPTING_OPTIONS_CHANGED = cvar.EVT_ID_APPLICATION_SCRIPTING_OPTIONS_CHANGED
EVT_ID_APPLICATION_SNAP_DISTANCE_CHANGED = cvar.EVT_ID_APPLICATION_SNAP_DISTANCE_CHANGED
EVT_ID_APPLICATION_SNAP_PLANE_CHANGED = cvar.EVT_ID_APPLICATION_SNAP_PLANE_CHANGED
EVT_ID_APPLICATION_LINKED_PIVOTS_CHANGED = cvar.EVT_ID_APPLICATION_LINKED_PIVOTS_CHANGED
EVT_ID_APPLICATION_DEFAULT_NODE_STATE_CHANGED = cvar.EVT_ID_APPLICATION_DEFAULT_NODE_STATE_CHANGED
EVT_ID_APPLICATION_FOCUS_WIDGET_CHANGED = cvar.EVT_ID_APPLICATION_FOCUS_WIDGET_CHANGED
EVT_ID_APPLICATION_IMAGE_VIEW_HUD_CHANGED = cvar.EVT_ID_APPLICATION_IMAGE_VIEW_HUD_CHANGED
EVT_ID_APPLICATION_3D_VIEW_HUD_CHANGED = cvar.EVT_ID_APPLICATION_3D_VIEW_HUD_CHANGED
EVT_ID_APPLICATION_3D_VIEW_HWM_CHANGED = cvar.EVT_ID_APPLICATION_3D_VIEW_HWM_CHANGED
EVT_ID_APPLICATION_TAG_DEFINITION_CHANGED = cvar.EVT_ID_APPLICATION_TAG_DEFINITION_CHANGED
EVT_ID_APPLICATION_PLAYBLAST_START = cvar.EVT_ID_APPLICATION_PLAYBLAST_START
GuiApp.s_has_custom_data_in_associate_window = _gui.cvar.GuiApp_s_has_custom_data_in_associate_window

def GuiApp_class_info():
    return _gui.GuiApp_class_info()
GuiApp_class_info = _gui.GuiApp_class_info

def GuiApp____class_destructor__(instance, is_array):
    return _gui.GuiApp____class_destructor__(instance, is_array)
GuiApp____class_destructor__ = _gui.GuiApp____class_destructor__

class ClarisseApp(GuiApp):
    __swig_setmethods__ = {}
    for _s in [GuiApp]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClarisseApp, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiApp]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClarisseApp, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gui.delete_ClarisseApp
    __del__ = lambda self: None

    def is_project_modified(self):
        return _gui.ClarisseApp_is_project_modified(self)

    def reset_windows_layout(self):
        return _gui.ClarisseApp_reset_windows_layout(self)

    def clear_recent_files(self, type):
        return _gui.ClarisseApp_clear_recent_files(self, type)

    def get_recent_files(self, type):
        return _gui.ClarisseApp_get_recent_files(self, type)

    def add_recent_file(self, path, type):
        return _gui.ClarisseApp_add_recent_file(self, path, type)

    def get_project_extension_name(self):
        return _gui.ClarisseApp_get_project_extension_name(self)

    def warn_save_project(self):
        return _gui.ClarisseApp_warn_save_project(self)

    def save_project_snapshot(self, filename):
        return _gui.ClarisseApp_save_project_snapshot(self, filename)

    def get_working_context(self):
        return _gui.ClarisseApp_get_working_context(self)

    def set_previous_selection(self):
        return _gui.ClarisseApp_set_previous_selection(self)

    def set_next_selection(self):
        return _gui.ClarisseApp_set_next_selection(self)

    def select_next_instances(self, recurse=False):
        return _gui.ClarisseApp_select_next_instances(self, recurse)

    def select_next_sources(self, recurse=False):
        return _gui.ClarisseApp_select_next_sources(self, recurse)

    def select_next_inputs(self, recurse=False):
        return _gui.ClarisseApp_select_next_inputs(self, recurse)

    def select_next_outputs(self, recurse=False):
        return _gui.ClarisseApp_select_next_outputs(self, recurse)

    def select_all_dependencies(self):
        return _gui.ClarisseApp_select_all_dependencies(self)

    def open_preferences_window(self, clarisse_window):
        return _gui.ClarisseApp_open_preferences_window(self, clarisse_window)

    def open_set_motion_key_window(self, clarisse_window):
        return _gui.ClarisseApp_open_set_motion_key_window(self, clarisse_window)

    def open_delete_motion_key_window(self, clarisse_window):
        return _gui.ClarisseApp_open_delete_motion_key_window(self, clarisse_window)

    def is_enable_motion_key_options(self):
        return _gui.ClarisseApp_is_enable_motion_key_options(self)

    def open_edit_channel_layers_window(self, clarisse_window):
        return _gui.ClarisseApp_open_edit_channel_layers_window(self, clarisse_window)

    def open_edit_color_space_window(self, clarisse_window):
        return _gui.ClarisseApp_open_edit_color_space_window(self, clarisse_window)

    def open_edit_color_manager_window(self, clarisse_window):
        return _gui.ClarisseApp_open_edit_color_manager_window(self, clarisse_window)

    def new_clarisse_windows(self):
        return _gui.ClarisseApp_new_clarisse_windows(self)

    def show_hide_subwindows_toggle(self, clarisse_window):
        return _gui.ClarisseApp_show_hide_subwindows_toggle(self, clarisse_window)

    def close_current_clarisse_window(self, clarisse_window):
        return _gui.ClarisseApp_close_current_clarisse_window(self, clarisse_window)

    def get_clarisse_window_count(self):
        return _gui.ClarisseApp_get_clarisse_window_count(self)

    def get_sub_windows_count(self, clarisse_win):
        return _gui.ClarisseApp_get_sub_windows_count(self, clarisse_win)

    def get_sub_windows(self, clarisse_win, index):
        return _gui.ClarisseApp_get_sub_windows(self, clarisse_win, index)

    def get_viewport_layout_names(self):
        return _gui.ClarisseApp_get_viewport_layout_names(self)

    def load_viewport_layout(self, clarisse_win, name):
        return _gui.ClarisseApp_load_viewport_layout(self, clarisse_win, name)

    def open_store_layout_window(self, window):
        return _gui.ClarisseApp_open_store_layout_window(self, window)

    def open_manage_layout_window(self, window):
        return _gui.ClarisseApp_open_manage_layout_window(self, window)

    def clear_all_viewports(self, window):
        return _gui.ClarisseApp_clear_all_viewports(self, window)

    def is_freeze_layout(self, window):
        return _gui.ClarisseApp_is_freeze_layout(self, window)

    def freeze_layout(self, window, value):
        return _gui.ClarisseApp_freeze_layout(self, window, value)

    def toggle_show_shelf(self, window):
        return _gui.ClarisseApp_toggle_show_shelf(self, window)

    def open_about_window(self, window):
        return _gui.ClarisseApp_open_about_window(self, window)

    def open_release_notes_window(self, window):
        return _gui.ClarisseApp_open_release_notes_window(self, window)

    def open_clarisse_help(self):
        return _gui.ClarisseApp_open_clarisse_help(self)

    def open_learn_clarisse(self):
        return _gui.ClarisseApp_open_learn_clarisse(self)

    def print_statistics(self):
        return _gui.ClarisseApp_print_statistics(self)

    def fill_create_main_menu(self, window, menu_path):
        return _gui.ClarisseApp_fill_create_main_menu(self, window, menu_path)

    def fill_colortag_main_menu(self, window, menu_path):
        return _gui.ClarisseApp_fill_colortag_main_menu(self, window, menu_path)

    def fill_debug_main_menu(self, window, menu_path):
        return _gui.ClarisseApp_fill_debug_main_menu(self, window, menu_path)

    def open_as_revision(self, clarisse_win):
        return _gui.ClarisseApp_open_as_revision(self, clarisse_win)

    def open_rename_item_window(self, clarisse_window):
        return _gui.ClarisseApp_open_rename_item_window(self, clarisse_window)

    def is_vendor_license_enabled(self):
        return _gui.ClarisseApp_is_vendor_license_enabled(self)
    if _newclass:
        class_info = staticmethod(_gui.ClarisseApp_class_info)
    else:
        class_info = _gui.ClarisseApp_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.ClarisseApp____class_destructor__)
    else:
        ___class_destructor__ = _gui.ClarisseApp____class_destructor__

    def get_class_info(self):
        return _gui.ClarisseApp_get_class_info(self)
ClarisseApp_swigregister = _gui.ClarisseApp_swigregister
ClarisseApp_swigregister(ClarisseApp)

def ClarisseApp_class_info():
    return _gui.ClarisseApp_class_info()
ClarisseApp_class_info = _gui.ClarisseApp_class_info

def ClarisseApp____class_destructor__(instance, is_array):
    return _gui.ClarisseApp____class_destructor__(instance, is_array)
ClarisseApp____class_destructor__ = _gui.ClarisseApp____class_destructor__

KEY_ID_PAD = _gui.KEY_ID_PAD
class Gui(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gui, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gui, name)
    __repr__ = _swig_repr
    if _newclass:
        get_screen_width = staticmethod(_gui.Gui_get_screen_width)
    else:
        get_screen_width = _gui.Gui_get_screen_width
    if _newclass:
        get_screen_height = staticmethod(_gui.Gui_get_screen_height)
    else:
        get_screen_height = _gui.Gui_get_screen_height
    if _newclass:
        get_screen_bbox = staticmethod(_gui.Gui_get_screen_bbox)
    else:
        get_screen_bbox = _gui.Gui_get_screen_bbox
    if _newclass:
        open_uri = staticmethod(_gui.Gui_open_uri)
    else:
        open_uri = _gui.Gui_open_uri
    __swig_setmethods__["clipboard_signature"] = _gui.Gui_clipboard_signature_set
    __swig_getmethods__["clipboard_signature"] = _gui.Gui_clipboard_signature_get
    if _newclass:
        clipboard_signature = _swig_property(_gui.Gui_clipboard_signature_get, _gui.Gui_clipboard_signature_set)
    if _newclass:
        copy_to_clipboard = staticmethod(_gui.Gui_copy_to_clipboard)
    else:
        copy_to_clipboard = _gui.Gui_copy_to_clipboard
    if _newclass:
        paste_from_clipboard = staticmethod(_gui.Gui_paste_from_clipboard)
    else:
        paste_from_clipboard = _gui.Gui_paste_from_clipboard
    if _newclass:
        copy_to_selection_buffer = staticmethod(_gui.Gui_copy_to_selection_buffer)
    else:
        copy_to_selection_buffer = _gui.Gui_copy_to_selection_buffer
    if _newclass:
        paste_from_selection_buffer = staticmethod(_gui.Gui_paste_from_selection_buffer)
    else:
        paste_from_selection_buffer = _gui.Gui_paste_from_selection_buffer
    if _newclass:
        get_event_text = staticmethod(_gui.Gui_get_event_text)
    else:
        get_event_text = _gui.Gui_get_event_text
    KEY_ID_BACKSPACE = _gui.Gui_KEY_ID_BACKSPACE
    KEY_ID_TAB = _gui.Gui_KEY_ID_TAB
    KEY_ID_ENTER = _gui.Gui_KEY_ID_ENTER
    KEY_ID_PAUSE = _gui.Gui_KEY_ID_PAUSE
    KEY_ID_SCROLL_LOCK = _gui.Gui_KEY_ID_SCROLL_LOCK
    KEY_ID_ESCAPE = _gui.Gui_KEY_ID_ESCAPE
    KEY_ID_HOME = _gui.Gui_KEY_ID_HOME
    KEY_ID_LEFT = _gui.Gui_KEY_ID_LEFT
    KEY_ID_UP = _gui.Gui_KEY_ID_UP
    KEY_ID_RIGHT = _gui.Gui_KEY_ID_RIGHT
    KEY_ID_DOWN = _gui.Gui_KEY_ID_DOWN
    KEY_ID_PAGE_UP = _gui.Gui_KEY_ID_PAGE_UP
    KEY_ID_PAGE_DOWN = _gui.Gui_KEY_ID_PAGE_DOWN
    KEY_ID_END = _gui.Gui_KEY_ID_END
    KEY_ID_PRINT = _gui.Gui_KEY_ID_PRINT
    KEY_ID_INSERT = _gui.Gui_KEY_ID_INSERT
    KEY_ID_MENU = _gui.Gui_KEY_ID_MENU
    KEY_ID_HELP = _gui.Gui_KEY_ID_HELP
    KEY_ID_NUM_LOCK = _gui.Gui_KEY_ID_NUM_LOCK
    KEY_ID_KEYPAD_0 = _gui.Gui_KEY_ID_KEYPAD_0
    KEY_ID_KEYPAD_1 = _gui.Gui_KEY_ID_KEYPAD_1
    KEY_ID_KEYPAD_2 = _gui.Gui_KEY_ID_KEYPAD_2
    KEY_ID_KEYPAD_3 = _gui.Gui_KEY_ID_KEYPAD_3
    KEY_ID_KEYPAD_4 = _gui.Gui_KEY_ID_KEYPAD_4
    KEY_ID_KEYPAD_5 = _gui.Gui_KEY_ID_KEYPAD_5
    KEY_ID_KEYPAD_6 = _gui.Gui_KEY_ID_KEYPAD_6
    KEY_ID_KEYPAD_7 = _gui.Gui_KEY_ID_KEYPAD_7
    KEY_ID_KEYPAD_8 = _gui.Gui_KEY_ID_KEYPAD_8
    KEY_ID_KEYPAD_9 = _gui.Gui_KEY_ID_KEYPAD_9
    KEY_ID_KEYPAD_ADD = _gui.Gui_KEY_ID_KEYPAD_ADD
    KEY_ID_KEYPAD_SUBTRACT = _gui.Gui_KEY_ID_KEYPAD_SUBTRACT
    KEY_ID_KEYPAD_MULTIPLY = _gui.Gui_KEY_ID_KEYPAD_MULTIPLY
    KEY_ID_KEYPAD_DEVIDE = _gui.Gui_KEY_ID_KEYPAD_DEVIDE
    KEY_ID_KEYPAD_DECIMAL = _gui.Gui_KEY_ID_KEYPAD_DECIMAL
    KEY_ID_KEYPAD_ENTER = _gui.Gui_KEY_ID_KEYPAD_ENTER
    KEY_ID_F0 = _gui.Gui_KEY_ID_F0
    KEY_ID_F1 = _gui.Gui_KEY_ID_F1
    KEY_ID_F2 = _gui.Gui_KEY_ID_F2
    KEY_ID_F3 = _gui.Gui_KEY_ID_F3
    KEY_ID_F4 = _gui.Gui_KEY_ID_F4
    KEY_ID_F5 = _gui.Gui_KEY_ID_F5
    KEY_ID_F6 = _gui.Gui_KEY_ID_F6
    KEY_ID_F7 = _gui.Gui_KEY_ID_F7
    KEY_ID_F8 = _gui.Gui_KEY_ID_F8
    KEY_ID_F9 = _gui.Gui_KEY_ID_F9
    KEY_ID_F10 = _gui.Gui_KEY_ID_F10
    KEY_ID_F11 = _gui.Gui_KEY_ID_F11
    KEY_ID_F12 = _gui.Gui_KEY_ID_F12
    KEY_ID_LEFT_SHIFT = _gui.Gui_KEY_ID_LEFT_SHIFT
    KEY_ID_RIGHT_SHIFT = _gui.Gui_KEY_ID_RIGHT_SHIFT
    KEY_ID_LEFT_CONTROL = _gui.Gui_KEY_ID_LEFT_CONTROL
    KEY_ID_RIGHT_CONTROL = _gui.Gui_KEY_ID_RIGHT_CONTROL
    KEY_ID_CAPS_LOCK = _gui.Gui_KEY_ID_CAPS_LOCK
    KEY_ID_LEFT_META = _gui.Gui_KEY_ID_LEFT_META
    KEY_ID_RIGHT_META = _gui.Gui_KEY_ID_RIGHT_META
    KEY_ID_LEFT_ALT = _gui.Gui_KEY_ID_LEFT_ALT
    KEY_ID_RIGHT_ALT = _gui.Gui_KEY_ID_RIGHT_ALT
    KEY_ID_DELETE = _gui.Gui_KEY_ID_DELETE
    KEY_ID_COUNT = _gui.Gui_KEY_ID_COUNT
    if _newclass:
        get_key_id_name = staticmethod(_gui.Gui_get_key_id_name)
    else:
        get_key_id_name = _gui.Gui_get_key_id_name
    if _newclass:
        is_key_pressed = staticmethod(_gui.Gui_is_key_pressed)
    else:
        is_key_pressed = _gui.Gui_is_key_pressed
    if _newclass:
        is_key_down = staticmethod(_gui.Gui_is_key_down)
    else:
        is_key_down = _gui.Gui_is_key_down
    if _newclass:
        get_last_key_pressed = staticmethod(_gui.Gui_get_last_key_pressed)
    else:
        get_last_key_pressed = _gui.Gui_get_last_key_pressed
    if _newclass:
        get_key_pressed_text = staticmethod(_gui.Gui_get_key_pressed_text)
    else:
        get_key_pressed_text = _gui.Gui_get_key_pressed_text
    if _newclass:
        get_count_of_next_character = staticmethod(_gui.Gui_get_count_of_next_character)
    else:
        get_count_of_next_character = _gui.Gui_get_count_of_next_character
    MODIFIER_KEY_ID_SHIFT = _gui.Gui_MODIFIER_KEY_ID_SHIFT
    MODIFIER_KEY_ID_CAPS_LOCK = _gui.Gui_MODIFIER_KEY_ID_CAPS_LOCK
    MODIFIER_KEY_ID_CTRL = _gui.Gui_MODIFIER_KEY_ID_CTRL
    MODIFIER_KEY_ID_ALT = _gui.Gui_MODIFIER_KEY_ID_ALT
    MODIFIER_KEY_ID_NUM_LOCK = _gui.Gui_MODIFIER_KEY_ID_NUM_LOCK
    MODIFIER_KEY_ID_META = _gui.Gui_MODIFIER_KEY_ID_META
    MODIFIER_KEY_ID_SCROLL_LOCK = _gui.Gui_MODIFIER_KEY_ID_SCROLL_LOCK
    MODIFIER_KEY_ID_BUTTON_LEFT = _gui.Gui_MODIFIER_KEY_ID_BUTTON_LEFT
    MODIFIER_KEY_ID_BUTTON_MIDDLE = _gui.Gui_MODIFIER_KEY_ID_BUTTON_MIDDLE
    MODIFIER_KEY_ID_BUTTON_RIGHT = _gui.Gui_MODIFIER_KEY_ID_BUTTON_RIGHT
    MODIFIER_KEY_ID_COUNT = _gui.Gui_MODIFIER_KEY_ID_COUNT
    if _newclass:
        get_modifier_key_id_name = staticmethod(_gui.Gui_get_modifier_key_id_name)
    else:
        get_modifier_key_id_name = _gui.Gui_get_modifier_key_id_name
    if _newclass:
        is_modifier_pressed = staticmethod(_gui.Gui_is_modifier_pressed)
    else:
        is_modifier_pressed = _gui.Gui_is_modifier_pressed
    if _newclass:
        is_modifier_shift = staticmethod(_gui.Gui_is_modifier_shift)
    else:
        is_modifier_shift = _gui.Gui_is_modifier_shift
    if _newclass:
        is_modifier_caps_lock = staticmethod(_gui.Gui_is_modifier_caps_lock)
    else:
        is_modifier_caps_lock = _gui.Gui_is_modifier_caps_lock
    if _newclass:
        is_modifier_ctrl = staticmethod(_gui.Gui_is_modifier_ctrl)
    else:
        is_modifier_ctrl = _gui.Gui_is_modifier_ctrl
    if _newclass:
        is_modifier_alt = staticmethod(_gui.Gui_is_modifier_alt)
    else:
        is_modifier_alt = _gui.Gui_is_modifier_alt
    if _newclass:
        is_modifier_num_lock = staticmethod(_gui.Gui_is_modifier_num_lock)
    else:
        is_modifier_num_lock = _gui.Gui_is_modifier_num_lock
    if _newclass:
        is_modifier_meta = staticmethod(_gui.Gui_is_modifier_meta)
    else:
        is_modifier_meta = _gui.Gui_is_modifier_meta
    if _newclass:
        is_modifier_scroll_lock = staticmethod(_gui.Gui_is_modifier_scroll_lock)
    else:
        is_modifier_scroll_lock = _gui.Gui_is_modifier_scroll_lock
    if _newclass:
        is_modifier_button_left = staticmethod(_gui.Gui_is_modifier_button_left)
    else:
        is_modifier_button_left = _gui.Gui_is_modifier_button_left
    if _newclass:
        is_modifier_button_middle = staticmethod(_gui.Gui_is_modifier_button_middle)
    else:
        is_modifier_button_middle = _gui.Gui_is_modifier_button_middle
    if _newclass:
        is_modifier_button_right = staticmethod(_gui.Gui_is_modifier_button_right)
    else:
        is_modifier_button_right = _gui.Gui_is_modifier_button_right
    MOUSE_BUTTON_ID_LEFT = _gui.Gui_MOUSE_BUTTON_ID_LEFT
    MOUSE_BUTTON_ID_MIDDLE = _gui.Gui_MOUSE_BUTTON_ID_MIDDLE
    MOUSE_BUTTON_ID_RIGHT = _gui.Gui_MOUSE_BUTTON_ID_RIGHT
    MOUSE_BUTTON_ID_COUNT = _gui.Gui_MOUSE_BUTTON_ID_COUNT
    if _newclass:
        get_mouse_button_id_name = staticmethod(_gui.Gui_get_mouse_button_id_name)
    else:
        get_mouse_button_id_name = _gui.Gui_get_mouse_button_id_name
    if _newclass:
        get_event_mouse_button = staticmethod(_gui.Gui_get_event_mouse_button)
    else:
        get_event_mouse_button = _gui.Gui_get_event_mouse_button
    if _newclass:
        is_one_click = staticmethod(_gui.Gui_is_one_click)
    else:
        is_one_click = _gui.Gui_is_one_click
    if _newclass:
        is_double_click = staticmethod(_gui.Gui_is_double_click)
    else:
        is_double_click = _gui.Gui_is_double_click
    if _newclass:
        is_triple_click = staticmethod(_gui.Gui_is_triple_click)
    else:
        is_triple_click = _gui.Gui_is_triple_click
    if _newclass:
        get_event_clicks_count = staticmethod(_gui.Gui_get_event_clicks_count)
    else:
        get_event_clicks_count = _gui.Gui_get_event_clicks_count
    if _newclass:
        is_mouse_button_pressed = staticmethod(_gui.Gui_is_mouse_button_pressed)
    else:
        is_mouse_button_pressed = _gui.Gui_is_mouse_button_pressed
    if _newclass:
        get_relative_mouse_x = staticmethod(_gui.Gui_get_relative_mouse_x)
    else:
        get_relative_mouse_x = _gui.Gui_get_relative_mouse_x
    if _newclass:
        get_relative_mouse_y = staticmethod(_gui.Gui_get_relative_mouse_y)
    else:
        get_relative_mouse_y = _gui.Gui_get_relative_mouse_y
    if _newclass:
        get_relative_mouse_coords = staticmethod(_gui.Gui_get_relative_mouse_coords)
    else:
        get_relative_mouse_coords = _gui.Gui_get_relative_mouse_coords
    if _newclass:
        get_absolute_mouse_x = staticmethod(_gui.Gui_get_absolute_mouse_x)
    else:
        get_absolute_mouse_x = _gui.Gui_get_absolute_mouse_x
    if _newclass:
        get_absolute_mouse_y = staticmethod(_gui.Gui_get_absolute_mouse_y)
    else:
        get_absolute_mouse_y = _gui.Gui_get_absolute_mouse_y
    if _newclass:
        get_absolute_mouse_coords = staticmethod(_gui.Gui_get_absolute_mouse_coords)
    else:
        get_absolute_mouse_coords = _gui.Gui_get_absolute_mouse_coords
    if _newclass:
        get_mouse_dx = staticmethod(_gui.Gui_get_mouse_dx)
    else:
        get_mouse_dx = _gui.Gui_get_mouse_dx
    if _newclass:
        get_mouse_dy = staticmethod(_gui.Gui_get_mouse_dy)
    else:
        get_mouse_dy = _gui.Gui_get_mouse_dy
    if _newclass:
        set_mouse_screen_position = staticmethod(_gui.Gui_set_mouse_screen_position)
    else:
        set_mouse_screen_position = _gui.Gui_set_mouse_screen_position
    if _newclass:
        get_mouse_screen_position = staticmethod(_gui.Gui_get_mouse_screen_position)
    else:
        get_mouse_screen_position = _gui.Gui_get_mouse_screen_position
    if _newclass:
        get_mouse_screen_position_x = staticmethod(_gui.Gui_get_mouse_screen_position_x)
    else:
        get_mouse_screen_position_x = _gui.Gui_get_mouse_screen_position_x
    if _newclass:
        get_mouse_screen_position_y = staticmethod(_gui.Gui_get_mouse_screen_position_y)
    else:
        get_mouse_screen_position_y = _gui.Gui_get_mouse_screen_position_y
    if _newclass:
        is_mouse_over_screen_region = staticmethod(_gui.Gui_is_mouse_over_screen_region)
    else:
        is_mouse_over_screen_region = _gui.Gui_is_mouse_over_screen_region
    if _newclass:
        is_mouse_over_region = staticmethod(_gui.Gui_is_mouse_over_region)
    else:
        is_mouse_over_region = _gui.Gui_is_mouse_over_region
    if _newclass:
        is_mouse_over_widget = staticmethod(_gui.Gui_is_mouse_over_widget)
    else:
        is_mouse_over_widget = _gui.Gui_is_mouse_over_widget
    if _newclass:
        get_below_mouse_widget = staticmethod(_gui.Gui_get_below_mouse_widget)
    else:
        get_below_mouse_widget = _gui.Gui_get_below_mouse_widget
    MOUSE_CURSOR_DEFAULT = _gui.Gui_MOUSE_CURSOR_DEFAULT
    MOUSE_CURSOR_ARROW = _gui.Gui_MOUSE_CURSOR_ARROW
    MOUSE_CURSOR_CROSS = _gui.Gui_MOUSE_CURSOR_CROSS
    MOUSE_CURSOR_WAIT = _gui.Gui_MOUSE_CURSOR_WAIT
    MOUSE_CURSOR_INSERT = _gui.Gui_MOUSE_CURSOR_INSERT
    MOUSE_CURSOR_HAND = _gui.Gui_MOUSE_CURSOR_HAND
    MOUSE_CURSOR_HELP = _gui.Gui_MOUSE_CURSOR_HELP
    MOUSE_CURSOR_MOVE = _gui.Gui_MOUSE_CURSOR_MOVE
    MOUSE_CURSOR_NS = _gui.Gui_MOUSE_CURSOR_NS
    MOUSE_CURSOR_WE = _gui.Gui_MOUSE_CURSOR_WE
    MOUSE_CURSOR_NWSE = _gui.Gui_MOUSE_CURSOR_NWSE
    MOUSE_CURSOR_NESW = _gui.Gui_MOUSE_CURSOR_NESW
    MOUSE_CURSOR_NO_ENTRY = _gui.Gui_MOUSE_CURSOR_NO_ENTRY
    MOUSE_CURSOR_NONE = _gui.Gui_MOUSE_CURSOR_NONE
    MOUSE_CURSOR_COUNT = _gui.Gui_MOUSE_CURSOR_COUNT
    if _newclass:
        get_mouse_cursor_name = staticmethod(_gui.Gui_get_mouse_cursor_name)
    else:
        get_mouse_cursor_name = _gui.Gui_get_mouse_cursor_name
    if _newclass:
        set_mouse_cursor = staticmethod(_gui.Gui_set_mouse_cursor)
    else:
        set_mouse_cursor = _gui.Gui_set_mouse_cursor
    DEVICE_MOUSE = _gui.Gui_DEVICE_MOUSE
    DEVICE_STYLUS = _gui.Gui_DEVICE_STYLUS
    DEVICE_ERASER = _gui.Gui_DEVICE_ERASER
    DEVICE_CURSOR = _gui.Gui_DEVICE_CURSOR
    DEVICE_AIRBRUSH = _gui.Gui_DEVICE_AIRBRUSH
    DEVICE_TOUCH = _gui.Gui_DEVICE_TOUCH
    DEVICE_COUNT = _gui.Gui_DEVICE_COUNT
    if _newclass:
        get_device_id_name = staticmethod(_gui.Gui_get_device_id_name)
    else:
        get_device_id_name = _gui.Gui_get_device_id_name
    if _newclass:
        get_device_type = staticmethod(_gui.Gui_get_device_type)
    else:
        get_device_type = _gui.Gui_get_device_type
    if _newclass:
        get_x_tilt = staticmethod(_gui.Gui_get_x_tilt)
    else:
        get_x_tilt = _gui.Gui_get_x_tilt
    if _newclass:
        get_y_tilt = staticmethod(_gui.Gui_get_y_tilt)
    else:
        get_y_tilt = _gui.Gui_get_y_tilt
    if _newclass:
        get_pressure = staticmethod(_gui.Gui_get_pressure)
    else:
        get_pressure = _gui.Gui_get_pressure
    COLOR_DEPTH_RGB = _gui.Gui_COLOR_DEPTH_RGB
    COLOR_DEPTH_RGBA = _gui.Gui_COLOR_DEPTH_RGBA
    COLOR_DEPTH_L = _gui.Gui_COLOR_DEPTH_L
    COLOR_DEPTH_LA = _gui.Gui_COLOR_DEPTH_LA
    COLOR_DEPTH_A = _gui.Gui_COLOR_DEPTH_A
    COLOR_DEPTH_COUNT = _gui.Gui_COLOR_DEPTH_COUNT
    if _newclass:
        get_channel_depth_name = staticmethod(_gui.Gui_get_channel_depth_name)
    else:
        get_channel_depth_name = _gui.Gui_get_channel_depth_name
    if _newclass:
        get_channel_count_by_color_depth = staticmethod(_gui.Gui_get_channel_count_by_color_depth)
    else:
        get_channel_count_by_color_depth = _gui.Gui_get_channel_count_by_color_depth
    if _newclass:
        class_info = staticmethod(_gui.Gui_class_info)
    else:
        class_info = _gui.Gui_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.Gui____class_destructor__)
    else:
        ___class_destructor__ = _gui.Gui____class_destructor__

    def get_class_info(self):
        return _gui.Gui_get_class_info(self)

    def __init__(self):
        this = _gui.new_Gui()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_Gui
    __del__ = lambda self: None
Gui_swigregister = _gui.Gui_swigregister
Gui_swigregister(Gui)

def Gui_get_screen_width():
    return _gui.Gui_get_screen_width()
Gui_get_screen_width = _gui.Gui_get_screen_width

def Gui_get_screen_height():
    return _gui.Gui_get_screen_height()
Gui_get_screen_height = _gui.Gui_get_screen_height

def Gui_get_screen_bbox(mx, my):
    return _gui.Gui_get_screen_bbox(mx, my)
Gui_get_screen_bbox = _gui.Gui_get_screen_bbox

def Gui_open_uri(uri):
    return _gui.Gui_open_uri(uri)
Gui_open_uri = _gui.Gui_open_uri

def Gui_copy_to_clipboard(str, signature=None):
    return _gui.Gui_copy_to_clipboard(str, signature)
Gui_copy_to_clipboard = _gui.Gui_copy_to_clipboard

def Gui_paste_from_clipboard():
    return _gui.Gui_paste_from_clipboard()
Gui_paste_from_clipboard = _gui.Gui_paste_from_clipboard

def Gui_copy_to_selection_buffer(str):
    return _gui.Gui_copy_to_selection_buffer(str)
Gui_copy_to_selection_buffer = _gui.Gui_copy_to_selection_buffer

def Gui_paste_from_selection_buffer():
    return _gui.Gui_paste_from_selection_buffer()
Gui_paste_from_selection_buffer = _gui.Gui_paste_from_selection_buffer

def Gui_get_event_text():
    return _gui.Gui_get_event_text()
Gui_get_event_text = _gui.Gui_get_event_text

def Gui_get_key_id_name(id):
    return _gui.Gui_get_key_id_name(id)
Gui_get_key_id_name = _gui.Gui_get_key_id_name

def Gui_is_key_pressed(key):
    return _gui.Gui_is_key_pressed(key)
Gui_is_key_pressed = _gui.Gui_is_key_pressed

def Gui_is_key_down(key):
    return _gui.Gui_is_key_down(key)
Gui_is_key_down = _gui.Gui_is_key_down

def Gui_get_last_key_pressed():
    return _gui.Gui_get_last_key_pressed()
Gui_get_last_key_pressed = _gui.Gui_get_last_key_pressed

def Gui_get_key_pressed_text():
    return _gui.Gui_get_key_pressed_text()
Gui_get_key_pressed_text = _gui.Gui_get_key_pressed_text

def Gui_get_count_of_next_character(c):
    return _gui.Gui_get_count_of_next_character(c)
Gui_get_count_of_next_character = _gui.Gui_get_count_of_next_character

def Gui_get_modifier_key_id_name(id):
    return _gui.Gui_get_modifier_key_id_name(id)
Gui_get_modifier_key_id_name = _gui.Gui_get_modifier_key_id_name

def Gui_is_modifier_pressed(id):
    return _gui.Gui_is_modifier_pressed(id)
Gui_is_modifier_pressed = _gui.Gui_is_modifier_pressed

def Gui_is_modifier_shift():
    return _gui.Gui_is_modifier_shift()
Gui_is_modifier_shift = _gui.Gui_is_modifier_shift

def Gui_is_modifier_caps_lock():
    return _gui.Gui_is_modifier_caps_lock()
Gui_is_modifier_caps_lock = _gui.Gui_is_modifier_caps_lock

def Gui_is_modifier_ctrl():
    return _gui.Gui_is_modifier_ctrl()
Gui_is_modifier_ctrl = _gui.Gui_is_modifier_ctrl

def Gui_is_modifier_alt():
    return _gui.Gui_is_modifier_alt()
Gui_is_modifier_alt = _gui.Gui_is_modifier_alt

def Gui_is_modifier_num_lock():
    return _gui.Gui_is_modifier_num_lock()
Gui_is_modifier_num_lock = _gui.Gui_is_modifier_num_lock

def Gui_is_modifier_meta():
    return _gui.Gui_is_modifier_meta()
Gui_is_modifier_meta = _gui.Gui_is_modifier_meta

def Gui_is_modifier_scroll_lock():
    return _gui.Gui_is_modifier_scroll_lock()
Gui_is_modifier_scroll_lock = _gui.Gui_is_modifier_scroll_lock

def Gui_is_modifier_button_left():
    return _gui.Gui_is_modifier_button_left()
Gui_is_modifier_button_left = _gui.Gui_is_modifier_button_left

def Gui_is_modifier_button_middle():
    return _gui.Gui_is_modifier_button_middle()
Gui_is_modifier_button_middle = _gui.Gui_is_modifier_button_middle

def Gui_is_modifier_button_right():
    return _gui.Gui_is_modifier_button_right()
Gui_is_modifier_button_right = _gui.Gui_is_modifier_button_right

def Gui_get_mouse_button_id_name(id):
    return _gui.Gui_get_mouse_button_id_name(id)
Gui_get_mouse_button_id_name = _gui.Gui_get_mouse_button_id_name

def Gui_get_event_mouse_button():
    return _gui.Gui_get_event_mouse_button()
Gui_get_event_mouse_button = _gui.Gui_get_event_mouse_button

def Gui_is_one_click():
    return _gui.Gui_is_one_click()
Gui_is_one_click = _gui.Gui_is_one_click

def Gui_is_double_click():
    return _gui.Gui_is_double_click()
Gui_is_double_click = _gui.Gui_is_double_click

def Gui_is_triple_click():
    return _gui.Gui_is_triple_click()
Gui_is_triple_click = _gui.Gui_is_triple_click

def Gui_get_event_clicks_count():
    return _gui.Gui_get_event_clicks_count()
Gui_get_event_clicks_count = _gui.Gui_get_event_clicks_count

def Gui_is_mouse_button_pressed(*args):
    return _gui.Gui_is_mouse_button_pressed(*args)
Gui_is_mouse_button_pressed = _gui.Gui_is_mouse_button_pressed

def Gui_get_relative_mouse_x(widget):
    return _gui.Gui_get_relative_mouse_x(widget)
Gui_get_relative_mouse_x = _gui.Gui_get_relative_mouse_x

def Gui_get_relative_mouse_y(widget):
    return _gui.Gui_get_relative_mouse_y(widget)
Gui_get_relative_mouse_y = _gui.Gui_get_relative_mouse_y

def Gui_get_relative_mouse_coords(widget, x, y):
    return _gui.Gui_get_relative_mouse_coords(widget, x, y)
Gui_get_relative_mouse_coords = _gui.Gui_get_relative_mouse_coords

def Gui_get_absolute_mouse_x(widget):
    return _gui.Gui_get_absolute_mouse_x(widget)
Gui_get_absolute_mouse_x = _gui.Gui_get_absolute_mouse_x

def Gui_get_absolute_mouse_y(widget):
    return _gui.Gui_get_absolute_mouse_y(widget)
Gui_get_absolute_mouse_y = _gui.Gui_get_absolute_mouse_y

def Gui_get_absolute_mouse_coords(widget, x, y):
    return _gui.Gui_get_absolute_mouse_coords(widget, x, y)
Gui_get_absolute_mouse_coords = _gui.Gui_get_absolute_mouse_coords

def Gui_get_mouse_dx():
    return _gui.Gui_get_mouse_dx()
Gui_get_mouse_dx = _gui.Gui_get_mouse_dx

def Gui_get_mouse_dy():
    return _gui.Gui_get_mouse_dy()
Gui_get_mouse_dy = _gui.Gui_get_mouse_dy

def Gui_set_mouse_screen_position(new_x, new_y):
    return _gui.Gui_set_mouse_screen_position(new_x, new_y)
Gui_set_mouse_screen_position = _gui.Gui_set_mouse_screen_position

def Gui_get_mouse_screen_position(x, y):
    return _gui.Gui_get_mouse_screen_position(x, y)
Gui_get_mouse_screen_position = _gui.Gui_get_mouse_screen_position

def Gui_get_mouse_screen_position_x():
    return _gui.Gui_get_mouse_screen_position_x()
Gui_get_mouse_screen_position_x = _gui.Gui_get_mouse_screen_position_x

def Gui_get_mouse_screen_position_y():
    return _gui.Gui_get_mouse_screen_position_y()
Gui_get_mouse_screen_position_y = _gui.Gui_get_mouse_screen_position_y

def Gui_is_mouse_over_screen_region(x, y, w, h):
    return _gui.Gui_is_mouse_over_screen_region(x, y, w, h)
Gui_is_mouse_over_screen_region = _gui.Gui_is_mouse_over_screen_region

def Gui_is_mouse_over_region(*args):
    return _gui.Gui_is_mouse_over_region(*args)
Gui_is_mouse_over_region = _gui.Gui_is_mouse_over_region

def Gui_is_mouse_over_widget(widget):
    return _gui.Gui_is_mouse_over_widget(widget)
Gui_is_mouse_over_widget = _gui.Gui_is_mouse_over_widget

def Gui_get_below_mouse_widget():
    return _gui.Gui_get_below_mouse_widget()
Gui_get_below_mouse_widget = _gui.Gui_get_below_mouse_widget

def Gui_get_mouse_cursor_name(cursor):
    return _gui.Gui_get_mouse_cursor_name(cursor)
Gui_get_mouse_cursor_name = _gui.Gui_get_mouse_cursor_name

def Gui_set_mouse_cursor(cursor):
    return _gui.Gui_set_mouse_cursor(cursor)
Gui_set_mouse_cursor = _gui.Gui_set_mouse_cursor

def Gui_get_device_id_name(id):
    return _gui.Gui_get_device_id_name(id)
Gui_get_device_id_name = _gui.Gui_get_device_id_name

def Gui_get_device_type():
    return _gui.Gui_get_device_type()
Gui_get_device_type = _gui.Gui_get_device_type

def Gui_get_x_tilt():
    return _gui.Gui_get_x_tilt()
Gui_get_x_tilt = _gui.Gui_get_x_tilt

def Gui_get_y_tilt():
    return _gui.Gui_get_y_tilt()
Gui_get_y_tilt = _gui.Gui_get_y_tilt

def Gui_get_pressure():
    return _gui.Gui_get_pressure()
Gui_get_pressure = _gui.Gui_get_pressure

def Gui_get_channel_depth_name(color_depth):
    return _gui.Gui_get_channel_depth_name(color_depth)
Gui_get_channel_depth_name = _gui.Gui_get_channel_depth_name

def Gui_get_channel_count_by_color_depth(color_depth):
    return _gui.Gui_get_channel_count_by_color_depth(color_depth)
Gui_get_channel_count_by_color_depth = _gui.Gui_get_channel_count_by_color_depth

def Gui_class_info():
    return _gui.Gui_class_info()
Gui_class_info = _gui.Gui_class_info

def Gui____class_destructor__(instance, is_array):
    return _gui.Gui____class_destructor__(instance, is_array)
Gui____class_destructor__ = _gui.Gui____class_destructor__

class GuiResource(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiResource, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiResource, name)
    __repr__ = _swig_repr
    if _newclass:
        up_triangle_label = staticmethod(_gui.GuiResource_up_triangle_label)
    else:
        up_triangle_label = _gui.GuiResource_up_triangle_label
    if _newclass:
        left_triangle_label = staticmethod(_gui.GuiResource_left_triangle_label)
    else:
        left_triangle_label = _gui.GuiResource_left_triangle_label
    if _newclass:
        down_triangle_label = staticmethod(_gui.GuiResource_down_triangle_label)
    else:
        down_triangle_label = _gui.GuiResource_down_triangle_label
    if _newclass:
        right_triangle_label = staticmethod(_gui.GuiResource_right_triangle_label)
    else:
        right_triangle_label = _gui.GuiResource_right_triangle_label
    if _newclass:
        up_triangle_label_selected = staticmethod(_gui.GuiResource_up_triangle_label_selected)
    else:
        up_triangle_label_selected = _gui.GuiResource_up_triangle_label_selected
    if _newclass:
        left_triangle_label_selected = staticmethod(_gui.GuiResource_left_triangle_label_selected)
    else:
        left_triangle_label_selected = _gui.GuiResource_left_triangle_label_selected
    if _newclass:
        down_triangle_label_selected = staticmethod(_gui.GuiResource_down_triangle_label_selected)
    else:
        down_triangle_label_selected = _gui.GuiResource_down_triangle_label_selected
    if _newclass:
        right_triangle_label_selected = staticmethod(_gui.GuiResource_right_triangle_label_selected)
    else:
        right_triangle_label_selected = _gui.GuiResource_right_triangle_label_selected
    if _newclass:
        up_triangle_text = staticmethod(_gui.GuiResource_up_triangle_text)
    else:
        up_triangle_text = _gui.GuiResource_up_triangle_text
    if _newclass:
        left_triangle_text = staticmethod(_gui.GuiResource_left_triangle_text)
    else:
        left_triangle_text = _gui.GuiResource_left_triangle_text
    if _newclass:
        down_triangle_text = staticmethod(_gui.GuiResource_down_triangle_text)
    else:
        down_triangle_text = _gui.GuiResource_down_triangle_text
    if _newclass:
        right_triangle_text = staticmethod(_gui.GuiResource_right_triangle_text)
    else:
        right_triangle_text = _gui.GuiResource_right_triangle_text
    if _newclass:
        small_up_triangle = staticmethod(_gui.GuiResource_small_up_triangle)
    else:
        small_up_triangle = _gui.GuiResource_small_up_triangle
    if _newclass:
        small_left_triangle = staticmethod(_gui.GuiResource_small_left_triangle)
    else:
        small_left_triangle = _gui.GuiResource_small_left_triangle
    if _newclass:
        small_down_triangle = staticmethod(_gui.GuiResource_small_down_triangle)
    else:
        small_down_triangle = _gui.GuiResource_small_down_triangle
    if _newclass:
        small_right_triangle = staticmethod(_gui.GuiResource_small_right_triangle)
    else:
        small_right_triangle = _gui.GuiResource_small_right_triangle
    if _newclass:
        checker = staticmethod(_gui.GuiResource_checker)
    else:
        checker = _gui.GuiResource_checker
    if _newclass:
        checker_selected = staticmethod(_gui.GuiResource_checker_selected)
    else:
        checker_selected = _gui.GuiResource_checker_selected
    if _newclass:
        radio_menu = staticmethod(_gui.GuiResource_radio_menu)
    else:
        radio_menu = _gui.GuiResource_radio_menu
    if _newclass:
        radio_menu_selected = staticmethod(_gui.GuiResource_radio_menu_selected)
    else:
        radio_menu_selected = _gui.GuiResource_radio_menu_selected
    if _newclass:
        radio_menu_empty = staticmethod(_gui.GuiResource_radio_menu_empty)
    else:
        radio_menu_empty = _gui.GuiResource_radio_menu_empty
    if _newclass:
        radio_menu_empty_selected = staticmethod(_gui.GuiResource_radio_menu_empty_selected)
    else:
        radio_menu_empty_selected = _gui.GuiResource_radio_menu_empty_selected
    if _newclass:
        horizontal_minislider = staticmethod(_gui.GuiResource_horizontal_minislider)
    else:
        horizontal_minislider = _gui.GuiResource_horizontal_minislider
    if _newclass:
        horizontal_minislider_selected = staticmethod(_gui.GuiResource_horizontal_minislider_selected)
    else:
        horizontal_minislider_selected = _gui.GuiResource_horizontal_minislider_selected
    if _newclass:
        viewport_close = staticmethod(_gui.GuiResource_viewport_close)
    else:
        viewport_close = _gui.GuiResource_viewport_close
    if _newclass:
        viewport_split_horizontal = staticmethod(_gui.GuiResource_viewport_split_horizontal)
    else:
        viewport_split_horizontal = _gui.GuiResource_viewport_split_horizontal
    if _newclass:
        viewport_split_vertical = staticmethod(_gui.GuiResource_viewport_split_vertical)
    else:
        viewport_split_vertical = _gui.GuiResource_viewport_split_vertical
    if _newclass:
        viewport_split_quad = staticmethod(_gui.GuiResource_viewport_split_quad)
    else:
        viewport_split_quad = _gui.GuiResource_viewport_split_quad
    if _newclass:
        viewport_maximize = staticmethod(_gui.GuiResource_viewport_maximize)
    else:
        viewport_maximize = _gui.GuiResource_viewport_maximize
    if _newclass:
        viewport_restore = staticmethod(_gui.GuiResource_viewport_restore)
    else:
        viewport_restore = _gui.GuiResource_viewport_restore
    if _newclass:
        left_navigator_arrow = staticmethod(_gui.GuiResource_left_navigator_arrow)
    else:
        left_navigator_arrow = _gui.GuiResource_left_navigator_arrow
    if _newclass:
        right_navigator_arrow = staticmethod(_gui.GuiResource_right_navigator_arrow)
    else:
        right_navigator_arrow = _gui.GuiResource_right_navigator_arrow
    if _newclass:
        navigator_lock = staticmethod(_gui.GuiResource_navigator_lock)
    else:
        navigator_lock = _gui.GuiResource_navigator_lock
    if _newclass:
        navigator_refresh = staticmethod(_gui.GuiResource_navigator_refresh)
    else:
        navigator_refresh = _gui.GuiResource_navigator_refresh
    if _newclass:
        clear = staticmethod(_gui.GuiResource_clear)
    else:
        clear = _gui.GuiResource_clear
    if _newclass:
        trash = staticmethod(_gui.GuiResource_trash)
    else:
        trash = _gui.GuiResource_trash
    if _newclass:
        magnifier = staticmethod(_gui.GuiResource_magnifier)
    else:
        magnifier = _gui.GuiResource_magnifier
    if _newclass:
        open = staticmethod(_gui.GuiResource_open)
    else:
        open = _gui.GuiResource_open
    if _newclass:
        save = staticmethod(_gui.GuiResource_save)
    else:
        save = _gui.GuiResource_save
    if _newclass:
        mb_info = staticmethod(_gui.GuiResource_mb_info)
    else:
        mb_info = _gui.GuiResource_mb_info
    if _newclass:
        up_triangle_label_iconrc = staticmethod(_gui.GuiResource_up_triangle_label_iconrc)
    else:
        up_triangle_label_iconrc = _gui.GuiResource_up_triangle_label_iconrc
    if _newclass:
        left_triangle_label_iconrc = staticmethod(_gui.GuiResource_left_triangle_label_iconrc)
    else:
        left_triangle_label_iconrc = _gui.GuiResource_left_triangle_label_iconrc
    if _newclass:
        down_triangle_label_iconrc = staticmethod(_gui.GuiResource_down_triangle_label_iconrc)
    else:
        down_triangle_label_iconrc = _gui.GuiResource_down_triangle_label_iconrc
    if _newclass:
        right_triangle_label_iconrc = staticmethod(_gui.GuiResource_right_triangle_label_iconrc)
    else:
        right_triangle_label_iconrc = _gui.GuiResource_right_triangle_label_iconrc
    if _newclass:
        up_triangle_label_selected_iconrc = staticmethod(_gui.GuiResource_up_triangle_label_selected_iconrc)
    else:
        up_triangle_label_selected_iconrc = _gui.GuiResource_up_triangle_label_selected_iconrc
    if _newclass:
        left_triangle_label_selected_iconrc = staticmethod(_gui.GuiResource_left_triangle_label_selected_iconrc)
    else:
        left_triangle_label_selected_iconrc = _gui.GuiResource_left_triangle_label_selected_iconrc
    if _newclass:
        down_triangle_label_selected_iconrc = staticmethod(_gui.GuiResource_down_triangle_label_selected_iconrc)
    else:
        down_triangle_label_selected_iconrc = _gui.GuiResource_down_triangle_label_selected_iconrc
    if _newclass:
        right_triangle_label_selected_iconrc = staticmethod(_gui.GuiResource_right_triangle_label_selected_iconrc)
    else:
        right_triangle_label_selected_iconrc = _gui.GuiResource_right_triangle_label_selected_iconrc
    if _newclass:
        up_triangle_text_iconrc = staticmethod(_gui.GuiResource_up_triangle_text_iconrc)
    else:
        up_triangle_text_iconrc = _gui.GuiResource_up_triangle_text_iconrc
    if _newclass:
        left_triangle_text_iconrc = staticmethod(_gui.GuiResource_left_triangle_text_iconrc)
    else:
        left_triangle_text_iconrc = _gui.GuiResource_left_triangle_text_iconrc
    if _newclass:
        down_triangle_text_iconrc = staticmethod(_gui.GuiResource_down_triangle_text_iconrc)
    else:
        down_triangle_text_iconrc = _gui.GuiResource_down_triangle_text_iconrc
    if _newclass:
        right_triangle_text_iconrc = staticmethod(_gui.GuiResource_right_triangle_text_iconrc)
    else:
        right_triangle_text_iconrc = _gui.GuiResource_right_triangle_text_iconrc
    if _newclass:
        small_up_triangle_iconrc = staticmethod(_gui.GuiResource_small_up_triangle_iconrc)
    else:
        small_up_triangle_iconrc = _gui.GuiResource_small_up_triangle_iconrc
    if _newclass:
        small_left_triangle_iconrc = staticmethod(_gui.GuiResource_small_left_triangle_iconrc)
    else:
        small_left_triangle_iconrc = _gui.GuiResource_small_left_triangle_iconrc
    if _newclass:
        small_down_triangle_iconrc = staticmethod(_gui.GuiResource_small_down_triangle_iconrc)
    else:
        small_down_triangle_iconrc = _gui.GuiResource_small_down_triangle_iconrc
    if _newclass:
        small_right_triangle_iconrc = staticmethod(_gui.GuiResource_small_right_triangle_iconrc)
    else:
        small_right_triangle_iconrc = _gui.GuiResource_small_right_triangle_iconrc
    if _newclass:
        checker_iconrc = staticmethod(_gui.GuiResource_checker_iconrc)
    else:
        checker_iconrc = _gui.GuiResource_checker_iconrc
    if _newclass:
        checker_selected_iconrc = staticmethod(_gui.GuiResource_checker_selected_iconrc)
    else:
        checker_selected_iconrc = _gui.GuiResource_checker_selected_iconrc
    if _newclass:
        radio_menu_iconrc = staticmethod(_gui.GuiResource_radio_menu_iconrc)
    else:
        radio_menu_iconrc = _gui.GuiResource_radio_menu_iconrc
    if _newclass:
        radio_menu_selected_iconrc = staticmethod(_gui.GuiResource_radio_menu_selected_iconrc)
    else:
        radio_menu_selected_iconrc = _gui.GuiResource_radio_menu_selected_iconrc
    if _newclass:
        radio_menu_empty_iconrc = staticmethod(_gui.GuiResource_radio_menu_empty_iconrc)
    else:
        radio_menu_empty_iconrc = _gui.GuiResource_radio_menu_empty_iconrc
    if _newclass:
        radio_menu_empty_selected_iconrc = staticmethod(_gui.GuiResource_radio_menu_empty_selected_iconrc)
    else:
        radio_menu_empty_selected_iconrc = _gui.GuiResource_radio_menu_empty_selected_iconrc
    if _newclass:
        horizontal_minislider_iconrc = staticmethod(_gui.GuiResource_horizontal_minislider_iconrc)
    else:
        horizontal_minislider_iconrc = _gui.GuiResource_horizontal_minislider_iconrc
    if _newclass:
        horizontal_minislider_selected_iconrc = staticmethod(_gui.GuiResource_horizontal_minislider_selected_iconrc)
    else:
        horizontal_minislider_selected_iconrc = _gui.GuiResource_horizontal_minislider_selected_iconrc
    if _newclass:
        viewport_close_iconrc = staticmethod(_gui.GuiResource_viewport_close_iconrc)
    else:
        viewport_close_iconrc = _gui.GuiResource_viewport_close_iconrc
    if _newclass:
        viewport_split_horizontal_iconrc = staticmethod(_gui.GuiResource_viewport_split_horizontal_iconrc)
    else:
        viewport_split_horizontal_iconrc = _gui.GuiResource_viewport_split_horizontal_iconrc
    if _newclass:
        viewport_split_vertical_iconrc = staticmethod(_gui.GuiResource_viewport_split_vertical_iconrc)
    else:
        viewport_split_vertical_iconrc = _gui.GuiResource_viewport_split_vertical_iconrc
    if _newclass:
        viewport_split_quad_iconrc = staticmethod(_gui.GuiResource_viewport_split_quad_iconrc)
    else:
        viewport_split_quad_iconrc = _gui.GuiResource_viewport_split_quad_iconrc
    if _newclass:
        viewport_maximize_iconrc = staticmethod(_gui.GuiResource_viewport_maximize_iconrc)
    else:
        viewport_maximize_iconrc = _gui.GuiResource_viewport_maximize_iconrc
    if _newclass:
        viewport_restore_iconrc = staticmethod(_gui.GuiResource_viewport_restore_iconrc)
    else:
        viewport_restore_iconrc = _gui.GuiResource_viewport_restore_iconrc
    if _newclass:
        left_navigator_arrow_iconrc = staticmethod(_gui.GuiResource_left_navigator_arrow_iconrc)
    else:
        left_navigator_arrow_iconrc = _gui.GuiResource_left_navigator_arrow_iconrc
    if _newclass:
        right_navigator_arrow_iconrc = staticmethod(_gui.GuiResource_right_navigator_arrow_iconrc)
    else:
        right_navigator_arrow_iconrc = _gui.GuiResource_right_navigator_arrow_iconrc
    if _newclass:
        navigator_lock_iconrc = staticmethod(_gui.GuiResource_navigator_lock_iconrc)
    else:
        navigator_lock_iconrc = _gui.GuiResource_navigator_lock_iconrc
    if _newclass:
        navigator_refresh_iconrc = staticmethod(_gui.GuiResource_navigator_refresh_iconrc)
    else:
        navigator_refresh_iconrc = _gui.GuiResource_navigator_refresh_iconrc
    if _newclass:
        clear_iconrc = staticmethod(_gui.GuiResource_clear_iconrc)
    else:
        clear_iconrc = _gui.GuiResource_clear_iconrc
    if _newclass:
        trash_iconrc = staticmethod(_gui.GuiResource_trash_iconrc)
    else:
        trash_iconrc = _gui.GuiResource_trash_iconrc
    if _newclass:
        magnifier_iconrc = staticmethod(_gui.GuiResource_magnifier_iconrc)
    else:
        magnifier_iconrc = _gui.GuiResource_magnifier_iconrc
    if _newclass:
        open_iconrc = staticmethod(_gui.GuiResource_open_iconrc)
    else:
        open_iconrc = _gui.GuiResource_open_iconrc
    if _newclass:
        save_iconrc = staticmethod(_gui.GuiResource_save_iconrc)
    else:
        save_iconrc = _gui.GuiResource_save_iconrc
    if _newclass:
        mb_info_iconrc = staticmethod(_gui.GuiResource_mb_info_iconrc)
    else:
        mb_info_iconrc = _gui.GuiResource_mb_info_iconrc
    if _newclass:
        eye_iconrc = staticmethod(_gui.GuiResource_eye_iconrc)
    else:
        eye_iconrc = _gui.GuiResource_eye_iconrc
    if _newclass:
        eye_selected_iconrc = staticmethod(_gui.GuiResource_eye_selected_iconrc)
    else:
        eye_selected_iconrc = _gui.GuiResource_eye_selected_iconrc
    if _newclass:
        class_icon_iconrc = staticmethod(_gui.GuiResource_class_icon_iconrc)
    else:
        class_icon_iconrc = _gui.GuiResource_class_icon_iconrc
    if _newclass:
        unknown_iconrc = staticmethod(_gui.GuiResource_unknown_iconrc)
    else:
        unknown_iconrc = _gui.GuiResource_unknown_iconrc
    if _newclass:
        flag_source_iconrc = staticmethod(_gui.GuiResource_flag_source_iconrc)
    else:
        flag_source_iconrc = _gui.GuiResource_flag_source_iconrc
    if _newclass:
        attribute_iconrc = staticmethod(_gui.GuiResource_attribute_iconrc)
    else:
        attribute_iconrc = _gui.GuiResource_attribute_iconrc
    if _newclass:
        context_iconrc = staticmethod(_gui.GuiResource_context_iconrc)
    else:
        context_iconrc = _gui.GuiResource_context_iconrc
    if _newclass:
        flag_localized_iconrc = staticmethod(_gui.GuiResource_flag_localized_iconrc)
    else:
        flag_localized_iconrc = _gui.GuiResource_flag_localized_iconrc
    if _newclass:
        flag_instance_iconrc = staticmethod(_gui.GuiResource_flag_instance_iconrc)
    else:
        flag_instance_iconrc = _gui.GuiResource_flag_instance_iconrc
    if _newclass:
        flag_reference_iconrc = staticmethod(_gui.GuiResource_flag_reference_iconrc)
    else:
        flag_reference_iconrc = _gui.GuiResource_flag_reference_iconrc
    if _newclass:
        class_info = staticmethod(_gui.GuiResource_class_info)
    else:
        class_info = _gui.GuiResource_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiResource____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiResource____class_destructor__

    def get_class_info(self):
        return _gui.GuiResource_get_class_info(self)

    def __init__(self):
        this = _gui.new_GuiResource()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiResource
    __del__ = lambda self: None
GuiResource_swigregister = _gui.GuiResource_swigregister
GuiResource_swigregister(GuiResource)

def GuiResource_up_triangle_label():
    return _gui.GuiResource_up_triangle_label()
GuiResource_up_triangle_label = _gui.GuiResource_up_triangle_label

def GuiResource_left_triangle_label():
    return _gui.GuiResource_left_triangle_label()
GuiResource_left_triangle_label = _gui.GuiResource_left_triangle_label

def GuiResource_down_triangle_label():
    return _gui.GuiResource_down_triangle_label()
GuiResource_down_triangle_label = _gui.GuiResource_down_triangle_label

def GuiResource_right_triangle_label():
    return _gui.GuiResource_right_triangle_label()
GuiResource_right_triangle_label = _gui.GuiResource_right_triangle_label

def GuiResource_up_triangle_label_selected():
    return _gui.GuiResource_up_triangle_label_selected()
GuiResource_up_triangle_label_selected = _gui.GuiResource_up_triangle_label_selected

def GuiResource_left_triangle_label_selected():
    return _gui.GuiResource_left_triangle_label_selected()
GuiResource_left_triangle_label_selected = _gui.GuiResource_left_triangle_label_selected

def GuiResource_down_triangle_label_selected():
    return _gui.GuiResource_down_triangle_label_selected()
GuiResource_down_triangle_label_selected = _gui.GuiResource_down_triangle_label_selected

def GuiResource_right_triangle_label_selected():
    return _gui.GuiResource_right_triangle_label_selected()
GuiResource_right_triangle_label_selected = _gui.GuiResource_right_triangle_label_selected

def GuiResource_up_triangle_text():
    return _gui.GuiResource_up_triangle_text()
GuiResource_up_triangle_text = _gui.GuiResource_up_triangle_text

def GuiResource_left_triangle_text():
    return _gui.GuiResource_left_triangle_text()
GuiResource_left_triangle_text = _gui.GuiResource_left_triangle_text

def GuiResource_down_triangle_text():
    return _gui.GuiResource_down_triangle_text()
GuiResource_down_triangle_text = _gui.GuiResource_down_triangle_text

def GuiResource_right_triangle_text():
    return _gui.GuiResource_right_triangle_text()
GuiResource_right_triangle_text = _gui.GuiResource_right_triangle_text

def GuiResource_small_up_triangle():
    return _gui.GuiResource_small_up_triangle()
GuiResource_small_up_triangle = _gui.GuiResource_small_up_triangle

def GuiResource_small_left_triangle():
    return _gui.GuiResource_small_left_triangle()
GuiResource_small_left_triangle = _gui.GuiResource_small_left_triangle

def GuiResource_small_down_triangle():
    return _gui.GuiResource_small_down_triangle()
GuiResource_small_down_triangle = _gui.GuiResource_small_down_triangle

def GuiResource_small_right_triangle():
    return _gui.GuiResource_small_right_triangle()
GuiResource_small_right_triangle = _gui.GuiResource_small_right_triangle

def GuiResource_checker():
    return _gui.GuiResource_checker()
GuiResource_checker = _gui.GuiResource_checker

def GuiResource_checker_selected():
    return _gui.GuiResource_checker_selected()
GuiResource_checker_selected = _gui.GuiResource_checker_selected

def GuiResource_radio_menu():
    return _gui.GuiResource_radio_menu()
GuiResource_radio_menu = _gui.GuiResource_radio_menu

def GuiResource_radio_menu_selected():
    return _gui.GuiResource_radio_menu_selected()
GuiResource_radio_menu_selected = _gui.GuiResource_radio_menu_selected

def GuiResource_radio_menu_empty():
    return _gui.GuiResource_radio_menu_empty()
GuiResource_radio_menu_empty = _gui.GuiResource_radio_menu_empty

def GuiResource_radio_menu_empty_selected():
    return _gui.GuiResource_radio_menu_empty_selected()
GuiResource_radio_menu_empty_selected = _gui.GuiResource_radio_menu_empty_selected

def GuiResource_horizontal_minislider():
    return _gui.GuiResource_horizontal_minislider()
GuiResource_horizontal_minislider = _gui.GuiResource_horizontal_minislider

def GuiResource_horizontal_minislider_selected():
    return _gui.GuiResource_horizontal_minislider_selected()
GuiResource_horizontal_minislider_selected = _gui.GuiResource_horizontal_minislider_selected

def GuiResource_viewport_close():
    return _gui.GuiResource_viewport_close()
GuiResource_viewport_close = _gui.GuiResource_viewport_close

def GuiResource_viewport_split_horizontal():
    return _gui.GuiResource_viewport_split_horizontal()
GuiResource_viewport_split_horizontal = _gui.GuiResource_viewport_split_horizontal

def GuiResource_viewport_split_vertical():
    return _gui.GuiResource_viewport_split_vertical()
GuiResource_viewport_split_vertical = _gui.GuiResource_viewport_split_vertical

def GuiResource_viewport_split_quad():
    return _gui.GuiResource_viewport_split_quad()
GuiResource_viewport_split_quad = _gui.GuiResource_viewport_split_quad

def GuiResource_viewport_maximize():
    return _gui.GuiResource_viewport_maximize()
GuiResource_viewport_maximize = _gui.GuiResource_viewport_maximize

def GuiResource_viewport_restore():
    return _gui.GuiResource_viewport_restore()
GuiResource_viewport_restore = _gui.GuiResource_viewport_restore

def GuiResource_left_navigator_arrow():
    return _gui.GuiResource_left_navigator_arrow()
GuiResource_left_navigator_arrow = _gui.GuiResource_left_navigator_arrow

def GuiResource_right_navigator_arrow():
    return _gui.GuiResource_right_navigator_arrow()
GuiResource_right_navigator_arrow = _gui.GuiResource_right_navigator_arrow

def GuiResource_navigator_lock():
    return _gui.GuiResource_navigator_lock()
GuiResource_navigator_lock = _gui.GuiResource_navigator_lock

def GuiResource_navigator_refresh():
    return _gui.GuiResource_navigator_refresh()
GuiResource_navigator_refresh = _gui.GuiResource_navigator_refresh

def GuiResource_clear():
    return _gui.GuiResource_clear()
GuiResource_clear = _gui.GuiResource_clear

def GuiResource_trash():
    return _gui.GuiResource_trash()
GuiResource_trash = _gui.GuiResource_trash

def GuiResource_magnifier():
    return _gui.GuiResource_magnifier()
GuiResource_magnifier = _gui.GuiResource_magnifier

def GuiResource_open():
    return _gui.GuiResource_open()
GuiResource_open = _gui.GuiResource_open

def GuiResource_save():
    return _gui.GuiResource_save()
GuiResource_save = _gui.GuiResource_save

def GuiResource_mb_info():
    return _gui.GuiResource_mb_info()
GuiResource_mb_info = _gui.GuiResource_mb_info

def GuiResource_up_triangle_label_iconrc():
    return _gui.GuiResource_up_triangle_label_iconrc()
GuiResource_up_triangle_label_iconrc = _gui.GuiResource_up_triangle_label_iconrc

def GuiResource_left_triangle_label_iconrc():
    return _gui.GuiResource_left_triangle_label_iconrc()
GuiResource_left_triangle_label_iconrc = _gui.GuiResource_left_triangle_label_iconrc

def GuiResource_down_triangle_label_iconrc():
    return _gui.GuiResource_down_triangle_label_iconrc()
GuiResource_down_triangle_label_iconrc = _gui.GuiResource_down_triangle_label_iconrc

def GuiResource_right_triangle_label_iconrc():
    return _gui.GuiResource_right_triangle_label_iconrc()
GuiResource_right_triangle_label_iconrc = _gui.GuiResource_right_triangle_label_iconrc

def GuiResource_up_triangle_label_selected_iconrc():
    return _gui.GuiResource_up_triangle_label_selected_iconrc()
GuiResource_up_triangle_label_selected_iconrc = _gui.GuiResource_up_triangle_label_selected_iconrc

def GuiResource_left_triangle_label_selected_iconrc():
    return _gui.GuiResource_left_triangle_label_selected_iconrc()
GuiResource_left_triangle_label_selected_iconrc = _gui.GuiResource_left_triangle_label_selected_iconrc

def GuiResource_down_triangle_label_selected_iconrc():
    return _gui.GuiResource_down_triangle_label_selected_iconrc()
GuiResource_down_triangle_label_selected_iconrc = _gui.GuiResource_down_triangle_label_selected_iconrc

def GuiResource_right_triangle_label_selected_iconrc():
    return _gui.GuiResource_right_triangle_label_selected_iconrc()
GuiResource_right_triangle_label_selected_iconrc = _gui.GuiResource_right_triangle_label_selected_iconrc

def GuiResource_up_triangle_text_iconrc():
    return _gui.GuiResource_up_triangle_text_iconrc()
GuiResource_up_triangle_text_iconrc = _gui.GuiResource_up_triangle_text_iconrc

def GuiResource_left_triangle_text_iconrc():
    return _gui.GuiResource_left_triangle_text_iconrc()
GuiResource_left_triangle_text_iconrc = _gui.GuiResource_left_triangle_text_iconrc

def GuiResource_down_triangle_text_iconrc():
    return _gui.GuiResource_down_triangle_text_iconrc()
GuiResource_down_triangle_text_iconrc = _gui.GuiResource_down_triangle_text_iconrc

def GuiResource_right_triangle_text_iconrc():
    return _gui.GuiResource_right_triangle_text_iconrc()
GuiResource_right_triangle_text_iconrc = _gui.GuiResource_right_triangle_text_iconrc

def GuiResource_small_up_triangle_iconrc():
    return _gui.GuiResource_small_up_triangle_iconrc()
GuiResource_small_up_triangle_iconrc = _gui.GuiResource_small_up_triangle_iconrc

def GuiResource_small_left_triangle_iconrc():
    return _gui.GuiResource_small_left_triangle_iconrc()
GuiResource_small_left_triangle_iconrc = _gui.GuiResource_small_left_triangle_iconrc

def GuiResource_small_down_triangle_iconrc():
    return _gui.GuiResource_small_down_triangle_iconrc()
GuiResource_small_down_triangle_iconrc = _gui.GuiResource_small_down_triangle_iconrc

def GuiResource_small_right_triangle_iconrc():
    return _gui.GuiResource_small_right_triangle_iconrc()
GuiResource_small_right_triangle_iconrc = _gui.GuiResource_small_right_triangle_iconrc

def GuiResource_checker_iconrc():
    return _gui.GuiResource_checker_iconrc()
GuiResource_checker_iconrc = _gui.GuiResource_checker_iconrc

def GuiResource_checker_selected_iconrc():
    return _gui.GuiResource_checker_selected_iconrc()
GuiResource_checker_selected_iconrc = _gui.GuiResource_checker_selected_iconrc

def GuiResource_radio_menu_iconrc():
    return _gui.GuiResource_radio_menu_iconrc()
GuiResource_radio_menu_iconrc = _gui.GuiResource_radio_menu_iconrc

def GuiResource_radio_menu_selected_iconrc():
    return _gui.GuiResource_radio_menu_selected_iconrc()
GuiResource_radio_menu_selected_iconrc = _gui.GuiResource_radio_menu_selected_iconrc

def GuiResource_radio_menu_empty_iconrc():
    return _gui.GuiResource_radio_menu_empty_iconrc()
GuiResource_radio_menu_empty_iconrc = _gui.GuiResource_radio_menu_empty_iconrc

def GuiResource_radio_menu_empty_selected_iconrc():
    return _gui.GuiResource_radio_menu_empty_selected_iconrc()
GuiResource_radio_menu_empty_selected_iconrc = _gui.GuiResource_radio_menu_empty_selected_iconrc

def GuiResource_horizontal_minislider_iconrc():
    return _gui.GuiResource_horizontal_minislider_iconrc()
GuiResource_horizontal_minislider_iconrc = _gui.GuiResource_horizontal_minislider_iconrc

def GuiResource_horizontal_minislider_selected_iconrc():
    return _gui.GuiResource_horizontal_minislider_selected_iconrc()
GuiResource_horizontal_minislider_selected_iconrc = _gui.GuiResource_horizontal_minislider_selected_iconrc

def GuiResource_viewport_close_iconrc():
    return _gui.GuiResource_viewport_close_iconrc()
GuiResource_viewport_close_iconrc = _gui.GuiResource_viewport_close_iconrc

def GuiResource_viewport_split_horizontal_iconrc():
    return _gui.GuiResource_viewport_split_horizontal_iconrc()
GuiResource_viewport_split_horizontal_iconrc = _gui.GuiResource_viewport_split_horizontal_iconrc

def GuiResource_viewport_split_vertical_iconrc():
    return _gui.GuiResource_viewport_split_vertical_iconrc()
GuiResource_viewport_split_vertical_iconrc = _gui.GuiResource_viewport_split_vertical_iconrc

def GuiResource_viewport_split_quad_iconrc():
    return _gui.GuiResource_viewport_split_quad_iconrc()
GuiResource_viewport_split_quad_iconrc = _gui.GuiResource_viewport_split_quad_iconrc

def GuiResource_viewport_maximize_iconrc():
    return _gui.GuiResource_viewport_maximize_iconrc()
GuiResource_viewport_maximize_iconrc = _gui.GuiResource_viewport_maximize_iconrc

def GuiResource_viewport_restore_iconrc():
    return _gui.GuiResource_viewport_restore_iconrc()
GuiResource_viewport_restore_iconrc = _gui.GuiResource_viewport_restore_iconrc

def GuiResource_left_navigator_arrow_iconrc():
    return _gui.GuiResource_left_navigator_arrow_iconrc()
GuiResource_left_navigator_arrow_iconrc = _gui.GuiResource_left_navigator_arrow_iconrc

def GuiResource_right_navigator_arrow_iconrc():
    return _gui.GuiResource_right_navigator_arrow_iconrc()
GuiResource_right_navigator_arrow_iconrc = _gui.GuiResource_right_navigator_arrow_iconrc

def GuiResource_navigator_lock_iconrc():
    return _gui.GuiResource_navigator_lock_iconrc()
GuiResource_navigator_lock_iconrc = _gui.GuiResource_navigator_lock_iconrc

def GuiResource_navigator_refresh_iconrc():
    return _gui.GuiResource_navigator_refresh_iconrc()
GuiResource_navigator_refresh_iconrc = _gui.GuiResource_navigator_refresh_iconrc

def GuiResource_clear_iconrc():
    return _gui.GuiResource_clear_iconrc()
GuiResource_clear_iconrc = _gui.GuiResource_clear_iconrc

def GuiResource_trash_iconrc():
    return _gui.GuiResource_trash_iconrc()
GuiResource_trash_iconrc = _gui.GuiResource_trash_iconrc

def GuiResource_magnifier_iconrc():
    return _gui.GuiResource_magnifier_iconrc()
GuiResource_magnifier_iconrc = _gui.GuiResource_magnifier_iconrc

def GuiResource_open_iconrc():
    return _gui.GuiResource_open_iconrc()
GuiResource_open_iconrc = _gui.GuiResource_open_iconrc

def GuiResource_save_iconrc():
    return _gui.GuiResource_save_iconrc()
GuiResource_save_iconrc = _gui.GuiResource_save_iconrc

def GuiResource_mb_info_iconrc():
    return _gui.GuiResource_mb_info_iconrc()
GuiResource_mb_info_iconrc = _gui.GuiResource_mb_info_iconrc

def GuiResource_eye_iconrc():
    return _gui.GuiResource_eye_iconrc()
GuiResource_eye_iconrc = _gui.GuiResource_eye_iconrc

def GuiResource_eye_selected_iconrc():
    return _gui.GuiResource_eye_selected_iconrc()
GuiResource_eye_selected_iconrc = _gui.GuiResource_eye_selected_iconrc

def GuiResource_class_icon_iconrc():
    return _gui.GuiResource_class_icon_iconrc()
GuiResource_class_icon_iconrc = _gui.GuiResource_class_icon_iconrc

def GuiResource_unknown_iconrc():
    return _gui.GuiResource_unknown_iconrc()
GuiResource_unknown_iconrc = _gui.GuiResource_unknown_iconrc

def GuiResource_flag_source_iconrc():
    return _gui.GuiResource_flag_source_iconrc()
GuiResource_flag_source_iconrc = _gui.GuiResource_flag_source_iconrc

def GuiResource_attribute_iconrc():
    return _gui.GuiResource_attribute_iconrc()
GuiResource_attribute_iconrc = _gui.GuiResource_attribute_iconrc

def GuiResource_context_iconrc():
    return _gui.GuiResource_context_iconrc()
GuiResource_context_iconrc = _gui.GuiResource_context_iconrc

def GuiResource_flag_localized_iconrc():
    return _gui.GuiResource_flag_localized_iconrc()
GuiResource_flag_localized_iconrc = _gui.GuiResource_flag_localized_iconrc

def GuiResource_flag_instance_iconrc():
    return _gui.GuiResource_flag_instance_iconrc()
GuiResource_flag_instance_iconrc = _gui.GuiResource_flag_instance_iconrc

def GuiResource_flag_reference_iconrc():
    return _gui.GuiResource_flag_reference_iconrc()
GuiResource_flag_reference_iconrc = _gui.GuiResource_flag_reference_iconrc

def GuiResource_class_info():
    return _gui.GuiResource_class_info()
GuiResource_class_info = _gui.GuiResource_class_info

def GuiResource____class_destructor__(instance, is_array):
    return _gui.GuiResource____class_destructor__(instance, is_array)
GuiResource____class_destructor__ = _gui.GuiResource____class_destructor__

class GuiImage(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiImage, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiImage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiImage
    __del__ = lambda self: None

    def get_width(self):
        return _gui.GuiImage_get_width(self)

    def get_height(self):
        return _gui.GuiImage_get_height(self)

    def get_depth(self):
        return _gui.GuiImage_get_depth(self)

    def get_data(self, *args):
        return _gui.GuiImage_get_data(self, *args)

    def update(self, *args):
        return _gui.GuiImage_update(self, *args)

    def set_data(self, *args):
        return _gui.GuiImage_set_data(self, *args)

    def set_image(self, image, color_space):
        return _gui.GuiImage_set_image(self, image, color_space)

    def draw_hidden(self, x, y):
        return _gui.GuiImage_draw_hidden(self, x, y)

    def draw_highlight(self, x, y):
        return _gui.GuiImage_draw_highlight(self, x, y)

    def draw_disabled(self, *args):
        return _gui.GuiImage_draw_disabled(self, *args)

    def fast_draw(self, widget, x, y, cx, cy, width, height):
        return _gui.GuiImage_fast_draw(self, widget, x, y, cx, cy, width, height)

    def draw(self, *args):
        return _gui.GuiImage_draw(self, *args)

    def fill(self, r, g, b):
        return _gui.GuiImage_fill(self, r, g, b)

    def modulate(self, r, g, b):
        return _gui.GuiImage_modulate(self, r, g, b)
    if _newclass:
        class_info = staticmethod(_gui.GuiImage_class_info)
    else:
        class_info = _gui.GuiImage_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiImage____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiImage____class_destructor__

    def get_class_info(self):
        return _gui.GuiImage_get_class_info(self)
GuiImage_swigregister = _gui.GuiImage_swigregister
GuiImage_swigregister(GuiImage)

def GuiImage_class_info():
    return _gui.GuiImage_class_info()
GuiImage_class_info = _gui.GuiImage_class_info

def GuiImage____class_destructor__(instance, is_array):
    return _gui.GuiImage____class_destructor__(instance, is_array)
GuiImage____class_destructor__ = _gui.GuiImage____class_destructor__

class GuiItemActions(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiItemActions, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiItemActions, name)
    __repr__ = _swig_repr
    if _newclass:
        group_items = staticmethod(_gui.GuiItemActions_group_items)
    else:
        group_items = _gui.GuiItemActions_group_items
    if _newclass:
        combine_items = staticmethod(_gui.GuiItemActions_combine_items)
    else:
        combine_items = _gui.GuiItemActions_combine_items
    if _newclass:
        contextualize_items = staticmethod(_gui.GuiItemActions_contextualize_items)
    else:
        contextualize_items = _gui.GuiItemActions_contextualize_items
    if _newclass:
        create_shading_layer_for_items = staticmethod(_gui.GuiItemActions_create_shading_layer_for_items)
    else:
        create_shading_layer_for_items = _gui.GuiItemActions_create_shading_layer_for_items
    if _newclass:
        delete_items = staticmethod(_gui.GuiItemActions_delete_items)
    else:
        delete_items = _gui.GuiItemActions_delete_items
    if _newclass:
        trash_items = staticmethod(_gui.GuiItemActions_trash_items)
    else:
        trash_items = _gui.GuiItemActions_trash_items
    if _newclass:
        instantiate_items = staticmethod(_gui.GuiItemActions_instantiate_items)
    else:
        instantiate_items = _gui.GuiItemActions_instantiate_items
    if _newclass:
        context_to_reference = staticmethod(_gui.GuiItemActions_context_to_reference)
    else:
        context_to_reference = _gui.GuiItemActions_context_to_reference
    if _newclass:
        reference_to_context = staticmethod(_gui.GuiItemActions_reference_to_context)
    else:
        reference_to_context = _gui.GuiItemActions_reference_to_context
    if _newclass:
        revert_items_overrides = staticmethod(_gui.GuiItemActions_revert_items_overrides)
    else:
        revert_items_overrides = _gui.GuiItemActions_revert_items_overrides
    if _newclass:
        revert_sub_items_overrides = staticmethod(_gui.GuiItemActions_revert_sub_items_overrides)
    else:
        revert_sub_items_overrides = _gui.GuiItemActions_revert_sub_items_overrides
    if _newclass:
        copy_items = staticmethod(_gui.GuiItemActions_copy_items)
    else:
        copy_items = _gui.GuiItemActions_copy_items
    if _newclass:
        paste_items = staticmethod(_gui.GuiItemActions_paste_items)
    else:
        paste_items = _gui.GuiItemActions_paste_items
    if _newclass:
        cut_items = staticmethod(_gui.GuiItemActions_cut_items)
    else:
        cut_items = _gui.GuiItemActions_cut_items
    if _newclass:
        make_local_items = staticmethod(_gui.GuiItemActions_make_local_items)
    else:
        make_local_items = _gui.GuiItemActions_make_local_items
    if _newclass:
        make_instance_items = staticmethod(_gui.GuiItemActions_make_instance_items)
    else:
        make_instance_items = _gui.GuiItemActions_make_instance_items
    if _newclass:
        toggle_items_display = staticmethod(_gui.GuiItemActions_toggle_items_display)
    else:
        toggle_items_display = _gui.GuiItemActions_toggle_items_display
    if _newclass:
        enable_disable_items = staticmethod(_gui.GuiItemActions_enable_disable_items)
    else:
        enable_disable_items = _gui.GuiItemActions_enable_disable_items
    if _newclass:
        isolate_more_items = staticmethod(_gui.GuiItemActions_isolate_more_items)
    else:
        isolate_more_items = _gui.GuiItemActions_isolate_more_items
    if _newclass:
        isolate_less_items = staticmethod(_gui.GuiItemActions_isolate_less_items)
    else:
        isolate_less_items = _gui.GuiItemActions_isolate_less_items
    if _newclass:
        isolate_swap_items = staticmethod(_gui.GuiItemActions_isolate_swap_items)
    else:
        isolate_swap_items = _gui.GuiItemActions_isolate_swap_items
    if _newclass:
        colortag_items = staticmethod(_gui.GuiItemActions_colortag_items)
    else:
        colortag_items = _gui.GuiItemActions_colortag_items
    if _newclass:
        isolate_items = staticmethod(_gui.GuiItemActions_isolate_items)
    else:
        isolate_items = _gui.GuiItemActions_isolate_items
    if _newclass:
        is_context_writable = staticmethod(_gui.GuiItemActions_is_context_writable)
    else:
        is_context_writable = _gui.GuiItemActions_is_context_writable
    if _newclass:
        is_item_action_localize_allowed = staticmethod(_gui.GuiItemActions_is_item_action_localize_allowed)
    else:
        is_item_action_localize_allowed = _gui.GuiItemActions_is_item_action_localize_allowed
    if _newclass:
        is_item_action_make_instance_allowed = staticmethod(_gui.GuiItemActions_is_item_action_make_instance_allowed)
    else:
        is_item_action_make_instance_allowed = _gui.GuiItemActions_is_item_action_make_instance_allowed
    if _newclass:
        is_item_action_group_allowed = staticmethod(_gui.GuiItemActions_is_item_action_group_allowed)
    else:
        is_item_action_group_allowed = _gui.GuiItemActions_is_item_action_group_allowed
    if _newclass:
        is_item_action_combine_allowed = staticmethod(_gui.GuiItemActions_is_item_action_combine_allowed)
    else:
        is_item_action_combine_allowed = _gui.GuiItemActions_is_item_action_combine_allowed
    if _newclass:
        is_item_action_create_shading_layer_allowed = staticmethod(_gui.GuiItemActions_is_item_action_create_shading_layer_allowed)
    else:
        is_item_action_create_shading_layer_allowed = _gui.GuiItemActions_is_item_action_create_shading_layer_allowed
    if _newclass:
        is_item_action_copy_allowed = staticmethod(_gui.GuiItemActions_is_item_action_copy_allowed)
    else:
        is_item_action_copy_allowed = _gui.GuiItemActions_is_item_action_copy_allowed
    if _newclass:
        is_item_action_cut_allowed = staticmethod(_gui.GuiItemActions_is_item_action_cut_allowed)
    else:
        is_item_action_cut_allowed = _gui.GuiItemActions_is_item_action_cut_allowed
    if _newclass:
        is_item_action_paste_allowed = staticmethod(_gui.GuiItemActions_is_item_action_paste_allowed)
    else:
        is_item_action_paste_allowed = _gui.GuiItemActions_is_item_action_paste_allowed
    if _newclass:
        is_item_action_revert_overrides_allowed = staticmethod(_gui.GuiItemActions_is_item_action_revert_overrides_allowed)
    else:
        is_item_action_revert_overrides_allowed = _gui.GuiItemActions_is_item_action_revert_overrides_allowed
    if _newclass:
        is_item_action_delete_allowed = staticmethod(_gui.GuiItemActions_is_item_action_delete_allowed)
    else:
        is_item_action_delete_allowed = _gui.GuiItemActions_is_item_action_delete_allowed
    if _newclass:
        is_item_action_rename_allowed = staticmethod(_gui.GuiItemActions_is_item_action_rename_allowed)
    else:
        is_item_action_rename_allowed = _gui.GuiItemActions_is_item_action_rename_allowed
    if _newclass:
        is_item_action_disable_allowed = staticmethod(_gui.GuiItemActions_is_item_action_disable_allowed)
    else:
        is_item_action_disable_allowed = _gui.GuiItemActions_is_item_action_disable_allowed
    if _newclass:
        is_item_action_enable_allowed = staticmethod(_gui.GuiItemActions_is_item_action_enable_allowed)
    else:
        is_item_action_enable_allowed = _gui.GuiItemActions_is_item_action_enable_allowed
    if _newclass:
        is_item_action_move_allowed = staticmethod(_gui.GuiItemActions_is_item_action_move_allowed)
    else:
        is_item_action_move_allowed = _gui.GuiItemActions_is_item_action_move_allowed
    if _newclass:
        is_item_action_copy_to_allowed = staticmethod(_gui.GuiItemActions_is_item_action_copy_to_allowed)
    else:
        is_item_action_copy_to_allowed = _gui.GuiItemActions_is_item_action_copy_to_allowed
    if _newclass:
        is_item_action_instantiate_allowed = staticmethod(_gui.GuiItemActions_is_item_action_instantiate_allowed)
    else:
        is_item_action_instantiate_allowed = _gui.GuiItemActions_is_item_action_instantiate_allowed
    if _newclass:
        build_item_creation_menu = staticmethod(_gui.GuiItemActions_build_item_creation_menu)
    else:
        build_item_creation_menu = _gui.GuiItemActions_build_item_creation_menu
    if _newclass:
        populate_classes_categories = staticmethod(_gui.GuiItemActions_populate_classes_categories)
    else:
        populate_classes_categories = _gui.GuiItemActions_populate_classes_categories
    if _newclass:
        add_create_class = staticmethod(_gui.GuiItemActions_add_create_class)
    else:
        add_create_class = _gui.GuiItemActions_add_create_class
    if _newclass:
        get_class_creation_shortcut = staticmethod(_gui.GuiItemActions_get_class_creation_shortcut)
    else:
        get_class_creation_shortcut = _gui.GuiItemActions_get_class_creation_shortcut
    if _newclass:
        process_shortcut_creation_class = staticmethod(_gui.GuiItemActions_process_shortcut_creation_class)
    else:
        process_shortcut_creation_class = _gui.GuiItemActions_process_shortcut_creation_class
    if _newclass:
        on_create_item = staticmethod(_gui.GuiItemActions_on_create_item)
    else:
        on_create_item = _gui.GuiItemActions_on_create_item
    if _newclass:
        process_create_item = staticmethod(_gui.GuiItemActions_process_create_item)
    else:
        process_create_item = _gui.GuiItemActions_process_create_item
    if _newclass:
        on_create_context = staticmethod(_gui.GuiItemActions_on_create_context)
    else:
        on_create_context = _gui.GuiItemActions_on_create_context
    if _newclass:
        process_create_context = staticmethod(_gui.GuiItemActions_process_create_context)
    else:
        process_create_context = _gui.GuiItemActions_process_create_context
    __swig_setmethods__["s_custom_data_preselected_item"] = _gui.GuiItemActions_s_custom_data_preselected_item_set
    __swig_getmethods__["s_custom_data_preselected_item"] = _gui.GuiItemActions_s_custom_data_preselected_item_get
    if _newclass:
        s_custom_data_preselected_item = _swig_property(_gui.GuiItemActions_s_custom_data_preselected_item_get, _gui.GuiItemActions_s_custom_data_preselected_item_set)
    if _newclass:
        get_selection = staticmethod(_gui.GuiItemActions_get_selection)
    else:
        get_selection = _gui.GuiItemActions_get_selection
    if _newclass:
        has_nodal_preferred_position = staticmethod(_gui.GuiItemActions_has_nodal_preferred_position)
    else:
        has_nodal_preferred_position = _gui.GuiItemActions_has_nodal_preferred_position
    if _newclass:
        class_info = staticmethod(_gui.GuiItemActions_class_info)
    else:
        class_info = _gui.GuiItemActions_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiItemActions____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiItemActions____class_destructor__

    def get_class_info(self):
        return _gui.GuiItemActions_get_class_info(self)

    def __init__(self):
        this = _gui.new_GuiItemActions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiItemActions
    __del__ = lambda self: None
GuiItemActions_swigregister = _gui.GuiItemActions_swigregister
GuiItemActions_swigregister(GuiItemActions)

def GuiItemActions_group_items(active_widget):
    return _gui.GuiItemActions_group_items(active_widget)
GuiItemActions_group_items = _gui.GuiItemActions_group_items

def GuiItemActions_combine_items(active_widget, mode=0):
    return _gui.GuiItemActions_combine_items(active_widget, mode)
GuiItemActions_combine_items = _gui.GuiItemActions_combine_items

def GuiItemActions_contextualize_items(active_widget):
    return _gui.GuiItemActions_contextualize_items(active_widget)
GuiItemActions_contextualize_items = _gui.GuiItemActions_contextualize_items

def GuiItemActions_create_shading_layer_for_items(active_widget, creation_mode):
    return _gui.GuiItemActions_create_shading_layer_for_items(active_widget, creation_mode)
GuiItemActions_create_shading_layer_for_items = _gui.GuiItemActions_create_shading_layer_for_items

def GuiItemActions_delete_items(active_widget):
    return _gui.GuiItemActions_delete_items(active_widget)
GuiItemActions_delete_items = _gui.GuiItemActions_delete_items

def GuiItemActions_trash_items(active_widget):
    return _gui.GuiItemActions_trash_items(active_widget)
GuiItemActions_trash_items = _gui.GuiItemActions_trash_items

def GuiItemActions_instantiate_items(active_widget):
    return _gui.GuiItemActions_instantiate_items(active_widget)
GuiItemActions_instantiate_items = _gui.GuiItemActions_instantiate_items

def GuiItemActions_context_to_reference(active_widget):
    return _gui.GuiItemActions_context_to_reference(active_widget)
GuiItemActions_context_to_reference = _gui.GuiItemActions_context_to_reference

def GuiItemActions_reference_to_context(active_widget):
    return _gui.GuiItemActions_reference_to_context(active_widget)
GuiItemActions_reference_to_context = _gui.GuiItemActions_reference_to_context

def GuiItemActions_revert_items_overrides(active_widget):
    return _gui.GuiItemActions_revert_items_overrides(active_widget)
GuiItemActions_revert_items_overrides = _gui.GuiItemActions_revert_items_overrides

def GuiItemActions_revert_sub_items_overrides(active_widget):
    return _gui.GuiItemActions_revert_sub_items_overrides(active_widget)
GuiItemActions_revert_sub_items_overrides = _gui.GuiItemActions_revert_sub_items_overrides

def GuiItemActions_copy_items(active_widget, include_dependencies=False):
    return _gui.GuiItemActions_copy_items(active_widget, include_dependencies)
GuiItemActions_copy_items = _gui.GuiItemActions_copy_items

def GuiItemActions_paste_items(active_widget):
    return _gui.GuiItemActions_paste_items(active_widget)
GuiItemActions_paste_items = _gui.GuiItemActions_paste_items

def GuiItemActions_cut_items(active_widget):
    return _gui.GuiItemActions_cut_items(active_widget)
GuiItemActions_cut_items = _gui.GuiItemActions_cut_items

def GuiItemActions_make_local_items(active_widget):
    return _gui.GuiItemActions_make_local_items(active_widget)
GuiItemActions_make_local_items = _gui.GuiItemActions_make_local_items

def GuiItemActions_make_instance_items(active_widget):
    return _gui.GuiItemActions_make_instance_items(active_widget)
GuiItemActions_make_instance_items = _gui.GuiItemActions_make_instance_items

def GuiItemActions_toggle_items_display(active_widget, display):
    return _gui.GuiItemActions_toggle_items_display(active_widget, display)
GuiItemActions_toggle_items_display = _gui.GuiItemActions_toggle_items_display

def GuiItemActions_enable_disable_items(active_widget, selection, disable):
    return _gui.GuiItemActions_enable_disable_items(active_widget, selection, disable)
GuiItemActions_enable_disable_items = _gui.GuiItemActions_enable_disable_items

def GuiItemActions_isolate_more_items(active_widget):
    return _gui.GuiItemActions_isolate_more_items(active_widget)
GuiItemActions_isolate_more_items = _gui.GuiItemActions_isolate_more_items

def GuiItemActions_isolate_less_items(active_widget):
    return _gui.GuiItemActions_isolate_less_items(active_widget)
GuiItemActions_isolate_less_items = _gui.GuiItemActions_isolate_less_items

def GuiItemActions_isolate_swap_items(active_widget):
    return _gui.GuiItemActions_isolate_swap_items(active_widget)
GuiItemActions_isolate_swap_items = _gui.GuiItemActions_isolate_swap_items

def GuiItemActions_colortag_items(active_widget, tag):
    return _gui.GuiItemActions_colortag_items(active_widget, tag)
GuiItemActions_colortag_items = _gui.GuiItemActions_colortag_items

def GuiItemActions_isolate_items(*args):
    return _gui.GuiItemActions_isolate_items(*args)
GuiItemActions_isolate_items = _gui.GuiItemActions_isolate_items

def GuiItemActions_is_context_writable(context):
    return _gui.GuiItemActions_is_context_writable(context)
GuiItemActions_is_context_writable = _gui.GuiItemActions_is_context_writable

def GuiItemActions_is_item_action_localize_allowed(item):
    return _gui.GuiItemActions_is_item_action_localize_allowed(item)
GuiItemActions_is_item_action_localize_allowed = _gui.GuiItemActions_is_item_action_localize_allowed

def GuiItemActions_is_item_action_make_instance_allowed(item):
    return _gui.GuiItemActions_is_item_action_make_instance_allowed(item)
GuiItemActions_is_item_action_make_instance_allowed = _gui.GuiItemActions_is_item_action_make_instance_allowed

def GuiItemActions_is_item_action_group_allowed(item):
    return _gui.GuiItemActions_is_item_action_group_allowed(item)
GuiItemActions_is_item_action_group_allowed = _gui.GuiItemActions_is_item_action_group_allowed

def GuiItemActions_is_item_action_combine_allowed(item):
    return _gui.GuiItemActions_is_item_action_combine_allowed(item)
GuiItemActions_is_item_action_combine_allowed = _gui.GuiItemActions_is_item_action_combine_allowed

def GuiItemActions_is_item_action_create_shading_layer_allowed(item):
    return _gui.GuiItemActions_is_item_action_create_shading_layer_allowed(item)
GuiItemActions_is_item_action_create_shading_layer_allowed = _gui.GuiItemActions_is_item_action_create_shading_layer_allowed

def GuiItemActions_is_item_action_copy_allowed(item):
    return _gui.GuiItemActions_is_item_action_copy_allowed(item)
GuiItemActions_is_item_action_copy_allowed = _gui.GuiItemActions_is_item_action_copy_allowed

def GuiItemActions_is_item_action_cut_allowed(item):
    return _gui.GuiItemActions_is_item_action_cut_allowed(item)
GuiItemActions_is_item_action_cut_allowed = _gui.GuiItemActions_is_item_action_cut_allowed

def GuiItemActions_is_item_action_paste_allowed(item):
    return _gui.GuiItemActions_is_item_action_paste_allowed(item)
GuiItemActions_is_item_action_paste_allowed = _gui.GuiItemActions_is_item_action_paste_allowed

def GuiItemActions_is_item_action_revert_overrides_allowed(item):
    return _gui.GuiItemActions_is_item_action_revert_overrides_allowed(item)
GuiItemActions_is_item_action_revert_overrides_allowed = _gui.GuiItemActions_is_item_action_revert_overrides_allowed

def GuiItemActions_is_item_action_delete_allowed(item):
    return _gui.GuiItemActions_is_item_action_delete_allowed(item)
GuiItemActions_is_item_action_delete_allowed = _gui.GuiItemActions_is_item_action_delete_allowed

def GuiItemActions_is_item_action_rename_allowed(item):
    return _gui.GuiItemActions_is_item_action_rename_allowed(item)
GuiItemActions_is_item_action_rename_allowed = _gui.GuiItemActions_is_item_action_rename_allowed

def GuiItemActions_is_item_action_disable_allowed(item):
    return _gui.GuiItemActions_is_item_action_disable_allowed(item)
GuiItemActions_is_item_action_disable_allowed = _gui.GuiItemActions_is_item_action_disable_allowed

def GuiItemActions_is_item_action_enable_allowed(item):
    return _gui.GuiItemActions_is_item_action_enable_allowed(item)
GuiItemActions_is_item_action_enable_allowed = _gui.GuiItemActions_is_item_action_enable_allowed

def GuiItemActions_is_item_action_move_allowed(item, destination_ctx):
    return _gui.GuiItemActions_is_item_action_move_allowed(item, destination_ctx)
GuiItemActions_is_item_action_move_allowed = _gui.GuiItemActions_is_item_action_move_allowed

def GuiItemActions_is_item_action_copy_to_allowed(item, destination_ctx, allow_in_parent_context):
    return _gui.GuiItemActions_is_item_action_copy_to_allowed(item, destination_ctx, allow_in_parent_context)
GuiItemActions_is_item_action_copy_to_allowed = _gui.GuiItemActions_is_item_action_copy_to_allowed

def GuiItemActions_is_item_action_instantiate_allowed(*args):
    return _gui.GuiItemActions_is_item_action_instantiate_allowed(*args)
GuiItemActions_is_item_action_instantiate_allowed = _gui.GuiItemActions_is_item_action_instantiate_allowed

def GuiItemActions_build_item_creation_menu(*args):
    return _gui.GuiItemActions_build_item_creation_menu(*args)
GuiItemActions_build_item_creation_menu = _gui.GuiItemActions_build_item_creation_menu

def GuiItemActions_populate_classes_categories(*args):
    return _gui.GuiItemActions_populate_classes_categories(*args)
GuiItemActions_populate_classes_categories = _gui.GuiItemActions_populate_classes_categories

def GuiItemActions_add_create_class(*args):
    return _gui.GuiItemActions_add_create_class(*args)
GuiItemActions_add_create_class = _gui.GuiItemActions_add_create_class

def GuiItemActions_get_class_creation_shortcut(of_class):
    return _gui.GuiItemActions_get_class_creation_shortcut(of_class)
GuiItemActions_get_class_creation_shortcut = _gui.GuiItemActions_get_class_creation_shortcut

def GuiItemActions_process_shortcut_creation_class(widget_from, shortcut, creation_context=None):
    return _gui.GuiItemActions_process_shortcut_creation_class(widget_from, shortcut, creation_context)
GuiItemActions_process_shortcut_creation_class = _gui.GuiItemActions_process_shortcut_creation_class

def GuiItemActions_on_create_item(widget, action, data):
    return _gui.GuiItemActions_on_create_item(widget, action, data)
GuiItemActions_on_create_item = _gui.GuiItemActions_on_create_item

def GuiItemActions_process_create_item(widget_from, creation_class, input_context):
    return _gui.GuiItemActions_process_create_item(widget_from, creation_class, input_context)
GuiItemActions_process_create_item = _gui.GuiItemActions_process_create_item

def GuiItemActions_on_create_context(widget, action, data):
    return _gui.GuiItemActions_on_create_context(widget, action, data)
GuiItemActions_on_create_context = _gui.GuiItemActions_on_create_context

def GuiItemActions_process_create_context(widget_from, input_context, as_reference=False):
    return _gui.GuiItemActions_process_create_context(widget_from, input_context, as_reference)
GuiItemActions_process_create_context = _gui.GuiItemActions_process_create_context

def GuiItemActions_get_selection(active_widget):
    return _gui.GuiItemActions_get_selection(active_widget)
GuiItemActions_get_selection = _gui.GuiItemActions_get_selection

def GuiItemActions_has_nodal_preferred_position(widget):
    return _gui.GuiItemActions_has_nodal_preferred_position(widget)
GuiItemActions_has_nodal_preferred_position = _gui.GuiItemActions_has_nodal_preferred_position

def GuiItemActions_class_info():
    return _gui.GuiItemActions_class_info()
GuiItemActions_class_info = _gui.GuiItemActions_class_info

def GuiItemActions____class_destructor__(instance, is_array):
    return _gui.GuiItemActions____class_destructor__(instance, is_array)
GuiItemActions____class_destructor__ = _gui.GuiItemActions____class_destructor__

class GuiMenu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiMenu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GuiMenu, name)
    __repr__ = _swig_repr

    def __init__(self, parent):
        this = _gui.new_GuiMenu(parent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    ANCHOR_LEFT = _gui.GuiMenu_ANCHOR_LEFT
    ANCHOR_RIGHT = _gui.GuiMenu_ANCHOR_RIGHT
    ANCHOR_TOP = _gui.GuiMenu_ANCHOR_TOP
    ANCHOR_BOTTOM = _gui.GuiMenu_ANCHOR_BOTTOM

    def popup(self, *args):
        return _gui.GuiMenu_popup(self, *args)

    def repeat_last_action(self):
        return _gui.GuiMenu_repeat_last_action(self)

    def is_shown(self):
        return _gui.GuiMenu_is_shown(self)

    def hide(self):
        return _gui.GuiMenu_hide(self)

    def draw(self, dc):
        return _gui.GuiMenu_draw(self, dc)

    def resize(self, x, y, w, h):
        return _gui.GuiMenu_resize(self, x, y, w, h)

    def process_event(self, event_id):
        return _gui.GuiMenu_process_event(self, event_id)

    def get_size(self):
        return _gui.GuiMenu_get_size(self)

    def set_max_line_count(self, max_line_count):
        return _gui.GuiMenu_set_max_line_count(self, max_line_count)

    def get_max_line_count(self):
        return _gui.GuiMenu_get_max_line_count(self)

    def get_last_selected_item(self):
        return _gui.GuiMenu_get_last_selected_item(self)

    def get_highlighted_item(self):
        return _gui.GuiMenu_get_highlighted_item(self)

    def get_parent(self):
        return _gui.GuiMenu_get_parent(self)

    def is_visible(self):
        return _gui.GuiMenu_is_visible(self)

    def set_size(self, x, y, w, h):
        return _gui.GuiMenu_set_size(self, x, y, w, h)

    def create_radio_group(self):
        return _gui.GuiMenu_create_radio_group(self)

    def add_item(self, *args):
        return _gui.GuiMenu_add_item(self, *args)

    def add_separator(self, *args):
        return _gui.GuiMenu_add_separator(self, *args)

    def add_sub_menu(self, *args):
        return _gui.GuiMenu_add_sub_menu(self, *args)

    def add_widget(self, widget):
        return _gui.GuiMenu_add_widget(self, widget)

    def remove_all_items(self):
        return _gui.GuiMenu_remove_all_items(self)

    def disable_all_items(self):
        return _gui.GuiMenu_disable_all_items(self)

    def enable_all_items(self):
        return _gui.GuiMenu_enable_all_items(self)

    def get_item(self, item_name):
        return _gui.GuiMenu_get_item(self, item_name)

    def get_items(self):
        return _gui.GuiMenu_get_items(self)

    def on_submenu_show(self, sender, event, data):
        return _gui.GuiMenu_on_submenu_show(self, sender, event, data)

    def on_submenu_hide(self, sender, event, data):
        return _gui.GuiMenu_on_submenu_hide(self, sender, event, data)

    def on_submenu_focus_out(self, sender, event, data):
        return _gui.GuiMenu_on_submenu_focus_out(self, sender, event, data)

    def on_submenu_click(self, sender, event, data):
        return _gui.GuiMenu_on_submenu_click(self, sender, event, data)

    def on_submenu_selection_changed(self, sender, event, data):
        return _gui.GuiMenu_on_submenu_selection_changed(self, sender, event, data)

    def draw_menu(self, dc):
        return _gui.GuiMenu_draw_menu(self, dc)

    def set_buttons(self, buttons):
        return _gui.GuiMenu_set_buttons(self, buttons)

    def get_parent_item(self):
        return _gui.GuiMenu_get_parent_item(self)

    def get_parent_menu(self):
        return _gui.GuiMenu_get_parent_menu(self)

    def get_main_menu(self):
        return _gui.GuiMenu_get_main_menu(self)

    def remove_item(self, item):
        return _gui.GuiMenu_remove_item(self, item)

    def remove_sub_menu(self, menu):
        return _gui.GuiMenu_remove_sub_menu(self, menu)

    def move_item(self, item, neighbor_item, after=False):
        return _gui.GuiMenu_move_item(self, item, neighbor_item, after)
    if _newclass:
        set_sub_menu_show_delay = staticmethod(_gui.GuiMenu_set_sub_menu_show_delay)
    else:
        set_sub_menu_show_delay = _gui.GuiMenu_set_sub_menu_show_delay

    def add_filter_item(self):
        return _gui.GuiMenu_add_filter_item(self)

    def remove_filter_item(self):
        return _gui.GuiMenu_remove_filter_item(self)

    def set_enable_filter(self, value, position=0):
        return _gui.GuiMenu_set_enable_filter(self, value, position)
    if _newclass:
        is_visible_by_filter = staticmethod(_gui.GuiMenu_is_visible_by_filter)
    else:
        is_visible_by_filter = _gui.GuiMenu_is_visible_by_filter
    if _newclass:
        class_info = staticmethod(_gui.GuiMenu_class_info)
    else:
        class_info = _gui.GuiMenu_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiMenu____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiMenu____class_destructor__

    def get_class_info(self):
        return _gui.GuiMenu_get_class_info(self)
GuiMenu_swigregister = _gui.GuiMenu_swigregister
GuiMenu_swigregister(GuiMenu)
EVT_ID_MENU_CLICK = cvar.EVT_ID_MENU_CLICK
EVT_ID_MENU_SHOW = cvar.EVT_ID_MENU_SHOW
EVT_ID_MENU_HIDE = cvar.EVT_ID_MENU_HIDE
EVT_ID_MENU_FOCUS_OUT = cvar.EVT_ID_MENU_FOCUS_OUT
EVT_ID_MENU_SELECTION_CHANGED = cvar.EVT_ID_MENU_SELECTION_CHANGED
EVT_ID_MENU_KEY_PRESSED = cvar.EVT_ID_MENU_KEY_PRESSED
EVT_ID_MENU_ITEM_OVER = cvar.EVT_ID_MENU_ITEM_OVER

def GuiMenu_set_sub_menu_show_delay(ms):
    return _gui.GuiMenu_set_sub_menu_show_delay(ms)
GuiMenu_set_sub_menu_show_delay = _gui.GuiMenu_set_sub_menu_show_delay

def GuiMenu_is_visible_by_filter(text, filter):
    return _gui.GuiMenu_is_visible_by_filter(text, filter)
GuiMenu_is_visible_by_filter = _gui.GuiMenu_is_visible_by_filter

def GuiMenu_class_info():
    return _gui.GuiMenu_class_info()
GuiMenu_class_info = _gui.GuiMenu_class_info

def GuiMenu____class_destructor__(instance, is_array):
    return _gui.GuiMenu____class_destructor__(instance, is_array)
GuiMenu____class_destructor__ = _gui.GuiMenu____class_destructor__

class GuiMenuButtonGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiMenuButtonGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GuiMenuButtonGroup, name)
    __repr__ = _swig_repr

    def __init__(self, parent):
        this = _gui.new_GuiMenuButtonGroup(parent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiMenuButtonGroup
    __del__ = lambda self: None

    def add_button(self, label):
        return _gui.GuiMenuButtonGroup_add_button(self, label)

    def get_button(self, label):
        return _gui.GuiMenuButtonGroup_get_button(self, label)

    def get_parent(self):
        return _gui.GuiMenuButtonGroup_get_parent(self)

    def get_buttons(self):
        return _gui.GuiMenuButtonGroup_get_buttons(self)
GuiMenuButtonGroup_swigregister = _gui.GuiMenuButtonGroup_swigregister
GuiMenuButtonGroup_swigregister(GuiMenuButtonGroup)

class GuiMenuButton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiMenuButton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GuiMenuButton, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiMenuButton(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push(self):
        return _gui.GuiMenuButton_push(self)

    def get_menu(self):
        return _gui.GuiMenuButton_get_menu(self)

    def set_menu(self, menu):
        return _gui.GuiMenuButton_set_menu(self, menu)

    def release_menu(self):
        return _gui.GuiMenuButton_release_menu(self)

    def get_menu_anchor(self):
        return _gui.GuiMenuButton_get_menu_anchor(self)

    def set_menu_anchor(self, anchor):
        return _gui.GuiMenuButton_set_menu_anchor(self, anchor)

    def process_event(self, event_id):
        return _gui.GuiMenuButton_process_event(self, event_id)

    def on_menu_hide(self, sender, event, data):
        return _gui.GuiMenuButton_on_menu_hide(self, sender, event, data)
    if _newclass:
        class_info = staticmethod(_gui.GuiMenuButton_class_info)
    else:
        class_info = _gui.GuiMenuButton_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiMenuButton____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiMenuButton____class_destructor__

    def get_class_info(self):
        return _gui.GuiMenuButton_get_class_info(self)
GuiMenuButton_swigregister = _gui.GuiMenuButton_swigregister
GuiMenuButton_swigregister(GuiMenuButton)

def GuiMenuButton_class_info():
    return _gui.GuiMenuButton_class_info()
GuiMenuButton_class_info = _gui.GuiMenuButton_class_info

def GuiMenuButton____class_destructor__(instance, is_array):
    return _gui.GuiMenuButton____class_destructor__(instance, is_array)
GuiMenuButton____class_destructor__ = _gui.GuiMenuButton____class_destructor__

class GuiMenuRadioGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiMenuRadioGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GuiMenuRadioGroup, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gui.new_GuiMenuRadioGroup()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiMenuRadioGroup
    __del__ = lambda self: None

    def add_item(self, item):
        return _gui.GuiMenuRadioGroup_add_item(self, item)

    def remove_item(self, item):
        return _gui.GuiMenuRadioGroup_remove_item(self, item)

    def get_items(self):
        return _gui.GuiMenuRadioGroup_get_items(self)
GuiMenuRadioGroup_swigregister = _gui.GuiMenuRadioGroup_swigregister
GuiMenuRadioGroup_swigregister(GuiMenuRadioGroup)

class GuiMenuItem(base.CoreCustomData):
    __swig_setmethods__ = {}
    for _s in [base.CoreCustomData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiMenuItem, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreCustomData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiMenuItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiMenuItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiMenuItem
    __del__ = lambda self: None

    def get_name(self):
        return _gui.GuiMenuItem_get_name(self)

    def set_name(self, name):
        return _gui.GuiMenuItem_set_name(self, name)

    def is_separator(self):
        return _gui.GuiMenuItem_is_separator(self)

    def get_menu(self):
        return _gui.GuiMenuItem_get_menu(self)

    def is_sub_menu(self):
        return _gui.GuiMenuItem_is_sub_menu(self)

    def get_action(self):
        return _gui.GuiMenuItem_get_action(self)

    def is_action(self):
        return _gui.GuiMenuItem_is_action(self)

    def is_item(self):
        return _gui.GuiMenuItem_is_item(self)

    def is_clickable_menu(self):
        return _gui.GuiMenuItem_is_clickable_menu(self)

    def is_clickable(self):
        return _gui.GuiMenuItem_is_clickable(self)

    def get_shortcut(self):
        return _gui.GuiMenuItem_get_shortcut(self)

    def set_icon(self, *args):
        return _gui.GuiMenuItem_set_icon(self, *args)

    def set_icons(self, *args):
        return _gui.GuiMenuItem_set_icons(self, *args)

    def remove_icons(self):
        return _gui.GuiMenuItem_remove_icons(self)

    def get_icon(self):
        return _gui.GuiMenuItem_get_icon(self)

    def get_icons(self):
        return _gui.GuiMenuItem_get_icons(self)

    def set_bold(self, bold):
        return _gui.GuiMenuItem_set_bold(self, bold)

    def is_bold(self):
        return _gui.GuiMenuItem_is_bold(self)

    def set_faded(self, faded):
        return _gui.GuiMenuItem_set_faded(self, faded)

    def is_faded(self):
        return _gui.GuiMenuItem_is_faded(self)

    def set_italic(self, italic):
        return _gui.GuiMenuItem_set_italic(self, italic)

    def is_italic(self):
        return _gui.GuiMenuItem_is_italic(self)

    def set_checkable(self, flag):
        return _gui.GuiMenuItem_set_checkable(self, flag)

    def get_checkable(self):
        return _gui.GuiMenuItem_get_checkable(self)

    def check(self, flag):
        return _gui.GuiMenuItem_check(self, flag)

    def is_checked(self):
        return _gui.GuiMenuItem_is_checked(self)

    def set_radio_group(self, group):
        return _gui.GuiMenuItem_set_radio_group(self, group)

    def get_radio_group(self):
        return _gui.GuiMenuItem_get_radio_group(self)

    def disable(self):
        return _gui.GuiMenuItem_disable(self)

    def enable(self):
        return _gui.GuiMenuItem_enable(self)

    def is_disabled(self):
        return _gui.GuiMenuItem_is_disabled(self)

    def is_enabled(self):
        return _gui.GuiMenuItem_is_enabled(self)

    def set_data(self, data):
        return _gui.GuiMenuItem_set_data(self, data)

    def get_data(self):
        return _gui.GuiMenuItem_get_data(self)

    def set_is_clickable_menu(self, value):
        return _gui.GuiMenuItem_set_is_clickable_menu(self, value)

    def set_is_clickable(self, value):
        return _gui.GuiMenuItem_set_is_clickable(self, value)

    def set_doc(self, doc):
        return _gui.GuiMenuItem_set_doc(self, doc)

    def get_doc(self):
        return _gui.GuiMenuItem_get_doc(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiMenuItem_class_info)
    else:
        class_info = _gui.GuiMenuItem_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiMenuItem____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiMenuItem____class_destructor__

    def get_class_info(self):
        return _gui.GuiMenuItem_get_class_info(self)
GuiMenuItem_swigregister = _gui.GuiMenuItem_swigregister
GuiMenuItem_swigregister(GuiMenuItem)

def GuiMenuItem_class_info():
    return _gui.GuiMenuItem_class_info()
GuiMenuItem_class_info = _gui.GuiMenuItem_class_info

def GuiMenuItem____class_destructor__(instance, is_array):
    return _gui.GuiMenuItem____class_destructor__(instance, is_array)
GuiMenuItem____class_destructor__ = _gui.GuiMenuItem____class_destructor__

class GuiIcon(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiIcon, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiIcon, name)
    __repr__ = _swig_repr

    def __init__(self, data):
        this = _gui.new_GuiIcon(data)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiIcon
    __del__ = lambda self: None

    def get_image(self, *args):
        return _gui.GuiIcon_get_image(self, *args)
    if _newclass:
        class_info = staticmethod(_gui.GuiIcon_class_info)
    else:
        class_info = _gui.GuiIcon_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiIcon____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiIcon____class_destructor__

    def get_class_info(self):
        return _gui.GuiIcon_get_class_info(self)
GuiIcon_swigregister = _gui.GuiIcon_swigregister
GuiIcon_swigregister(GuiIcon)

def GuiIcon_class_info():
    return _gui.GuiIcon_class_info()
GuiIcon_class_info = _gui.GuiIcon_class_info

def GuiIcon____class_destructor__(instance, is_array):
    return _gui.GuiIcon____class_destructor__(instance, is_array)
GuiIcon____class_destructor__ = _gui.GuiIcon____class_destructor__

class GuiInputDialog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiInputDialog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GuiInputDialog, name)
    __repr__ = _swig_repr
    VALUE_TYPE_STRING = _gui.GuiInputDialog_VALUE_TYPE_STRING
    VALUE_TYPE_INT = _gui.GuiInputDialog_VALUE_TYPE_INT
    VALUE_TYPE_SCRIPT = _gui.GuiInputDialog_VALUE_TYPE_SCRIPT
    VALUE_TYPE_ENUM = _gui.GuiInputDialog_VALUE_TYPE_ENUM
    VALUE_TYPE_LIST = _gui.GuiInputDialog_VALUE_TYPE_LIST

    def __init__(self, *args):
        this = _gui.new_GuiInputDialog(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def add_widget(self, label, value, type):
        return _gui.GuiInputDialog_add_widget(self, label, value, type)

    def show_modal(self):
        return _gui.GuiInputDialog_show_modal(self)

    def get_value(self, *args):
        return _gui.GuiInputDialog_get_value(self, *args)

    def is_ok(self):
        return _gui.GuiInputDialog_is_ok(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiInputDialog_class_info)
    else:
        class_info = _gui.GuiInputDialog_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiInputDialog____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiInputDialog____class_destructor__

    def get_class_info(self):
        return _gui.GuiInputDialog_get_class_info(self)
GuiInputDialog_swigregister = _gui.GuiInputDialog_swigregister
GuiInputDialog_swigregister(GuiInputDialog)

def GuiInputDialog_class_info():
    return _gui.GuiInputDialog_class_info()
GuiInputDialog_class_info = _gui.GuiInputDialog_class_info

def GuiInputDialog____class_destructor__(instance, is_array):
    return _gui.GuiInputDialog____class_destructor__(instance, is_array)
GuiInputDialog____class_destructor__ = _gui.GuiInputDialog____class_destructor__

class GuiColorDialog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiColorDialog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GuiColorDialog, name)
    __repr__ = _swig_repr
    RETURN_OK = _gui.GuiColorDialog_RETURN_OK
    RETURN_CANCEL = _gui.GuiColorDialog_RETURN_CANCEL
    RETURN_UNKNOWN = _gui.GuiColorDialog_RETURN_UNKNOWN
    MODE_HUE = _gui.GuiColorDialog_MODE_HUE
    MODE_SATURATION = _gui.GuiColorDialog_MODE_SATURATION
    MODE_BRIGHTNESS = _gui.GuiColorDialog_MODE_BRIGHTNESS
    MODE_RED = _gui.GuiColorDialog_MODE_RED
    MODE_GREEN = _gui.GuiColorDialog_MODE_GREEN
    MODE_BLUE = _gui.GuiColorDialog_MODE_BLUE
    MODE_COUNT = _gui.GuiColorDialog_MODE_COUNT
    if _newclass:
        get_mode_name = staticmethod(_gui.GuiColorDialog_get_mode_name)
    else:
        get_mode_name = _gui.GuiColorDialog_get_mode_name
    FORMULA_A = _gui.GuiColorDialog_FORMULA_A
    FORMULA_B = _gui.GuiColorDialog_FORMULA_B
    FORMULA_A_ADD_B = _gui.GuiColorDialog_FORMULA_A_ADD_B
    FORMULA_A_SUB_B = _gui.GuiColorDialog_FORMULA_A_SUB_B
    FORMULA_B_SUB_A = _gui.GuiColorDialog_FORMULA_B_SUB_A
    FORMULA_A_MUL_B = _gui.GuiColorDialog_FORMULA_A_MUL_B
    FORMULA_A_DIV_B = _gui.GuiColorDialog_FORMULA_A_DIV_B
    FORMULA_B_DIV_A = _gui.GuiColorDialog_FORMULA_B_DIV_A
    FORMULA_MEAN_A_B = _gui.GuiColorDialog_FORMULA_MEAN_A_B
    FORMULA_INV_A = _gui.GuiColorDialog_FORMULA_INV_A
    FORMULA_COUNT = _gui.GuiColorDialog_FORMULA_COUNT
    if _newclass:
        get_formula_name = staticmethod(_gui.GuiColorDialog_get_formula_name)
    else:
        get_formula_name = _gui.GuiColorDialog_get_formula_name

    def __init__(self, *args):
        this = _gui.new_GuiColorDialog(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_value(self):
        return _gui.GuiColorDialog_get_value(self)

    def show(self, *args):
        return _gui.GuiColorDialog_show(self, *args)

    def set_dialog_title(self, title):
        return _gui.GuiColorDialog_set_dialog_title(self, title)

    def draw(self, dc):
        return _gui.GuiColorDialog_draw(self, dc)

    def set_rgb_color(self, r, g, b):
        return _gui.GuiColorDialog_set_rgb_color(self, r, g, b)

    def set_current_rgb_color(self, r, g, b, a):
        return _gui.GuiColorDialog_set_current_rgb_color(self, r, g, b, a)

    def set_current_rgb_color_dragging(self, r, g, b, a):
        return _gui.GuiColorDialog_set_current_rgb_color_dragging(self, r, g, b, a)

    def set_hsv_color(self, h, s, v):
        return _gui.GuiColorDialog_set_hsv_color(self, h, s, v)

    def get_rgb_color(self):
        return _gui.GuiColorDialog_get_rgb_color(self)

    def get_hsv_color(self):
        return _gui.GuiColorDialog_get_hsv_color(self)

    def set_a_color(self, alpha):
        return _gui.GuiColorDialog_set_a_color(self, alpha)

    def get_a_color(self):
        return _gui.GuiColorDialog_get_a_color(self)

    def get_current_rgb_color(self):
        return _gui.GuiColorDialog_get_current_rgb_color(self)

    def get_current_hsv_color(self):
        return _gui.GuiColorDialog_get_current_hsv_color(self)

    def get_current_a_color(self):
        return _gui.GuiColorDialog_get_current_a_color(self)

    def get_rgba_color(self):
        return _gui.GuiColorDialog_get_rgba_color(self)

    def get_current_rgba_color(self):
        return _gui.GuiColorDialog_get_current_rgba_color(self)

    def update_color_format(self):
        return _gui.GuiColorDialog_update_color_format(self)

    def get_mode(self):
        return _gui.GuiColorDialog_get_mode(self)

    def get_formula(self):
        return _gui.GuiColorDialog_get_formula(self)

    def revert_to_previous_color(self):
        return _gui.GuiColorDialog_revert_to_previous_color(self)

    def get_custom_colors(self):
        return _gui.GuiColorDialog_get_custom_colors(self)

    def set_custom_color(self, index, color):
        return _gui.GuiColorDialog_set_custom_color(self, index, color)

    def get_color_space(self):
        return _gui.GuiColorDialog_get_color_space(self)

    def set_listener(self, l):
        return _gui.GuiColorDialog_set_listener(self, l)

    def get_listener(self):
        return _gui.GuiColorDialog_get_listener(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiColorDialog_class_info)
    else:
        class_info = _gui.GuiColorDialog_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiColorDialog____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiColorDialog____class_destructor__

    def get_class_info(self):
        return _gui.GuiColorDialog_get_class_info(self)
GuiColorDialog_swigregister = _gui.GuiColorDialog_swigregister
GuiColorDialog_swigregister(GuiColorDialog)
EVT_ID_COLOR_DIALOG_COLOR_CHANGING = cvar.EVT_ID_COLOR_DIALOG_COLOR_CHANGING
EVT_ID_COLOR_DIALOG_COLOR_OK = cvar.EVT_ID_COLOR_DIALOG_COLOR_OK
EVT_ID_COLOR_DIALOG_COLOR_CANCEL = cvar.EVT_ID_COLOR_DIALOG_COLOR_CANCEL

def GuiColorDialog_get_mode_name(mode):
    return _gui.GuiColorDialog_get_mode_name(mode)
GuiColorDialog_get_mode_name = _gui.GuiColorDialog_get_mode_name

def GuiColorDialog_get_formula_name(formula):
    return _gui.GuiColorDialog_get_formula_name(formula)
GuiColorDialog_get_formula_name = _gui.GuiColorDialog_get_formula_name

def GuiColorDialog_class_info():
    return _gui.GuiColorDialog_class_info()
GuiColorDialog_class_info = _gui.GuiColorDialog_class_info

def GuiColorDialog____class_destructor__(instance, is_array):
    return _gui.GuiColorDialog____class_destructor__(instance, is_array)
GuiColorDialog____class_destructor__ = _gui.GuiColorDialog____class_destructor__

class GuiImageHistoryItem(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiImageHistoryItem, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiImageHistoryItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["image"] = _gui.GuiImageHistoryItem_image_set
    __swig_getmethods__["image"] = _gui.GuiImageHistoryItem_image_get
    if _newclass:
        image = _swig_property(_gui.GuiImageHistoryItem_image_get, _gui.GuiImageHistoryItem_image_set)
    __swig_setmethods__["module"] = _gui.GuiImageHistoryItem_module_set
    __swig_getmethods__["module"] = _gui.GuiImageHistoryItem_module_get
    if _newclass:
        module = _swig_property(_gui.GuiImageHistoryItem_module_get, _gui.GuiImageHistoryItem_module_set)
    __swig_setmethods__["old_object_full_name"] = _gui.GuiImageHistoryItem_old_object_full_name_set
    __swig_getmethods__["old_object_full_name"] = _gui.GuiImageHistoryItem_old_object_full_name_get
    if _newclass:
        old_object_full_name = _swig_property(_gui.GuiImageHistoryItem_old_object_full_name_get, _gui.GuiImageHistoryItem_old_object_full_name_set)
    __swig_setmethods__["id"] = _gui.GuiImageHistoryItem_id_set
    __swig_getmethods__["id"] = _gui.GuiImageHistoryItem_id_get
    if _newclass:
        id = _swig_property(_gui.GuiImageHistoryItem_id_get, _gui.GuiImageHistoryItem_id_set)
    __swig_setmethods__["name"] = _gui.GuiImageHistoryItem_name_set
    __swig_getmethods__["name"] = _gui.GuiImageHistoryItem_name_get
    if _newclass:
        name = _swig_property(_gui.GuiImageHistoryItem_name_get, _gui.GuiImageHistoryItem_name_set)
    __swig_setmethods__["comment"] = _gui.GuiImageHistoryItem_comment_set
    __swig_getmethods__["comment"] = _gui.GuiImageHistoryItem_comment_get
    if _newclass:
        comment = _swig_property(_gui.GuiImageHistoryItem_comment_get, _gui.GuiImageHistoryItem_comment_set)
    __swig_setmethods__["wtc"] = _gui.GuiImageHistoryItem_wtc_set
    __swig_getmethods__["wtc"] = _gui.GuiImageHistoryItem_wtc_get
    if _newclass:
        wtc = _swig_property(_gui.GuiImageHistoryItem_wtc_get, _gui.GuiImageHistoryItem_wtc_set)
    __swig_setmethods__["wtn"] = _gui.GuiImageHistoryItem_wtn_set
    __swig_getmethods__["wtn"] = _gui.GuiImageHistoryItem_wtn_get
    if _newclass:
        wtn = _swig_property(_gui.GuiImageHistoryItem_wtn_get, _gui.GuiImageHistoryItem_wtn_set)
    __swig_setmethods__["metadatas"] = _gui.GuiImageHistoryItem_metadatas_set
    __swig_getmethods__["metadatas"] = _gui.GuiImageHistoryItem_metadatas_get
    if _newclass:
        metadatas = _swig_property(_gui.GuiImageHistoryItem_metadatas_get, _gui.GuiImageHistoryItem_metadatas_set)
    __swig_setmethods__["eval_frame"] = _gui.GuiImageHistoryItem_eval_frame_set
    __swig_getmethods__["eval_frame"] = _gui.GuiImageHistoryItem_eval_frame_get
    if _newclass:
        eval_frame = _swig_property(_gui.GuiImageHistoryItem_eval_frame_get, _gui.GuiImageHistoryItem_eval_frame_set)
    __swig_setmethods__["computed_time"] = _gui.GuiImageHistoryItem_computed_time_set
    __swig_getmethods__["computed_time"] = _gui.GuiImageHistoryItem_computed_time_get
    if _newclass:
        computed_time = _swig_property(_gui.GuiImageHistoryItem_computed_time_get, _gui.GuiImageHistoryItem_computed_time_set)
    __swig_setmethods__["date"] = _gui.GuiImageHistoryItem_date_set
    __swig_getmethods__["date"] = _gui.GuiImageHistoryItem_date_get
    if _newclass:
        date = _swig_property(_gui.GuiImageHistoryItem_date_get, _gui.GuiImageHistoryItem_date_set)
    __swig_setmethods__["resolution"] = _gui.GuiImageHistoryItem_resolution_set
    __swig_getmethods__["resolution"] = _gui.GuiImageHistoryItem_resolution_get
    if _newclass:
        resolution = _swig_property(_gui.GuiImageHistoryItem_resolution_get, _gui.GuiImageHistoryItem_resolution_set)
    __swig_setmethods__["color_space"] = _gui.GuiImageHistoryItem_color_space_set
    __swig_getmethods__["color_space"] = _gui.GuiImageHistoryItem_color_space_get
    if _newclass:
        color_space = _swig_property(_gui.GuiImageHistoryItem_color_space_get, _gui.GuiImageHistoryItem_color_space_set)
    __swig_setmethods__["used_aov"] = _gui.GuiImageHistoryItem_used_aov_set
    __swig_getmethods__["used_aov"] = _gui.GuiImageHistoryItem_used_aov_get
    if _newclass:
        used_aov = _swig_property(_gui.GuiImageHistoryItem_used_aov_get, _gui.GuiImageHistoryItem_used_aov_set)
    __swig_setmethods__["automatic_removal"] = _gui.GuiImageHistoryItem_automatic_removal_set
    __swig_getmethods__["automatic_removal"] = _gui.GuiImageHistoryItem_automatic_removal_get
    if _newclass:
        automatic_removal = _swig_property(_gui.GuiImageHistoryItem_automatic_removal_get, _gui.GuiImageHistoryItem_automatic_removal_set)
    __swig_setmethods__["m_can_be_removed_after_autosave"] = _gui.GuiImageHistoryItem_m_can_be_removed_after_autosave_set
    __swig_getmethods__["m_can_be_removed_after_autosave"] = _gui.GuiImageHistoryItem_m_can_be_removed_after_autosave_get
    if _newclass:
        m_can_be_removed_after_autosave = _swig_property(_gui.GuiImageHistoryItem_m_can_be_removed_after_autosave_get, _gui.GuiImageHistoryItem_m_can_be_removed_after_autosave_set)

    def get_memory_size(self):
        return _gui.GuiImageHistoryItem_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiImageHistoryItem_class_info)
    else:
        class_info = _gui.GuiImageHistoryItem_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiImageHistoryItem____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiImageHistoryItem____class_destructor__

    def get_class_info(self):
        return _gui.GuiImageHistoryItem_get_class_info(self)

    def __init__(self):
        this = _gui.new_GuiImageHistoryItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiImageHistoryItem
    __del__ = lambda self: None
GuiImageHistoryItem_swigregister = _gui.GuiImageHistoryItem_swigregister
GuiImageHistoryItem_swigregister(GuiImageHistoryItem)
EVT_ID_IMAGE_HISTORY_LIST_CLEARED = cvar.EVT_ID_IMAGE_HISTORY_LIST_CLEARED
EVT_ID_IMAGE_HISTORY_IMAGE_CHANGED = cvar.EVT_ID_IMAGE_HISTORY_IMAGE_CHANGED
EVT_ID_IMAGE_HISTORY_NEW_IMAGE = cvar.EVT_ID_IMAGE_HISTORY_NEW_IMAGE
EVT_ID_IMAGE_HISTORY_IMAGE_REMOVED = cvar.EVT_ID_IMAGE_HISTORY_IMAGE_REMOVED
EVT_ID_IMAGE_HISTORY_IMAGE_ENABLED = cvar.EVT_ID_IMAGE_HISTORY_IMAGE_ENABLED

def GuiImageHistoryItem_class_info():
    return _gui.GuiImageHistoryItem_class_info()
GuiImageHistoryItem_class_info = _gui.GuiImageHistoryItem_class_info

def GuiImageHistoryItem____class_destructor__(instance, is_array):
    return _gui.GuiImageHistoryItem____class_destructor__(instance, is_array)
GuiImageHistoryItem____class_destructor__ = _gui.GuiImageHistoryItem____class_destructor__

class GuiImageHistory(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiImageHistory, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiImageHistory, name)
    __repr__ = _swig_repr

    def __init__(self, app):
        this = _gui.new_GuiImageHistory(app)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiImageHistory
    __del__ = lambda self: None

    def add_image(self, *args):
        return _gui.GuiImageHistory_add_image(self, *args)

    def remove_image(self, id):
        return _gui.GuiImageHistory_remove_image(self, id)

    def clear(self):
        return _gui.GuiImageHistory_clear(self)

    def is_suspended(self):
        return _gui.GuiImageHistory_is_suspended(self)

    def suspend(self, is_suspending):
        return _gui.GuiImageHistory_suspend(self, is_suspending)

    def is_item_name_already_exists(self, name):
        return _gui.GuiImageHistory_is_item_name_already_exists(self, name)

    def get_item_name(self, id):
        return _gui.GuiImageHistory_get_item_name(self, id)

    def set_item_name(self, id, name):
        return _gui.GuiImageHistory_set_item_name(self, id, name)

    def set_is_auto_removable(self, id, value):
        return _gui.GuiImageHistory_set_is_auto_removable(self, id, value)

    def get_item_comment(self, id):
        return _gui.GuiImageHistory_get_item_comment(self, id)

    def set_item_comment(self, id, comment):
        return _gui.GuiImageHistory_set_item_comment(self, id, comment)

    def get_item_count(self):
        return _gui.GuiImageHistory_get_item_count(self)

    def get_item_by_index(self, index):
        return _gui.GuiImageHistory_get_item_by_index(self, index)

    def get_last_image_index(self):
        return _gui.GuiImageHistory_get_last_image_index(self)

    def get_item(self, id):
        return _gui.GuiImageHistory_get_item(self, id)

    def get_image_handle(self, id):
        return _gui.GuiImageHistory_get_image_handle(self, id)

    def get_image_module(self, id):
        return _gui.GuiImageHistory_get_image_module(self, id)

    def set_item_image(self, id, image):
        return _gui.GuiImageHistory_set_item_image(self, id, image)

    def set_max_history_size(self, size):
        return _gui.GuiImageHistory_set_max_history_size(self, size)

    def get_max_history_size(self):
        return _gui.GuiImageHistory_get_max_history_size(self)

    def set_empty_on_new_project(self, value):
        return _gui.GuiImageHistory_set_empty_on_new_project(self, value)

    def get_empty_on_new_project(self):
        return _gui.GuiImageHistory_get_empty_on_new_project(self)

    def is_autosave(self):
        return _gui.GuiImageHistory_is_autosave(self)

    def set_autosave(self, enable):
        return _gui.GuiImageHistory_set_autosave(self, enable)

    def get_history_cache_path(self):
        return _gui.GuiImageHistory_get_history_cache_path(self)

    def set_history_cache_path(self, value):
        return _gui.GuiImageHistory_set_history_cache_path(self, value)

    def create_history_cache_folder(self):
        return _gui.GuiImageHistory_create_history_cache_folder(self)

    def get_history_cache_max_count(self):
        return _gui.GuiImageHistory_get_history_cache_max_count(self)

    def set_history_cache_max_count(self, value):
        return _gui.GuiImageHistory_set_history_cache_max_count(self, value)

    def get_history_cache_max_size(self):
        return _gui.GuiImageHistory_get_history_cache_max_size(self)

    def set_history_cache_max_size(self, value):
        return _gui.GuiImageHistory_set_history_cache_max_size(self, value)

    def add_image_to_save(self, fullpath):
        return _gui.GuiImageHistory_add_image_to_save(self, fullpath)

    def get_image_list_saved_count(self):
        return _gui.GuiImageHistory_get_image_list_saved_count(self)

    def set_snapshot_mode(self, mode):
        return _gui.GuiImageHistory_set_snapshot_mode(self, mode)

    def get_snapshot_mode(self):
        return _gui.GuiImageHistory_get_snapshot_mode(self)

    def set_empty_cache_on_exit(self, value):
        return _gui.GuiImageHistory_set_empty_cache_on_exit(self, value)

    def get_empty_cache_on_exit(self):
        return _gui.GuiImageHistory_get_empty_cache_on_exit(self)

    def set_empty_cache_on_new_project(self, value):
        return _gui.GuiImageHistory_set_empty_cache_on_new_project(self, value)

    def get_empty_cache_on_new_project(self):
        return _gui.GuiImageHistory_get_empty_cache_on_new_project(self)

    def is_enabled(self):
        return _gui.GuiImageHistory_is_enabled(self)

    def check_clear_history(self, force=False):
        return _gui.GuiImageHistory_check_clear_history(self, force)

    def check_clear_history_cache(self):
        return _gui.GuiImageHistory_check_clear_history_cache(self)

    def clear_history_cache(self, exit):
        return _gui.GuiImageHistory_clear_history_cache(self, exit)

    def on_remove_object_from_factory(self, factory, evt, data):
        return _gui.GuiImageHistory_on_remove_object_from_factory(self, factory, evt, data)

    def get_memory_size(self):
        return _gui.GuiImageHistory_get_memory_size(self)

    def save_images_changed(self):
        return _gui.GuiImageHistory_save_images_changed(self)

    def check_cache_folder_files(self):
        return _gui.GuiImageHistory_check_cache_folder_files(self)

    def remove_older_autosave_image_history(self, directory):
        return _gui.GuiImageHistory_remove_older_autosave_image_history(self, directory)
GuiImageHistory_swigregister = _gui.GuiImageHistory_swigregister
GuiImageHistory_swigregister(GuiImageHistory)

class GuiDc(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiDc, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiDc, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def draw_text(self, *args):
        return _gui.GuiDc_draw_text(self, *args)

    def draw_rect(self, *args):
        return _gui.GuiDc_draw_rect(self, *args)

    def draw_rectf(self, *args):
        return _gui.GuiDc_draw_rectf(self, *args)

    def get_color(self, *args):
        return _gui.GuiDc_get_color(self, *args)

    def get_font(self):
        return _gui.GuiDc_get_font(self)

    def get_text_size(self, *args):
        return _gui.GuiDc_get_text_size(self, *args)

    def get_widget(self):
        return _gui.GuiDc_get_widget(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiDc_class_info)
    else:
        class_info = _gui.GuiDc_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiDc____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiDc____class_destructor__

    def get_class_info(self):
        return _gui.GuiDc_get_class_info(self)
GuiDc_swigregister = _gui.GuiDc_swigregister
GuiDc_swigregister(GuiDc)

def GuiDc_class_info():
    return _gui.GuiDc_class_info()
GuiDc_class_info = _gui.GuiDc_class_info

def GuiDc____class_destructor__(instance, is_array):
    return _gui.GuiDc____class_destructor__(instance, is_array)
GuiDc____class_destructor__ = _gui.GuiDc____class_destructor__

class GuiWidgetDc(GuiDc):
    __swig_setmethods__ = {}
    for _s in [GuiDc]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiWidgetDc, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiDc]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiWidgetDc, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    LINE_STYLE_SOLID = _gui.GuiWidgetDc_LINE_STYLE_SOLID
    LINE_STYLE_DASH = _gui.GuiWidgetDc_LINE_STYLE_DASH
    LINE_STYLE_DOT = _gui.GuiWidgetDc_LINE_STYLE_DOT

    def draw_pixel(self, x, y, r, g, b):
        return _gui.GuiWidgetDc_draw_pixel(self, x, y, r, g, b)

    def draw_line(self, *args):
        return _gui.GuiWidgetDc_draw_line(self, *args)

    def draw_text_clampable(self, text, x, y, w, h, r, g, b, points=False, clamp_left=False, justify_right=False):
        return _gui.GuiWidgetDc_draw_text_clampable(self, text, x, y, w, h, r, g, b, points, clamp_left, justify_right)

    def draw_text(self, *args):
        return _gui.GuiWidgetDc_draw_text(self, *args)

    def draw_wrapped_text(self, text, x, y, w, h, r, g, b):
        return _gui.GuiWidgetDc_draw_wrapped_text(self, text, x, y, w, h, r, g, b)

    def draw_icon_text(self, *args):
        return _gui.GuiWidgetDc_draw_icon_text(self, *args)

    def draw_round_frame(self, *args):
        return _gui.GuiWidgetDc_draw_round_frame(self, *args)

    def draw_round_framef(self, *args):
        return _gui.GuiWidgetDc_draw_round_framef(self, *args)

    def draw_rect(self, x, y, w, h, r, g, b):
        return _gui.GuiWidgetDc_draw_rect(self, x, y, w, h, r, g, b)

    def draw_rectf(self, x, y, w, h, r, g, b):
        return _gui.GuiWidgetDc_draw_rectf(self, x, y, w, h, r, g, b)
    if _newclass:
        class_info = staticmethod(_gui.GuiWidgetDc_class_info)
    else:
        class_info = _gui.GuiWidgetDc_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiWidgetDc____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiWidgetDc____class_destructor__

    def get_class_info(self):
        return _gui.GuiWidgetDc_get_class_info(self)
GuiWidgetDc_swigregister = _gui.GuiWidgetDc_swigregister
GuiWidgetDc_swigregister(GuiWidgetDc)

def GuiWidgetDc_class_info():
    return _gui.GuiWidgetDc_class_info()
GuiWidgetDc_class_info = _gui.GuiWidgetDc_class_info

def GuiWidgetDc____class_destructor__(instance, is_array):
    return _gui.GuiWidgetDc____class_destructor__(instance, is_array)
GuiWidgetDc____class_destructor__ = _gui.GuiWidgetDc____class_destructor__

class GuiGlWidgetDc(GuiDc):
    __swig_setmethods__ = {}
    for _s in [GuiDc]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiGlWidgetDc, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiDc]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiGlWidgetDc, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def draw_text_with_rect(self, text, x, y, r, g, b, r_r, r_g, r_b, left_margin=0):
        return _gui.GuiGlWidgetDc_draw_text_with_rect(self, text, x, y, r, g, b, r_r, r_g, r_b, left_margin)

    def draw_text_with_outline(self, text, x, y, r, g, b, ro, go, bo):
        return _gui.GuiGlWidgetDc_draw_text_with_outline(self, text, x, y, r, g, b, ro, go, bo)

    def draw_text(self, *args):
        return _gui.GuiGlWidgetDc_draw_text(self, *args)

    def fast_draw_text_begin(self):
        return _gui.GuiGlWidgetDc_fast_draw_text_begin(self)

    def fast_draw_text(self, text):
        return _gui.GuiGlWidgetDc_fast_draw_text(self, text)

    def fast_draw_text_end(self):
        return _gui.GuiGlWidgetDc_fast_draw_text_end(self)

    def get_gl_widget(self):
        return _gui.GuiGlWidgetDc_get_gl_widget(self)

    def draw_rect(self, x, y, w, h, r, g, b):
        return _gui.GuiGlWidgetDc_draw_rect(self, x, y, w, h, r, g, b)

    def draw_rectf(self, x, y, w, h, r, g, b):
        return _gui.GuiGlWidgetDc_draw_rectf(self, x, y, w, h, r, g, b)
    if _newclass:
        class_info = staticmethod(_gui.GuiGlWidgetDc_class_info)
    else:
        class_info = _gui.GuiGlWidgetDc_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiGlWidgetDc____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiGlWidgetDc____class_destructor__

    def get_class_info(self):
        return _gui.GuiGlWidgetDc_get_class_info(self)
GuiGlWidgetDc_swigregister = _gui.GuiGlWidgetDc_swigregister
GuiGlWidgetDc_swigregister(GuiGlWidgetDc)

def GuiGlWidgetDc_class_info():
    return _gui.GuiGlWidgetDc_class_info()
GuiGlWidgetDc_class_info = _gui.GuiGlWidgetDc_class_info

def GuiGlWidgetDc____class_destructor__(instance, is_array):
    return _gui.GuiGlWidgetDc____class_destructor__(instance, is_array)
GuiGlWidgetDc____class_destructor__ = _gui.GuiGlWidgetDc____class_destructor__

class GuiWidget(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiWidget, name)
    __repr__ = _swig_repr
    if _newclass:
        open_file = staticmethod(_gui.GuiWidget_open_file)
    else:
        open_file = _gui.GuiWidget_open_file
    if _newclass:
        open_files = staticmethod(_gui.GuiWidget_open_files)
    else:
        open_files = _gui.GuiWidget_open_files
    if _newclass:
        open_folder = staticmethod(_gui.GuiWidget_open_folder)
    else:
        open_folder = _gui.GuiWidget_open_folder
    if _newclass:
        save_file = staticmethod(_gui.GuiWidget_save_file)
    else:
        save_file = _gui.GuiWidget_save_file
    if _newclass:
        pick_objects = staticmethod(_gui.GuiWidget_pick_objects)
    else:
        pick_objects = _gui.GuiWidget_pick_objects
    ROUNDNESS_NONE = _gui.GuiWidget_ROUNDNESS_NONE
    ROUNDNESS_TOP_LEFT = _gui.GuiWidget_ROUNDNESS_TOP_LEFT
    ROUNDNESS_TOP_RIGHT = _gui.GuiWidget_ROUNDNESS_TOP_RIGHT
    ROUNDNESS_BOTTOM_LEFT = _gui.GuiWidget_ROUNDNESS_BOTTOM_LEFT
    ROUNDNESS_BOTTOM_RIGHT = _gui.GuiWidget_ROUNDNESS_BOTTOM_RIGHT
    ROUNDNESS_LEFT = _gui.GuiWidget_ROUNDNESS_LEFT
    ROUNDNESS_RIGHT = _gui.GuiWidget_ROUNDNESS_RIGHT
    ROUNDNESS_TOP = _gui.GuiWidget_ROUNDNESS_TOP
    ROUNDNESS_BOTTOM = _gui.GuiWidget_ROUNDNESS_BOTTOM
    ROUNDNESS_ALL = _gui.GuiWidget_ROUNDNESS_ALL
    if _newclass:
        get_roundness_name = staticmethod(_gui.GuiWidget_get_roundness_name)
    else:
        get_roundness_name = _gui.GuiWidget_get_roundness_name
    CONSTRAINT_LEFT = _gui.GuiWidget_CONSTRAINT_LEFT
    CONSTRAINT_RIGHT = _gui.GuiWidget_CONSTRAINT_RIGHT
    CONSTRAINT_TOP = _gui.GuiWidget_CONSTRAINT_TOP
    CONSTRAINT_BOTTOM = _gui.GuiWidget_CONSTRAINT_BOTTOM
    CONSTRAINT_COUNT = _gui.GuiWidget_CONSTRAINT_COUNT
    if _newclass:
        get_constraint_name = staticmethod(_gui.GuiWidget_get_constraint_name)
    else:
        get_constraint_name = _gui.GuiWidget_get_constraint_name
    JUSTIFY_LEFT = _gui.GuiWidget_JUSTIFY_LEFT
    JUSTIFY_RIGHT = _gui.GuiWidget_JUSTIFY_RIGHT
    JUSTIFY_CENTER = _gui.GuiWidget_JUSTIFY_CENTER
    JUSTIFY_COUNT = _gui.GuiWidget_JUSTIFY_COUNT
    if _newclass:
        get_justify_name = staticmethod(_gui.GuiWidget_get_justify_name)
    else:
        get_justify_name = _gui.GuiWidget_get_justify_name
    ICON_POSITION_LEFT = _gui.GuiWidget_ICON_POSITION_LEFT
    ICON_POSITION_RIGHT = _gui.GuiWidget_ICON_POSITION_RIGHT
    ICON_POSITION_COUNT = _gui.GuiWidget_ICON_POSITION_COUNT
    if _newclass:
        get_icon_position_name = staticmethod(_gui.GuiWidget_get_icon_position_name)
    else:
        get_icon_position_name = _gui.GuiWidget_get_icon_position_name

    def __init__(self, *args):
        if self.__class__ == GuiWidget:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiWidget(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def load_settings(self, settings):
        return _gui.GuiWidget_load_settings(self, settings)

    def save_settings(self, settings):
        return _gui.GuiWidget_save_settings(self, settings)

    def is_shown(self):
        return _gui.GuiWidget_is_shown(self)

    def is_hidden(self):
        return _gui.GuiWidget_is_hidden(self)

    def is_recursive_destroyed(self):
        return _gui.GuiWidget_is_recursive_destroyed(self)

    def is_destroyed(self):
        return _gui.GuiWidget_is_destroyed(self)

    def show(self):
        return _gui.GuiWidget_show(self)

    def hide(self):
        return _gui.GuiWidget_hide(self)

    def get_parent(self):
        return _gui.GuiWidget_get_parent(self)

    def get_root_window(self):
        return _gui.GuiWidget_get_root_window(self)

    def set_parent(self, parent):
        return _gui.GuiWidget_set_parent(self, parent)

    def get_window(self):
        return _gui.GuiWidget_get_window(self)

    def get_width(self):
        return _gui.GuiWidget_get_width(self)

    def get_height(self):
        return _gui.GuiWidget_get_height(self)

    def get_x(self):
        return _gui.GuiWidget_get_x(self)

    def get_y(self):
        return _gui.GuiWidget_get_y(self)

    def set_width(self, width):
        return _gui.GuiWidget_set_width(self, width)

    def set_height(self, height):
        return _gui.GuiWidget_set_height(self, height)

    def get_size(self):
        return _gui.GuiWidget_get_size(self)

    def set_size(self, x, y, w, h):
        return _gui.GuiWidget_set_size(self, x, y, w, h)

    def set_position(self, x, y, origin=True):
        return _gui.GuiWidget_set_position(self, x, y, origin)

    def get_position(self):
        return _gui.GuiWidget_get_position(self)

    def set_mouse_cursor(self, cursor):
        return _gui.GuiWidget_set_mouse_cursor(self, cursor)

    def get_mouse_cursor(self):
        return _gui.GuiWidget_get_mouse_cursor(self)

    def set_font(self, font):
        return _gui.GuiWidget_set_font(self, font)

    def get_font(self):
        return _gui.GuiWidget_get_font(self)

    def get_tooltip(self):
        return _gui.GuiWidget_get_tooltip(self)

    def set_tooltip(self, tooltip):
        return _gui.GuiWidget_set_tooltip(self, tooltip)

    def force_tooltip(self):
        return _gui.GuiWidget_force_tooltip(self)

    def is_enabled(self):
        return _gui.GuiWidget_is_enabled(self)

    def set_enable(self, enable):
        return _gui.GuiWidget_set_enable(self, enable)

    def enable(self):
        return _gui.GuiWidget_enable(self)

    def disable(self):
        return _gui.GuiWidget_disable(self)

    def get_color_scheme(self):
        return _gui.GuiWidget_get_color_scheme(self)

    def set_color(self, *args):
        return _gui.GuiWidget_set_color(self, *args)

    def get_color(self, *args):
        return _gui.GuiWidget_get_color(self, *args)
    if _newclass:
        get_focused_widget = staticmethod(_gui.GuiWidget_get_focused_widget)
    else:
        get_focused_widget = _gui.GuiWidget_get_focused_widget
    if _newclass:
        get_last_focused_widget = staticmethod(_gui.GuiWidget_get_last_focused_widget)
    else:
        get_last_focused_widget = _gui.GuiWidget_get_last_focused_widget
    if _newclass:
        get_last_event_widget = staticmethod(_gui.GuiWidget_get_last_event_widget)
    else:
        get_last_event_widget = _gui.GuiWidget_get_last_event_widget

    def is_entered(self):
        return _gui.GuiWidget_is_entered(self)

    def set_focus(self):
        return _gui.GuiWidget_set_focus(self)

    def children_has_focus(self, widget):
        return _gui.GuiWidget_children_has_focus(self, widget)

    def has_focus(self):
        return _gui.GuiWidget_has_focus(self)

    def lose_focus(self):
        return _gui.GuiWidget_lose_focus(self)

    def is_focus_receiver(self):
        return _gui.GuiWidget_is_focus_receiver(self)

    def set_focus_receiver(self, receiver):
        return _gui.GuiWidget_set_focus_receiver(self, receiver)

    def is_key_receiver(self):
        return _gui.GuiWidget_is_key_receiver(self)

    def set_key_receiver(self, receiver):
        return _gui.GuiWidget_set_key_receiver(self, receiver)

    def redraw(self):
        return _gui.GuiWidget_redraw(self)

    def draw(self, dc):
        return _gui.GuiWidget_draw(self, dc)

    def get_draw_ctx(self):
        return _gui.GuiWidget_get_draw_ctx(self)

    def widget_update(self):
        return _gui.GuiWidget_widget_update(self)

    def set_is_dirty(self, value=True):
        return _gui.GuiWidget_set_is_dirty(self, value)

    def get_is_dirty(self):
        return _gui.GuiWidget_get_is_dirty(self)

    def process_event(self, event_id):
        return _gui.GuiWidget_process_event(self, event_id)

    def compute_children_bbox(self, lo, hi):
        return _gui.GuiWidget_compute_children_bbox(self, lo, hi)

    def get_children(self):
        return _gui.GuiWidget_get_children(self)

    def get_application(self):
        return _gui.GuiWidget_get_application(self)

    def register_action(self, *args):
        return _gui.GuiWidget_register_action(self, *args)

    def get_actions(self):
        return _gui.GuiWidget_get_actions(self)

    def get_action(self, name):
        return _gui.GuiWidget_get_action(self, name)

    def remove_action(self, action, delete_it):
        return _gui.GuiWidget_remove_action(self, action, delete_it)

    def remove_all_actions(self):
        return _gui.GuiWidget_remove_all_actions(self)

    def get_top_offset(self):
        return _gui.GuiWidget_get_top_offset(self)

    def get_bottom_offset(self):
        return _gui.GuiWidget_get_bottom_offset(self)

    def get_left_offset(self):
        return _gui.GuiWidget_get_left_offset(self)

    def get_right_offset(self):
        return _gui.GuiWidget_get_right_offset(self)

    def get_top_constraint(self):
        return _gui.GuiWidget_get_top_constraint(self)

    def get_bottom_constraint(self):
        return _gui.GuiWidget_get_bottom_constraint(self)

    def get_left_constraint(self):
        return _gui.GuiWidget_get_left_constraint(self)

    def get_right_constraint(self):
        return _gui.GuiWidget_get_right_constraint(self)

    def set_constraints(self, left, top, right, bottom):
        return _gui.GuiWidget_set_constraints(self, left, top, right, bottom)

    def set_active_constraints(self, active):
        return _gui.GuiWidget_set_active_constraints(self, active)

    def is_active_constraints(self):
        return _gui.GuiWidget_is_active_constraints(self)

    def set_recursive_constraints(self, recursive):
        return _gui.GuiWidget_set_recursive_constraints(self, recursive)

    def is_recursive_constraints(self):
        return _gui.GuiWidget_is_recursive_constraints(self)

    def resize(self, x, y, w, h):
        return _gui.GuiWidget_resize(self, x, y, w, h)

    def disable_clipping(self):
        return _gui.GuiWidget_disable_clipping(self)

    def enable_clipping(self):
        return _gui.GuiWidget_enable_clipping(self)

    def get_clip_region(self, x, y, w, h):
        return _gui.GuiWidget_get_clip_region(self, x, y, w, h)

    def set_clip_region(self, x, y, w, h):
        return _gui.GuiWidget_set_clip_region(self, x, y, w, h)

    def is_clipping_enabled(self):
        return _gui.GuiWidget_is_clipping_enabled(self)

    def bring_to_front(self):
        return _gui.GuiWidget_bring_to_front(self)

    def enable_tab_navigation(self, enable):
        return _gui.GuiWidget_enable_tab_navigation(self, enable)

    def is_tab_navigation_enabled(self):
        return _gui.GuiWidget_is_tab_navigation_enabled(self)

    def is_visible(self):
        return _gui.GuiWidget_is_visible(self)
    if _newclass:
        intersect_box = staticmethod(_gui.GuiWidget_intersect_box)
    else:
        intersect_box = _gui.GuiWidget_intersect_box

    def update_color_scheme(self, scheme):
        return _gui.GuiWidget_update_color_scheme(self, scheme)

    def paste(self, clipboard):
        return _gui.GuiWidget_paste(self, clipboard)

    def initiate_dnd_event(self, *args):
        return _gui.GuiWidget_initiate_dnd_event(self, *args)
    if _newclass:
        on_dnd_timeout = staticmethod(_gui.GuiWidget_on_dnd_timeout)
    else:
        on_dnd_timeout = _gui.GuiWidget_on_dnd_timeout
    if _newclass:
        get_dnd_event_data = staticmethod(_gui.GuiWidget_get_dnd_event_data)
    else:
        get_dnd_event_data = _gui.GuiWidget_get_dnd_event_data
    if _newclass:
        get_dnd_widget = staticmethod(_gui.GuiWidget_get_dnd_widget)
    else:
        get_dnd_widget = _gui.GuiWidget_get_dnd_widget
    if _newclass:
        get_dnd_accepting_widget = staticmethod(_gui.GuiWidget_get_dnd_accepting_widget)
    else:
        get_dnd_accepting_widget = _gui.GuiWidget_get_dnd_accepting_widget

    def get_next_focus_widget(self):
        return _gui.GuiWidget_get_next_focus_widget(self)

    def get_previous_focus_widget(self):
        return _gui.GuiWidget_get_previous_focus_widget(self)

    def give_focus_to_next_widget(self):
        return _gui.GuiWidget_give_focus_to_next_widget(self)

    def give_focus_to_previous_widget(self):
        return _gui.GuiWidget_give_focus_to_previous_widget(self)

    def get_parent_effective_clip_region(self, x, y, w, h):
        return _gui.GuiWidget_get_parent_effective_clip_region(self, x, y, w, h)

    def is_widget_visible(self, child):
        return _gui.GuiWidget_is_widget_visible(self, child)

    def is_show_children(self):
        return _gui.GuiWidget_is_show_children(self)

    def set_show_children(self, show_children):
        return _gui.GuiWidget_set_show_children(self, show_children)

    def get_memory_size(self):
        return _gui.GuiWidget_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiWidget_class_info)
    else:
        class_info = _gui.GuiWidget_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiWidget____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiWidget____class_destructor__

    def get_class_info(self):
        return _gui.GuiWidget_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiWidget___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiWidget___collect__(self)

    def __uncollect__(self):
        return _gui.GuiWidget___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiWidget(self)
        return weakref_proxy(self)
GuiWidget_swigregister = _gui.GuiWidget_swigregister
GuiWidget_swigregister(GuiWidget)
EVT_ID_MOUSE_DOWN = cvar.EVT_ID_MOUSE_DOWN
EVT_ID_MOUSE_UP = cvar.EVT_ID_MOUSE_UP
EVT_ID_MOUSE_DRAG = cvar.EVT_ID_MOUSE_DRAG
EVT_ID_MOUSE_DRAG_REAL_TIME = cvar.EVT_ID_MOUSE_DRAG_REAL_TIME
EVT_ID_MOUSE_MOVE = cvar.EVT_ID_MOUSE_MOVE
EVT_ID_MOUSE_WHEEL = cvar.EVT_ID_MOUSE_WHEEL
EVT_ID_MOUSE_ENTER = cvar.EVT_ID_MOUSE_ENTER
EVT_ID_MOUSE_LEAVE = cvar.EVT_ID_MOUSE_LEAVE
EVT_ID_KEY_SHORTCUT = cvar.EVT_ID_KEY_SHORTCUT
EVT_ID_KEY_DOWN = cvar.EVT_ID_KEY_DOWN
EVT_ID_KEY_UP = cvar.EVT_ID_KEY_UP
EVT_ID_WIDGET_ENABLED = cvar.EVT_ID_WIDGET_ENABLED
EVT_ID_WIDGET_DISABLED = cvar.EVT_ID_WIDGET_DISABLED
EVT_ID_WIDGET_SHOW = cvar.EVT_ID_WIDGET_SHOW
EVT_ID_WIDGET_HIDE = cvar.EVT_ID_WIDGET_HIDE
EVT_ID_WIDGET_FOCUS_IN = cvar.EVT_ID_WIDGET_FOCUS_IN
EVT_ID_WIDGET_FOCUS_OUT = cvar.EVT_ID_WIDGET_FOCUS_OUT
EVT_ID_WIDGET_FOCUS_LOOSE = cvar.EVT_ID_WIDGET_FOCUS_LOOSE
EVT_ID_PASTE = cvar.EVT_ID_PASTE
EVT_ID_SELECTION_CLEAR = cvar.EVT_ID_SELECTION_CLEAR
EVT_ID_DND_ENTER = cvar.EVT_ID_DND_ENTER
EVT_ID_DND_LEAVE = cvar.EVT_ID_DND_LEAVE
EVT_ID_DND_DRAG = cvar.EVT_ID_DND_DRAG
EVT_ID_DND_DRAG_REAL_TIME = cvar.EVT_ID_DND_DRAG_REAL_TIME
EVT_ID_DND_RELEASE = cvar.EVT_ID_DND_RELEASE
EVT_ID_UNKNOWN = cvar.EVT_ID_UNKNOWN

def GuiWidget_open_file(*args):
    return _gui.GuiWidget_open_file(*args)
GuiWidget_open_file = _gui.GuiWidget_open_file

def GuiWidget_open_files(*args):
    return _gui.GuiWidget_open_files(*args)
GuiWidget_open_files = _gui.GuiWidget_open_files

def GuiWidget_open_folder(*args):
    return _gui.GuiWidget_open_folder(*args)
GuiWidget_open_folder = _gui.GuiWidget_open_folder

def GuiWidget_save_file(*args):
    return _gui.GuiWidget_save_file(*args)
GuiWidget_save_file = _gui.GuiWidget_save_file

def GuiWidget_pick_objects(*args):
    return _gui.GuiWidget_pick_objects(*args)
GuiWidget_pick_objects = _gui.GuiWidget_pick_objects

def GuiWidget_get_roundness_name(roundness):
    return _gui.GuiWidget_get_roundness_name(roundness)
GuiWidget_get_roundness_name = _gui.GuiWidget_get_roundness_name

def GuiWidget_get_constraint_name(constraint):
    return _gui.GuiWidget_get_constraint_name(constraint)
GuiWidget_get_constraint_name = _gui.GuiWidget_get_constraint_name

def GuiWidget_get_justify_name(justification):
    return _gui.GuiWidget_get_justify_name(justification)
GuiWidget_get_justify_name = _gui.GuiWidget_get_justify_name

def GuiWidget_get_icon_position_name(position):
    return _gui.GuiWidget_get_icon_position_name(position)
GuiWidget_get_icon_position_name = _gui.GuiWidget_get_icon_position_name

def GuiWidget_get_focused_widget():
    return _gui.GuiWidget_get_focused_widget()
GuiWidget_get_focused_widget = _gui.GuiWidget_get_focused_widget

def GuiWidget_get_last_focused_widget():
    return _gui.GuiWidget_get_last_focused_widget()
GuiWidget_get_last_focused_widget = _gui.GuiWidget_get_last_focused_widget

def GuiWidget_get_last_event_widget():
    return _gui.GuiWidget_get_last_event_widget()
GuiWidget_get_last_event_widget = _gui.GuiWidget_get_last_event_widget

def GuiWidget_intersect_box(*args):
    return _gui.GuiWidget_intersect_box(*args)
GuiWidget_intersect_box = _gui.GuiWidget_intersect_box

def GuiWidget_on_dnd_timeout(data):
    return _gui.GuiWidget_on_dnd_timeout(data)
GuiWidget_on_dnd_timeout = _gui.GuiWidget_on_dnd_timeout

def GuiWidget_get_dnd_event_data():
    return _gui.GuiWidget_get_dnd_event_data()
GuiWidget_get_dnd_event_data = _gui.GuiWidget_get_dnd_event_data

def GuiWidget_get_dnd_widget():
    return _gui.GuiWidget_get_dnd_widget()
GuiWidget_get_dnd_widget = _gui.GuiWidget_get_dnd_widget

def GuiWidget_get_dnd_accepting_widget():
    return _gui.GuiWidget_get_dnd_accepting_widget()
GuiWidget_get_dnd_accepting_widget = _gui.GuiWidget_get_dnd_accepting_widget

def GuiWidget_class_info():
    return _gui.GuiWidget_class_info()
GuiWidget_class_info = _gui.GuiWidget_class_info

def GuiWidget____class_destructor__(instance, is_array):
    return _gui.GuiWidget____class_destructor__(instance, is_array)
GuiWidget____class_destructor__ = _gui.GuiWidget____class_destructor__

class GuiCustomUIWidget(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiCustomUIWidget, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiCustomUIWidget, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clear_data(self):
        return _gui.GuiCustomUIWidget_clear_data(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiCustomUIWidget_class_info)
    else:
        class_info = _gui.GuiCustomUIWidget_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiCustomUIWidget____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiCustomUIWidget____class_destructor__

    def get_class_info(self):
        return _gui.GuiCustomUIWidget_get_class_info(self)
    __swig_destroy__ = _gui.delete_GuiCustomUIWidget
    __del__ = lambda self: None
GuiCustomUIWidget_swigregister = _gui.GuiCustomUIWidget_swigregister
GuiCustomUIWidget_swigregister(GuiCustomUIWidget)

def GuiCustomUIWidget_class_info():
    return _gui.GuiCustomUIWidget_class_info()
GuiCustomUIWidget_class_info = _gui.GuiCustomUIWidget_class_info

def GuiCustomUIWidget____class_destructor__(instance, is_array):
    return _gui.GuiCustomUIWidget____class_destructor__(instance, is_array)
GuiCustomUIWidget____class_destructor__ = _gui.GuiCustomUIWidget____class_destructor__

class GuiWidgetBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiWidgetBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiWidgetBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiWidgetBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiWidgetBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiWidgetBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiWidgetBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiWidgetBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiWidgetBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiWidgetBasicArray_front(self)

    def back(self):
        return _gui.GuiWidgetBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiWidgetBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiWidgetBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiWidgetBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiWidgetBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiWidgetBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiWidgetBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiWidgetBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiWidgetBasicArray_class_info)
    else:
        class_info = _gui.GuiWidgetBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiWidgetBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiWidgetBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiWidgetBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiWidgetBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiWidgetBasicArray_swigregister = _gui.GuiWidgetBasicArray_swigregister
GuiWidgetBasicArray_swigregister(GuiWidgetBasicArray)

def GuiWidgetBasicArray_class_info():
    return _gui.GuiWidgetBasicArray_class_info()
GuiWidgetBasicArray_class_info = _gui.GuiWidgetBasicArray_class_info

def GuiWidgetBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiWidgetBasicArray____class_destructor__(instance, is_array)
GuiWidgetBasicArray____class_destructor__ = _gui.GuiWidgetBasicArray____class_destructor__

class GuiWidgetArray(GuiWidgetBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiWidgetBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiWidgetArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidgetBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiWidgetArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiWidgetArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiWidgetArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiWidgetArray_append(self, *args)

    def get_count(self):
        return _gui.GuiWidgetArray_get_count(self)

    def remove_all(self):
        return _gui.GuiWidgetArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiWidgetArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiWidgetArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiWidgetArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiWidgetArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiWidgetArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiWidgetArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiWidgetArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiWidgetArray_class_info)
    else:
        class_info = _gui.GuiWidgetArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiWidgetArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiWidgetArray____class_destructor__
GuiWidgetArray_swigregister = _gui.GuiWidgetArray_swigregister
GuiWidgetArray_swigregister(GuiWidgetArray)

def GuiWidgetArray_class_info():
    return _gui.GuiWidgetArray_class_info()
GuiWidgetArray_class_info = _gui.GuiWidgetArray_class_info

def GuiWidgetArray____class_destructor__(instance, is_array):
    return _gui.GuiWidgetArray____class_destructor__(instance, is_array)
GuiWidgetArray____class_destructor__ = _gui.GuiWidgetArray____class_destructor__

class GuiWidgetVector(GuiWidgetBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiWidgetBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiWidgetVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidgetBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiWidgetVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiWidgetVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiWidgetVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiWidgetVector_append(self, *args)

    def add(self, element):
        return _gui.GuiWidgetVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiWidgetVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiWidgetVector_remove_last(self)

    def empty(self):
        return _gui.GuiWidgetVector_empty(self)

    def remove_all(self):
        return _gui.GuiWidgetVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiWidgetVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiWidgetVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiWidgetVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiWidgetVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiWidgetVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiWidgetVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiWidgetVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiWidgetVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiWidgetVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiWidgetVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiWidgetVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiWidgetVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiWidgetVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiWidgetVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiWidgetVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiWidgetVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiWidgetVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiWidgetVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiWidgetVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiWidgetVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiWidgetVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiWidgetVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiWidgetVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiWidgetVector_class_info)
    else:
        class_info = _gui.GuiWidgetVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiWidgetVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiWidgetVector____class_destructor__
GuiWidgetVector_swigregister = _gui.GuiWidgetVector_swigregister
GuiWidgetVector_swigregister(GuiWidgetVector)

def GuiWidgetVector_class_info():
    return _gui.GuiWidgetVector_class_info()
GuiWidgetVector_class_info = _gui.GuiWidgetVector_class_info

def GuiWidgetVector____class_destructor__(instance, is_array):
    return _gui.GuiWidgetVector____class_destructor__(instance, is_array)
GuiWidgetVector____class_destructor__ = _gui.GuiWidgetVector____class_destructor__

class GuiWidgetSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiWidgetSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiWidgetSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiWidgetSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiWidgetSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiWidgetSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiWidgetSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiWidgetSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiWidgetSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiWidgetSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiWidgetSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiWidgetSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiWidgetSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiWidgetSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiWidgetSet_to_array(self)

    def add(self, *args):
        return _gui.GuiWidgetSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiWidgetSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiWidgetSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiWidgetSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiWidgetSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiWidgetSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiWidgetSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiWidgetSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiWidgetSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiWidgetSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiWidgetSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiWidgetSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiWidgetSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiWidgetSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiWidgetSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiWidgetSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiWidgetSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiWidgetSet
    __del__ = lambda self: None
GuiWidgetSet_swigregister = _gui.GuiWidgetSet_swigregister
GuiWidgetSet_swigregister(GuiWidgetSet)

def GuiWidgetSet_get_linear_search_threshold():
    return _gui.GuiWidgetSet_get_linear_search_threshold()
GuiWidgetSet_get_linear_search_threshold = _gui.GuiWidgetSet_get_linear_search_threshold

class GuiWindow(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiWindow, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == GuiWindow:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiWindow(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def is_border_drawn(self):
        return _gui.GuiWindow_is_border_drawn(self)

    def set_border_drawn(self, draw_border):
        return _gui.GuiWindow_set_border_drawn(self, draw_border)

    def is_resizable(self):
        return _gui.GuiWindow_is_resizable(self)

    def set_resizable(self, resizable):
        return _gui.GuiWindow_set_resizable(self, resizable)

    def set_parent(self, parent):
        return _gui.GuiWindow_set_parent(self, parent)

    def get_parent(self):
        return _gui.GuiWindow_get_parent(self)

    def is_shown(self):
        return _gui.GuiWindow_is_shown(self)

    def is_minimized(self):
        return _gui.GuiWindow_is_minimized(self)

    def show_modal(self):
        return _gui.GuiWindow_show_modal(self)

    def show(self):
        return _gui.GuiWindow_show(self)

    def hide(self):
        return _gui.GuiWindow_hide(self)

    def get_color_scheme(self):
        return _gui.GuiWindow_get_color_scheme(self)

    def resize(self, x, y, w, h):
        return _gui.GuiWindow_resize(self, x, y, w, h)

    def get_size(self):
        return _gui.GuiWindow_get_size(self)

    def get_position(self):
        return _gui.GuiWindow_get_position(self)

    def draw(self, dc):
        return _gui.GuiWindow_draw(self, dc)

    def get_title(self):
        return _gui.GuiWindow_get_title(self)

    def set_title(self, title):
        return _gui.GuiWindow_set_title(self, title)

    def get_subwindows(self):
        return _gui.GuiWindow_get_subwindows(self)

    def is_visible(self):
        return _gui.GuiWindow_is_visible(self)

    def is_modal(self):
        return _gui.GuiWindow_is_modal(self)

    def update_color_scheme(self, scheme):
        return _gui.GuiWindow_update_color_scheme(self, scheme)

    def maximize(self):
        return _gui.GuiWindow_maximize(self)

    def minimize(self):
        return _gui.GuiWindow_minimize(self)

    def is_maximized(self):
        return _gui.GuiWindow_is_maximized(self)

    def popup(self, widget, destroy_on_hide=True):
        return _gui.GuiWindow_popup(self, widget, destroy_on_hide)

    def is_enabled(self):
        return _gui.GuiWindow_is_enabled(self)

    def get_memory_size(self):
        return _gui.GuiWindow_get_memory_size(self)

    def add_default_background(self):
        return _gui.GuiWindow_add_default_background(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiWindow_class_info)
    else:
        class_info = _gui.GuiWindow_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiWindow____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiWindow____class_destructor__

    def get_class_info(self):
        return _gui.GuiWindow_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiWindow___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiWindow___collect__(self)

    def __uncollect__(self):
        return _gui.GuiWindow___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiWindow(self)
        return weakref_proxy(self)
GuiWindow_swigregister = _gui.GuiWindow_swigregister
GuiWindow_swigregister(GuiWindow)

def GuiWindow_class_info():
    return _gui.GuiWindow_class_info()
GuiWindow_class_info = _gui.GuiWindow_class_info

def GuiWindow____class_destructor__(instance, is_array):
    return _gui.GuiWindow____class_destructor__(instance, is_array)
GuiWindow____class_destructor__ = _gui.GuiWindow____class_destructor__

class GuiWindowBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiWindowBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiWindowBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiWindowBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiWindowBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiWindowBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiWindowBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiWindowBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiWindowBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiWindowBasicArray_front(self)

    def back(self):
        return _gui.GuiWindowBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiWindowBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiWindowBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiWindowBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiWindowBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiWindowBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiWindowBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiWindowBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiWindowBasicArray_class_info)
    else:
        class_info = _gui.GuiWindowBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiWindowBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiWindowBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiWindowBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiWindowBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiWindowBasicArray_swigregister = _gui.GuiWindowBasicArray_swigregister
GuiWindowBasicArray_swigregister(GuiWindowBasicArray)

def GuiWindowBasicArray_class_info():
    return _gui.GuiWindowBasicArray_class_info()
GuiWindowBasicArray_class_info = _gui.GuiWindowBasicArray_class_info

def GuiWindowBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiWindowBasicArray____class_destructor__(instance, is_array)
GuiWindowBasicArray____class_destructor__ = _gui.GuiWindowBasicArray____class_destructor__

class GuiWindowArray(GuiWindowBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiWindowBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiWindowArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWindowBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiWindowArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiWindowArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiWindowArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiWindowArray_append(self, *args)

    def get_count(self):
        return _gui.GuiWindowArray_get_count(self)

    def remove_all(self):
        return _gui.GuiWindowArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiWindowArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiWindowArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiWindowArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiWindowArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiWindowArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiWindowArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiWindowArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiWindowArray_class_info)
    else:
        class_info = _gui.GuiWindowArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiWindowArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiWindowArray____class_destructor__
GuiWindowArray_swigregister = _gui.GuiWindowArray_swigregister
GuiWindowArray_swigregister(GuiWindowArray)

def GuiWindowArray_class_info():
    return _gui.GuiWindowArray_class_info()
GuiWindowArray_class_info = _gui.GuiWindowArray_class_info

def GuiWindowArray____class_destructor__(instance, is_array):
    return _gui.GuiWindowArray____class_destructor__(instance, is_array)
GuiWindowArray____class_destructor__ = _gui.GuiWindowArray____class_destructor__

class GuiWindowVector(GuiWindowBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiWindowBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiWindowVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWindowBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiWindowVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiWindowVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiWindowVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiWindowVector_append(self, *args)

    def add(self, element):
        return _gui.GuiWindowVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiWindowVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiWindowVector_remove_last(self)

    def empty(self):
        return _gui.GuiWindowVector_empty(self)

    def remove_all(self):
        return _gui.GuiWindowVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiWindowVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiWindowVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiWindowVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiWindowVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiWindowVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiWindowVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiWindowVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiWindowVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiWindowVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiWindowVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiWindowVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiWindowVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiWindowVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiWindowVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiWindowVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiWindowVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiWindowVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiWindowVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiWindowVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiWindowVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiWindowVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiWindowVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiWindowVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiWindowVector_class_info)
    else:
        class_info = _gui.GuiWindowVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiWindowVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiWindowVector____class_destructor__
GuiWindowVector_swigregister = _gui.GuiWindowVector_swigregister
GuiWindowVector_swigregister(GuiWindowVector)

def GuiWindowVector_class_info():
    return _gui.GuiWindowVector_class_info()
GuiWindowVector_class_info = _gui.GuiWindowVector_class_info

def GuiWindowVector____class_destructor__(instance, is_array):
    return _gui.GuiWindowVector____class_destructor__(instance, is_array)
GuiWindowVector____class_destructor__ = _gui.GuiWindowVector____class_destructor__

class GuiWindowSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiWindowSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiWindowSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiWindowSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiWindowSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiWindowSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiWindowSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiWindowSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiWindowSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiWindowSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiWindowSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiWindowSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiWindowSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiWindowSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiWindowSet_to_array(self)

    def add(self, *args):
        return _gui.GuiWindowSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiWindowSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiWindowSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiWindowSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiWindowSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiWindowSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiWindowSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiWindowSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiWindowSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiWindowSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiWindowSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiWindowSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiWindowSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiWindowSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiWindowSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiWindowSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiWindowSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiWindowSet
    __del__ = lambda self: None
GuiWindowSet_swigregister = _gui.GuiWindowSet_swigregister
GuiWindowSet_swigregister(GuiWindowSet)

def GuiWindowSet_get_linear_search_threshold():
    return _gui.GuiWindowSet_get_linear_search_threshold()
GuiWindowSet_get_linear_search_threshold = _gui.GuiWindowSet_get_linear_search_threshold

class GuiFloatingWindow(GuiWindow):
    __swig_setmethods__ = {}
    for _s in [GuiWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiFloatingWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiFloatingWindow, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == GuiFloatingWindow:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiFloatingWindow(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def get_viewport_widget(self, index):
        return _gui.GuiFloatingWindow_get_viewport_widget(self, index)

    def get_viewport(self):
        return _gui.GuiFloatingWindow_get_viewport(self)

    def get_content_widget(self, index):
        return _gui.GuiFloatingWindow_get_content_widget(self, index)

    def get_module_widget(self, index):
        return _gui.GuiFloatingWindow_get_module_widget(self, index)

    def get_widget_count(self):
        return _gui.GuiFloatingWindow_get_widget_count(self)

    def process_event(self, evt):
        return _gui.GuiFloatingWindow_process_event(self, evt)

    def get_layout(self, group, get_settings):
        return _gui.GuiFloatingWindow_get_layout(self, group, get_settings)

    def set_layout(self, entry):
        return _gui.GuiFloatingWindow_set_layout(self, entry)
    __swig_setmethods__["s_do_not_save_in_layout"] = _gui.GuiFloatingWindow_s_do_not_save_in_layout_set
    __swig_getmethods__["s_do_not_save_in_layout"] = _gui.GuiFloatingWindow_s_do_not_save_in_layout_get
    if _newclass:
        s_do_not_save_in_layout = _swig_property(_gui.GuiFloatingWindow_s_do_not_save_in_layout_get, _gui.GuiFloatingWindow_s_do_not_save_in_layout_set)
    __swig_setmethods__["s_do_not_allow_disable"] = _gui.GuiFloatingWindow_s_do_not_allow_disable_set
    __swig_getmethods__["s_do_not_allow_disable"] = _gui.GuiFloatingWindow_s_do_not_allow_disable_get
    if _newclass:
        s_do_not_allow_disable = _swig_property(_gui.GuiFloatingWindow_s_do_not_allow_disable_get, _gui.GuiFloatingWindow_s_do_not_allow_disable_set)
    __swig_setmethods__["s_has_custom_data"] = _gui.GuiFloatingWindow_s_has_custom_data_set
    __swig_getmethods__["s_has_custom_data"] = _gui.GuiFloatingWindow_s_has_custom_data_get
    if _newclass:
        s_has_custom_data = _swig_property(_gui.GuiFloatingWindow_s_has_custom_data_get, _gui.GuiFloatingWindow_s_has_custom_data_set)

    def restore_view(self):
        return _gui.GuiFloatingWindow_restore_view(self)

    def maximize_view(self, view):
        return _gui.GuiFloatingWindow_maximize_view(self, view)

    def is_enabled(self):
        return _gui.GuiFloatingWindow_is_enabled(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiFloatingWindow_class_info)
    else:
        class_info = _gui.GuiFloatingWindow_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiFloatingWindow____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiFloatingWindow____class_destructor__

    def get_class_info(self):
        return _gui.GuiFloatingWindow_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiFloatingWindow___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiFloatingWindow___collect__(self)

    def __uncollect__(self):
        return _gui.GuiFloatingWindow___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiFloatingWindow(self)
        return weakref_proxy(self)
GuiFloatingWindow_swigregister = _gui.GuiFloatingWindow_swigregister
GuiFloatingWindow_swigregister(GuiFloatingWindow)

def GuiFloatingWindow_class_info():
    return _gui.GuiFloatingWindow_class_info()
GuiFloatingWindow_class_info = _gui.GuiFloatingWindow_class_info

def GuiFloatingWindow____class_destructor__(instance, is_array):
    return _gui.GuiFloatingWindow____class_destructor__(instance, is_array)
GuiFloatingWindow____class_destructor__ = _gui.GuiFloatingWindow____class_destructor__

class GuiFloatingWindowBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiFloatingWindowBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiFloatingWindowBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiFloatingWindowBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiFloatingWindowBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiFloatingWindowBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiFloatingWindowBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiFloatingWindowBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiFloatingWindowBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiFloatingWindowBasicArray_front(self)

    def back(self):
        return _gui.GuiFloatingWindowBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiFloatingWindowBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiFloatingWindowBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiFloatingWindowBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiFloatingWindowBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiFloatingWindowBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiFloatingWindowBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiFloatingWindowBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiFloatingWindowBasicArray_class_info)
    else:
        class_info = _gui.GuiFloatingWindowBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiFloatingWindowBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiFloatingWindowBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiFloatingWindowBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiFloatingWindowBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiFloatingWindowBasicArray_swigregister = _gui.GuiFloatingWindowBasicArray_swigregister
GuiFloatingWindowBasicArray_swigregister(GuiFloatingWindowBasicArray)

def GuiFloatingWindowBasicArray_class_info():
    return _gui.GuiFloatingWindowBasicArray_class_info()
GuiFloatingWindowBasicArray_class_info = _gui.GuiFloatingWindowBasicArray_class_info

def GuiFloatingWindowBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiFloatingWindowBasicArray____class_destructor__(instance, is_array)
GuiFloatingWindowBasicArray____class_destructor__ = _gui.GuiFloatingWindowBasicArray____class_destructor__

class GuiFloatingWindowArray(GuiFloatingWindowBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiFloatingWindowBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiFloatingWindowArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiFloatingWindowBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiFloatingWindowArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiFloatingWindowArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiFloatingWindowArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiFloatingWindowArray_append(self, *args)

    def get_count(self):
        return _gui.GuiFloatingWindowArray_get_count(self)

    def remove_all(self):
        return _gui.GuiFloatingWindowArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiFloatingWindowArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiFloatingWindowArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiFloatingWindowArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiFloatingWindowArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiFloatingWindowArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiFloatingWindowArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiFloatingWindowArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiFloatingWindowArray_class_info)
    else:
        class_info = _gui.GuiFloatingWindowArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiFloatingWindowArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiFloatingWindowArray____class_destructor__
GuiFloatingWindowArray_swigregister = _gui.GuiFloatingWindowArray_swigregister
GuiFloatingWindowArray_swigregister(GuiFloatingWindowArray)

def GuiFloatingWindowArray_class_info():
    return _gui.GuiFloatingWindowArray_class_info()
GuiFloatingWindowArray_class_info = _gui.GuiFloatingWindowArray_class_info

def GuiFloatingWindowArray____class_destructor__(instance, is_array):
    return _gui.GuiFloatingWindowArray____class_destructor__(instance, is_array)
GuiFloatingWindowArray____class_destructor__ = _gui.GuiFloatingWindowArray____class_destructor__

class GuiFloatingWindowVector(GuiFloatingWindowBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiFloatingWindowBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiFloatingWindowVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiFloatingWindowBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiFloatingWindowVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiFloatingWindowVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiFloatingWindowVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiFloatingWindowVector_append(self, *args)

    def add(self, element):
        return _gui.GuiFloatingWindowVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiFloatingWindowVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiFloatingWindowVector_remove_last(self)

    def empty(self):
        return _gui.GuiFloatingWindowVector_empty(self)

    def remove_all(self):
        return _gui.GuiFloatingWindowVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiFloatingWindowVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiFloatingWindowVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiFloatingWindowVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiFloatingWindowVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiFloatingWindowVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiFloatingWindowVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiFloatingWindowVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiFloatingWindowVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiFloatingWindowVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiFloatingWindowVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiFloatingWindowVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiFloatingWindowVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiFloatingWindowVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiFloatingWindowVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiFloatingWindowVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiFloatingWindowVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiFloatingWindowVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiFloatingWindowVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiFloatingWindowVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiFloatingWindowVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiFloatingWindowVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiFloatingWindowVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiFloatingWindowVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiFloatingWindowVector_class_info)
    else:
        class_info = _gui.GuiFloatingWindowVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiFloatingWindowVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiFloatingWindowVector____class_destructor__
GuiFloatingWindowVector_swigregister = _gui.GuiFloatingWindowVector_swigregister
GuiFloatingWindowVector_swigregister(GuiFloatingWindowVector)

def GuiFloatingWindowVector_class_info():
    return _gui.GuiFloatingWindowVector_class_info()
GuiFloatingWindowVector_class_info = _gui.GuiFloatingWindowVector_class_info

def GuiFloatingWindowVector____class_destructor__(instance, is_array):
    return _gui.GuiFloatingWindowVector____class_destructor__(instance, is_array)
GuiFloatingWindowVector____class_destructor__ = _gui.GuiFloatingWindowVector____class_destructor__

class GuiFloatingWindowSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiFloatingWindowSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiFloatingWindowSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiFloatingWindowSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiFloatingWindowSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiFloatingWindowSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiFloatingWindowSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiFloatingWindowSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiFloatingWindowSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiFloatingWindowSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiFloatingWindowSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiFloatingWindowSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiFloatingWindowSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiFloatingWindowSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiFloatingWindowSet_to_array(self)

    def add(self, *args):
        return _gui.GuiFloatingWindowSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiFloatingWindowSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiFloatingWindowSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiFloatingWindowSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiFloatingWindowSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiFloatingWindowSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiFloatingWindowSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiFloatingWindowSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiFloatingWindowSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiFloatingWindowSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiFloatingWindowSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiFloatingWindowSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiFloatingWindowSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiFloatingWindowSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiFloatingWindowSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiFloatingWindowSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiFloatingWindowSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiFloatingWindowSet
    __del__ = lambda self: None
GuiFloatingWindowSet_swigregister = _gui.GuiFloatingWindowSet_swigregister
GuiFloatingWindowSet_swigregister(GuiFloatingWindowSet)

def GuiFloatingWindowSet_get_linear_search_threshold():
    return _gui.GuiFloatingWindowSet_get_linear_search_threshold()
GuiFloatingWindowSet_get_linear_search_threshold = _gui.GuiFloatingWindowSet_get_linear_search_threshold

class GuiLabel(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiLabel, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiLabel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == GuiLabel:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiLabel(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def draw(self, dc):
        return _gui.GuiLabel_draw(self, dc)

    def get_label(self):
        return _gui.GuiLabel_get_label(self)

    def set_label(self, label):
        return _gui.GuiLabel_set_label(self, label)

    def get_label_width(self):
        return _gui.GuiLabel_get_label_width(self)

    def process_event(self, event_id):
        return _gui.GuiLabel_process_event(self, event_id)

    def get_justification(self):
        return _gui.GuiLabel_get_justification(self)

    def set_justification(self, justification):
        return _gui.GuiLabel_set_justification(self, justification)

    def is_editable(self):
        return _gui.GuiLabel_is_editable(self)

    def set_editable(self, editable):
        return _gui.GuiLabel_set_editable(self, editable)

    def get_text_color(self):
        return _gui.GuiLabel_get_text_color(self)

    def set_text_color(self, *args):
        return _gui.GuiLabel_set_text_color(self, *args)

    def set_text_selected_color(self, *args):
        return _gui.GuiLabel_set_text_selected_color(self, *args)

    def get_text_selected_color(self):
        return _gui.GuiLabel_get_text_selected_color(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiLabel_class_info)
    else:
        class_info = _gui.GuiLabel_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiLabel____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiLabel____class_destructor__

    def get_class_info(self):
        return _gui.GuiLabel_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiLabel___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiLabel___collect__(self)

    def __uncollect__(self):
        return _gui.GuiLabel___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiLabel(self)
        return weakref_proxy(self)
GuiLabel_swigregister = _gui.GuiLabel_swigregister
GuiLabel_swigregister(GuiLabel)
EVT_ID_LABEL_EDIT = cvar.EVT_ID_LABEL_EDIT
EVT_ID_LABEL_ACTIVATE = cvar.EVT_ID_LABEL_ACTIVATE
EVT_ID_LABEL_RENAMED = cvar.EVT_ID_LABEL_RENAMED

def GuiLabel_class_info():
    return _gui.GuiLabel_class_info()
GuiLabel_class_info = _gui.GuiLabel_class_info

def GuiLabel____class_destructor__(instance, is_array):
    return _gui.GuiLabel____class_destructor__(instance, is_array)
GuiLabel____class_destructor__ = _gui.GuiLabel____class_destructor__

class GuiLabelBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiLabelBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiLabelBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiLabelBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiLabelBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiLabelBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiLabelBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiLabelBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiLabelBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiLabelBasicArray_front(self)

    def back(self):
        return _gui.GuiLabelBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiLabelBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiLabelBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiLabelBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiLabelBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiLabelBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiLabelBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiLabelBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiLabelBasicArray_class_info)
    else:
        class_info = _gui.GuiLabelBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiLabelBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiLabelBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiLabelBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiLabelBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiLabelBasicArray_swigregister = _gui.GuiLabelBasicArray_swigregister
GuiLabelBasicArray_swigregister(GuiLabelBasicArray)

def GuiLabelBasicArray_class_info():
    return _gui.GuiLabelBasicArray_class_info()
GuiLabelBasicArray_class_info = _gui.GuiLabelBasicArray_class_info

def GuiLabelBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiLabelBasicArray____class_destructor__(instance, is_array)
GuiLabelBasicArray____class_destructor__ = _gui.GuiLabelBasicArray____class_destructor__

class GuiLabelArray(GuiLabelBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiLabelBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiLabelArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiLabelBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiLabelArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiLabelArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiLabelArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiLabelArray_append(self, *args)

    def get_count(self):
        return _gui.GuiLabelArray_get_count(self)

    def remove_all(self):
        return _gui.GuiLabelArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiLabelArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiLabelArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiLabelArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiLabelArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiLabelArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiLabelArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiLabelArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiLabelArray_class_info)
    else:
        class_info = _gui.GuiLabelArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiLabelArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiLabelArray____class_destructor__
GuiLabelArray_swigregister = _gui.GuiLabelArray_swigregister
GuiLabelArray_swigregister(GuiLabelArray)

def GuiLabelArray_class_info():
    return _gui.GuiLabelArray_class_info()
GuiLabelArray_class_info = _gui.GuiLabelArray_class_info

def GuiLabelArray____class_destructor__(instance, is_array):
    return _gui.GuiLabelArray____class_destructor__(instance, is_array)
GuiLabelArray____class_destructor__ = _gui.GuiLabelArray____class_destructor__

class GuiLabelVector(GuiLabelBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiLabelBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiLabelVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiLabelBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiLabelVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiLabelVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiLabelVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiLabelVector_append(self, *args)

    def add(self, element):
        return _gui.GuiLabelVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiLabelVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiLabelVector_remove_last(self)

    def empty(self):
        return _gui.GuiLabelVector_empty(self)

    def remove_all(self):
        return _gui.GuiLabelVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiLabelVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiLabelVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiLabelVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiLabelVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiLabelVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiLabelVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiLabelVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiLabelVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiLabelVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiLabelVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiLabelVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiLabelVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiLabelVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiLabelVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiLabelVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiLabelVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiLabelVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiLabelVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiLabelVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiLabelVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiLabelVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiLabelVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiLabelVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiLabelVector_class_info)
    else:
        class_info = _gui.GuiLabelVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiLabelVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiLabelVector____class_destructor__
GuiLabelVector_swigregister = _gui.GuiLabelVector_swigregister
GuiLabelVector_swigregister(GuiLabelVector)

def GuiLabelVector_class_info():
    return _gui.GuiLabelVector_class_info()
GuiLabelVector_class_info = _gui.GuiLabelVector_class_info

def GuiLabelVector____class_destructor__(instance, is_array):
    return _gui.GuiLabelVector____class_destructor__(instance, is_array)
GuiLabelVector____class_destructor__ = _gui.GuiLabelVector____class_destructor__

class GuiLabelSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiLabelSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiLabelSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiLabelSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiLabelSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiLabelSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiLabelSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiLabelSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiLabelSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiLabelSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiLabelSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiLabelSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiLabelSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiLabelSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiLabelSet_to_array(self)

    def add(self, *args):
        return _gui.GuiLabelSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiLabelSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiLabelSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiLabelSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiLabelSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiLabelSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiLabelSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiLabelSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiLabelSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiLabelSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiLabelSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiLabelSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiLabelSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiLabelSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiLabelSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiLabelSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiLabelSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiLabelSet
    __del__ = lambda self: None
GuiLabelSet_swigregister = _gui.GuiLabelSet_swigregister
GuiLabelSet_swigregister(GuiLabelSet)

def GuiLabelSet_get_linear_search_threshold():
    return _gui.GuiLabelSet_get_linear_search_threshold()
GuiLabelSet_get_linear_search_threshold = _gui.GuiLabelSet_get_linear_search_threshold

class GuiListButtonItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListButtonItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListButtonItem, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gui.new_GuiListButtonItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiListButtonItem
    __del__ = lambda self: None

    def remove_item(self, item):
        return _gui.GuiListButtonItem_remove_item(self, item)
    __swig_setmethods__["name"] = _gui.GuiListButtonItem_name_set
    __swig_getmethods__["name"] = _gui.GuiListButtonItem_name_get
    if _newclass:
        name = _swig_property(_gui.GuiListButtonItem_name_get, _gui.GuiListButtonItem_name_set)
    __swig_setmethods__["data"] = _gui.GuiListButtonItem_data_set
    __swig_getmethods__["data"] = _gui.GuiListButtonItem_data_get
    if _newclass:
        data = _swig_property(_gui.GuiListButtonItem_data_get, _gui.GuiListButtonItem_data_set)
    __swig_setmethods__["icons"] = _gui.GuiListButtonItem_icons_set
    __swig_getmethods__["icons"] = _gui.GuiListButtonItem_icons_get
    if _newclass:
        icons = _swig_property(_gui.GuiListButtonItem_icons_get, _gui.GuiListButtonItem_icons_set)
    __swig_setmethods__["menu_item"] = _gui.GuiListButtonItem_menu_item_set
    __swig_getmethods__["menu_item"] = _gui.GuiListButtonItem_menu_item_get
    if _newclass:
        menu_item = _swig_property(_gui.GuiListButtonItem_menu_item_get, _gui.GuiListButtonItem_menu_item_set)
    __swig_setmethods__["items"] = _gui.GuiListButtonItem_items_set
    __swig_getmethods__["items"] = _gui.GuiListButtonItem_items_get
    if _newclass:
        items = _swig_property(_gui.GuiListButtonItem_items_get, _gui.GuiListButtonItem_items_set)
    __swig_setmethods__["doc"] = _gui.GuiListButtonItem_doc_set
    __swig_getmethods__["doc"] = _gui.GuiListButtonItem_doc_get
    if _newclass:
        doc = _swig_property(_gui.GuiListButtonItem_doc_get, _gui.GuiListButtonItem_doc_set)
    __swig_setmethods__["is_submenu"] = _gui.GuiListButtonItem_is_submenu_set
    __swig_getmethods__["is_submenu"] = _gui.GuiListButtonItem_is_submenu_get
    if _newclass:
        is_submenu = _swig_property(_gui.GuiListButtonItem_is_submenu_get, _gui.GuiListButtonItem_is_submenu_set)
    __swig_setmethods__["is_separator"] = _gui.GuiListButtonItem_is_separator_set
    __swig_getmethods__["is_separator"] = _gui.GuiListButtonItem_is_separator_get
    if _newclass:
        is_separator = _swig_property(_gui.GuiListButtonItem_is_separator_get, _gui.GuiListButtonItem_is_separator_set)
    __swig_setmethods__["is_hinted"] = _gui.GuiListButtonItem_is_hinted_set
    __swig_getmethods__["is_hinted"] = _gui.GuiListButtonItem_is_hinted_get
    if _newclass:
        is_hinted = _swig_property(_gui.GuiListButtonItem_is_hinted_get, _gui.GuiListButtonItem_is_hinted_set)
    __swig_setmethods__["index_in_all_items_list"] = _gui.GuiListButtonItem_index_in_all_items_list_set
    __swig_getmethods__["index_in_all_items_list"] = _gui.GuiListButtonItem_index_in_all_items_list_get
    if _newclass:
        index_in_all_items_list = _swig_property(_gui.GuiListButtonItem_index_in_all_items_list_get, _gui.GuiListButtonItem_index_in_all_items_list_set)
GuiListButtonItem_swigregister = _gui.GuiListButtonItem_swigregister
GuiListButtonItem_swigregister(GuiListButtonItem)
EVT_ID_LIST_BUTTON_SELECT = cvar.EVT_ID_LIST_BUTTON_SELECT
EVT_ID_LIST_BUTTON_SELECT_UNCHANGED = cvar.EVT_ID_LIST_BUTTON_SELECT_UNCHANGED
EVT_ID_LIST_BUTTON_ITEMS_SHOW = cvar.EVT_ID_LIST_BUTTON_ITEMS_SHOW

class GuiListButton(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListButton, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListButton, name)
    __repr__ = _swig_repr

    def __init__(self, parent, x, y, w, h):
        if self.__class__ == GuiListButton:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiListButton(_self, parent, x, y, w, h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def draw_text(self, *args):
        return _gui.GuiListButton_draw_text(self, *args)

    def draw(self, dc):
        return _gui.GuiListButton_draw(self, dc)

    def show_menu(self):
        return _gui.GuiListButton_show_menu(self)

    def process_event(self, event_id):
        return _gui.GuiListButton_process_event(self, event_id)

    def get_menu(self, *args):
        return _gui.GuiListButton_get_menu(self, *args)

    def get_selected_item_data(self):
        return _gui.GuiListButton_get_selected_item_data(self)

    def get_selected_item_name(self):
        return _gui.GuiListButton_get_selected_item_name(self)

    def get_selected_item_label(self):
        return _gui.GuiListButton_get_selected_item_label(self)

    def get_selected_item_index(self):
        return _gui.GuiListButton_get_selected_item_index(self)

    def set_selected_item_by_index(self, item):
        return _gui.GuiListButton_set_selected_item_by_index(self, item)

    def set_selected_item_by_name(self, name):
        return _gui.GuiListButton_set_selected_item_by_name(self, name)

    def select_item_index(self, item):
        return _gui.GuiListButton_select_item_index(self, item)

    def set_exclusive(self, exclusive):
        return _gui.GuiListButton_set_exclusive(self, exclusive)

    def get_all_selected_data(self, data):
        return _gui.GuiListButton_get_all_selected_data(self, data)

    def get_all_selected_names(self, *args):
        return _gui.GuiListButton_get_all_selected_names(self, *args)

    def get_all_selected_indices(self, data):
        return _gui.GuiListButton_get_all_selected_indices(self, data)

    def set_selected_items_by_name(self, list_of_names):
        return _gui.GuiListButton_set_selected_items_by_name(self, list_of_names)

    def select_items_by_name(self, list_of_names):
        return _gui.GuiListButton_select_items_by_name(self, list_of_names)

    def is_item_separator(self, index):
        return _gui.GuiListButton_is_item_separator(self, index)

    def is_item_selected(self, index):
        return _gui.GuiListButton_is_item_selected(self, index)

    def add_item(self, name, is_selected=False, icon=None, data=None, submenu=None):
        return _gui.GuiListButton_add_item(self, name, is_selected, icon, data, submenu)

    def add_hinted_item(self, name, hinted, is_selected=False, icon=None, data=None, submenu=None):
        return _gui.GuiListButton_add_hinted_item(self, name, hinted, is_selected, icon, data, submenu)

    def add_submenu(self, name, icon=None):
        return _gui.GuiListButton_add_submenu(self, name, icon)

    def add_separator(self, *args):
        return _gui.GuiListButton_add_separator(self, *args)

    def get_item_data(self, index):
        return _gui.GuiListButton_get_item_data(self, index)

    def get_item_name(self, index):
        return _gui.GuiListButton_get_item_name(self, index)

    def set_item_name(self, index, name):
        return _gui.GuiListButton_set_item_name(self, index, name)

    def get_item_icon(self, index):
        return _gui.GuiListButton_get_item_icon(self, index)

    def get_item_icons(self, index):
        return _gui.GuiListButton_get_item_icons(self, index)

    def set_item_icon(self, *args):
        return _gui.GuiListButton_set_item_icon(self, *args)

    def set_item_icons(self, *args):
        return _gui.GuiListButton_set_item_icons(self, *args)

    def set_item_hint(self, index, hint):
        return _gui.GuiListButton_set_item_hint(self, index, hint)

    def set_item_doc(self, index, doc):
        return _gui.GuiListButton_set_item_doc(self, index, doc)

    def get_item_count(self):
        return _gui.GuiListButton_get_item_count(self)

    def remove_all(self):
        return _gui.GuiListButton_remove_all(self)

    def remove_item(self, index):
        return _gui.GuiListButton_remove_item(self, index)

    def sort_items(self):
        return _gui.GuiListButton_sort_items(self)

    def set_undefined_label(self, label):
        return _gui.GuiListButton_set_undefined_label(self, label)
    STYLE_FLAT = _gui.GuiListButton_STYLE_FLAT
    STYLE_ROUND = _gui.GuiListButton_STYLE_ROUND
    STYLE_BUTTON = _gui.GuiListButton_STYLE_BUTTON
    STYLE_COUNT = _gui.GuiListButton_STYLE_COUNT

    def get_style(self):
        return _gui.GuiListButton_get_style(self)

    def set_style(self, style):
        return _gui.GuiListButton_set_style(self, style)
    if _newclass:
        get_style_name = staticmethod(_gui.GuiListButton_get_style_name)
    else:
        get_style_name = _gui.GuiListButton_get_style_name
    TEXT_ELLIPSIS_LEFT = _gui.GuiListButton_TEXT_ELLIPSIS_LEFT
    TEXT_ELLIPSIS_RIGHT = _gui.GuiListButton_TEXT_ELLIPSIS_RIGHT
    TEXT_ELLIPSIS_NONE = _gui.GuiListButton_TEXT_ELLIPSIS_NONE

    def set_ellipsis(self, value):
        return _gui.GuiListButton_set_ellipsis(self, value)

    def get_ellipsis(self):
        return _gui.GuiListButton_get_ellipsis(self)
    ITEM_STYLE_NONE = _gui.GuiListButton_ITEM_STYLE_NONE
    ITEM_STYLE_RADIO = _gui.GuiListButton_ITEM_STYLE_RADIO
    ITEM_STYLE_CHECK = _gui.GuiListButton_ITEM_STYLE_CHECK

    def set_item_style(self, style):
        return _gui.GuiListButton_set_item_style(self, style)

    def set_roundness(self, roundness):
        return _gui.GuiListButton_set_roundness(self, roundness)

    def get_roundness(self):
        return _gui.GuiListButton_get_roundness(self)

    def set_single_icon(self, *args):
        return _gui.GuiListButton_set_single_icon(self, *args)

    def hide_button_text(self):
        return _gui.GuiListButton_hide_button_text(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiListButton_class_info)
    else:
        class_info = _gui.GuiListButton_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiListButton____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiListButton____class_destructor__

    def get_class_info(self):
        return _gui.GuiListButton_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiListButton___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiListButton___collect__(self)

    def __uncollect__(self):
        return _gui.GuiListButton___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiListButton(self)
        return weakref_proxy(self)
GuiListButton_swigregister = _gui.GuiListButton_swigregister
GuiListButton_swigregister(GuiListButton)

def GuiListButton_get_style_name(style):
    return _gui.GuiListButton_get_style_name(style)
GuiListButton_get_style_name = _gui.GuiListButton_get_style_name

def GuiListButton_class_info():
    return _gui.GuiListButton_class_info()
GuiListButton_class_info = _gui.GuiListButton_class_info

def GuiListButton____class_destructor__(instance, is_array):
    return _gui.GuiListButton____class_destructor__(instance, is_array)
GuiListButton____class_destructor__ = _gui.GuiListButton____class_destructor__

class GuiListButtonBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListButtonBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListButtonBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiListButtonBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiListButtonBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiListButtonBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiListButtonBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiListButtonBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiListButtonBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiListButtonBasicArray_front(self)

    def back(self):
        return _gui.GuiListButtonBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiListButtonBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiListButtonBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiListButtonBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiListButtonBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiListButtonBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiListButtonBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiListButtonBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiListButtonBasicArray_class_info)
    else:
        class_info = _gui.GuiListButtonBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiListButtonBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiListButtonBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiListButtonBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiListButtonBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiListButtonBasicArray_swigregister = _gui.GuiListButtonBasicArray_swigregister
GuiListButtonBasicArray_swigregister(GuiListButtonBasicArray)

def GuiListButtonBasicArray_class_info():
    return _gui.GuiListButtonBasicArray_class_info()
GuiListButtonBasicArray_class_info = _gui.GuiListButtonBasicArray_class_info

def GuiListButtonBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiListButtonBasicArray____class_destructor__(instance, is_array)
GuiListButtonBasicArray____class_destructor__ = _gui.GuiListButtonBasicArray____class_destructor__

class GuiListButtonArray(GuiListButtonBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiListButtonBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListButtonArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiListButtonBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListButtonArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiListButtonArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiListButtonArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiListButtonArray_append(self, *args)

    def get_count(self):
        return _gui.GuiListButtonArray_get_count(self)

    def remove_all(self):
        return _gui.GuiListButtonArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiListButtonArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiListButtonArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiListButtonArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiListButtonArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiListButtonArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiListButtonArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiListButtonArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiListButtonArray_class_info)
    else:
        class_info = _gui.GuiListButtonArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiListButtonArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiListButtonArray____class_destructor__
GuiListButtonArray_swigregister = _gui.GuiListButtonArray_swigregister
GuiListButtonArray_swigregister(GuiListButtonArray)

def GuiListButtonArray_class_info():
    return _gui.GuiListButtonArray_class_info()
GuiListButtonArray_class_info = _gui.GuiListButtonArray_class_info

def GuiListButtonArray____class_destructor__(instance, is_array):
    return _gui.GuiListButtonArray____class_destructor__(instance, is_array)
GuiListButtonArray____class_destructor__ = _gui.GuiListButtonArray____class_destructor__

class GuiListButtonVector(GuiListButtonBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiListButtonBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListButtonVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiListButtonBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListButtonVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiListButtonVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiListButtonVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiListButtonVector_append(self, *args)

    def add(self, element):
        return _gui.GuiListButtonVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiListButtonVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiListButtonVector_remove_last(self)

    def empty(self):
        return _gui.GuiListButtonVector_empty(self)

    def remove_all(self):
        return _gui.GuiListButtonVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiListButtonVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiListButtonVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiListButtonVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiListButtonVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiListButtonVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiListButtonVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiListButtonVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiListButtonVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiListButtonVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiListButtonVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiListButtonVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiListButtonVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiListButtonVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiListButtonVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiListButtonVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiListButtonVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiListButtonVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiListButtonVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiListButtonVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiListButtonVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiListButtonVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiListButtonVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiListButtonVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiListButtonVector_class_info)
    else:
        class_info = _gui.GuiListButtonVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiListButtonVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiListButtonVector____class_destructor__
GuiListButtonVector_swigregister = _gui.GuiListButtonVector_swigregister
GuiListButtonVector_swigregister(GuiListButtonVector)

def GuiListButtonVector_class_info():
    return _gui.GuiListButtonVector_class_info()
GuiListButtonVector_class_info = _gui.GuiListButtonVector_class_info

def GuiListButtonVector____class_destructor__(instance, is_array):
    return _gui.GuiListButtonVector____class_destructor__(instance, is_array)
GuiListButtonVector____class_destructor__ = _gui.GuiListButtonVector____class_destructor__

class GuiListButtonSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListButtonSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListButtonSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiListButtonSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiListButtonSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiListButtonSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiListButtonSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiListButtonSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiListButtonSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiListButtonSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiListButtonSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiListButtonSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiListButtonSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiListButtonSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiListButtonSet_to_array(self)

    def add(self, *args):
        return _gui.GuiListButtonSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiListButtonSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiListButtonSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiListButtonSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiListButtonSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiListButtonSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiListButtonSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiListButtonSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiListButtonSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiListButtonSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiListButtonSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiListButtonSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiListButtonSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiListButtonSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiListButtonSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiListButtonSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiListButtonSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiListButtonSet
    __del__ = lambda self: None
GuiListButtonSet_swigregister = _gui.GuiListButtonSet_swigregister
GuiListButtonSet_swigregister(GuiListButtonSet)

def GuiListButtonSet_get_linear_search_threshold():
    return _gui.GuiListButtonSet_get_linear_search_threshold()
GuiListButtonSet_get_linear_search_threshold = _gui.GuiListButtonSet_get_linear_search_threshold

class GuiPushButton(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiPushButton, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiPushButton, name)
    __repr__ = _swig_repr
    TEXT_ELLIPSIS_LEFT = _gui.GuiPushButton_TEXT_ELLIPSIS_LEFT
    TEXT_ELLIPSIS_RIGHT = _gui.GuiPushButton_TEXT_ELLIPSIS_RIGHT
    TEXT_ELLIPSIS_NONE = _gui.GuiPushButton_TEXT_ELLIPSIS_NONE
    STYLE_FLAT = _gui.GuiPushButton_STYLE_FLAT
    STYLE_FLAT_OUTLINED = _gui.GuiPushButton_STYLE_FLAT_OUTLINED
    STYLE_SIMPLE = _gui.GuiPushButton_STYLE_SIMPLE
    STYLE_BUTTON = _gui.GuiPushButton_STYLE_BUTTON
    STYLE_ROUND = _gui.GuiPushButton_STYLE_ROUND
    STYLE_ICON_ONLY = _gui.GuiPushButton_STYLE_ICON_ONLY
    STYLE_COUNT = _gui.GuiPushButton_STYLE_COUNT
    if _newclass:
        get_style_name = staticmethod(_gui.GuiPushButton_get_style_name)
    else:
        get_style_name = _gui.GuiPushButton_get_style_name

    def __init__(self, *args):
        if self.__class__ == GuiPushButton:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiPushButton(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def show(self):
        return _gui.GuiPushButton_show(self)

    def draw(self, dc):
        return _gui.GuiPushButton_draw(self, dc)

    def draw_text(self, *args):
        return _gui.GuiPushButton_draw_text(self, *args)

    def get_label(self):
        return _gui.GuiPushButton_get_label(self)

    def set_label(self, label):
        return _gui.GuiPushButton_set_label(self, label)

    def process_event(self, event_id):
        return _gui.GuiPushButton_process_event(self, event_id)

    def get_justification(self):
        return _gui.GuiPushButton_get_justification(self)

    def set_justification(self, justification):
        return _gui.GuiPushButton_set_justification(self, justification)

    def get_icon(self):
        return _gui.GuiPushButton_get_icon(self)

    def set_icon(self, *args):
        return _gui.GuiPushButton_set_icon(self, *args)

    def remove_icon(self):
        return _gui.GuiPushButton_remove_icon(self)

    def get_icon_position(self):
        return _gui.GuiPushButton_get_icon_position(self)

    def set_icon_position(self, position):
        return _gui.GuiPushButton_set_icon_position(self, position)

    def get_style(self):
        return _gui.GuiPushButton_get_style(self)

    def set_style(self, style):
        return _gui.GuiPushButton_set_style(self, style)

    def get_content_size(self, w, h):
        return _gui.GuiPushButton_get_content_size(self, w, h)

    def set_roundness(self, roundness):
        return _gui.GuiPushButton_set_roundness(self, roundness)

    def get_roundness(self):
        return _gui.GuiPushButton_get_roundness(self)

    def set_ellipsis(self, value):
        return _gui.GuiPushButton_set_ellipsis(self, value)

    def get_ellipsis(self):
        return _gui.GuiPushButton_get_ellipsis(self)

    def set_action(self, action):
        return _gui.GuiPushButton_set_action(self, action)

    def enable_state_button_behavior(self, press):
        return _gui.GuiPushButton_enable_state_button_behavior(self, press)

    def release(self):
        return _gui.GuiPushButton_release(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiPushButton_class_info)
    else:
        class_info = _gui.GuiPushButton_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiPushButton____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiPushButton____class_destructor__

    def get_class_info(self):
        return _gui.GuiPushButton_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiPushButton___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiPushButton___collect__(self)

    def __uncollect__(self):
        return _gui.GuiPushButton___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiPushButton(self)
        return weakref_proxy(self)
GuiPushButton_swigregister = _gui.GuiPushButton_swigregister
GuiPushButton_swigregister(GuiPushButton)
EVT_ID_PUSH_BUTTON_CLICK = cvar.EVT_ID_PUSH_BUTTON_CLICK
EVT_ID_PUSH_BUTTON_UNCLICK = cvar.EVT_ID_PUSH_BUTTON_UNCLICK

def GuiPushButton_get_style_name(style):
    return _gui.GuiPushButton_get_style_name(style)
GuiPushButton_get_style_name = _gui.GuiPushButton_get_style_name

def GuiPushButton_class_info():
    return _gui.GuiPushButton_class_info()
GuiPushButton_class_info = _gui.GuiPushButton_class_info

def GuiPushButton____class_destructor__(instance, is_array):
    return _gui.GuiPushButton____class_destructor__(instance, is_array)
GuiPushButton____class_destructor__ = _gui.GuiPushButton____class_destructor__

class GuiPushButtonBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiPushButtonBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiPushButtonBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiPushButtonBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiPushButtonBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiPushButtonBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiPushButtonBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiPushButtonBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiPushButtonBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiPushButtonBasicArray_front(self)

    def back(self):
        return _gui.GuiPushButtonBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiPushButtonBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiPushButtonBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiPushButtonBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiPushButtonBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiPushButtonBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiPushButtonBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiPushButtonBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiPushButtonBasicArray_class_info)
    else:
        class_info = _gui.GuiPushButtonBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiPushButtonBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiPushButtonBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiPushButtonBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiPushButtonBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiPushButtonBasicArray_swigregister = _gui.GuiPushButtonBasicArray_swigregister
GuiPushButtonBasicArray_swigregister(GuiPushButtonBasicArray)

def GuiPushButtonBasicArray_class_info():
    return _gui.GuiPushButtonBasicArray_class_info()
GuiPushButtonBasicArray_class_info = _gui.GuiPushButtonBasicArray_class_info

def GuiPushButtonBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiPushButtonBasicArray____class_destructor__(instance, is_array)
GuiPushButtonBasicArray____class_destructor__ = _gui.GuiPushButtonBasicArray____class_destructor__

class GuiPushButtonArray(GuiPushButtonBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiPushButtonBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiPushButtonArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiPushButtonBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiPushButtonArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiPushButtonArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiPushButtonArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiPushButtonArray_append(self, *args)

    def get_count(self):
        return _gui.GuiPushButtonArray_get_count(self)

    def remove_all(self):
        return _gui.GuiPushButtonArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiPushButtonArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiPushButtonArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiPushButtonArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiPushButtonArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiPushButtonArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiPushButtonArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiPushButtonArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiPushButtonArray_class_info)
    else:
        class_info = _gui.GuiPushButtonArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiPushButtonArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiPushButtonArray____class_destructor__
GuiPushButtonArray_swigregister = _gui.GuiPushButtonArray_swigregister
GuiPushButtonArray_swigregister(GuiPushButtonArray)

def GuiPushButtonArray_class_info():
    return _gui.GuiPushButtonArray_class_info()
GuiPushButtonArray_class_info = _gui.GuiPushButtonArray_class_info

def GuiPushButtonArray____class_destructor__(instance, is_array):
    return _gui.GuiPushButtonArray____class_destructor__(instance, is_array)
GuiPushButtonArray____class_destructor__ = _gui.GuiPushButtonArray____class_destructor__

class GuiPushButtonVector(GuiPushButtonBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiPushButtonBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiPushButtonVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiPushButtonBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiPushButtonVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiPushButtonVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiPushButtonVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiPushButtonVector_append(self, *args)

    def add(self, element):
        return _gui.GuiPushButtonVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiPushButtonVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiPushButtonVector_remove_last(self)

    def empty(self):
        return _gui.GuiPushButtonVector_empty(self)

    def remove_all(self):
        return _gui.GuiPushButtonVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiPushButtonVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiPushButtonVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiPushButtonVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiPushButtonVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiPushButtonVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiPushButtonVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiPushButtonVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiPushButtonVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiPushButtonVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiPushButtonVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiPushButtonVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiPushButtonVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiPushButtonVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiPushButtonVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiPushButtonVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiPushButtonVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiPushButtonVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiPushButtonVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiPushButtonVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiPushButtonVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiPushButtonVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiPushButtonVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiPushButtonVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiPushButtonVector_class_info)
    else:
        class_info = _gui.GuiPushButtonVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiPushButtonVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiPushButtonVector____class_destructor__
GuiPushButtonVector_swigregister = _gui.GuiPushButtonVector_swigregister
GuiPushButtonVector_swigregister(GuiPushButtonVector)

def GuiPushButtonVector_class_info():
    return _gui.GuiPushButtonVector_class_info()
GuiPushButtonVector_class_info = _gui.GuiPushButtonVector_class_info

def GuiPushButtonVector____class_destructor__(instance, is_array):
    return _gui.GuiPushButtonVector____class_destructor__(instance, is_array)
GuiPushButtonVector____class_destructor__ = _gui.GuiPushButtonVector____class_destructor__

class GuiPushButtonSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiPushButtonSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiPushButtonSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiPushButtonSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiPushButtonSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiPushButtonSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiPushButtonSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiPushButtonSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiPushButtonSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiPushButtonSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiPushButtonSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiPushButtonSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiPushButtonSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiPushButtonSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiPushButtonSet_to_array(self)

    def add(self, *args):
        return _gui.GuiPushButtonSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiPushButtonSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiPushButtonSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiPushButtonSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiPushButtonSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiPushButtonSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiPushButtonSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiPushButtonSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiPushButtonSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiPushButtonSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiPushButtonSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiPushButtonSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiPushButtonSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiPushButtonSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiPushButtonSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiPushButtonSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiPushButtonSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiPushButtonSet
    __del__ = lambda self: None
GuiPushButtonSet_swigregister = _gui.GuiPushButtonSet_swigregister
GuiPushButtonSet_swigregister(GuiPushButtonSet)

def GuiPushButtonSet_get_linear_search_threshold():
    return _gui.GuiPushButtonSet_get_linear_search_threshold()
GuiPushButtonSet_get_linear_search_threshold = _gui.GuiPushButtonSet_get_linear_search_threshold

class GuiCheckButton(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiCheckButton, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiCheckButton, name)
    __repr__ = _swig_repr
    STYLE_FLAT = _gui.GuiCheckButton_STYLE_FLAT
    STYLE_BUTTON = _gui.GuiCheckButton_STYLE_BUTTON
    STYLE_ROUND = _gui.GuiCheckButton_STYLE_ROUND
    STYLE_COUNT = _gui.GuiCheckButton_STYLE_COUNT
    if _newclass:
        get_style_name = staticmethod(_gui.GuiCheckButton_get_style_name)
    else:
        get_style_name = _gui.GuiCheckButton_get_style_name

    def __init__(self, *args):
        if self.__class__ == GuiCheckButton:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiCheckButton(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def draw(self, dc):
        return _gui.GuiCheckButton_draw(self, dc)

    def get_label(self):
        return _gui.GuiCheckButton_get_label(self)

    def set_label(self, label):
        return _gui.GuiCheckButton_set_label(self, label)

    def get_value(self):
        return _gui.GuiCheckButton_get_value(self)

    def set_value(self, value):
        return _gui.GuiCheckButton_set_value(self, value)

    def process_event(self, event_id):
        return _gui.GuiCheckButton_process_event(self, event_id)

    def get_justification(self):
        return _gui.GuiCheckButton_get_justification(self)

    def set_justification(self, justification):
        return _gui.GuiCheckButton_set_justification(self, justification)

    def get_icon(self):
        return _gui.GuiCheckButton_get_icon(self)

    def set_icon(self, *args):
        return _gui.GuiCheckButton_set_icon(self, *args)

    def get_pushed_icon(self):
        return _gui.GuiCheckButton_get_pushed_icon(self)

    def set_pushed_icon(self, *args):
        return _gui.GuiCheckButton_set_pushed_icon(self, *args)

    def get_icon_position(self):
        return _gui.GuiCheckButton_get_icon_position(self)

    def set_icon_position(self, position):
        return _gui.GuiCheckButton_set_icon_position(self, position)

    def get_style(self):
        return _gui.GuiCheckButton_get_style(self)

    def set_style(self, style):
        return _gui.GuiCheckButton_set_style(self, style)

    def get_content_size(self, w, h):
        return _gui.GuiCheckButton_get_content_size(self, w, h)

    def set_roundness(self, roundness):
        return _gui.GuiCheckButton_set_roundness(self, roundness)

    def get_roundness(self):
        return _gui.GuiCheckButton_get_roundness(self)

    def set_edge_selection(self, b):
        return _gui.GuiCheckButton_set_edge_selection(self, b)

    def is_use_option(self):
        return _gui.GuiCheckButton_is_use_option(self)

    def set_use_option(self, use_option):
        return _gui.GuiCheckButton_set_use_option(self, use_option)
    if _newclass:
        class_info = staticmethod(_gui.GuiCheckButton_class_info)
    else:
        class_info = _gui.GuiCheckButton_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiCheckButton____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiCheckButton____class_destructor__

    def get_class_info(self):
        return _gui.GuiCheckButton_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiCheckButton___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiCheckButton___collect__(self)

    def __uncollect__(self):
        return _gui.GuiCheckButton___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiCheckButton(self)
        return weakref_proxy(self)
GuiCheckButton_swigregister = _gui.GuiCheckButton_swigregister
GuiCheckButton_swigregister(GuiCheckButton)
EVT_ID_CHECK_BUTTON_CLICK = cvar.EVT_ID_CHECK_BUTTON_CLICK
EVT_ID_CHECK_OPTION_BUTTON_CLICK = cvar.EVT_ID_CHECK_OPTION_BUTTON_CLICK

def GuiCheckButton_get_style_name(style):
    return _gui.GuiCheckButton_get_style_name(style)
GuiCheckButton_get_style_name = _gui.GuiCheckButton_get_style_name

def GuiCheckButton_class_info():
    return _gui.GuiCheckButton_class_info()
GuiCheckButton_class_info = _gui.GuiCheckButton_class_info

def GuiCheckButton____class_destructor__(instance, is_array):
    return _gui.GuiCheckButton____class_destructor__(instance, is_array)
GuiCheckButton____class_destructor__ = _gui.GuiCheckButton____class_destructor__

class GuiCheckButtonBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiCheckButtonBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiCheckButtonBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiCheckButtonBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiCheckButtonBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiCheckButtonBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiCheckButtonBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiCheckButtonBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiCheckButtonBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiCheckButtonBasicArray_front(self)

    def back(self):
        return _gui.GuiCheckButtonBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiCheckButtonBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiCheckButtonBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiCheckButtonBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiCheckButtonBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiCheckButtonBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiCheckButtonBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiCheckButtonBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiCheckButtonBasicArray_class_info)
    else:
        class_info = _gui.GuiCheckButtonBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiCheckButtonBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiCheckButtonBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiCheckButtonBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiCheckButtonBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiCheckButtonBasicArray_swigregister = _gui.GuiCheckButtonBasicArray_swigregister
GuiCheckButtonBasicArray_swigregister(GuiCheckButtonBasicArray)

def GuiCheckButtonBasicArray_class_info():
    return _gui.GuiCheckButtonBasicArray_class_info()
GuiCheckButtonBasicArray_class_info = _gui.GuiCheckButtonBasicArray_class_info

def GuiCheckButtonBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiCheckButtonBasicArray____class_destructor__(instance, is_array)
GuiCheckButtonBasicArray____class_destructor__ = _gui.GuiCheckButtonBasicArray____class_destructor__

class GuiCheckButtonArray(GuiCheckButtonBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiCheckButtonBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiCheckButtonArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiCheckButtonBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiCheckButtonArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiCheckButtonArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiCheckButtonArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiCheckButtonArray_append(self, *args)

    def get_count(self):
        return _gui.GuiCheckButtonArray_get_count(self)

    def remove_all(self):
        return _gui.GuiCheckButtonArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiCheckButtonArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiCheckButtonArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiCheckButtonArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiCheckButtonArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiCheckButtonArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiCheckButtonArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiCheckButtonArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiCheckButtonArray_class_info)
    else:
        class_info = _gui.GuiCheckButtonArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiCheckButtonArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiCheckButtonArray____class_destructor__
GuiCheckButtonArray_swigregister = _gui.GuiCheckButtonArray_swigregister
GuiCheckButtonArray_swigregister(GuiCheckButtonArray)

def GuiCheckButtonArray_class_info():
    return _gui.GuiCheckButtonArray_class_info()
GuiCheckButtonArray_class_info = _gui.GuiCheckButtonArray_class_info

def GuiCheckButtonArray____class_destructor__(instance, is_array):
    return _gui.GuiCheckButtonArray____class_destructor__(instance, is_array)
GuiCheckButtonArray____class_destructor__ = _gui.GuiCheckButtonArray____class_destructor__

class GuiCheckButtonVector(GuiCheckButtonBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiCheckButtonBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiCheckButtonVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiCheckButtonBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiCheckButtonVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiCheckButtonVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiCheckButtonVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiCheckButtonVector_append(self, *args)

    def add(self, element):
        return _gui.GuiCheckButtonVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiCheckButtonVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiCheckButtonVector_remove_last(self)

    def empty(self):
        return _gui.GuiCheckButtonVector_empty(self)

    def remove_all(self):
        return _gui.GuiCheckButtonVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiCheckButtonVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiCheckButtonVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiCheckButtonVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiCheckButtonVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiCheckButtonVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiCheckButtonVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiCheckButtonVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiCheckButtonVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiCheckButtonVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiCheckButtonVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiCheckButtonVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiCheckButtonVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiCheckButtonVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiCheckButtonVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiCheckButtonVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiCheckButtonVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiCheckButtonVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiCheckButtonVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiCheckButtonVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiCheckButtonVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiCheckButtonVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiCheckButtonVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiCheckButtonVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiCheckButtonVector_class_info)
    else:
        class_info = _gui.GuiCheckButtonVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiCheckButtonVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiCheckButtonVector____class_destructor__
GuiCheckButtonVector_swigregister = _gui.GuiCheckButtonVector_swigregister
GuiCheckButtonVector_swigregister(GuiCheckButtonVector)

def GuiCheckButtonVector_class_info():
    return _gui.GuiCheckButtonVector_class_info()
GuiCheckButtonVector_class_info = _gui.GuiCheckButtonVector_class_info

def GuiCheckButtonVector____class_destructor__(instance, is_array):
    return _gui.GuiCheckButtonVector____class_destructor__(instance, is_array)
GuiCheckButtonVector____class_destructor__ = _gui.GuiCheckButtonVector____class_destructor__

class GuiCheckButtonSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiCheckButtonSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiCheckButtonSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiCheckButtonSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiCheckButtonSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiCheckButtonSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiCheckButtonSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiCheckButtonSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiCheckButtonSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiCheckButtonSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiCheckButtonSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiCheckButtonSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiCheckButtonSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiCheckButtonSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiCheckButtonSet_to_array(self)

    def add(self, *args):
        return _gui.GuiCheckButtonSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiCheckButtonSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiCheckButtonSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiCheckButtonSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiCheckButtonSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiCheckButtonSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiCheckButtonSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiCheckButtonSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiCheckButtonSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiCheckButtonSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiCheckButtonSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiCheckButtonSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiCheckButtonSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiCheckButtonSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiCheckButtonSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiCheckButtonSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiCheckButtonSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiCheckButtonSet
    __del__ = lambda self: None
GuiCheckButtonSet_swigregister = _gui.GuiCheckButtonSet_swigregister
GuiCheckButtonSet_swigregister(GuiCheckButtonSet)

def GuiCheckButtonSet_get_linear_search_threshold():
    return _gui.GuiCheckButtonSet_get_linear_search_threshold()
GuiCheckButtonSet_get_linear_search_threshold = _gui.GuiCheckButtonSet_get_linear_search_threshold

class GuiCheckbox(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiCheckbox, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiCheckbox, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == GuiCheckbox:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiCheckbox(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def draw(self, dc):
        return _gui.GuiCheckbox_draw(self, dc)

    def get_label(self):
        return _gui.GuiCheckbox_get_label(self)

    def set_label(self, label):
        return _gui.GuiCheckbox_set_label(self, label)

    def get_value(self):
        return _gui.GuiCheckbox_get_value(self)

    def set_value(self, value):
        return _gui.GuiCheckbox_set_value(self, value)

    def process_event(self, event_id):
        return _gui.GuiCheckbox_process_event(self, event_id)
    if _newclass:
        class_info = staticmethod(_gui.GuiCheckbox_class_info)
    else:
        class_info = _gui.GuiCheckbox_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiCheckbox____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiCheckbox____class_destructor__

    def get_class_info(self):
        return _gui.GuiCheckbox_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiCheckbox___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiCheckbox___collect__(self)

    def __uncollect__(self):
        return _gui.GuiCheckbox___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiCheckbox(self)
        return weakref_proxy(self)
GuiCheckbox_swigregister = _gui.GuiCheckbox_swigregister
GuiCheckbox_swigregister(GuiCheckbox)
EVT_ID_CHECKBOX_CLICK = cvar.EVT_ID_CHECKBOX_CLICK

def GuiCheckbox_class_info():
    return _gui.GuiCheckbox_class_info()
GuiCheckbox_class_info = _gui.GuiCheckbox_class_info

def GuiCheckbox____class_destructor__(instance, is_array):
    return _gui.GuiCheckbox____class_destructor__(instance, is_array)
GuiCheckbox____class_destructor__ = _gui.GuiCheckbox____class_destructor__

class GuiCheckboxBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiCheckboxBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiCheckboxBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiCheckboxBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiCheckboxBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiCheckboxBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiCheckboxBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiCheckboxBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiCheckboxBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiCheckboxBasicArray_front(self)

    def back(self):
        return _gui.GuiCheckboxBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiCheckboxBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiCheckboxBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiCheckboxBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiCheckboxBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiCheckboxBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiCheckboxBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiCheckboxBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiCheckboxBasicArray_class_info)
    else:
        class_info = _gui.GuiCheckboxBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiCheckboxBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiCheckboxBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiCheckboxBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiCheckboxBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiCheckboxBasicArray_swigregister = _gui.GuiCheckboxBasicArray_swigregister
GuiCheckboxBasicArray_swigregister(GuiCheckboxBasicArray)

def GuiCheckboxBasicArray_class_info():
    return _gui.GuiCheckboxBasicArray_class_info()
GuiCheckboxBasicArray_class_info = _gui.GuiCheckboxBasicArray_class_info

def GuiCheckboxBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiCheckboxBasicArray____class_destructor__(instance, is_array)
GuiCheckboxBasicArray____class_destructor__ = _gui.GuiCheckboxBasicArray____class_destructor__

class GuiCheckboxArray(GuiCheckboxBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiCheckboxBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiCheckboxArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiCheckboxBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiCheckboxArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiCheckboxArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiCheckboxArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiCheckboxArray_append(self, *args)

    def get_count(self):
        return _gui.GuiCheckboxArray_get_count(self)

    def remove_all(self):
        return _gui.GuiCheckboxArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiCheckboxArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiCheckboxArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiCheckboxArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiCheckboxArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiCheckboxArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiCheckboxArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiCheckboxArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiCheckboxArray_class_info)
    else:
        class_info = _gui.GuiCheckboxArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiCheckboxArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiCheckboxArray____class_destructor__
GuiCheckboxArray_swigregister = _gui.GuiCheckboxArray_swigregister
GuiCheckboxArray_swigregister(GuiCheckboxArray)

def GuiCheckboxArray_class_info():
    return _gui.GuiCheckboxArray_class_info()
GuiCheckboxArray_class_info = _gui.GuiCheckboxArray_class_info

def GuiCheckboxArray____class_destructor__(instance, is_array):
    return _gui.GuiCheckboxArray____class_destructor__(instance, is_array)
GuiCheckboxArray____class_destructor__ = _gui.GuiCheckboxArray____class_destructor__

class GuiCheckboxVector(GuiCheckboxBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiCheckboxBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiCheckboxVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiCheckboxBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiCheckboxVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiCheckboxVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiCheckboxVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiCheckboxVector_append(self, *args)

    def add(self, element):
        return _gui.GuiCheckboxVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiCheckboxVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiCheckboxVector_remove_last(self)

    def empty(self):
        return _gui.GuiCheckboxVector_empty(self)

    def remove_all(self):
        return _gui.GuiCheckboxVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiCheckboxVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiCheckboxVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiCheckboxVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiCheckboxVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiCheckboxVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiCheckboxVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiCheckboxVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiCheckboxVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiCheckboxVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiCheckboxVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiCheckboxVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiCheckboxVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiCheckboxVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiCheckboxVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiCheckboxVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiCheckboxVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiCheckboxVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiCheckboxVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiCheckboxVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiCheckboxVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiCheckboxVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiCheckboxVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiCheckboxVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiCheckboxVector_class_info)
    else:
        class_info = _gui.GuiCheckboxVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiCheckboxVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiCheckboxVector____class_destructor__
GuiCheckboxVector_swigregister = _gui.GuiCheckboxVector_swigregister
GuiCheckboxVector_swigregister(GuiCheckboxVector)

def GuiCheckboxVector_class_info():
    return _gui.GuiCheckboxVector_class_info()
GuiCheckboxVector_class_info = _gui.GuiCheckboxVector_class_info

def GuiCheckboxVector____class_destructor__(instance, is_array):
    return _gui.GuiCheckboxVector____class_destructor__(instance, is_array)
GuiCheckboxVector____class_destructor__ = _gui.GuiCheckboxVector____class_destructor__

class GuiCheckboxSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiCheckboxSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiCheckboxSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiCheckboxSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiCheckboxSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiCheckboxSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiCheckboxSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiCheckboxSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiCheckboxSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiCheckboxSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiCheckboxSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiCheckboxSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiCheckboxSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiCheckboxSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiCheckboxSet_to_array(self)

    def add(self, *args):
        return _gui.GuiCheckboxSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiCheckboxSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiCheckboxSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiCheckboxSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiCheckboxSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiCheckboxSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiCheckboxSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiCheckboxSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiCheckboxSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiCheckboxSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiCheckboxSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiCheckboxSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiCheckboxSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiCheckboxSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiCheckboxSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiCheckboxSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiCheckboxSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiCheckboxSet
    __del__ = lambda self: None
GuiCheckboxSet_swigregister = _gui.GuiCheckboxSet_swigregister
GuiCheckboxSet_swigregister(GuiCheckboxSet)

def GuiCheckboxSet_get_linear_search_threshold():
    return _gui.GuiCheckboxSet_get_linear_search_threshold()
GuiCheckboxSet_get_linear_search_threshold = _gui.GuiCheckboxSet_get_linear_search_threshold

class GuiListView(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListView, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListView, name)
    __repr__ = _swig_repr

    def __init__(self, parent, x, y, w, h):
        if self.__class__ == GuiListView:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiListView(_self, parent, x, y, w, h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def draw(self, dc):
        return _gui.GuiListView_draw(self, dc)

    def show(self):
        return _gui.GuiListView_show(self)

    def hide(self):
        return _gui.GuiListView_hide(self)

    def resize(self, x, y, w, h):
        return _gui.GuiListView_resize(self, x, y, w, h)

    def process_event(self, event_id):
        return _gui.GuiListView_process_event(self, event_id)

    def get_selected_index(self):
        return _gui.GuiListView_get_selected_index(self)

    def set_selected_index(self, index):
        return _gui.GuiListView_set_selected_index(self, index)

    def add_item(self, *args):
        return _gui.GuiListView_add_item(self, *args)

    def get_item_name(self, index):
        return _gui.GuiListView_get_item_name(self, index)

    def set_item_name(self, index, name):
        return _gui.GuiListView_set_item_name(self, index, name)

    def get_item_data(self, index):
        return _gui.GuiListView_get_item_data(self, index)

    def set_item_data(self, index, data):
        return _gui.GuiListView_set_item_data(self, index, data)

    def set_item_enabled(self, *args):
        return _gui.GuiListView_set_item_enabled(self, *args)

    def make_item_title(self, name):
        return _gui.GuiListView_make_item_title(self, name)

    def is_item_enabled(self, *args):
        return _gui.GuiListView_is_item_enabled(self, *args)

    def is_item_disabled(self, *args):
        return _gui.GuiListView_is_item_disabled(self, *args)

    def get_item_count(self):
        return _gui.GuiListView_get_item_count(self)

    def get_item_icon(self, index):
        return _gui.GuiListView_get_item_icon(self, index)

    def get_item_icons(self, index):
        return _gui.GuiListView_get_item_icons(self, index)

    def remove_all_items(self):
        return _gui.GuiListView_remove_all_items(self)

    def remove_item(self, index):
        return _gui.GuiListView_remove_item(self, index)

    def find_item_by_name(self, name):
        return _gui.GuiListView_find_item_by_name(self, name)

    def set_mouse_over_selection(self, over):
        return _gui.GuiListView_set_mouse_over_selection(self, over)

    def get_mouse_over_selection(self):
        return _gui.GuiListView_get_mouse_over_selection(self)

    def scroll(self):
        return _gui.GuiListView_scroll(self)

    def set_cell_height(self, height):
        return _gui.GuiListView_set_cell_height(self, height)

    def set_icons_width(self, width):
        return _gui.GuiListView_set_icons_width(self, width)

    def get_item_y_position(self, index, y):
        return _gui.GuiListView_get_item_y_position(self, index, y)

    def set_highlight_case_sensitive(self, case_sensitive):
        return _gui.GuiListView_set_highlight_case_sensitive(self, case_sensitive)

    def set_highlight_words(self, keyword_list):
        return _gui.GuiListView_set_highlight_words(self, keyword_list)

    def is_item_readonly(self, name, readonly):
        return _gui.GuiListView_is_item_readonly(self, name, readonly)

    def set_item_readonly(self, name, enabled):
        return _gui.GuiListView_set_item_readonly(self, name, enabled)

    def get_scrollbar_width(self):
        return _gui.GuiListView_get_scrollbar_width(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiListView_class_info)
    else:
        class_info = _gui.GuiListView_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiListView____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiListView____class_destructor__

    def get_class_info(self):
        return _gui.GuiListView_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiListView___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiListView___collect__(self)

    def __uncollect__(self):
        return _gui.GuiListView___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiListView(self)
        return weakref_proxy(self)
GuiListView_swigregister = _gui.GuiListView_swigregister
GuiListView_swigregister(GuiListView)
EVT_ID_LIST_VIEW_SELECT = cvar.EVT_ID_LIST_VIEW_SELECT
EVT_ID_LIST_VIEW_VALIDATE = cvar.EVT_ID_LIST_VIEW_VALIDATE

def GuiListView_class_info():
    return _gui.GuiListView_class_info()
GuiListView_class_info = _gui.GuiListView_class_info

def GuiListView____class_destructor__(instance, is_array):
    return _gui.GuiListView____class_destructor__(instance, is_array)
GuiListView____class_destructor__ = _gui.GuiListView____class_destructor__

class GuiListViewItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListViewItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListViewItem, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _gui.new_GuiListViewItem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["data"] = _gui.GuiListViewItem_data_set
    __swig_getmethods__["data"] = _gui.GuiListViewItem_data_get
    if _newclass:
        data = _swig_property(_gui.GuiListViewItem_data_get, _gui.GuiListViewItem_data_set)
    __swig_setmethods__["enabled"] = _gui.GuiListViewItem_enabled_set
    __swig_getmethods__["enabled"] = _gui.GuiListViewItem_enabled_get
    if _newclass:
        enabled = _swig_property(_gui.GuiListViewItem_enabled_get, _gui.GuiListViewItem_enabled_set)
    __swig_setmethods__["readonly"] = _gui.GuiListViewItem_readonly_set
    __swig_getmethods__["readonly"] = _gui.GuiListViewItem_readonly_get
    if _newclass:
        readonly = _swig_property(_gui.GuiListViewItem_readonly_get, _gui.GuiListViewItem_readonly_set)
    __swig_setmethods__["bold"] = _gui.GuiListViewItem_bold_set
    __swig_getmethods__["bold"] = _gui.GuiListViewItem_bold_get
    if _newclass:
        bold = _swig_property(_gui.GuiListViewItem_bold_get, _gui.GuiListViewItem_bold_set)
    __swig_setmethods__["name"] = _gui.GuiListViewItem_name_set
    __swig_getmethods__["name"] = _gui.GuiListViewItem_name_get
    if _newclass:
        name = _swig_property(_gui.GuiListViewItem_name_get, _gui.GuiListViewItem_name_set)
    __swig_setmethods__["icons"] = _gui.GuiListViewItem_icons_set
    __swig_getmethods__["icons"] = _gui.GuiListViewItem_icons_get
    if _newclass:
        icons = _swig_property(_gui.GuiListViewItem_icons_get, _gui.GuiListViewItem_icons_set)
    __swig_destroy__ = _gui.delete_GuiListViewItem
    __del__ = lambda self: None
GuiListViewItem_swigregister = _gui.GuiListViewItem_swigregister
GuiListViewItem_swigregister(GuiListViewItem)

class GuiListViewBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListViewBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListViewBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiListViewBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiListViewBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiListViewBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiListViewBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiListViewBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiListViewBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiListViewBasicArray_front(self)

    def back(self):
        return _gui.GuiListViewBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiListViewBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiListViewBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiListViewBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiListViewBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiListViewBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiListViewBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiListViewBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiListViewBasicArray_class_info)
    else:
        class_info = _gui.GuiListViewBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiListViewBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiListViewBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiListViewBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiListViewBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiListViewBasicArray_swigregister = _gui.GuiListViewBasicArray_swigregister
GuiListViewBasicArray_swigregister(GuiListViewBasicArray)

def GuiListViewBasicArray_class_info():
    return _gui.GuiListViewBasicArray_class_info()
GuiListViewBasicArray_class_info = _gui.GuiListViewBasicArray_class_info

def GuiListViewBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiListViewBasicArray____class_destructor__(instance, is_array)
GuiListViewBasicArray____class_destructor__ = _gui.GuiListViewBasicArray____class_destructor__

class GuiListViewArray(GuiListViewBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiListViewBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListViewArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiListViewBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListViewArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiListViewArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiListViewArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiListViewArray_append(self, *args)

    def get_count(self):
        return _gui.GuiListViewArray_get_count(self)

    def remove_all(self):
        return _gui.GuiListViewArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiListViewArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiListViewArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiListViewArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiListViewArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiListViewArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiListViewArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiListViewArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiListViewArray_class_info)
    else:
        class_info = _gui.GuiListViewArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiListViewArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiListViewArray____class_destructor__
GuiListViewArray_swigregister = _gui.GuiListViewArray_swigregister
GuiListViewArray_swigregister(GuiListViewArray)

def GuiListViewArray_class_info():
    return _gui.GuiListViewArray_class_info()
GuiListViewArray_class_info = _gui.GuiListViewArray_class_info

def GuiListViewArray____class_destructor__(instance, is_array):
    return _gui.GuiListViewArray____class_destructor__(instance, is_array)
GuiListViewArray____class_destructor__ = _gui.GuiListViewArray____class_destructor__

class GuiListViewVector(GuiListViewBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiListViewBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListViewVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiListViewBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListViewVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiListViewVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiListViewVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiListViewVector_append(self, *args)

    def add(self, element):
        return _gui.GuiListViewVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiListViewVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiListViewVector_remove_last(self)

    def empty(self):
        return _gui.GuiListViewVector_empty(self)

    def remove_all(self):
        return _gui.GuiListViewVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiListViewVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiListViewVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiListViewVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiListViewVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiListViewVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiListViewVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiListViewVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiListViewVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiListViewVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiListViewVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiListViewVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiListViewVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiListViewVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiListViewVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiListViewVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiListViewVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiListViewVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiListViewVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiListViewVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiListViewVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiListViewVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiListViewVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiListViewVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiListViewVector_class_info)
    else:
        class_info = _gui.GuiListViewVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiListViewVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiListViewVector____class_destructor__
GuiListViewVector_swigregister = _gui.GuiListViewVector_swigregister
GuiListViewVector_swigregister(GuiListViewVector)

def GuiListViewVector_class_info():
    return _gui.GuiListViewVector_class_info()
GuiListViewVector_class_info = _gui.GuiListViewVector_class_info

def GuiListViewVector____class_destructor__(instance, is_array):
    return _gui.GuiListViewVector____class_destructor__(instance, is_array)
GuiListViewVector____class_destructor__ = _gui.GuiListViewVector____class_destructor__

class GuiListViewSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiListViewSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiListViewSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiListViewSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiListViewSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiListViewSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiListViewSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiListViewSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiListViewSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiListViewSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiListViewSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiListViewSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiListViewSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiListViewSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiListViewSet_to_array(self)

    def add(self, *args):
        return _gui.GuiListViewSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiListViewSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiListViewSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiListViewSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiListViewSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiListViewSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiListViewSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiListViewSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiListViewSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiListViewSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiListViewSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiListViewSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiListViewSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiListViewSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiListViewSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiListViewSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiListViewSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiListViewSet
    __del__ = lambda self: None
GuiListViewSet_swigregister = _gui.GuiListViewSet_swigregister
GuiListViewSet_swigregister(GuiListViewSet)

def GuiListViewSet_get_linear_search_threshold():
    return _gui.GuiListViewSet_get_linear_search_threshold()
GuiListViewSet_get_linear_search_threshold = _gui.GuiListViewSet_get_linear_search_threshold

class GuiPanel(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiPanel, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiPanel, name)
    __repr__ = _swig_repr

    def __init__(self, parent, x, y, w, h):
        if self.__class__ == GuiPanel:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiPanel(_self, parent, x, y, w, h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def draw(self, dc):
        return _gui.GuiPanel_draw(self, dc)

    def show(self):
        return _gui.GuiPanel_show(self)

    def hide(self):
        return _gui.GuiPanel_hide(self)

    def get_background_color(self):
        return _gui.GuiPanel_get_background_color(self)

    def set_background_color(self, *args):
        return _gui.GuiPanel_set_background_color(self, *args)

    def set_top_toolbar_visible(self, visible):
        return _gui.GuiPanel_set_top_toolbar_visible(self, visible)

    def is_top_toolbar_visible(self):
        return _gui.GuiPanel_is_top_toolbar_visible(self)

    def set_bottom_toolbar_visible(self, visible):
        return _gui.GuiPanel_set_bottom_toolbar_visible(self, visible)

    def is_bottom_toolbar_visible(self):
        return _gui.GuiPanel_is_bottom_toolbar_visible(self)

    def get_top_toolbar(self):
        return _gui.GuiPanel_get_top_toolbar(self)

    def get_bottom_toolbar(self):
        return _gui.GuiPanel_get_bottom_toolbar(self)

    def is_scroll_enabled(self):
        return _gui.GuiPanel_is_scroll_enabled(self)

    def set_scroll_enabled(self, enable):
        return _gui.GuiPanel_set_scroll_enabled(self, enable)

    def is_horizontal_bar_visible(self):
        return _gui.GuiPanel_is_horizontal_bar_visible(self)

    def is_vertical_bar_visible(self):
        return _gui.GuiPanel_is_vertical_bar_visible(self)

    def reinit_scrollbars_offset(self):
        return _gui.GuiPanel_reinit_scrollbars_offset(self)

    def reinit_scrollbars(self):
        return _gui.GuiPanel_reinit_scrollbars(self)

    def set_virtual_size(self, width, height):
        return _gui.GuiPanel_set_virtual_size(self, width, height)

    def get_virtual_width(self):
        return _gui.GuiPanel_get_virtual_width(self)

    def get_virtual_height(self):
        return _gui.GuiPanel_get_virtual_height(self)

    def resize(self, x, y, w, h):
        return _gui.GuiPanel_resize(self, x, y, w, h)

    def process_event(self, event_id):
        return _gui.GuiPanel_process_event(self, event_id)

    def set_clip_region(self, x, y, w, h):
        return _gui.GuiPanel_set_clip_region(self, x, y, w, h)

    def get_view_x(self):
        return _gui.GuiPanel_get_view_x(self)

    def get_view_y(self):
        return _gui.GuiPanel_get_view_y(self)

    def get_view_width(self):
        return _gui.GuiPanel_get_view_width(self)

    def get_view_height(self):
        return _gui.GuiPanel_get_view_height(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiPanel_class_info)
    else:
        class_info = _gui.GuiPanel_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiPanel____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiPanel____class_destructor__

    def get_class_info(self):
        return _gui.GuiPanel_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiPanel___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiPanel___collect__(self)

    def __uncollect__(self):
        return _gui.GuiPanel___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiPanel(self)
        return weakref_proxy(self)
GuiPanel_swigregister = _gui.GuiPanel_swigregister
GuiPanel_swigregister(GuiPanel)

def GuiPanel_class_info():
    return _gui.GuiPanel_class_info()
GuiPanel_class_info = _gui.GuiPanel_class_info

def GuiPanel____class_destructor__(instance, is_array):
    return _gui.GuiPanel____class_destructor__(instance, is_array)
GuiPanel____class_destructor__ = _gui.GuiPanel____class_destructor__

class GuiPanelBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiPanelBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiPanelBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiPanelBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiPanelBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiPanelBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiPanelBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiPanelBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiPanelBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiPanelBasicArray_front(self)

    def back(self):
        return _gui.GuiPanelBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiPanelBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiPanelBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiPanelBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiPanelBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiPanelBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiPanelBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiPanelBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiPanelBasicArray_class_info)
    else:
        class_info = _gui.GuiPanelBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiPanelBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiPanelBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiPanelBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiPanelBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiPanelBasicArray_swigregister = _gui.GuiPanelBasicArray_swigregister
GuiPanelBasicArray_swigregister(GuiPanelBasicArray)

def GuiPanelBasicArray_class_info():
    return _gui.GuiPanelBasicArray_class_info()
GuiPanelBasicArray_class_info = _gui.GuiPanelBasicArray_class_info

def GuiPanelBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiPanelBasicArray____class_destructor__(instance, is_array)
GuiPanelBasicArray____class_destructor__ = _gui.GuiPanelBasicArray____class_destructor__

class GuiPanelArray(GuiPanelBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiPanelBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiPanelArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiPanelBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiPanelArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiPanelArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiPanelArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiPanelArray_append(self, *args)

    def get_count(self):
        return _gui.GuiPanelArray_get_count(self)

    def remove_all(self):
        return _gui.GuiPanelArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiPanelArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiPanelArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiPanelArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiPanelArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiPanelArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiPanelArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiPanelArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiPanelArray_class_info)
    else:
        class_info = _gui.GuiPanelArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiPanelArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiPanelArray____class_destructor__
GuiPanelArray_swigregister = _gui.GuiPanelArray_swigregister
GuiPanelArray_swigregister(GuiPanelArray)

def GuiPanelArray_class_info():
    return _gui.GuiPanelArray_class_info()
GuiPanelArray_class_info = _gui.GuiPanelArray_class_info

def GuiPanelArray____class_destructor__(instance, is_array):
    return _gui.GuiPanelArray____class_destructor__(instance, is_array)
GuiPanelArray____class_destructor__ = _gui.GuiPanelArray____class_destructor__

class GuiPanelVector(GuiPanelBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiPanelBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiPanelVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiPanelBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiPanelVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiPanelVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiPanelVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiPanelVector_append(self, *args)

    def add(self, element):
        return _gui.GuiPanelVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiPanelVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiPanelVector_remove_last(self)

    def empty(self):
        return _gui.GuiPanelVector_empty(self)

    def remove_all(self):
        return _gui.GuiPanelVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiPanelVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiPanelVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiPanelVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiPanelVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiPanelVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiPanelVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiPanelVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiPanelVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiPanelVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiPanelVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiPanelVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiPanelVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiPanelVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiPanelVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiPanelVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiPanelVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiPanelVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiPanelVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiPanelVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiPanelVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiPanelVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiPanelVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiPanelVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiPanelVector_class_info)
    else:
        class_info = _gui.GuiPanelVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiPanelVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiPanelVector____class_destructor__
GuiPanelVector_swigregister = _gui.GuiPanelVector_swigregister
GuiPanelVector_swigregister(GuiPanelVector)

def GuiPanelVector_class_info():
    return _gui.GuiPanelVector_class_info()
GuiPanelVector_class_info = _gui.GuiPanelVector_class_info

def GuiPanelVector____class_destructor__(instance, is_array):
    return _gui.GuiPanelVector____class_destructor__(instance, is_array)
GuiPanelVector____class_destructor__ = _gui.GuiPanelVector____class_destructor__

class GuiPanelSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiPanelSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiPanelSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiPanelSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiPanelSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiPanelSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiPanelSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiPanelSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiPanelSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiPanelSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiPanelSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiPanelSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiPanelSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiPanelSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiPanelSet_to_array(self)

    def add(self, *args):
        return _gui.GuiPanelSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiPanelSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiPanelSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiPanelSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiPanelSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiPanelSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiPanelSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiPanelSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiPanelSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiPanelSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiPanelSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiPanelSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiPanelSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiPanelSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiPanelSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiPanelSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiPanelSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiPanelSet
    __del__ = lambda self: None
GuiPanelSet_swigregister = _gui.GuiPanelSet_swigregister
GuiPanelSet_swigregister(GuiPanelSet)

def GuiPanelSet_get_linear_search_threshold():
    return _gui.GuiPanelSet_get_linear_search_threshold()
GuiPanelSet_get_linear_search_threshold = _gui.GuiPanelSet_get_linear_search_threshold

class GuiTextEdit(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTextEdit, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTextEdit, name)
    __repr__ = _swig_repr
    VALIDATION_NONE = _gui.GuiTextEdit_VALIDATION_NONE
    VALIDATION_FOCUS_OUT = _gui.GuiTextEdit_VALIDATION_FOCUS_OUT
    VALIDATION_KEY_ENTER = _gui.GuiTextEdit_VALIDATION_KEY_ENTER
    VALIDATION_KEY_RETURN = _gui.GuiTextEdit_VALIDATION_KEY_RETURN
    VALIDATION_COUNT = _gui.GuiTextEdit_VALIDATION_COUNT

    def __init__(self, parent, x, y, w, h):
        if self.__class__ == GuiTextEdit:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiTextEdit(_self, parent, x, y, w, h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def show(self):
        return _gui.GuiTextEdit_show(self)

    def set_background_color(self, color_scheme):
        return _gui.GuiTextEdit_set_background_color(self, color_scheme)

    def set_text_color(self, color_scheme):
        return _gui.GuiTextEdit_set_text_color(self, color_scheme)

    def set_show_line_number_column(self, show):
        return _gui.GuiTextEdit_set_show_line_number_column(self, show)

    def set_show_syntax_color(self, show):
        return _gui.GuiTextEdit_set_show_syntax_color(self, show)

    def get_text_font(self):
        return _gui.GuiTextEdit_get_text_font(self)

    def set_text_font(self, font):
        return _gui.GuiTextEdit_set_text_font(self, font)

    def set_draw_decoration(self, enable):
        return _gui.GuiTextEdit_set_draw_decoration(self, enable)

    def is_draw_decoration(self):
        return _gui.GuiTextEdit_is_draw_decoration(self)

    def resize(self, x, y, w, h):
        return _gui.GuiTextEdit_resize(self, x, y, w, h)

    def get_text(self):
        return _gui.GuiTextEdit_get_text(self)

    def get_text_selected(self):
        return _gui.GuiTextEdit_get_text_selected(self)

    def get_current_line(self):
        return _gui.GuiTextEdit_get_current_line(self)

    def set_text(self, text):
        return _gui.GuiTextEdit_set_text(self, text)

    def clear(self):
        return _gui.GuiTextEdit_clear(self)

    def append(self, *args):
        return _gui.GuiTextEdit_append(self, *args)

    def append_after_cursor(self, text):
        return _gui.GuiTextEdit_append_after_cursor(self, text)

    def insert(self, text, row, col):
        return _gui.GuiTextEdit_insert(self, text, row, col)

    def set_current_line(self, *args):
        return _gui.GuiTextEdit_set_current_line(self, *args)

    def remove_whitespaces(self):
        return _gui.GuiTextEdit_remove_whitespaces(self)

    def get_lines_count(self):
        return _gui.GuiTextEdit_get_lines_count(self)

    def is_read_only(self):
        return _gui.GuiTextEdit_is_read_only(self)

    def set_read_only(self, readonly, draw_disable=False):
        return _gui.GuiTextEdit_set_read_only(self, readonly, draw_disable)

    def select_all(self):
        return _gui.GuiTextEdit_select_all(self)

    def deselect_all(self):
        return _gui.GuiTextEdit_deselect_all(self)

    def set_padding_line_y(self, value):
        return _gui.GuiTextEdit_set_padding_line_y(self, value)

    def get_padding_line_y(self):
        return _gui.GuiTextEdit_get_padding_line_y(self)

    def set_enable_zoom(self, value):
        return _gui.GuiTextEdit_set_enable_zoom(self, value)

    def is_enable_zoom(self):
        return _gui.GuiTextEdit_is_enable_zoom(self)

    def get_max_lines(self):
        return _gui.GuiTextEdit_get_max_lines(self)

    def set_max_lines(self, count):
        return _gui.GuiTextEdit_set_max_lines(self, count)

    def reset_scrollbar(self):
        return _gui.GuiTextEdit_reset_scrollbar(self)

    def process_event(self, event):
        return _gui.GuiTextEdit_process_event(self, event)

    def draw(self, dc):
        return _gui.GuiTextEdit_draw(self, dc)

    def set_keywords(self, keywords):
        return _gui.GuiTextEdit_set_keywords(self, keywords)

    def set_preprocessor_keywords(self, keywords):
        return _gui.GuiTextEdit_set_preprocessor_keywords(self, keywords)

    def set_reserved_keywords(self, keywords):
        return _gui.GuiTextEdit_set_reserved_keywords(self, keywords)

    def set_block_comments(self, block_comments):
        return _gui.GuiTextEdit_set_block_comments(self, block_comments)

    def set_line_comments(self, line_comments):
        return _gui.GuiTextEdit_set_line_comments(self, line_comments)

    def set_operators(self, operators):
        return _gui.GuiTextEdit_set_operators(self, operators)

    def set_strings(self, strings):
        return _gui.GuiTextEdit_set_strings(self, strings)

    def recompute_all_syntax_color(self):
        return _gui.GuiTextEdit_recompute_all_syntax_color(self)

    def is_text_modified(self):
        return _gui.GuiTextEdit_is_text_modified(self)

    def reset_is_text_modified(self):
        return _gui.GuiTextEdit_reset_is_text_modified(self)

    def on_edit_undo(self):
        return _gui.GuiTextEdit_on_edit_undo(self)

    def on_edit_redo(self):
        return _gui.GuiTextEdit_on_edit_redo(self)

    def on_edit_cut(self):
        return _gui.GuiTextEdit_on_edit_cut(self)

    def on_edit_copy(self, cut_mode=False):
        return _gui.GuiTextEdit_on_edit_copy(self, cut_mode)

    def on_edit_paste(self):
        return _gui.GuiTextEdit_on_edit_paste(self)

    def on_edit_select_all(self):
        return _gui.GuiTextEdit_on_edit_select_all(self)

    def on_duplicate_lines(self):
        return _gui.GuiTextEdit_on_duplicate_lines(self)

    def on_comment_lines(self):
        return _gui.GuiTextEdit_on_comment_lines(self)

    def on_uncomment_lines(self):
        return _gui.GuiTextEdit_on_uncomment_lines(self)

    def on_edit_delete(self):
        return _gui.GuiTextEdit_on_edit_delete(self)

    def goto_line(self, line):
        return _gui.GuiTextEdit_goto_line(self, line)

    def zoom_in(self):
        return _gui.GuiTextEdit_zoom_in(self)

    def zoom_out(self):
        return _gui.GuiTextEdit_zoom_out(self)

    def zoom_default(self):
        return _gui.GuiTextEdit_zoom_default(self)

    def set_font_size(self, size):
        return _gui.GuiTextEdit_set_font_size(self, size)

    def get_font_size(self):
        return _gui.GuiTextEdit_get_font_size(self)

    def get_text_height(self):
        return _gui.GuiTextEdit_get_text_height(self)

    def get_text_line_height(self):
        return _gui.GuiTextEdit_get_text_line_height(self)

    def get_infos(self, line, column, lines_count):
        return _gui.GuiTextEdit_get_infos(self, line, column, lines_count)

    def find_next_text(self, text, case_sensitive=False):
        return _gui.GuiTextEdit_find_next_text(self, text, case_sensitive)

    def find_next_and_replace_text(self, text, new_text, case_sensitive=False):
        return _gui.GuiTextEdit_find_next_and_replace_text(self, text, new_text, case_sensitive)

    def replace_all_text(self, text, new_text, case_sensitive=False):
        return _gui.GuiTextEdit_replace_all_text(self, text, new_text, case_sensitive)

    def set_highlighted_word(self, word, always_draw, case_sesitive=False):
        return _gui.GuiTextEdit_set_highlighted_word(self, word, always_draw, case_sesitive)

    def disable_highlighted_word(self):
        return _gui.GuiTextEdit_disable_highlighted_word(self)

    def set_highlighted_word_auto_mode(self, state):
        return _gui.GuiTextEdit_set_highlighted_word_auto_mode(self, state)

    def is_highlighted_word_auto_mode(self):
        return _gui.GuiTextEdit_is_highlighted_word_auto_mode(self)

    def set_highlighted_cursor_line(self, state):
        return _gui.GuiTextEdit_set_highlighted_cursor_line(self, state)

    def is_highlighted_cursor_line(self):
        return _gui.GuiTextEdit_is_highlighted_cursor_line(self)

    def set_cursor_on_mouse(self):
        return _gui.GuiTextEdit_set_cursor_on_mouse(self)

    def set_force_display_cursor(self, state):
        return _gui.GuiTextEdit_set_force_display_cursor(self, state)

    def get_current_mouse_location(self, col, row):
        return _gui.GuiTextEdit_get_current_mouse_location(self, col, row)

    def enable_autoscroll_last_line(self, b):
        return _gui.GuiTextEdit_enable_autoscroll_last_line(self, b)

    def get_variables_from_text(self):
        return _gui.GuiTextEdit_get_variables_from_text(self)
    if _newclass:
        get_word_warp = staticmethod(_gui.GuiTextEdit_get_word_warp)
    else:
        get_word_warp = _gui.GuiTextEdit_get_word_warp
    if _newclass:
        class_info = staticmethod(_gui.GuiTextEdit_class_info)
    else:
        class_info = _gui.GuiTextEdit_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTextEdit____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTextEdit____class_destructor__

    def get_class_info(self):
        return _gui.GuiTextEdit_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiTextEdit___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiTextEdit___collect__(self)

    def __uncollect__(self):
        return _gui.GuiTextEdit___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiTextEdit(self)
        return weakref_proxy(self)
GuiTextEdit_swigregister = _gui.GuiTextEdit_swigregister
GuiTextEdit_swigregister(GuiTextEdit)
EVT_ID_TEXT_EDIT_CHANGED = cvar.EVT_ID_TEXT_EDIT_CHANGED
EVT_ID_TEXT_EDIT_VALIDATE = cvar.EVT_ID_TEXT_EDIT_VALIDATE
EVT_ID_TEXT_EDIT_MODIFIED = cvar.EVT_ID_TEXT_EDIT_MODIFIED
EVT_ID_TEXT_EDIT_CURSOR_CHANGED = cvar.EVT_ID_TEXT_EDIT_CURSOR_CHANGED
EVT_ID_TEXT_EDIT_FONT_SIZE_CHANGED = cvar.EVT_ID_TEXT_EDIT_FONT_SIZE_CHANGED

def GuiTextEdit_get_word_warp(_text, width, font):
    return _gui.GuiTextEdit_get_word_warp(_text, width, font)
GuiTextEdit_get_word_warp = _gui.GuiTextEdit_get_word_warp

def GuiTextEdit_class_info():
    return _gui.GuiTextEdit_class_info()
GuiTextEdit_class_info = _gui.GuiTextEdit_class_info

def GuiTextEdit____class_destructor__(instance, is_array):
    return _gui.GuiTextEdit____class_destructor__(instance, is_array)
GuiTextEdit____class_destructor__ = _gui.GuiTextEdit____class_destructor__

class GuiTextEditBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTextEditBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTextEditBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiTextEditBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiTextEditBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiTextEditBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiTextEditBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiTextEditBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiTextEditBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiTextEditBasicArray_front(self)

    def back(self):
        return _gui.GuiTextEditBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiTextEditBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiTextEditBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiTextEditBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiTextEditBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiTextEditBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiTextEditBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiTextEditBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiTextEditBasicArray_class_info)
    else:
        class_info = _gui.GuiTextEditBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTextEditBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTextEditBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiTextEditBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiTextEditBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiTextEditBasicArray_swigregister = _gui.GuiTextEditBasicArray_swigregister
GuiTextEditBasicArray_swigregister(GuiTextEditBasicArray)

def GuiTextEditBasicArray_class_info():
    return _gui.GuiTextEditBasicArray_class_info()
GuiTextEditBasicArray_class_info = _gui.GuiTextEditBasicArray_class_info

def GuiTextEditBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiTextEditBasicArray____class_destructor__(instance, is_array)
GuiTextEditBasicArray____class_destructor__ = _gui.GuiTextEditBasicArray____class_destructor__

class GuiTextEditArray(GuiTextEditBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiTextEditBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTextEditArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiTextEditBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTextEditArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiTextEditArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiTextEditArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiTextEditArray_append(self, *args)

    def get_count(self):
        return _gui.GuiTextEditArray_get_count(self)

    def remove_all(self):
        return _gui.GuiTextEditArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiTextEditArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiTextEditArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiTextEditArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiTextEditArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiTextEditArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiTextEditArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiTextEditArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiTextEditArray_class_info)
    else:
        class_info = _gui.GuiTextEditArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTextEditArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTextEditArray____class_destructor__
GuiTextEditArray_swigregister = _gui.GuiTextEditArray_swigregister
GuiTextEditArray_swigregister(GuiTextEditArray)

def GuiTextEditArray_class_info():
    return _gui.GuiTextEditArray_class_info()
GuiTextEditArray_class_info = _gui.GuiTextEditArray_class_info

def GuiTextEditArray____class_destructor__(instance, is_array):
    return _gui.GuiTextEditArray____class_destructor__(instance, is_array)
GuiTextEditArray____class_destructor__ = _gui.GuiTextEditArray____class_destructor__

class GuiTextEditVector(GuiTextEditBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiTextEditBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTextEditVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiTextEditBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTextEditVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiTextEditVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiTextEditVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiTextEditVector_append(self, *args)

    def add(self, element):
        return _gui.GuiTextEditVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiTextEditVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiTextEditVector_remove_last(self)

    def empty(self):
        return _gui.GuiTextEditVector_empty(self)

    def remove_all(self):
        return _gui.GuiTextEditVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiTextEditVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiTextEditVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiTextEditVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiTextEditVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiTextEditVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiTextEditVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiTextEditVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiTextEditVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiTextEditVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiTextEditVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiTextEditVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiTextEditVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiTextEditVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiTextEditVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiTextEditVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiTextEditVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiTextEditVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiTextEditVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiTextEditVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiTextEditVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiTextEditVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiTextEditVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiTextEditVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiTextEditVector_class_info)
    else:
        class_info = _gui.GuiTextEditVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTextEditVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTextEditVector____class_destructor__
GuiTextEditVector_swigregister = _gui.GuiTextEditVector_swigregister
GuiTextEditVector_swigregister(GuiTextEditVector)

def GuiTextEditVector_class_info():
    return _gui.GuiTextEditVector_class_info()
GuiTextEditVector_class_info = _gui.GuiTextEditVector_class_info

def GuiTextEditVector____class_destructor__(instance, is_array):
    return _gui.GuiTextEditVector____class_destructor__(instance, is_array)
GuiTextEditVector____class_destructor__ = _gui.GuiTextEditVector____class_destructor__

class GuiTextEditSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTextEditSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTextEditSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiTextEditSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiTextEditSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiTextEditSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiTextEditSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiTextEditSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiTextEditSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiTextEditSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiTextEditSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiTextEditSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiTextEditSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiTextEditSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiTextEditSet_to_array(self)

    def add(self, *args):
        return _gui.GuiTextEditSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiTextEditSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiTextEditSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiTextEditSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiTextEditSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiTextEditSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiTextEditSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiTextEditSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiTextEditSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiTextEditSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiTextEditSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiTextEditSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiTextEditSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiTextEditSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiTextEditSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiTextEditSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiTextEditSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiTextEditSet
    __del__ = lambda self: None
GuiTextEditSet_swigregister = _gui.GuiTextEditSet_swigregister
GuiTextEditSet_swigregister(GuiTextEditSet)

def GuiTextEditSet_get_linear_search_threshold():
    return _gui.GuiTextEditSet_get_linear_search_threshold()
GuiTextEditSet_get_linear_search_threshold = _gui.GuiTextEditSet_get_linear_search_threshold

class GuiLineEdit(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiLineEdit, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiLineEdit, name)
    __repr__ = _swig_repr
    STYLE_FLAT = _gui.GuiLineEdit_STYLE_FLAT
    STYLE_ROUND = _gui.GuiLineEdit_STYLE_ROUND
    STYLE_COUNT = _gui.GuiLineEdit_STYLE_COUNT
    VALIDATION_NONE = _gui.GuiLineEdit_VALIDATION_NONE
    VALIDATION_FOCUS_OUT = _gui.GuiLineEdit_VALIDATION_FOCUS_OUT
    VALIDATION_KEY_ENTER = _gui.GuiLineEdit_VALIDATION_KEY_ENTER
    VALIDATION_KEY_RETURN = _gui.GuiLineEdit_VALIDATION_KEY_RETURN
    VALIDATION_COUNT = _gui.GuiLineEdit_VALIDATION_COUNT
    if _newclass:
        get_style_name = staticmethod(_gui.GuiLineEdit_get_style_name)
    else:
        get_style_name = _gui.GuiLineEdit_get_style_name
    if _newclass:
        get_validation_name = staticmethod(_gui.GuiLineEdit_get_validation_name)
    else:
        get_validation_name = _gui.GuiLineEdit_get_validation_name

    def __init__(self, *args):
        if self.__class__ == GuiLineEdit:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiLineEdit(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def resize(self, x, y, w, h):
        return _gui.GuiLineEdit_resize(self, x, y, w, h)

    def show(self):
        return _gui.GuiLineEdit_show(self)

    def set_focus(self):
        return _gui.GuiLineEdit_set_focus(self)

    def get_label(self):
        return _gui.GuiLineEdit_get_label(self)

    def set_label(self, label):
        return _gui.GuiLineEdit_set_label(self, label)

    def is_modified(self):
        return _gui.GuiLineEdit_is_modified(self)

    def get_text(self):
        return _gui.GuiLineEdit_get_text(self)

    def is_allowed_key(self, key):
        return _gui.GuiLineEdit_is_allowed_key(self, key)

    def set_text(self, text, modified=False):
        return _gui.GuiLineEdit_set_text(self, text, modified)

    def draw(self, dc):
        return _gui.GuiLineEdit_draw(self, dc)

    def is_read_only(self):
        return _gui.GuiLineEdit_is_read_only(self)

    def set_read_only(self, value, draw_disable=False):
        return _gui.GuiLineEdit_set_read_only(self, value, draw_disable)

    def get_label_width(self):
        return _gui.GuiLineEdit_get_label_width(self)

    def enable_canditates_popup_on_keypressed(self, value):
        return _gui.GuiLineEdit_enable_canditates_popup_on_keypressed(self, value)

    def set_text_font(self, font):
        return _gui.GuiLineEdit_set_text_font(self, font)

    def get_text_font(self):
        return _gui.GuiLineEdit_get_text_font(self)

    def select_all(self):
        return _gui.GuiLineEdit_select_all(self)

    def deselect_all(self):
        return _gui.GuiLineEdit_deselect_all(self)

    def select_end(self):
        return _gui.GuiLineEdit_select_end(self)

    def get_selected_text(self):
        return _gui.GuiLineEdit_get_selected_text(self)

    def split_selection(self, left, mid, right):
        return _gui.GuiLineEdit_split_selection(self, left, mid, right)

    def get_style(self):
        return _gui.GuiLineEdit_get_style(self)

    def set_style(self, style):
        return _gui.GuiLineEdit_set_style(self, style)

    def process_event(self, event):
        return _gui.GuiLineEdit_process_event(self, event)

    def set_draw_decoration(self, enable):
        return _gui.GuiLineEdit_set_draw_decoration(self, enable)

    def is_draw_decoration(self):
        return _gui.GuiLineEdit_is_draw_decoration(self)

    def set_background_color(self, color):
        return _gui.GuiLineEdit_set_background_color(self, color)

    def get_background_color(self):
        return _gui.GuiLineEdit_get_background_color(self)

    def set_roundness(self, roundness):
        return _gui.GuiLineEdit_set_roundness(self, roundness)

    def get_roundness(self):
        return _gui.GuiLineEdit_get_roundness(self)

    def get_validation(self):
        return _gui.GuiLineEdit_get_validation(self)

    def set_offset_position_text(self, offset_x, offset_y):
        return _gui.GuiLineEdit_set_offset_position_text(self, offset_x, offset_y)
    if _newclass:
        is_characters_group = staticmethod(_gui.GuiLineEdit_is_characters_group)
    else:
        is_characters_group = _gui.GuiLineEdit_is_characters_group

    def align_text_on_the_right(self):
        return _gui.GuiLineEdit_align_text_on_the_right(self)

    def set_is_align_text_on_the_right(self, value):
        return _gui.GuiLineEdit_set_is_align_text_on_the_right(self, value)

    def is_disable_characters_group(self):
        return _gui.GuiLineEdit_is_disable_characters_group(self)

    def set_disable_characters_group(self, enable):
        return _gui.GuiLineEdit_set_disable_characters_group(self, enable)

    def is_use_custom_color_text(self):
        return _gui.GuiLineEdit_is_use_custom_color_text(self)

    def set_use_custom_color_text(self, enable):
        return _gui.GuiLineEdit_set_use_custom_color_text(self, enable)

    def get_custom_color_text(self, r, g, b):
        return _gui.GuiLineEdit_get_custom_color_text(self, r, g, b)

    def set_custom_color_text(self, r, g, b):
        return _gui.GuiLineEdit_set_custom_color_text(self, r, g, b)

    def focus_on_cursor(self):
        return _gui.GuiLineEdit_focus_on_cursor(self)

    def set_candidate_values(self, *args):
        return _gui.GuiLineEdit_set_candidate_values(self, *args)

    def get_candidate_values(self):
        return _gui.GuiLineEdit_get_candidate_values(self)

    def add_candidate_value(self, value, data=None):
        return _gui.GuiLineEdit_add_candidate_value(self, value, data)

    def remove_all_candidate_values(self):
        return _gui.GuiLineEdit_remove_all_candidate_values(self)

    def set_canditates_popup_max_line_count(self, value):
        return _gui.GuiLineEdit_set_canditates_popup_max_line_count(self, value)

    def get_popup_menu(self):
        return _gui.GuiLineEdit_get_popup_menu(self)

    def popup_menu(self):
        return _gui.GuiLineEdit_popup_menu(self)

    def set_null_label(self, null_label):
        return _gui.GuiLineEdit_set_null_label(self, null_label)

    def get_null_label(self):
        return _gui.GuiLineEdit_get_null_label(self)

    def set_null_value(self, null_value):
        return _gui.GuiLineEdit_set_null_value(self, null_value)

    def get_null_value(self):
        return _gui.GuiLineEdit_get_null_value(self)

    def set_force_display_cursor(self, state):
        return _gui.GuiLineEdit_set_force_display_cursor(self, state)

    def set_cursor_on_mouse(self):
        return _gui.GuiLineEdit_set_cursor_on_mouse(self)

    def get_item_data(self):
        return _gui.GuiLineEdit_get_item_data(self)

    def set_item_data(self, data):
        return _gui.GuiLineEdit_set_item_data(self, data)
    if _newclass:
        class_info = staticmethod(_gui.GuiLineEdit_class_info)
    else:
        class_info = _gui.GuiLineEdit_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiLineEdit____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiLineEdit____class_destructor__

    def get_class_info(self):
        return _gui.GuiLineEdit_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiLineEdit___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiLineEdit___collect__(self)

    def __uncollect__(self):
        return _gui.GuiLineEdit___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiLineEdit(self)
        return weakref_proxy(self)
GuiLineEdit_swigregister = _gui.GuiLineEdit_swigregister
GuiLineEdit_swigregister(GuiLineEdit)
EVT_ID_LINE_EDIT_CHANGED = cvar.EVT_ID_LINE_EDIT_CHANGED
EVT_ID_LINE_EDIT_UNCHANGED = cvar.EVT_ID_LINE_EDIT_UNCHANGED
EVT_ID_LINE_EDIT_VALIDATE = cvar.EVT_ID_LINE_EDIT_VALIDATE
EVT_ID_LINE_EDIT_ESCAPE_PRESSED = cvar.EVT_ID_LINE_EDIT_ESCAPE_PRESSED
EVT_ID_LINE_EDIT_VALUE_EDITED = cvar.EVT_ID_LINE_EDIT_VALUE_EDITED
EVT_ID_LINE_EDIT_CANDIDATES_POPUP_OPENING = cvar.EVT_ID_LINE_EDIT_CANDIDATES_POPUP_OPENING
EVT_ID_LINE_EDIT_KEY_PRESSED = cvar.EVT_ID_LINE_EDIT_KEY_PRESSED
EVT_ID_LINE_EDIT_MENU_SHOW = cvar.EVT_ID_LINE_EDIT_MENU_SHOW
EVT_ID_LINE_EDIT_MENU_HIDE = cvar.EVT_ID_LINE_EDIT_MENU_HIDE
EVT_ID_LINE_EDIT_MENU_ITEM_SELECTED = cvar.EVT_ID_LINE_EDIT_MENU_ITEM_SELECTED

def GuiLineEdit_get_style_name(style):
    return _gui.GuiLineEdit_get_style_name(style)
GuiLineEdit_get_style_name = _gui.GuiLineEdit_get_style_name

def GuiLineEdit_get_validation_name(validation):
    return _gui.GuiLineEdit_get_validation_name(validation)
GuiLineEdit_get_validation_name = _gui.GuiLineEdit_get_validation_name

def GuiLineEdit_is_characters_group(character):
    return _gui.GuiLineEdit_is_characters_group(character)
GuiLineEdit_is_characters_group = _gui.GuiLineEdit_is_characters_group

def GuiLineEdit_class_info():
    return _gui.GuiLineEdit_class_info()
GuiLineEdit_class_info = _gui.GuiLineEdit_class_info

def GuiLineEdit____class_destructor__(instance, is_array):
    return _gui.GuiLineEdit____class_destructor__(instance, is_array)
GuiLineEdit____class_destructor__ = _gui.GuiLineEdit____class_destructor__

class GuiLineEditBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiLineEditBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiLineEditBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiLineEditBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiLineEditBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiLineEditBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiLineEditBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiLineEditBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiLineEditBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiLineEditBasicArray_front(self)

    def back(self):
        return _gui.GuiLineEditBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiLineEditBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiLineEditBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiLineEditBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiLineEditBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiLineEditBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiLineEditBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiLineEditBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiLineEditBasicArray_class_info)
    else:
        class_info = _gui.GuiLineEditBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiLineEditBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiLineEditBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiLineEditBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiLineEditBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiLineEditBasicArray_swigregister = _gui.GuiLineEditBasicArray_swigregister
GuiLineEditBasicArray_swigregister(GuiLineEditBasicArray)

def GuiLineEditBasicArray_class_info():
    return _gui.GuiLineEditBasicArray_class_info()
GuiLineEditBasicArray_class_info = _gui.GuiLineEditBasicArray_class_info

def GuiLineEditBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiLineEditBasicArray____class_destructor__(instance, is_array)
GuiLineEditBasicArray____class_destructor__ = _gui.GuiLineEditBasicArray____class_destructor__

class GuiLineEditArray(GuiLineEditBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiLineEditBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiLineEditArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiLineEditBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiLineEditArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiLineEditArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiLineEditArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiLineEditArray_append(self, *args)

    def get_count(self):
        return _gui.GuiLineEditArray_get_count(self)

    def remove_all(self):
        return _gui.GuiLineEditArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiLineEditArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiLineEditArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiLineEditArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiLineEditArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiLineEditArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiLineEditArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiLineEditArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiLineEditArray_class_info)
    else:
        class_info = _gui.GuiLineEditArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiLineEditArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiLineEditArray____class_destructor__
GuiLineEditArray_swigregister = _gui.GuiLineEditArray_swigregister
GuiLineEditArray_swigregister(GuiLineEditArray)

def GuiLineEditArray_class_info():
    return _gui.GuiLineEditArray_class_info()
GuiLineEditArray_class_info = _gui.GuiLineEditArray_class_info

def GuiLineEditArray____class_destructor__(instance, is_array):
    return _gui.GuiLineEditArray____class_destructor__(instance, is_array)
GuiLineEditArray____class_destructor__ = _gui.GuiLineEditArray____class_destructor__

class GuiLineEditVector(GuiLineEditBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiLineEditBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiLineEditVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiLineEditBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiLineEditVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiLineEditVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiLineEditVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiLineEditVector_append(self, *args)

    def add(self, element):
        return _gui.GuiLineEditVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiLineEditVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiLineEditVector_remove_last(self)

    def empty(self):
        return _gui.GuiLineEditVector_empty(self)

    def remove_all(self):
        return _gui.GuiLineEditVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiLineEditVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiLineEditVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiLineEditVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiLineEditVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiLineEditVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiLineEditVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiLineEditVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiLineEditVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiLineEditVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiLineEditVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiLineEditVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiLineEditVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiLineEditVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiLineEditVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiLineEditVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiLineEditVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiLineEditVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiLineEditVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiLineEditVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiLineEditVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiLineEditVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiLineEditVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiLineEditVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiLineEditVector_class_info)
    else:
        class_info = _gui.GuiLineEditVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiLineEditVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiLineEditVector____class_destructor__
GuiLineEditVector_swigregister = _gui.GuiLineEditVector_swigregister
GuiLineEditVector_swigregister(GuiLineEditVector)

def GuiLineEditVector_class_info():
    return _gui.GuiLineEditVector_class_info()
GuiLineEditVector_class_info = _gui.GuiLineEditVector_class_info

def GuiLineEditVector____class_destructor__(instance, is_array):
    return _gui.GuiLineEditVector____class_destructor__(instance, is_array)
GuiLineEditVector____class_destructor__ = _gui.GuiLineEditVector____class_destructor__

class GuiLineEditSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiLineEditSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiLineEditSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiLineEditSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiLineEditSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiLineEditSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiLineEditSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiLineEditSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiLineEditSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiLineEditSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiLineEditSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiLineEditSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiLineEditSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiLineEditSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiLineEditSet_to_array(self)

    def add(self, *args):
        return _gui.GuiLineEditSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiLineEditSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiLineEditSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiLineEditSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiLineEditSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiLineEditSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiLineEditSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiLineEditSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiLineEditSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiLineEditSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiLineEditSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiLineEditSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiLineEditSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiLineEditSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiLineEditSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiLineEditSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiLineEditSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiLineEditSet
    __del__ = lambda self: None
GuiLineEditSet_swigregister = _gui.GuiLineEditSet_swigregister
GuiLineEditSet_swigregister(GuiLineEditSet)

def GuiLineEditSet_get_linear_search_threshold():
    return _gui.GuiLineEditSet_get_linear_search_threshold()
GuiLineEditSet_get_linear_search_threshold = _gui.GuiLineEditSet_get_linear_search_threshold

class GuiMessageBox(GuiWindow):
    __swig_setmethods__ = {}
    for _s in [GuiWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiMessageBox, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiMessageBox, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == GuiMessageBox:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiMessageBox(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def get_message(self):
        return _gui.GuiMessageBox_get_message(self)

    def set_message(self, message):
        return _gui.GuiMessageBox_set_message(self, message)

    def get_value(self):
        return _gui.GuiMessageBox_get_value(self)

    def set_style(self, style):
        return _gui.GuiMessageBox_set_style(self, style)

    def get_style(self):
        return _gui.GuiMessageBox_get_style(self)

    def set_default_value(self, value):
        return _gui.GuiMessageBox_set_default_value(self, value)

    def set_custom_button1_label(self, name):
        return _gui.GuiMessageBox_set_custom_button1_label(self, name)

    def set_custom_button2_label(self, name):
        return _gui.GuiMessageBox_set_custom_button2_label(self, name)

    def set_custom_button3_label(self, name):
        return _gui.GuiMessageBox_set_custom_button3_label(self, name)

    def set_list(self, list):
        return _gui.GuiMessageBox_set_list(self, list)

    def show(self):
        return _gui.GuiMessageBox_show(self)

    def draw(self, dc):
        return _gui.GuiMessageBox_draw(self, dc)
    if _newclass:
        class_info = staticmethod(_gui.GuiMessageBox_class_info)
    else:
        class_info = _gui.GuiMessageBox_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiMessageBox____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiMessageBox____class_destructor__

    def get_class_info(self):
        return _gui.GuiMessageBox_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiMessageBox___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiMessageBox___collect__(self)

    def __uncollect__(self):
        return _gui.GuiMessageBox___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiMessageBox(self)
        return weakref_proxy(self)
GuiMessageBox_swigregister = _gui.GuiMessageBox_swigregister
GuiMessageBox_swigregister(GuiMessageBox)

def GuiMessageBox_class_info():
    return _gui.GuiMessageBox_class_info()
GuiMessageBox_class_info = _gui.GuiMessageBox_class_info

def GuiMessageBox____class_destructor__(instance, is_array):
    return _gui.GuiMessageBox____class_destructor__(instance, is_array)
GuiMessageBox____class_destructor__ = _gui.GuiMessageBox____class_destructor__

class GuiMessageBoxBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiMessageBoxBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiMessageBoxBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiMessageBoxBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiMessageBoxBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiMessageBoxBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiMessageBoxBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiMessageBoxBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiMessageBoxBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiMessageBoxBasicArray_front(self)

    def back(self):
        return _gui.GuiMessageBoxBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiMessageBoxBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiMessageBoxBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiMessageBoxBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiMessageBoxBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiMessageBoxBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiMessageBoxBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiMessageBoxBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiMessageBoxBasicArray_class_info)
    else:
        class_info = _gui.GuiMessageBoxBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiMessageBoxBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiMessageBoxBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiMessageBoxBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiMessageBoxBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiMessageBoxBasicArray_swigregister = _gui.GuiMessageBoxBasicArray_swigregister
GuiMessageBoxBasicArray_swigregister(GuiMessageBoxBasicArray)

def GuiMessageBoxBasicArray_class_info():
    return _gui.GuiMessageBoxBasicArray_class_info()
GuiMessageBoxBasicArray_class_info = _gui.GuiMessageBoxBasicArray_class_info

def GuiMessageBoxBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiMessageBoxBasicArray____class_destructor__(instance, is_array)
GuiMessageBoxBasicArray____class_destructor__ = _gui.GuiMessageBoxBasicArray____class_destructor__

class GuiMessageBoxArray(GuiMessageBoxBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiMessageBoxBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiMessageBoxArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiMessageBoxBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiMessageBoxArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiMessageBoxArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiMessageBoxArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiMessageBoxArray_append(self, *args)

    def get_count(self):
        return _gui.GuiMessageBoxArray_get_count(self)

    def remove_all(self):
        return _gui.GuiMessageBoxArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiMessageBoxArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiMessageBoxArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiMessageBoxArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiMessageBoxArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiMessageBoxArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiMessageBoxArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiMessageBoxArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiMessageBoxArray_class_info)
    else:
        class_info = _gui.GuiMessageBoxArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiMessageBoxArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiMessageBoxArray____class_destructor__
GuiMessageBoxArray_swigregister = _gui.GuiMessageBoxArray_swigregister
GuiMessageBoxArray_swigregister(GuiMessageBoxArray)

def GuiMessageBoxArray_class_info():
    return _gui.GuiMessageBoxArray_class_info()
GuiMessageBoxArray_class_info = _gui.GuiMessageBoxArray_class_info

def GuiMessageBoxArray____class_destructor__(instance, is_array):
    return _gui.GuiMessageBoxArray____class_destructor__(instance, is_array)
GuiMessageBoxArray____class_destructor__ = _gui.GuiMessageBoxArray____class_destructor__

class GuiMessageBoxVector(GuiMessageBoxBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiMessageBoxBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiMessageBoxVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiMessageBoxBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiMessageBoxVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiMessageBoxVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiMessageBoxVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiMessageBoxVector_append(self, *args)

    def add(self, element):
        return _gui.GuiMessageBoxVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiMessageBoxVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiMessageBoxVector_remove_last(self)

    def empty(self):
        return _gui.GuiMessageBoxVector_empty(self)

    def remove_all(self):
        return _gui.GuiMessageBoxVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiMessageBoxVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiMessageBoxVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiMessageBoxVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiMessageBoxVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiMessageBoxVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiMessageBoxVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiMessageBoxVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiMessageBoxVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiMessageBoxVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiMessageBoxVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiMessageBoxVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiMessageBoxVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiMessageBoxVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiMessageBoxVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiMessageBoxVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiMessageBoxVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiMessageBoxVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiMessageBoxVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiMessageBoxVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiMessageBoxVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiMessageBoxVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiMessageBoxVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiMessageBoxVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiMessageBoxVector_class_info)
    else:
        class_info = _gui.GuiMessageBoxVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiMessageBoxVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiMessageBoxVector____class_destructor__
GuiMessageBoxVector_swigregister = _gui.GuiMessageBoxVector_swigregister
GuiMessageBoxVector_swigregister(GuiMessageBoxVector)

def GuiMessageBoxVector_class_info():
    return _gui.GuiMessageBoxVector_class_info()
GuiMessageBoxVector_class_info = _gui.GuiMessageBoxVector_class_info

def GuiMessageBoxVector____class_destructor__(instance, is_array):
    return _gui.GuiMessageBoxVector____class_destructor__(instance, is_array)
GuiMessageBoxVector____class_destructor__ = _gui.GuiMessageBoxVector____class_destructor__

class GuiMessageBoxSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiMessageBoxSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiMessageBoxSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiMessageBoxSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiMessageBoxSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiMessageBoxSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiMessageBoxSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiMessageBoxSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiMessageBoxSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiMessageBoxSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiMessageBoxSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiMessageBoxSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiMessageBoxSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiMessageBoxSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiMessageBoxSet_to_array(self)

    def add(self, *args):
        return _gui.GuiMessageBoxSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiMessageBoxSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiMessageBoxSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiMessageBoxSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiMessageBoxSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiMessageBoxSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiMessageBoxSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiMessageBoxSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiMessageBoxSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiMessageBoxSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiMessageBoxSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiMessageBoxSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiMessageBoxSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiMessageBoxSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiMessageBoxSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiMessageBoxSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiMessageBoxSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiMessageBoxSet
    __del__ = lambda self: None
GuiMessageBoxSet_swigregister = _gui.GuiMessageBoxSet_swigregister
GuiMessageBoxSet_swigregister(GuiMessageBoxSet)

def GuiMessageBoxSet_get_linear_search_threshold():
    return _gui.GuiMessageBoxSet_get_linear_search_threshold()
GuiMessageBoxSet_get_linear_search_threshold = _gui.GuiMessageBoxSet_get_linear_search_threshold

class GuiFilenameField(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiFilenameField, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiFilenameField, name)
    __repr__ = _swig_repr
    MODE_SAVE = _gui.GuiFilenameField_MODE_SAVE
    MODE_OPEN = _gui.GuiFilenameField_MODE_OPEN
    MODE_FOLDER = _gui.GuiFilenameField_MODE_FOLDER

    def __init__(self, *args):
        if self.__class__ == GuiFilenameField:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiFilenameField(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def get_mode(self):
        return _gui.GuiFilenameField_get_mode(self)

    def set_mode(self, mode):
        return _gui.GuiFilenameField_set_mode(self, mode)

    def get_browser_properties(self, title, filter):
        return _gui.GuiFilenameField_get_browser_properties(self, title, filter)

    def set_browser_properties(self, title, filter):
        return _gui.GuiFilenameField_set_browser_properties(self, title, filter)

    def set_browser_extensions(self, *args):
        return _gui.GuiFilenameField_set_browser_extensions(self, *args)
    if _newclass:
        get_browser_formated_extensions = staticmethod(_gui.GuiFilenameField_get_browser_formated_extensions)
    else:
        get_browser_formated_extensions = _gui.GuiFilenameField_get_browser_formated_extensions

    def enable(self):
        return _gui.GuiFilenameField_enable(self)

    def disable(self):
        return _gui.GuiFilenameField_disable(self)

    def set_tooltip(self, tooltip):
        return _gui.GuiFilenameField_set_tooltip(self, tooltip)

    def resize(self, x, y, w, h):
        return _gui.GuiFilenameField_resize(self, x, y, w, h)

    def draw(self, dc):
        return _gui.GuiFilenameField_draw(self, dc)

    def redraw(self):
        return _gui.GuiFilenameField_redraw(self)

    def process_event(self, event):
        return _gui.GuiFilenameField_process_event(self, event)

    def set_focus(self):
        return _gui.GuiFilenameField_set_focus(self)

    def get_filename(self):
        return _gui.GuiFilenameField_get_filename(self)

    def set_filename(self, filename):
        return _gui.GuiFilenameField_set_filename(self, filename)

    def get_custom_icon(self):
        return _gui.GuiFilenameField_get_custom_icon(self)

    def set_custom_icon(self, image):
        return _gui.GuiFilenameField_set_custom_icon(self, image)

    def select_text(self):
        return _gui.GuiFilenameField_select_text(self)

    def deselect_text(self):
        return _gui.GuiFilenameField_deselect_text(self)

    def set_clip_region(self, x, y, w, h):
        return _gui.GuiFilenameField_set_clip_region(self, x, y, w, h)

    def set_roundness(self, roundness):
        return _gui.GuiFilenameField_set_roundness(self, roundness)

    def get_roundness(self):
        return _gui.GuiFilenameField_get_roundness(self)

    def set_read_only(self, value, draw_disable=False):
        return _gui.GuiFilenameField_set_read_only(self, value, draw_disable)

    def set_draw_frame(self, value):
        return _gui.GuiFilenameField_set_draw_frame(self, value)

    def get_draw_frame(self, value):
        return _gui.GuiFilenameField_get_draw_frame(self, value)
    if _newclass:
        class_info = staticmethod(_gui.GuiFilenameField_class_info)
    else:
        class_info = _gui.GuiFilenameField_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiFilenameField____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiFilenameField____class_destructor__

    def get_class_info(self):
        return _gui.GuiFilenameField_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiFilenameField___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiFilenameField___collect__(self)

    def __uncollect__(self):
        return _gui.GuiFilenameField___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiFilenameField(self)
        return weakref_proxy(self)
GuiFilenameField_swigregister = _gui.GuiFilenameField_swigregister
GuiFilenameField_swigregister(GuiFilenameField)
EVT_ID_FILENAME_FIELD_VALUE_CHANGED = cvar.EVT_ID_FILENAME_FIELD_VALUE_CHANGED
EVT_ID_FILENAME_FIELD_VALUE_VALIDATE = cvar.EVT_ID_FILENAME_FIELD_VALUE_VALIDATE
EVT_ID_FILENAME_FIELD_VALUE_EDITED = cvar.EVT_ID_FILENAME_FIELD_VALUE_EDITED
EVT_ID_FILENAME_FIELD_MENU_SHOW = cvar.EVT_ID_FILENAME_FIELD_MENU_SHOW
EVT_ID_FILENAME_FIELD_MENU_ITEM_SELECTED = cvar.EVT_ID_FILENAME_FIELD_MENU_ITEM_SELECTED

def GuiFilenameField_get_browser_formated_extensions(extensions):
    return _gui.GuiFilenameField_get_browser_formated_extensions(extensions)
GuiFilenameField_get_browser_formated_extensions = _gui.GuiFilenameField_get_browser_formated_extensions

def GuiFilenameField_class_info():
    return _gui.GuiFilenameField_class_info()
GuiFilenameField_class_info = _gui.GuiFilenameField_class_info

def GuiFilenameField____class_destructor__(instance, is_array):
    return _gui.GuiFilenameField____class_destructor__(instance, is_array)
GuiFilenameField____class_destructor__ = _gui.GuiFilenameField____class_destructor__

class GuiFilenameFieldBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiFilenameFieldBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiFilenameFieldBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiFilenameFieldBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiFilenameFieldBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiFilenameFieldBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiFilenameFieldBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiFilenameFieldBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiFilenameFieldBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiFilenameFieldBasicArray_front(self)

    def back(self):
        return _gui.GuiFilenameFieldBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiFilenameFieldBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiFilenameFieldBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiFilenameFieldBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiFilenameFieldBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiFilenameFieldBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiFilenameFieldBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiFilenameFieldBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiFilenameFieldBasicArray_class_info)
    else:
        class_info = _gui.GuiFilenameFieldBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiFilenameFieldBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiFilenameFieldBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiFilenameFieldBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiFilenameFieldBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiFilenameFieldBasicArray_swigregister = _gui.GuiFilenameFieldBasicArray_swigregister
GuiFilenameFieldBasicArray_swigregister(GuiFilenameFieldBasicArray)

def GuiFilenameFieldBasicArray_class_info():
    return _gui.GuiFilenameFieldBasicArray_class_info()
GuiFilenameFieldBasicArray_class_info = _gui.GuiFilenameFieldBasicArray_class_info

def GuiFilenameFieldBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiFilenameFieldBasicArray____class_destructor__(instance, is_array)
GuiFilenameFieldBasicArray____class_destructor__ = _gui.GuiFilenameFieldBasicArray____class_destructor__

class GuiFilenameFieldArray(GuiFilenameFieldBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiFilenameFieldBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiFilenameFieldArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiFilenameFieldBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiFilenameFieldArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiFilenameFieldArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiFilenameFieldArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiFilenameFieldArray_append(self, *args)

    def get_count(self):
        return _gui.GuiFilenameFieldArray_get_count(self)

    def remove_all(self):
        return _gui.GuiFilenameFieldArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiFilenameFieldArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiFilenameFieldArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiFilenameFieldArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiFilenameFieldArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiFilenameFieldArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiFilenameFieldArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiFilenameFieldArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiFilenameFieldArray_class_info)
    else:
        class_info = _gui.GuiFilenameFieldArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiFilenameFieldArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiFilenameFieldArray____class_destructor__
GuiFilenameFieldArray_swigregister = _gui.GuiFilenameFieldArray_swigregister
GuiFilenameFieldArray_swigregister(GuiFilenameFieldArray)

def GuiFilenameFieldArray_class_info():
    return _gui.GuiFilenameFieldArray_class_info()
GuiFilenameFieldArray_class_info = _gui.GuiFilenameFieldArray_class_info

def GuiFilenameFieldArray____class_destructor__(instance, is_array):
    return _gui.GuiFilenameFieldArray____class_destructor__(instance, is_array)
GuiFilenameFieldArray____class_destructor__ = _gui.GuiFilenameFieldArray____class_destructor__

class GuiFilenameFieldVector(GuiFilenameFieldBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiFilenameFieldBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiFilenameFieldVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiFilenameFieldBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiFilenameFieldVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiFilenameFieldVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiFilenameFieldVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiFilenameFieldVector_append(self, *args)

    def add(self, element):
        return _gui.GuiFilenameFieldVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiFilenameFieldVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiFilenameFieldVector_remove_last(self)

    def empty(self):
        return _gui.GuiFilenameFieldVector_empty(self)

    def remove_all(self):
        return _gui.GuiFilenameFieldVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiFilenameFieldVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiFilenameFieldVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiFilenameFieldVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiFilenameFieldVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiFilenameFieldVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiFilenameFieldVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiFilenameFieldVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiFilenameFieldVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiFilenameFieldVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiFilenameFieldVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiFilenameFieldVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiFilenameFieldVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiFilenameFieldVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiFilenameFieldVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiFilenameFieldVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiFilenameFieldVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiFilenameFieldVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiFilenameFieldVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiFilenameFieldVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiFilenameFieldVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiFilenameFieldVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiFilenameFieldVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiFilenameFieldVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiFilenameFieldVector_class_info)
    else:
        class_info = _gui.GuiFilenameFieldVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiFilenameFieldVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiFilenameFieldVector____class_destructor__
GuiFilenameFieldVector_swigregister = _gui.GuiFilenameFieldVector_swigregister
GuiFilenameFieldVector_swigregister(GuiFilenameFieldVector)

def GuiFilenameFieldVector_class_info():
    return _gui.GuiFilenameFieldVector_class_info()
GuiFilenameFieldVector_class_info = _gui.GuiFilenameFieldVector_class_info

def GuiFilenameFieldVector____class_destructor__(instance, is_array):
    return _gui.GuiFilenameFieldVector____class_destructor__(instance, is_array)
GuiFilenameFieldVector____class_destructor__ = _gui.GuiFilenameFieldVector____class_destructor__

class GuiFilenameFieldSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiFilenameFieldSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiFilenameFieldSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiFilenameFieldSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiFilenameFieldSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiFilenameFieldSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiFilenameFieldSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiFilenameFieldSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiFilenameFieldSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiFilenameFieldSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiFilenameFieldSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiFilenameFieldSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiFilenameFieldSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiFilenameFieldSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiFilenameFieldSet_to_array(self)

    def add(self, *args):
        return _gui.GuiFilenameFieldSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiFilenameFieldSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiFilenameFieldSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiFilenameFieldSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiFilenameFieldSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiFilenameFieldSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiFilenameFieldSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiFilenameFieldSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiFilenameFieldSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiFilenameFieldSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiFilenameFieldSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiFilenameFieldSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiFilenameFieldSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiFilenameFieldSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiFilenameFieldSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiFilenameFieldSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiFilenameFieldSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiFilenameFieldSet
    __del__ = lambda self: None
GuiFilenameFieldSet_swigregister = _gui.GuiFilenameFieldSet_swigregister
GuiFilenameFieldSet_swigregister(GuiFilenameFieldSet)

def GuiFilenameFieldSet_get_linear_search_threshold():
    return _gui.GuiFilenameFieldSet_get_linear_search_threshold()
GuiFilenameFieldSet_get_linear_search_threshold = _gui.GuiFilenameFieldSet_get_linear_search_threshold

class GuiNumberField(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiNumberField, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiNumberField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == GuiNumberField:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiNumberField(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def enable(self):
        return _gui.GuiNumberField_enable(self)

    def disable(self):
        return _gui.GuiNumberField_disable(self)

    def set_tooltip(self, tooltip):
        return _gui.GuiNumberField_set_tooltip(self, tooltip)

    def resize(self, x, y, w, h):
        return _gui.GuiNumberField_resize(self, x, y, w, h)

    def draw(self, dc):
        return _gui.GuiNumberField_draw(self, dc)

    def redraw(self):
        return _gui.GuiNumberField_redraw(self)

    def process_event(self, event):
        return _gui.GuiNumberField_process_event(self, event)

    def set_focus(self):
        return _gui.GuiNumberField_set_focus(self)

    def has_focus(self):
        return _gui.GuiNumberField_has_focus(self)

    def lose_focus(self):
        return _gui.GuiNumberField_lose_focus(self)
    if _newclass:
        get_smart_increment = staticmethod(_gui.GuiNumberField_get_smart_increment)
    else:
        get_smart_increment = _gui.GuiNumberField_get_smart_increment

    def get_format(self):
        return _gui.GuiNumberField_get_format(self)

    def set_format(self, format):
        return _gui.GuiNumberField_set_format(self, format)

    def set_display_format(self, format):
        return _gui.GuiNumberField_set_display_format(self, format)

    def set_force_unit_format(self, format):
        return _gui.GuiNumberField_set_force_unit_format(self, format)

    def set_label(self, label):
        return _gui.GuiNumberField_set_label(self, label)

    def get_expression_operator(self):
        return _gui.GuiNumberField_get_expression_operator(self)

    def get_expression_value(self):
        return _gui.GuiNumberField_get_expression_value(self)

    def get_value(self):
        return _gui.GuiNumberField_get_value(self)

    def get_value_with_precision(self):
        return _gui.GuiNumberField_get_value_with_precision(self)

    def set_value(self, value):
        return _gui.GuiNumberField_set_value(self, value)

    def get_delta_value(self):
        return _gui.GuiNumberField_get_delta_value(self)

    def get_float_precision(self):
        return _gui.GuiNumberField_get_float_precision(self)

    def set_float_precision(self, precision):
        return _gui.GuiNumberField_set_float_precision(self, precision)

    def is_range_enabled(self):
        return _gui.GuiNumberField_is_range_enabled(self)

    def enable_range(self, enable):
        return _gui.GuiNumberField_enable_range(self, enable)

    def get_range(self, low, high):
        return _gui.GuiNumberField_get_range(self, low, high)

    def set_range(self, low, high):
        return _gui.GuiNumberField_set_range(self, low, high)

    def is_slider_range_enabled(self):
        return _gui.GuiNumberField_is_slider_range_enabled(self)

    def enable_slider_range(self, enable):
        return _gui.GuiNumberField_enable_slider_range(self, enable)

    def get_slider_range(self, low, high):
        return _gui.GuiNumberField_get_slider_range(self, low, high)

    def set_slider_range(self, low, high):
        return _gui.GuiNumberField_set_slider_range(self, low, high)

    def set_increment(self, increment):
        return _gui.GuiNumberField_set_increment(self, increment)

    def set_unit_type(self, type_unit):
        return _gui.GuiNumberField_set_unit_type(self, type_unit)

    def set_force_unit_system(self, unit_system):
        return _gui.GuiNumberField_set_force_unit_system(self, unit_system)

    def set_force_unit_base(self, unit_base):
        return _gui.GuiNumberField_set_force_unit_base(self, unit_base)

    def show_slider(self, enable):
        return _gui.GuiNumberField_show_slider(self, enable)

    def set_read_only(self, value, draw_disable=False):
        return _gui.GuiNumberField_set_read_only(self, value, draw_disable)

    def is_read_only(self):
        return _gui.GuiNumberField_is_read_only(self)

    def set_clip_region(self, x, y, w, h):
        return _gui.GuiNumberField_set_clip_region(self, x, y, w, h)

    def set_roundness(self, roundness):
        return _gui.GuiNumberField_set_roundness(self, roundness)

    def get_roundness(self):
        return _gui.GuiNumberField_get_roundness(self)

    def update_size_and_position_components(self):
        return _gui.GuiNumberField_update_size_and_position_components(self)

    def select_text(self):
        return _gui.GuiNumberField_select_text(self)

    def deselect_text(self):
        return _gui.GuiNumberField_deselect_text(self)

    def set_null_label(self, null_label):
        return _gui.GuiNumberField_set_null_label(self, null_label)

    def get_null_label(self):
        return _gui.GuiNumberField_get_null_label(self)

    def set_null_value(self, null_value):
        return _gui.GuiNumberField_set_null_value(self, null_value)

    def get_null_value(self):
        return _gui.GuiNumberField_get_null_value(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiNumberField_class_info)
    else:
        class_info = _gui.GuiNumberField_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiNumberField____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiNumberField____class_destructor__

    def get_class_info(self):
        return _gui.GuiNumberField_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiNumberField___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiNumberField___collect__(self)

    def __uncollect__(self):
        return _gui.GuiNumberField___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiNumberField(self)
        return weakref_proxy(self)
GuiNumberField_swigregister = _gui.GuiNumberField_swigregister
GuiNumberField_swigregister(GuiNumberField)
EVT_ID_NUMBER_FIELD_VALUE_CHANGING = cvar.EVT_ID_NUMBER_FIELD_VALUE_CHANGING
EVT_ID_NUMBER_FIELD_VALUE_CHANGED = cvar.EVT_ID_NUMBER_FIELD_VALUE_CHANGED
EVT_ID_NUMBER_FIELD_VALUE_VALIDATE = cvar.EVT_ID_NUMBER_FIELD_VALUE_VALIDATE
EVT_ID_NUMBER_FIELD_MENU_SHOW = cvar.EVT_ID_NUMBER_FIELD_MENU_SHOW
EVT_ID_NUMBER_FIELD_MENU_ITEM_SELECTED = cvar.EVT_ID_NUMBER_FIELD_MENU_ITEM_SELECTED

def GuiNumberField_get_smart_increment(range, division_of_range=200):
    return _gui.GuiNumberField_get_smart_increment(range, division_of_range)
GuiNumberField_get_smart_increment = _gui.GuiNumberField_get_smart_increment

def GuiNumberField_class_info():
    return _gui.GuiNumberField_class_info()
GuiNumberField_class_info = _gui.GuiNumberField_class_info

def GuiNumberField____class_destructor__(instance, is_array):
    return _gui.GuiNumberField____class_destructor__(instance, is_array)
GuiNumberField____class_destructor__ = _gui.GuiNumberField____class_destructor__

class GuiNumberFieldBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiNumberFieldBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiNumberFieldBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiNumberFieldBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiNumberFieldBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiNumberFieldBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiNumberFieldBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiNumberFieldBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiNumberFieldBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiNumberFieldBasicArray_front(self)

    def back(self):
        return _gui.GuiNumberFieldBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiNumberFieldBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiNumberFieldBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiNumberFieldBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiNumberFieldBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiNumberFieldBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiNumberFieldBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiNumberFieldBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiNumberFieldBasicArray_class_info)
    else:
        class_info = _gui.GuiNumberFieldBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiNumberFieldBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiNumberFieldBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiNumberFieldBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiNumberFieldBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiNumberFieldBasicArray_swigregister = _gui.GuiNumberFieldBasicArray_swigregister
GuiNumberFieldBasicArray_swigregister(GuiNumberFieldBasicArray)

def GuiNumberFieldBasicArray_class_info():
    return _gui.GuiNumberFieldBasicArray_class_info()
GuiNumberFieldBasicArray_class_info = _gui.GuiNumberFieldBasicArray_class_info

def GuiNumberFieldBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiNumberFieldBasicArray____class_destructor__(instance, is_array)
GuiNumberFieldBasicArray____class_destructor__ = _gui.GuiNumberFieldBasicArray____class_destructor__

class GuiNumberFieldArray(GuiNumberFieldBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiNumberFieldBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiNumberFieldArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiNumberFieldBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiNumberFieldArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiNumberFieldArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiNumberFieldArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiNumberFieldArray_append(self, *args)

    def get_count(self):
        return _gui.GuiNumberFieldArray_get_count(self)

    def remove_all(self):
        return _gui.GuiNumberFieldArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiNumberFieldArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiNumberFieldArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiNumberFieldArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiNumberFieldArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiNumberFieldArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiNumberFieldArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiNumberFieldArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiNumberFieldArray_class_info)
    else:
        class_info = _gui.GuiNumberFieldArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiNumberFieldArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiNumberFieldArray____class_destructor__
GuiNumberFieldArray_swigregister = _gui.GuiNumberFieldArray_swigregister
GuiNumberFieldArray_swigregister(GuiNumberFieldArray)

def GuiNumberFieldArray_class_info():
    return _gui.GuiNumberFieldArray_class_info()
GuiNumberFieldArray_class_info = _gui.GuiNumberFieldArray_class_info

def GuiNumberFieldArray____class_destructor__(instance, is_array):
    return _gui.GuiNumberFieldArray____class_destructor__(instance, is_array)
GuiNumberFieldArray____class_destructor__ = _gui.GuiNumberFieldArray____class_destructor__

class GuiNumberFieldVector(GuiNumberFieldBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiNumberFieldBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiNumberFieldVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiNumberFieldBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiNumberFieldVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiNumberFieldVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiNumberFieldVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiNumberFieldVector_append(self, *args)

    def add(self, element):
        return _gui.GuiNumberFieldVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiNumberFieldVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiNumberFieldVector_remove_last(self)

    def empty(self):
        return _gui.GuiNumberFieldVector_empty(self)

    def remove_all(self):
        return _gui.GuiNumberFieldVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiNumberFieldVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiNumberFieldVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiNumberFieldVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiNumberFieldVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiNumberFieldVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiNumberFieldVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiNumberFieldVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiNumberFieldVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiNumberFieldVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiNumberFieldVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiNumberFieldVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiNumberFieldVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiNumberFieldVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiNumberFieldVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiNumberFieldVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiNumberFieldVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiNumberFieldVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiNumberFieldVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiNumberFieldVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiNumberFieldVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiNumberFieldVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiNumberFieldVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiNumberFieldVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiNumberFieldVector_class_info)
    else:
        class_info = _gui.GuiNumberFieldVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiNumberFieldVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiNumberFieldVector____class_destructor__
GuiNumberFieldVector_swigregister = _gui.GuiNumberFieldVector_swigregister
GuiNumberFieldVector_swigregister(GuiNumberFieldVector)

def GuiNumberFieldVector_class_info():
    return _gui.GuiNumberFieldVector_class_info()
GuiNumberFieldVector_class_info = _gui.GuiNumberFieldVector_class_info

def GuiNumberFieldVector____class_destructor__(instance, is_array):
    return _gui.GuiNumberFieldVector____class_destructor__(instance, is_array)
GuiNumberFieldVector____class_destructor__ = _gui.GuiNumberFieldVector____class_destructor__

class GuiNumberFieldSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiNumberFieldSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiNumberFieldSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiNumberFieldSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiNumberFieldSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiNumberFieldSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiNumberFieldSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiNumberFieldSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiNumberFieldSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiNumberFieldSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiNumberFieldSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiNumberFieldSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiNumberFieldSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiNumberFieldSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiNumberFieldSet_to_array(self)

    def add(self, *args):
        return _gui.GuiNumberFieldSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiNumberFieldSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiNumberFieldSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiNumberFieldSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiNumberFieldSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiNumberFieldSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiNumberFieldSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiNumberFieldSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiNumberFieldSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiNumberFieldSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiNumberFieldSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiNumberFieldSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiNumberFieldSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiNumberFieldSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiNumberFieldSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiNumberFieldSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiNumberFieldSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiNumberFieldSet
    __del__ = lambda self: None
GuiNumberFieldSet_swigregister = _gui.GuiNumberFieldSet_swigregister
GuiNumberFieldSet_swigregister(GuiNumberFieldSet)

def GuiNumberFieldSet_get_linear_search_threshold():
    return _gui.GuiNumberFieldSet_get_linear_search_threshold()
GuiNumberFieldSet_get_linear_search_threshold = _gui.GuiNumberFieldSet_get_linear_search_threshold

class GuiProgressBar(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiProgressBar, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiProgressBar, name)
    __repr__ = _swig_repr

    def __init__(self, parent, x, y, w, h):
        if self.__class__ == GuiProgressBar:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiProgressBar(_self, parent, x, y, w, h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def draw(self, dc):
        return _gui.GuiProgressBar_draw(self, dc)

    def get_text(self):
        return _gui.GuiProgressBar_get_text(self)

    def set_text(self, text):
        return _gui.GuiProgressBar_set_text(self, text)

    def get_progress(self):
        return _gui.GuiProgressBar_get_progress(self)

    def set_progress(self, progress):
        return _gui.GuiProgressBar_set_progress(self, progress)

    def set(self, text, progress):
        return _gui.GuiProgressBar_set(self, text, progress)

    def set_custom_bar_color(self, color):
        return _gui.GuiProgressBar_set_custom_bar_color(self, color)

    def set_custom_background_color(self, color):
        return _gui.GuiProgressBar_set_custom_background_color(self, color)

    def set_roundness(self, b):
        return _gui.GuiProgressBar_set_roundness(self, b)

    def process_event(self, event_id):
        return _gui.GuiProgressBar_process_event(self, event_id)

    def set_enable_mouse_over(self, b):
        return _gui.GuiProgressBar_set_enable_mouse_over(self, b)

    def __gui_destroy__(self):
        return _gui.GuiProgressBar___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiProgressBar___collect__(self)

    def __uncollect__(self):
        return _gui.GuiProgressBar___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiProgressBar(self)
        return weakref_proxy(self)
GuiProgressBar_swigregister = _gui.GuiProgressBar_swigregister
GuiProgressBar_swigregister(GuiProgressBar)

class GuiProgressBarBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiProgressBarBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiProgressBarBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiProgressBarBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiProgressBarBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiProgressBarBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiProgressBarBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiProgressBarBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiProgressBarBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiProgressBarBasicArray_front(self)

    def back(self):
        return _gui.GuiProgressBarBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiProgressBarBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiProgressBarBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiProgressBarBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiProgressBarBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiProgressBarBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiProgressBarBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiProgressBarBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiProgressBarBasicArray_class_info)
    else:
        class_info = _gui.GuiProgressBarBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiProgressBarBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiProgressBarBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiProgressBarBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiProgressBarBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiProgressBarBasicArray_swigregister = _gui.GuiProgressBarBasicArray_swigregister
GuiProgressBarBasicArray_swigregister(GuiProgressBarBasicArray)

def GuiProgressBarBasicArray_class_info():
    return _gui.GuiProgressBarBasicArray_class_info()
GuiProgressBarBasicArray_class_info = _gui.GuiProgressBarBasicArray_class_info

def GuiProgressBarBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiProgressBarBasicArray____class_destructor__(instance, is_array)
GuiProgressBarBasicArray____class_destructor__ = _gui.GuiProgressBarBasicArray____class_destructor__

class GuiProgressBarArray(GuiProgressBarBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiProgressBarBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiProgressBarArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiProgressBarBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiProgressBarArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiProgressBarArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiProgressBarArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiProgressBarArray_append(self, *args)

    def get_count(self):
        return _gui.GuiProgressBarArray_get_count(self)

    def remove_all(self):
        return _gui.GuiProgressBarArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiProgressBarArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiProgressBarArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiProgressBarArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiProgressBarArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiProgressBarArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiProgressBarArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiProgressBarArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiProgressBarArray_class_info)
    else:
        class_info = _gui.GuiProgressBarArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiProgressBarArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiProgressBarArray____class_destructor__
GuiProgressBarArray_swigregister = _gui.GuiProgressBarArray_swigregister
GuiProgressBarArray_swigregister(GuiProgressBarArray)

def GuiProgressBarArray_class_info():
    return _gui.GuiProgressBarArray_class_info()
GuiProgressBarArray_class_info = _gui.GuiProgressBarArray_class_info

def GuiProgressBarArray____class_destructor__(instance, is_array):
    return _gui.GuiProgressBarArray____class_destructor__(instance, is_array)
GuiProgressBarArray____class_destructor__ = _gui.GuiProgressBarArray____class_destructor__

class GuiProgressBarVector(GuiProgressBarBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiProgressBarBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiProgressBarVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiProgressBarBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiProgressBarVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiProgressBarVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiProgressBarVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiProgressBarVector_append(self, *args)

    def add(self, element):
        return _gui.GuiProgressBarVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiProgressBarVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiProgressBarVector_remove_last(self)

    def empty(self):
        return _gui.GuiProgressBarVector_empty(self)

    def remove_all(self):
        return _gui.GuiProgressBarVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiProgressBarVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiProgressBarVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiProgressBarVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiProgressBarVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiProgressBarVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiProgressBarVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiProgressBarVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiProgressBarVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiProgressBarVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiProgressBarVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiProgressBarVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiProgressBarVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiProgressBarVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiProgressBarVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiProgressBarVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiProgressBarVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiProgressBarVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiProgressBarVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiProgressBarVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiProgressBarVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiProgressBarVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiProgressBarVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiProgressBarVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiProgressBarVector_class_info)
    else:
        class_info = _gui.GuiProgressBarVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiProgressBarVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiProgressBarVector____class_destructor__
GuiProgressBarVector_swigregister = _gui.GuiProgressBarVector_swigregister
GuiProgressBarVector_swigregister(GuiProgressBarVector)

def GuiProgressBarVector_class_info():
    return _gui.GuiProgressBarVector_class_info()
GuiProgressBarVector_class_info = _gui.GuiProgressBarVector_class_info

def GuiProgressBarVector____class_destructor__(instance, is_array):
    return _gui.GuiProgressBarVector____class_destructor__(instance, is_array)
GuiProgressBarVector____class_destructor__ = _gui.GuiProgressBarVector____class_destructor__

class GuiProgressBarSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiProgressBarSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiProgressBarSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiProgressBarSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiProgressBarSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiProgressBarSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiProgressBarSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiProgressBarSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiProgressBarSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiProgressBarSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiProgressBarSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiProgressBarSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiProgressBarSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiProgressBarSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiProgressBarSet_to_array(self)

    def add(self, *args):
        return _gui.GuiProgressBarSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiProgressBarSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiProgressBarSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiProgressBarSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiProgressBarSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiProgressBarSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiProgressBarSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiProgressBarSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiProgressBarSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiProgressBarSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiProgressBarSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiProgressBarSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiProgressBarSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiProgressBarSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiProgressBarSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiProgressBarSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiProgressBarSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiProgressBarSet
    __del__ = lambda self: None
GuiProgressBarSet_swigregister = _gui.GuiProgressBarSet_swigregister
GuiProgressBarSet_swigregister(GuiProgressBarSet)

def GuiProgressBarSet_get_linear_search_threshold():
    return _gui.GuiProgressBarSet_get_linear_search_threshold()
GuiProgressBarSet_get_linear_search_threshold = _gui.GuiProgressBarSet_get_linear_search_threshold

class GuiTree(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTree, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTree, name)
    __repr__ = _swig_repr
    BORDER_STYLE_3D = _gui.GuiTree_BORDER_STYLE_3D
    BORDER_STYLE_FLAT = _gui.GuiTree_BORDER_STYLE_FLAT
    BORDER_STYLE_NONE = _gui.GuiTree_BORDER_STYLE_NONE
    BORDER_STYLE_COUNT = _gui.GuiTree_BORDER_STYLE_COUNT

    def __init__(self, parent, x, y, w, h):
        if self.__class__ == GuiTree:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiTree(_self, parent, x, y, w, h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def get_root(self):
        return _gui.GuiTree_get_root(self)

    def set_connector_column(self, index):
        return _gui.GuiTree_set_connector_column(self, index)

    def get_connector_column(self):
        return _gui.GuiTree_get_connector_column(self)

    def get_column_count(self):
        return _gui.GuiTree_get_column_count(self)

    def remove_all_columns(self):
        return _gui.GuiTree_remove_all_columns(self)

    def add_column(self, name, width):
        return _gui.GuiTree_add_column(self, name, width)

    def insert_column(self, name, width, index):
        return _gui.GuiTree_insert_column(self, name, width, index)

    def remove_column(self, index):
        return _gui.GuiTree_remove_column(self, index)

    def get_column_width(self, index):
        return _gui.GuiTree_get_column_width(self, index)

    def get_line_height(self):
        return _gui.GuiTree_get_line_height(self)

    def set_line_height(self, height):
        return _gui.GuiTree_set_line_height(self, height)

    def refresh(self):
        return _gui.GuiTree_refresh(self)

    def show(self):
        return _gui.GuiTree_show(self)

    def draw(self, dc):
        return _gui.GuiTree_draw(self, dc)

    def set_size(self, x, y, w, h):
        return _gui.GuiTree_set_size(self, x, y, w, h)

    def resize(self, x, y, w, h):
        return _gui.GuiTree_resize(self, x, y, w, h)

    def process_event(self, event_id):
        return _gui.GuiTree_process_event(self, event_id)

    def is_active(self):
        return _gui.GuiTree_is_active(self)

    def get_last_event_item(self):
        return _gui.GuiTree_get_last_event_item(self)

    def get_drag_over_item(self):
        return _gui.GuiTree_get_drag_over_item(self)

    def on_vscroll(self, sender, event, data):
        return _gui.GuiTree_on_vscroll(self, sender, event, data)

    def get_background_color(self):
        return _gui.GuiTree_get_background_color(self)

    def set_background_color(self, *args):
        return _gui.GuiTree_set_background_color(self, *args)

    def set_border_style(self, style):
        return _gui.GuiTree_set_border_style(self, style)

    def get_border_style(self):
        return _gui.GuiTree_get_border_style(self)

    def get_border_color(self):
        return _gui.GuiTree_get_border_color(self)

    def set_border_color(self, *args):
        return _gui.GuiTree_set_border_color(self, *args)

    def set_shaded_entries(self, flag):
        return _gui.GuiTree_set_shaded_entries(self, flag)

    def is_shaded_entries(self):
        return _gui.GuiTree_is_shaded_entries(self)

    def enable_drag_and_drop(self, flag, enable_first=True, enable_last=True):
        return _gui.GuiTree_enable_drag_and_drop(self, flag, enable_first, enable_last)

    def is_drag_and_drop_enabled(self):
        return _gui.GuiTree_is_drag_and_drop_enabled(self)

    def enable_item_delete(self, flag):
        return _gui.GuiTree_enable_item_delete(self, flag)

    def is_item_delete_enabled(self):
        return _gui.GuiTree_is_item_delete_enabled(self)

    def enable_multi_selection(self, flag):
        return _gui.GuiTree_enable_multi_selection(self, flag)

    def is_multi_selection_enabled(self):
        return _gui.GuiTree_is_multi_selection_enabled(self)

    def destroy_selected_items(self):
        return _gui.GuiTree_destroy_selected_items(self)

    def get_selection(self):
        return _gui.GuiTree_get_selection(self)

    def set_selection(self, new_selection, raise_event=False):
        return _gui.GuiTree_set_selection(self, new_selection, raise_event)

    def get_preselection(self):
        return _gui.GuiTree_get_preselection(self)

    def set_preselection(self, new_preselection):
        return _gui.GuiTree_set_preselection(self, new_preselection)

    def get_highlighted_items(self):
        return _gui.GuiTree_get_highlighted_items(self)

    def highlight_item(self, item, value):
        return _gui.GuiTree_highlight_item(self, item, value)

    def select_all(self):
        return _gui.GuiTree_select_all(self)

    def deselect_all(self, *args):
        return _gui.GuiTree_deselect_all(self, *args)

    def show_item(self, item):
        return _gui.GuiTree_show_item(self, item)

    def select_previous_item(self, item):
        return _gui.GuiTree_select_previous_item(self, item)

    def select_next_item(self, item):
        return _gui.GuiTree_select_next_item(self, item)

    def get_first_item(self):
        return _gui.GuiTree_get_first_item(self)

    def get_last_item(self, visible):
        return _gui.GuiTree_get_last_item(self, visible)

    def clear_preselection(self):
        return _gui.GuiTree_clear_preselection(self)

    def clear_highlighted_items(self):
        return _gui.GuiTree_clear_highlighted_items(self)

    def remove_all(self):
        return _gui.GuiTree_remove_all(self)
    if _newclass:
        scroll_while_drag = staticmethod(_gui.GuiTree_scroll_while_drag)
    else:
        scroll_while_drag = _gui.GuiTree_scroll_while_drag

    def on_item_activate(self, item):
        return _gui.GuiTree_on_item_activate(self, item)

    def get_icon_size(self):
        return _gui.GuiTree_get_icon_size(self)

    def set_icon_size(self, size):
        return _gui.GuiTree_set_icon_size(self, size)

    def preselect_item(self, item):
        return _gui.GuiTree_preselect_item(self, item)
    if _newclass:
        class_info = staticmethod(_gui.GuiTree_class_info)
    else:
        class_info = _gui.GuiTree_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTree____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTree____class_destructor__

    def get_class_info(self):
        return _gui.GuiTree_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiTree___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiTree___collect__(self)

    def __uncollect__(self):
        return _gui.GuiTree___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiTree(self)
        return weakref_proxy(self)
GuiTree_swigregister = _gui.GuiTree_swigregister
GuiTree_swigregister(GuiTree)
EVT_ID_TREE_ITEM_ACTIVATE = cvar.EVT_ID_TREE_ITEM_ACTIVATE
EVT_ID_TREE_ITEM_SELECT = cvar.EVT_ID_TREE_ITEM_SELECT
EVT_ID_TREE_ITEM_DESELECT = cvar.EVT_ID_TREE_ITEM_DESELECT
EVT_ID_TREE_ITEM_EXPAND = cvar.EVT_ID_TREE_ITEM_EXPAND
EVT_ID_TREE_ITEM_COLLAPSE = cvar.EVT_ID_TREE_ITEM_COLLAPSE
EVT_ID_TREE_SELECTION_CHANGED = cvar.EVT_ID_TREE_SELECTION_CHANGED
EVT_ID_TREE_SELECTION_REMOVE = cvar.EVT_ID_TREE_SELECTION_REMOVE
EVT_ID_TREE_SELECTION_DRAG = cvar.EVT_ID_TREE_SELECTION_DRAG
EVT_ID_TREE_SELECTION_DROP = cvar.EVT_ID_TREE_SELECTION_DROP
EVT_ID_TREE_ITEM_RENAME = cvar.EVT_ID_TREE_ITEM_RENAME
EVT_ID_TREE_NAVIGATE_UP = cvar.EVT_ID_TREE_NAVIGATE_UP
EVT_ID_TREE_NAVIGATE_DOWN = cvar.EVT_ID_TREE_NAVIGATE_DOWN
EVT_ID_TREE_NAVIGATE_LEFT = cvar.EVT_ID_TREE_NAVIGATE_LEFT
EVT_ID_TREE_NAVIGATE_RIGHT = cvar.EVT_ID_TREE_NAVIGATE_RIGHT

def GuiTree_scroll_while_drag(data):
    return _gui.GuiTree_scroll_while_drag(data)
GuiTree_scroll_while_drag = _gui.GuiTree_scroll_while_drag

def GuiTree_class_info():
    return _gui.GuiTree_class_info()
GuiTree_class_info = _gui.GuiTree_class_info

def GuiTree____class_destructor__(instance, is_array):
    return _gui.GuiTree____class_destructor__(instance, is_array)
GuiTree____class_destructor__ = _gui.GuiTree____class_destructor__

class GuiTreeBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiTreeBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiTreeBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiTreeBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiTreeBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiTreeBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiTreeBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiTreeBasicArray_front(self)

    def back(self):
        return _gui.GuiTreeBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiTreeBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiTreeBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiTreeBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiTreeBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiTreeBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiTreeBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiTreeBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiTreeBasicArray_class_info)
    else:
        class_info = _gui.GuiTreeBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTreeBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTreeBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiTreeBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiTreeBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiTreeBasicArray_swigregister = _gui.GuiTreeBasicArray_swigregister
GuiTreeBasicArray_swigregister(GuiTreeBasicArray)

def GuiTreeBasicArray_class_info():
    return _gui.GuiTreeBasicArray_class_info()
GuiTreeBasicArray_class_info = _gui.GuiTreeBasicArray_class_info

def GuiTreeBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiTreeBasicArray____class_destructor__(instance, is_array)
GuiTreeBasicArray____class_destructor__ = _gui.GuiTreeBasicArray____class_destructor__

class GuiTreeArray(GuiTreeBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiTreeBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiTreeBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiTreeArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiTreeArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiTreeArray_append(self, *args)

    def get_count(self):
        return _gui.GuiTreeArray_get_count(self)

    def remove_all(self):
        return _gui.GuiTreeArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiTreeArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiTreeArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiTreeArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiTreeArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiTreeArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiTreeArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiTreeArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiTreeArray_class_info)
    else:
        class_info = _gui.GuiTreeArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTreeArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTreeArray____class_destructor__
GuiTreeArray_swigregister = _gui.GuiTreeArray_swigregister
GuiTreeArray_swigregister(GuiTreeArray)

def GuiTreeArray_class_info():
    return _gui.GuiTreeArray_class_info()
GuiTreeArray_class_info = _gui.GuiTreeArray_class_info

def GuiTreeArray____class_destructor__(instance, is_array):
    return _gui.GuiTreeArray____class_destructor__(instance, is_array)
GuiTreeArray____class_destructor__ = _gui.GuiTreeArray____class_destructor__

class GuiTreeVector(GuiTreeBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiTreeBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiTreeBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiTreeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiTreeVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiTreeVector_append(self, *args)

    def add(self, element):
        return _gui.GuiTreeVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiTreeVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiTreeVector_remove_last(self)

    def empty(self):
        return _gui.GuiTreeVector_empty(self)

    def remove_all(self):
        return _gui.GuiTreeVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiTreeVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiTreeVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiTreeVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiTreeVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiTreeVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiTreeVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiTreeVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiTreeVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiTreeVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiTreeVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiTreeVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiTreeVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiTreeVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiTreeVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiTreeVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiTreeVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiTreeVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiTreeVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiTreeVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiTreeVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiTreeVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiTreeVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiTreeVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiTreeVector_class_info)
    else:
        class_info = _gui.GuiTreeVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTreeVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTreeVector____class_destructor__
GuiTreeVector_swigregister = _gui.GuiTreeVector_swigregister
GuiTreeVector_swigregister(GuiTreeVector)

def GuiTreeVector_class_info():
    return _gui.GuiTreeVector_class_info()
GuiTreeVector_class_info = _gui.GuiTreeVector_class_info

def GuiTreeVector____class_destructor__(instance, is_array):
    return _gui.GuiTreeVector____class_destructor__(instance, is_array)
GuiTreeVector____class_destructor__ = _gui.GuiTreeVector____class_destructor__

class GuiTreeSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiTreeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiTreeSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiTreeSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiTreeSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiTreeSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiTreeSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiTreeSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiTreeSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiTreeSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiTreeSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiTreeSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiTreeSet_to_array(self)

    def add(self, *args):
        return _gui.GuiTreeSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiTreeSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiTreeSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiTreeSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiTreeSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiTreeSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiTreeSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiTreeSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiTreeSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiTreeSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiTreeSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiTreeSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiTreeSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiTreeSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiTreeSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiTreeSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiTreeSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiTreeSet
    __del__ = lambda self: None
GuiTreeSet_swigregister = _gui.GuiTreeSet_swigregister
GuiTreeSet_swigregister(GuiTreeSet)

def GuiTreeSet_get_linear_search_threshold():
    return _gui.GuiTreeSet_get_linear_search_threshold()
GuiTreeSet_get_linear_search_threshold = _gui.GuiTreeSet_get_linear_search_threshold

class GuiTreeItem(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeItem, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeItem, name)
    __repr__ = _swig_repr

    def __init__(self, parent):
        if self.__class__ == GuiTreeItem:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiTreeItem(_self, parent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def get_tree(self):
        return _gui.GuiTreeItem_get_tree(self)

    def draw(self, dc):
        return _gui.GuiTreeItem_draw(self, dc)

    def process_event(self, event_id):
        return _gui.GuiTreeItem_process_event(self, event_id)

    def remove_child(self, *args):
        return _gui.GuiTreeItem_remove_child(self, *args)

    def remove_children(self, *args):
        return _gui.GuiTreeItem_remove_children(self, *args)

    def reorder_children(self, *args):
        return _gui.GuiTreeItem_reorder_children(self, *args)

    def get_parent_item(self):
        return _gui.GuiTreeItem_get_parent_item(self)

    def set_parent_item(self, parent):
        return _gui.GuiTreeItem_set_parent_item(self, parent)

    def get_rank(self):
        return _gui.GuiTreeItem_get_rank(self)

    def get_list_index(self):
        return _gui.GuiTreeItem_get_list_index(self)

    def display(self, flag):
        return _gui.GuiTreeItem_display(self, flag)

    def is_displayed(self):
        return _gui.GuiTreeItem_is_displayed(self)

    def set_expandable(self, flag):
        return _gui.GuiTreeItem_set_expandable(self, flag)

    def is_expanded(self):
        return _gui.GuiTreeItem_is_expanded(self)

    def is_collapsed(self):
        return _gui.GuiTreeItem_is_collapsed(self)

    def is_expandable(self):
        return _gui.GuiTreeItem_is_expandable(self)

    def set_selectable(self, flag):
        return _gui.GuiTreeItem_set_selectable(self, flag)

    def is_selectable(self):
        return _gui.GuiTreeItem_is_selectable(self)

    def is_selected(self):
        return _gui.GuiTreeItem_is_selected(self)

    def is_preselected(self):
        return _gui.GuiTreeItem_is_preselected(self)

    def set_is_selected(self, value):
        return _gui.GuiTreeItem_set_is_selected(self, value)

    def set_is_preselected(self, value):
        return _gui.GuiTreeItem_set_is_preselected(self, value)

    def expand(self):
        return _gui.GuiTreeItem_expand(self)

    def collapse(self):
        return _gui.GuiTreeItem_collapse(self)

    def select(self, show=False):
        return _gui.GuiTreeItem_select(self, show)

    def preselect(self):
        return _gui.GuiTreeItem_preselect(self)

    def deselect(self):
        return _gui.GuiTreeItem_deselect(self)

    def add_to_selection(self):
        return _gui.GuiTreeItem_add_to_selection(self)

    def add_to_preselection(self):
        return _gui.GuiTreeItem_add_to_preselection(self)

    def select_children(self, add_to_selection=False):
        return _gui.GuiTreeItem_select_children(self, add_to_selection)

    def activate(self, show=False):
        return _gui.GuiTreeItem_activate(self, show)

    def is_highlighted(self):
        return _gui.GuiTreeItem_is_highlighted(self)

    def get_children(self):
        return _gui.GuiTreeItem_get_children(self)

    def get_children_items(self):
        return _gui.GuiTreeItem_get_children_items(self)

    def move_after(self, item):
        return _gui.GuiTreeItem_move_after(self, item)

    def set_background_selected_color(self, *args):
        return _gui.GuiTreeItem_set_background_selected_color(self, *args)

    def set_background_highlight_color(self, *args):
        return _gui.GuiTreeItem_set_background_highlight_color(self, *args)

    def set_text_selected_color(self, *args):
        return _gui.GuiTreeItem_set_text_selected_color(self, *args)

    def set_text_color(self, *args):
        return _gui.GuiTreeItem_set_text_color(self, *args)

    def get_background_selected_color(self):
        return _gui.GuiTreeItem_get_background_selected_color(self)

    def get_background_selected_no_focus_color(self):
        return _gui.GuiTreeItem_get_background_selected_no_focus_color(self)

    def get_background_highlight_color(self):
        return _gui.GuiTreeItem_get_background_highlight_color(self)

    def get_text_selected_color(self):
        return _gui.GuiTreeItem_get_text_selected_color(self)

    def get_text_color(self):
        return _gui.GuiTreeItem_get_text_color(self)

    def text_starts_with(self, c):
        return _gui.GuiTreeItem_text_starts_with(self, c)

    def on_widget_focus(self, sender, event, data):
        return _gui.GuiTreeItem_on_widget_focus(self, sender, event, data)

    def on_widget_focus_out(self, sender, event, data):
        return _gui.GuiTreeItem_on_widget_focus_out(self, sender, event, data)

    def on_widget_focus_loose(self, sender, event, data):
        return _gui.GuiTreeItem_on_widget_focus_loose(self, sender, event, data)

    def on_widget_mouse_drag(self, sender, event, data):
        return _gui.GuiTreeItem_on_widget_mouse_drag(self, sender, event, data)

    def on_widget_mouse_up(self, sender, event, data):
        return _gui.GuiTreeItem_on_widget_mouse_up(self, sender, event, data)

    def add_widget(self, widget):
        return _gui.GuiTreeItem_add_widget(self, widget)

    def insert_widget(self, widget, index):
        return _gui.GuiTreeItem_insert_widget(self, widget, index)

    def set_widget(self, widget, index):
        return _gui.GuiTreeItem_set_widget(self, widget, index)

    def remove_widget(self, index):
        return _gui.GuiTreeItem_remove_widget(self, index)
    if _newclass:
        class_info = staticmethod(_gui.GuiTreeItem_class_info)
    else:
        class_info = _gui.GuiTreeItem_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTreeItem____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTreeItem____class_destructor__

    def get_class_info(self):
        return _gui.GuiTreeItem_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiTreeItem___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiTreeItem___collect__(self)

    def __uncollect__(self):
        return _gui.GuiTreeItem___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiTreeItem(self)
        return weakref_proxy(self)
GuiTreeItem_swigregister = _gui.GuiTreeItem_swigregister
GuiTreeItem_swigregister(GuiTreeItem)

def GuiTreeItem_class_info():
    return _gui.GuiTreeItem_class_info()
GuiTreeItem_class_info = _gui.GuiTreeItem_class_info

def GuiTreeItem____class_destructor__(instance, is_array):
    return _gui.GuiTreeItem____class_destructor__(instance, is_array)
GuiTreeItem____class_destructor__ = _gui.GuiTreeItem____class_destructor__

class GuiTreeItemBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeItemBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeItemBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiTreeItemBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiTreeItemBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiTreeItemBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiTreeItemBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiTreeItemBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiTreeItemBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiTreeItemBasicArray_front(self)

    def back(self):
        return _gui.GuiTreeItemBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiTreeItemBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiTreeItemBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiTreeItemBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiTreeItemBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiTreeItemBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiTreeItemBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiTreeItemBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiTreeItemBasicArray_class_info)
    else:
        class_info = _gui.GuiTreeItemBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTreeItemBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTreeItemBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiTreeItemBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiTreeItemBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiTreeItemBasicArray_swigregister = _gui.GuiTreeItemBasicArray_swigregister
GuiTreeItemBasicArray_swigregister(GuiTreeItemBasicArray)

def GuiTreeItemBasicArray_class_info():
    return _gui.GuiTreeItemBasicArray_class_info()
GuiTreeItemBasicArray_class_info = _gui.GuiTreeItemBasicArray_class_info

def GuiTreeItemBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiTreeItemBasicArray____class_destructor__(instance, is_array)
GuiTreeItemBasicArray____class_destructor__ = _gui.GuiTreeItemBasicArray____class_destructor__

class GuiTreeItemArray(GuiTreeItemBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiTreeItemBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeItemArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiTreeItemBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeItemArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiTreeItemArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiTreeItemArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiTreeItemArray_append(self, *args)

    def get_count(self):
        return _gui.GuiTreeItemArray_get_count(self)

    def remove_all(self):
        return _gui.GuiTreeItemArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiTreeItemArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiTreeItemArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiTreeItemArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiTreeItemArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiTreeItemArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiTreeItemArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiTreeItemArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiTreeItemArray_class_info)
    else:
        class_info = _gui.GuiTreeItemArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTreeItemArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTreeItemArray____class_destructor__
GuiTreeItemArray_swigregister = _gui.GuiTreeItemArray_swigregister
GuiTreeItemArray_swigregister(GuiTreeItemArray)

def GuiTreeItemArray_class_info():
    return _gui.GuiTreeItemArray_class_info()
GuiTreeItemArray_class_info = _gui.GuiTreeItemArray_class_info

def GuiTreeItemArray____class_destructor__(instance, is_array):
    return _gui.GuiTreeItemArray____class_destructor__(instance, is_array)
GuiTreeItemArray____class_destructor__ = _gui.GuiTreeItemArray____class_destructor__

class GuiTreeItemVector(GuiTreeItemBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiTreeItemBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeItemVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiTreeItemBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeItemVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiTreeItemVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiTreeItemVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiTreeItemVector_append(self, *args)

    def add(self, element):
        return _gui.GuiTreeItemVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiTreeItemVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiTreeItemVector_remove_last(self)

    def empty(self):
        return _gui.GuiTreeItemVector_empty(self)

    def remove_all(self):
        return _gui.GuiTreeItemVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiTreeItemVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiTreeItemVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiTreeItemVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiTreeItemVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiTreeItemVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiTreeItemVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiTreeItemVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiTreeItemVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiTreeItemVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiTreeItemVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiTreeItemVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiTreeItemVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiTreeItemVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiTreeItemVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiTreeItemVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiTreeItemVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiTreeItemVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiTreeItemVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiTreeItemVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiTreeItemVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiTreeItemVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiTreeItemVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiTreeItemVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiTreeItemVector_class_info)
    else:
        class_info = _gui.GuiTreeItemVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTreeItemVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTreeItemVector____class_destructor__
GuiTreeItemVector_swigregister = _gui.GuiTreeItemVector_swigregister
GuiTreeItemVector_swigregister(GuiTreeItemVector)

def GuiTreeItemVector_class_info():
    return _gui.GuiTreeItemVector_class_info()
GuiTreeItemVector_class_info = _gui.GuiTreeItemVector_class_info

def GuiTreeItemVector____class_destructor__(instance, is_array):
    return _gui.GuiTreeItemVector____class_destructor__(instance, is_array)
GuiTreeItemVector____class_destructor__ = _gui.GuiTreeItemVector____class_destructor__

class GuiTreeItemSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeItemSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeItemSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiTreeItemSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiTreeItemSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiTreeItemSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiTreeItemSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiTreeItemSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiTreeItemSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiTreeItemSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiTreeItemSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiTreeItemSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiTreeItemSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiTreeItemSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiTreeItemSet_to_array(self)

    def add(self, *args):
        return _gui.GuiTreeItemSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiTreeItemSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiTreeItemSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiTreeItemSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiTreeItemSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiTreeItemSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiTreeItemSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiTreeItemSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiTreeItemSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiTreeItemSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiTreeItemSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiTreeItemSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiTreeItemSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiTreeItemSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiTreeItemSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiTreeItemSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiTreeItemSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiTreeItemSet
    __del__ = lambda self: None
GuiTreeItemSet_swigregister = _gui.GuiTreeItemSet_swigregister
GuiTreeItemSet_swigregister(GuiTreeItemSet)

def GuiTreeItemSet_get_linear_search_threshold():
    return _gui.GuiTreeItemSet_get_linear_search_threshold()
GuiTreeItemSet_get_linear_search_threshold = _gui.GuiTreeItemSet_get_linear_search_threshold

class GuiTreeItemBasic(GuiTreeItem):
    __swig_setmethods__ = {}
    for _s in [GuiTreeItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeItemBasic, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiTreeItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeItemBasic, name)
    __repr__ = _swig_repr

    def __init__(self, parent, name, icon=None):
        if self.__class__ == GuiTreeItemBasic:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiTreeItemBasic(_self, parent, name, icon)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def get_name(self):
        return _gui.GuiTreeItemBasic_get_name(self)

    def set_name(self, name):
        return _gui.GuiTreeItemBasic_set_name(self, name)

    def get_icon(self):
        return _gui.GuiTreeItemBasic_get_icon(self)

    def set_icon(self, icon):
        return _gui.GuiTreeItemBasic_set_icon(self, icon)

    def get_icons(self):
        return _gui.GuiTreeItemBasic_get_icons(self)

    def set_icons(self, icons):
        return _gui.GuiTreeItemBasic_set_icons(self, icons)

    def get_drawing_offset(self):
        return _gui.GuiTreeItemBasic_get_drawing_offset(self)

    def set_drawing_offset(self, offset):
        return _gui.GuiTreeItemBasic_set_drawing_offset(self, offset)

    def set_draw_icon_disabled(self, disabled):
        return _gui.GuiTreeItemBasic_set_draw_icon_disabled(self, disabled)

    def is_draw_icon_disabled(self):
        return _gui.GuiTreeItemBasic_is_draw_icon_disabled(self)

    def is_renamable(self):
        return _gui.GuiTreeItemBasic_is_renamable(self)

    def get_highlight_color(self):
        return _gui.GuiTreeItemBasic_get_highlight_color(self)

    def rename(self):
        return _gui.GuiTreeItemBasic_rename(self)

    def enable_highlight_keyword(self, pos, size):
        return _gui.GuiTreeItemBasic_enable_highlight_keyword(self, pos, size)

    def disable_highlight_keyword(self):
        return _gui.GuiTreeItemBasic_disable_highlight_keyword(self)

    def text_starts_with(self, c):
        return _gui.GuiTreeItemBasic_text_starts_with(self, c)

    def __gui_destroy__(self):
        return _gui.GuiTreeItemBasic___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiTreeItemBasic___collect__(self)

    def __uncollect__(self):
        return _gui.GuiTreeItemBasic___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiTreeItemBasic(self)
        return weakref_proxy(self)
GuiTreeItemBasic_swigregister = _gui.GuiTreeItemBasic_swigregister
GuiTreeItemBasic_swigregister(GuiTreeItemBasic)
EVT_ID_TREE_ITEM_BASIC_RENAME = cvar.EVT_ID_TREE_ITEM_BASIC_RENAME

class GuiTreeItemBasicBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeItemBasicBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeItemBasicBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiTreeItemBasicBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiTreeItemBasicBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiTreeItemBasicBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiTreeItemBasicBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiTreeItemBasicBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiTreeItemBasicBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiTreeItemBasicBasicArray_front(self)

    def back(self):
        return _gui.GuiTreeItemBasicBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiTreeItemBasicBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiTreeItemBasicBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiTreeItemBasicBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiTreeItemBasicBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiTreeItemBasicBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiTreeItemBasicBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiTreeItemBasicBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiTreeItemBasicBasicArray_class_info)
    else:
        class_info = _gui.GuiTreeItemBasicBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTreeItemBasicBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTreeItemBasicBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiTreeItemBasicBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiTreeItemBasicBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiTreeItemBasicBasicArray_swigregister = _gui.GuiTreeItemBasicBasicArray_swigregister
GuiTreeItemBasicBasicArray_swigregister(GuiTreeItemBasicBasicArray)

def GuiTreeItemBasicBasicArray_class_info():
    return _gui.GuiTreeItemBasicBasicArray_class_info()
GuiTreeItemBasicBasicArray_class_info = _gui.GuiTreeItemBasicBasicArray_class_info

def GuiTreeItemBasicBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiTreeItemBasicBasicArray____class_destructor__(instance, is_array)
GuiTreeItemBasicBasicArray____class_destructor__ = _gui.GuiTreeItemBasicBasicArray____class_destructor__

class GuiTreeItemBasicVector(GuiTreeItemBasicBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiTreeItemBasicBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeItemBasicVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiTreeItemBasicBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeItemBasicVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiTreeItemBasicVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiTreeItemBasicVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiTreeItemBasicVector_append(self, *args)

    def add(self, element):
        return _gui.GuiTreeItemBasicVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiTreeItemBasicVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiTreeItemBasicVector_remove_last(self)

    def empty(self):
        return _gui.GuiTreeItemBasicVector_empty(self)

    def remove_all(self):
        return _gui.GuiTreeItemBasicVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiTreeItemBasicVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiTreeItemBasicVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiTreeItemBasicVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiTreeItemBasicVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiTreeItemBasicVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiTreeItemBasicVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiTreeItemBasicVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiTreeItemBasicVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiTreeItemBasicVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiTreeItemBasicVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiTreeItemBasicVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiTreeItemBasicVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiTreeItemBasicVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiTreeItemBasicVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiTreeItemBasicVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiTreeItemBasicVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiTreeItemBasicVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiTreeItemBasicVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiTreeItemBasicVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiTreeItemBasicVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiTreeItemBasicVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiTreeItemBasicVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiTreeItemBasicVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiTreeItemBasicVector_class_info)
    else:
        class_info = _gui.GuiTreeItemBasicVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiTreeItemBasicVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiTreeItemBasicVector____class_destructor__
GuiTreeItemBasicVector_swigregister = _gui.GuiTreeItemBasicVector_swigregister
GuiTreeItemBasicVector_swigregister(GuiTreeItemBasicVector)

def GuiTreeItemBasicVector_class_info():
    return _gui.GuiTreeItemBasicVector_class_info()
GuiTreeItemBasicVector_class_info = _gui.GuiTreeItemBasicVector_class_info

def GuiTreeItemBasicVector____class_destructor__(instance, is_array):
    return _gui.GuiTreeItemBasicVector____class_destructor__(instance, is_array)
GuiTreeItemBasicVector____class_destructor__ = _gui.GuiTreeItemBasicVector____class_destructor__

class GuiTreeItemBasicSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiTreeItemBasicSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiTreeItemBasicSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiTreeItemBasicSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiTreeItemBasicSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiTreeItemBasicSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiTreeItemBasicSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiTreeItemBasicSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiTreeItemBasicSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiTreeItemBasicSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiTreeItemBasicSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiTreeItemBasicSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiTreeItemBasicSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiTreeItemBasicSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiTreeItemBasicSet_to_array(self)

    def add(self, *args):
        return _gui.GuiTreeItemBasicSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiTreeItemBasicSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiTreeItemBasicSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiTreeItemBasicSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiTreeItemBasicSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiTreeItemBasicSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiTreeItemBasicSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiTreeItemBasicSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiTreeItemBasicSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiTreeItemBasicSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiTreeItemBasicSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiTreeItemBasicSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiTreeItemBasicSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiTreeItemBasicSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiTreeItemBasicSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiTreeItemBasicSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiTreeItemBasicSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiTreeItemBasicSet
    __del__ = lambda self: None
GuiTreeItemBasicSet_swigregister = _gui.GuiTreeItemBasicSet_swigregister
GuiTreeItemBasicSet_swigregister(GuiTreeItemBasicSet)

def GuiTreeItemBasicSet_get_linear_search_threshold():
    return _gui.GuiTreeItemBasicSet_get_linear_search_threshold()
GuiTreeItemBasicSet_get_linear_search_threshold = _gui.GuiTreeItemBasicSet_get_linear_search_threshold

class GuiGrid(GuiWidget):
    __swig_setmethods__ = {}
    for _s in [GuiWidget]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiWidget]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiGrid, name)
    __repr__ = _swig_repr
    STYLE_BORDER = _gui.GuiGrid_STYLE_BORDER
    STYLE_NO_BORDER = _gui.GuiGrid_STYLE_NO_BORDER
    if _newclass:
        get_style_name = staticmethod(_gui.GuiGrid_get_style_name)
    else:
        get_style_name = _gui.GuiGrid_get_style_name

    def __init__(self, parent, x, y, w, h, column_count=1, row_count=1):
        if self.__class__ == GuiGrid:
            _self = None
        else:
            _self = self
        this = _gui.new_GuiGrid(_self, parent, x, y, w, h, column_count, row_count)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__pycreated__ = True
        self.__collect__()




    def set_style(self, style):
        return _gui.GuiGrid_set_style(self, style)

    def get_style(self):
        return _gui.GuiGrid_get_style(self)

    def set_border_size(self, size):
        return _gui.GuiGrid_set_border_size(self, size)

    def get_border_size(self):
        return _gui.GuiGrid_get_border_size(self)

    def set_cell_count(self, column_count, row_count):
        return _gui.GuiGrid_set_cell_count(self, column_count, row_count)

    def set_row_count(self, count):
        return _gui.GuiGrid_set_row_count(self, count)

    def set_column_count(self, count):
        return _gui.GuiGrid_set_column_count(self, count)

    def get_row_count(self):
        return _gui.GuiGrid_get_row_count(self)

    def get_column_count(self):
        return _gui.GuiGrid_get_column_count(self)

    def add_row(self):
        return _gui.GuiGrid_add_row(self)

    def add_column(self):
        return _gui.GuiGrid_add_column(self)

    def insert_row(self, before):
        return _gui.GuiGrid_insert_row(self, before)

    def insert_column(self, before):
        return _gui.GuiGrid_insert_column(self, before)

    def remove_row(self, index):
        return _gui.GuiGrid_remove_row(self, index)

    def remove_column(self, index):
        return _gui.GuiGrid_remove_column(self, index)

    def remove_all_rows(self):
        return _gui.GuiGrid_remove_all_rows(self)

    def remove_all_columns(self):
        return _gui.GuiGrid_remove_all_columns(self)

    def remove_all_cells(self):
        return _gui.GuiGrid_remove_all_cells(self)

    def set_row_sizable(self, index, flag):
        return _gui.GuiGrid_set_row_sizable(self, index, flag)

    def set_column_sizable(self, index, flag):
        return _gui.GuiGrid_set_column_sizable(self, index, flag)

    def set_column_sizable_with_mouse(self, index, flag):
        return _gui.GuiGrid_set_column_sizable_with_mouse(self, index, flag)

    def get_row_sizable(self, index):
        return _gui.GuiGrid_get_row_sizable(self, index)

    def get_column_sizable(self, index):
        return _gui.GuiGrid_get_column_sizable(self, index)

    def get_column_sizable_with_mouse(self, index):
        return _gui.GuiGrid_get_column_sizable_with_mouse(self, index)

    def set_column_ratio(self, index, ratio):
        return _gui.GuiGrid_set_column_ratio(self, index, ratio)

    def set_row_ratio(self, index, ratio):
        return _gui.GuiGrid_set_row_ratio(self, index, ratio)

    def set_cell_ratios(self, column, row, ratios):
        return _gui.GuiGrid_set_cell_ratios(self, column, row, ratios)

    def get_row_ratio(self, index):
        return _gui.GuiGrid_get_row_ratio(self, index)

    def get_column_ratio(self, index):
        return _gui.GuiGrid_get_column_ratio(self, index)

    def get_cell_ratios(self, column, row):
        return _gui.GuiGrid_get_cell_ratios(self, column, row)

    def set_column_width(self, index, width):
        return _gui.GuiGrid_set_column_width(self, index, width)

    def set_row_height(self, index, height):
        return _gui.GuiGrid_set_row_height(self, index, height)

    def set_cell_size(self, column, row, size):
        return _gui.GuiGrid_set_cell_size(self, column, row, size)

    def get_column_width(self, index, safe_area=False):
        return _gui.GuiGrid_get_column_width(self, index, safe_area)

    def get_row_height(self, index, safe_area=False):
        return _gui.GuiGrid_get_row_height(self, index, safe_area)

    def get_cell_size(self, column, row, safe_area=False):
        return _gui.GuiGrid_get_cell_size(self, column, row, safe_area)

    def resize_row(self, index, size):
        return _gui.GuiGrid_resize_row(self, index, size)

    def resize_column(self, index, size):
        return _gui.GuiGrid_resize_column(self, index, size)

    def rescale_row(self, index, ratio):
        return _gui.GuiGrid_rescale_row(self, index, ratio)

    def rescale_column(self, index, ratio):
        return _gui.GuiGrid_rescale_column(self, index, ratio)

    def resize_cell(self, index, width, height):
        return _gui.GuiGrid_resize_cell(self, index, width, height)

    def rescale_cell(self, index, xscale, yscale):
        return _gui.GuiGrid_rescale_cell(self, index, xscale, yscale)

    def set_widget(self, widget, column, row):
        return _gui.GuiGrid_set_widget(self, widget, column, row)

    def get_widget(self, column, row):
        return _gui.GuiGrid_get_widget(self, column, row)

    def remove_widget(self, column, row):
        return _gui.GuiGrid_remove_widget(self, column, row)

    def remove_all_widgets(self):
        return _gui.GuiGrid_remove_all_widgets(self)

    def draw(self, dc):
        return _gui.GuiGrid_draw(self, dc)

    def resize(self, x, y, w, h):
        return _gui.GuiGrid_resize(self, x, y, w, h)

    def is_recursive_constraints(self):
        return _gui.GuiGrid_is_recursive_constraints(self)

    def show(self):
        return _gui.GuiGrid_show(self)

    def show_guides(self):
        return _gui.GuiGrid_show_guides(self)

    def hide_guides(self):
        return _gui.GuiGrid_hide_guides(self)

    def show_background(self):
        return _gui.GuiGrid_show_background(self)

    def hide_background(self):
        return _gui.GuiGrid_hide_background(self)

    def get_row_top(self, index, safe_area=False):
        return _gui.GuiGrid_get_row_top(self, index, safe_area)

    def get_column_left(self, index, safe_area=False):
        return _gui.GuiGrid_get_column_left(self, index, safe_area)

    def get_cell_position(self, column, row, safe_area=False):
        return _gui.GuiGrid_get_cell_position(self, column, row, safe_area)
    if _newclass:
        class_info = staticmethod(_gui.GuiGrid_class_info)
    else:
        class_info = _gui.GuiGrid_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiGrid____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiGrid____class_destructor__

    def get_class_info(self):
        return _gui.GuiGrid_get_class_info(self)

    def __gui_destroy__(self):
        return _gui.GuiGrid___gui_destroy__(self)

    def __collect__(self):
        return _gui.GuiGrid___collect__(self)

    def __uncollect__(self):
        return _gui.GuiGrid___uncollect__(self)

    def is_created_by_python(self):
        if hasattr(self, '__pycreated__'):
            return self.__pycreated__
        else: return False

    def destroy(self):
        if self.is_created_by_python():
            self.__disown__()
            self.__gui_destroy__()
            self.__uncollect__()

    def __del__(self):
        if not self.is_created_by_python(): return
        if self.is_shown():
            self.hide()
        if self.is_destroyed():
            if self.thisown: self.__disown__()
        else: self.destroy()

    def __disown__(self):
        self.this.disown()
        _gui.disown_GuiGrid(self)
        return weakref_proxy(self)
GuiGrid_swigregister = _gui.GuiGrid_swigregister
GuiGrid_swigregister(GuiGrid)
EVT_ID_GRID_COLUMN_RESIZED = cvar.EVT_ID_GRID_COLUMN_RESIZED
EVT_ID_GRID_ROW_RESIZED = cvar.EVT_ID_GRID_ROW_RESIZED

def GuiGrid_get_style_name(style):
    return _gui.GuiGrid_get_style_name(style)
GuiGrid_get_style_name = _gui.GuiGrid_get_style_name

def GuiGrid_class_info():
    return _gui.GuiGrid_class_info()
GuiGrid_class_info = _gui.GuiGrid_class_info

def GuiGrid____class_destructor__(instance, is_array):
    return _gui.GuiGrid____class_destructor__(instance, is_array)
GuiGrid____class_destructor__ = _gui.GuiGrid____class_destructor__

class GuiGridBasicArray(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiGridBasicArray, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiGridBasicArray, name)
    __repr__ = _swig_repr
    INVALID_INDEX = _gui.GuiGridBasicArray_INVALID_INDEX

    def __init__(self, *args):
        this = _gui.new_GuiGridBasicArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiGridBasicArray
    __del__ = lambda self: None

    def get_count(self):
        return _gui.GuiGridBasicArray_get_count(self)

    def get_item(self, index):
        return _gui.GuiGridBasicArray_get_item(self, index)

    def set_item(self, index, item):
        return _gui.GuiGridBasicArray_set_item(self, index, item)

    def front(self):
        return _gui.GuiGridBasicArray_front(self)

    def back(self):
        return _gui.GuiGridBasicArray_back(self)

    def exists(self, item):
        return _gui.GuiGridBasicArray_exists(self, item)

    def get_index(self, item):
        return _gui.GuiGridBasicArray_get_index(self, item)

    def sub(self, index, count):
        return _gui.GuiGridBasicArray_sub(self, index, count)

    def get_memory_size(self):
        return _gui.GuiGridBasicArray_get_memory_size(self)

    def begin(self, *args):
        return _gui.GuiGridBasicArray_begin(self, *args)

    def end(self, *args):
        return _gui.GuiGridBasicArray_end(self, *args)

    def get_class_info(self):
        return _gui.GuiGridBasicArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiGridBasicArray_class_info)
    else:
        class_info = _gui.GuiGridBasicArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiGridBasicArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiGridBasicArray____class_destructor__

    def __setitem__(self, index, value):
        return _gui.GuiGridBasicArray___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiGridBasicArray___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

GuiGridBasicArray_swigregister = _gui.GuiGridBasicArray_swigregister
GuiGridBasicArray_swigregister(GuiGridBasicArray)

def GuiGridBasicArray_class_info():
    return _gui.GuiGridBasicArray_class_info()
GuiGridBasicArray_class_info = _gui.GuiGridBasicArray_class_info

def GuiGridBasicArray____class_destructor__(instance, is_array):
    return _gui.GuiGridBasicArray____class_destructor__(instance, is_array)
GuiGridBasicArray____class_destructor__ = _gui.GuiGridBasicArray____class_destructor__

class GuiGridArray(GuiGridBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiGridBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiGridArray, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiGridBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiGridArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiGridArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiGridArray
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiGridArray_append(self, *args)

    def get_count(self):
        return _gui.GuiGridArray_get_count(self)

    def remove_all(self):
        return _gui.GuiGridArray_remove_all(self)

    def resize(self, *args):
        return _gui.GuiGridArray_resize(self, *args)

    def copy_from(self, *args):
        return _gui.GuiGridArray_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiGridArray_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiGridArray_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiGridArray_set_list(self, list)

    def get_memory_size(self):
        return _gui.GuiGridArray_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiGridArray_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiGridArray_class_info)
    else:
        class_info = _gui.GuiGridArray_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiGridArray____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiGridArray____class_destructor__
GuiGridArray_swigregister = _gui.GuiGridArray_swigregister
GuiGridArray_swigregister(GuiGridArray)

def GuiGridArray_class_info():
    return _gui.GuiGridArray_class_info()
GuiGridArray_class_info = _gui.GuiGridArray_class_info

def GuiGridArray____class_destructor__(instance, is_array):
    return _gui.GuiGridArray____class_destructor__(instance, is_array)
GuiGridArray____class_destructor__ = _gui.GuiGridArray____class_destructor__

class GuiGridVector(GuiGridBasicArray):
    __swig_setmethods__ = {}
    for _s in [GuiGridBasicArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiGridVector, name, value)
    __swig_getmethods__ = {}
    for _s in [GuiGridBasicArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiGridVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiGridVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gui.delete_GuiGridVector
    __del__ = lambda self: None

    def append(self, *args):
        return _gui.GuiGridVector_append(self, *args)

    def add(self, element):
        return _gui.GuiGridVector_add(self, element)

    def insert(self, element, index):
        return _gui.GuiGridVector_insert(self, element, index)

    def remove_last(self):
        return _gui.GuiGridVector_remove_last(self)

    def empty(self):
        return _gui.GuiGridVector_empty(self)

    def remove_all(self):
        return _gui.GuiGridVector_remove_all(self)

    def clear(self, *args):
        return _gui.GuiGridVector_clear(self, *args)

    def remove(self, *args):
        return _gui.GuiGridVector_remove(self, *args)

    def is_empty(self):
        return _gui.GuiGridVector_is_empty(self)

    def remove_item(self, item, preserve_order):
        return _gui.GuiGridVector_remove_item(self, item, preserve_order)

    def remove_items(self, item):
        return _gui.GuiGridVector_remove_items(self, item)

    def get_count(self):
        return _gui.GuiGridVector_get_count(self)

    def get_capacity(self):
        return _gui.GuiGridVector_get_capacity(self)

    def set_count(self, *args):
        return _gui.GuiGridVector_set_count(self, *args)

    def set_capacity(self, *args):
        return _gui.GuiGridVector_set_capacity(self, *args)

    def refit(self):
        return _gui.GuiGridVector_refit(self)

    def swap(self, swap_v1, swap_v2):
        return _gui.GuiGridVector_swap(self, swap_v1, swap_v2)

    def resize(self, *args):
        return _gui.GuiGridVector_resize(self, *args)

    def reserve(self, *args):
        return _gui.GuiGridVector_reserve(self, *args)

    def copy_from(self, *args):
        return _gui.GuiGridVector_copy_from(self, *args)

    def copy_to(self, dest):
        return _gui.GuiGridVector_copy_to(self, dest)

    def get_list(self, list):
        return _gui.GuiGridVector_get_list(self, list)

    def set_list(self, list):
        return _gui.GuiGridVector_set_list(self, list)

    def get_array(self, array):
        return _gui.GuiGridVector_get_array(self, array)

    def set_array(self, array):
        return _gui.GuiGridVector_set_array(self, array)

    def move(self, arg2, to):
        return _gui.GuiGridVector_move(self, arg2, to)

    def item(self, index):
        return _gui.GuiGridVector_item(self, index)

    def get_memory_size(self):
        return _gui.GuiGridVector_get_memory_size(self)

    def get_class_info(self):
        return _gui.GuiGridVector_get_class_info(self)
    if _newclass:
        class_info = staticmethod(_gui.GuiGridVector_class_info)
    else:
        class_info = _gui.GuiGridVector_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_gui.GuiGridVector____class_destructor__)
    else:
        ___class_destructor__ = _gui.GuiGridVector____class_destructor__
GuiGridVector_swigregister = _gui.GuiGridVector_swigregister
GuiGridVector_swigregister(GuiGridVector)

def GuiGridVector_class_info():
    return _gui.GuiGridVector_class_info()
GuiGridVector_class_info = _gui.GuiGridVector_class_info

def GuiGridVector____class_destructor__(instance, is_array):
    return _gui.GuiGridVector____class_destructor__(instance, is_array)
GuiGridVector____class_destructor__ = _gui.GuiGridVector____class_destructor__

class GuiGridSet(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiGridSet, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiGridSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gui.new_GuiGridSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_count(self):
        return _gui.GuiGridSet_get_count(self)

    def exists(self, *args):
        return _gui.GuiGridSet_exists(self, *args)

    def is_empty(self):
        return _gui.GuiGridSet_is_empty(self)

    def is_included(self, set):
        return _gui.GuiGridSet_is_included(self, set)

    def get_items(self):
        return _gui.GuiGridSet_get_items(self)

    def get_item(self, index):
        return _gui.GuiGridSet_get_item(self, index)

    def back(self, *args):
        return _gui.GuiGridSet_back(self, *args)

    def get_array(self, array):
        return _gui.GuiGridSet_get_array(self, array)

    def get_list(self, list):
        return _gui.GuiGridSet_get_list(self, list)

    def get_vector(self, vector):
        return _gui.GuiGridSet_get_vector(self, vector)

    def to_array(self):
        return _gui.GuiGridSet_to_array(self)

    def add(self, *args):
        return _gui.GuiGridSet_add(self, *args)

    def remove(self, index):
        return _gui.GuiGridSet_remove(self, index)

    def remove_item(self, item):
        return _gui.GuiGridSet_remove_item(self, item)

    def remove_set(self, set):
        return _gui.GuiGridSet_remove_set(self, set)

    def remove_all(self):
        return _gui.GuiGridSet_remove_all(self)

    def toggle(self, item):
        return _gui.GuiGridSet_toggle(self, item)

    def unite(self, set):
        return _gui.GuiGridSet_unite(self, set)

    def intersect(self, set):
        return _gui.GuiGridSet_intersect(self, set)

    def __eq__(self, set):

        if not isinstance(obj, type(self)):
            return False


        return _gui.GuiGridSet___eq__(self, set)


    def __ne__(self, set):
        return _gui.GuiGridSet___ne__(self, set)

    def begin(self, *args):
        return _gui.GuiGridSet_begin(self, *args)

    def end(self, *args):
        return _gui.GuiGridSet_end(self, *args)
    if _newclass:
        get_linear_search_threshold = staticmethod(_gui.GuiGridSet_get_linear_search_threshold)
    else:
        get_linear_search_threshold = _gui.GuiGridSet_get_linear_search_threshold

    def get_memory_size(self):
        return _gui.GuiGridSet_get_memory_size(self)

    def __setitem__(self, index, value):
        return _gui.GuiGridSet___setitem__(self, index, value)

    def __len__(self):
        return _gui.GuiGridSet___len__(self)

    def __getitem__(self, index):
        if (index < self.get_count()):
            return self.get_item(index)
        else:
            raise IndexError("The index (" + str(index) + ") is out of range")
    def __nonzero__(self): return True

    __swig_destroy__ = _gui.delete_GuiGridSet
    __del__ = lambda self: None
GuiGridSet_swigregister = _gui.GuiGridSet_swigregister
GuiGridSet_swigregister(GuiGridSet)

def GuiGridSet_get_linear_search_threshold():
    return _gui.GuiGridSet_get_linear_search_threshold()
GuiGridSet_get_linear_search_threshold = _gui.GuiGridSet_get_linear_search_threshold

# This file is compatible with both classic and new-style classes.


