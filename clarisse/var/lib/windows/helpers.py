# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_helpers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_helpers')
    _helpers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_helpers', [dirname(__file__)])
        except ImportError:
            import _helpers
            return _helpers
        try:
            _mod = imp.load_module('_helpers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _helpers = swig_import_helper()
    del swig_import_helper
else:
    import _helpers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import framework
import base
class ImageHandle(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageHandle, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _helpers.new_ImageHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_ImageHandle
    __del__ = lambda self: None

    def __ref__(self):
        return _helpers.ImageHandle___ref__(self)

    def get_canvas(self):
        return _helpers.ImageHandle_get_canvas(self)

    def get_ref_count(self):
        return _helpers.ImageHandle_get_ref_count(self)

    def is_empty(self):
        return _helpers.ImageHandle_is_empty(self)
    if _newclass:
        get_default_image = staticmethod(_helpers.ImageHandle_get_default_image)
    else:
        get_default_image = _helpers.ImageHandle_get_default_image
    if _newclass:
        get_empty_handle = staticmethod(_helpers.ImageHandle_get_empty_handle)
    else:
        get_empty_handle = _helpers.ImageHandle_get_empty_handle

    def get_memory_size(self):
        return _helpers.ImageHandle_get_memory_size(self)
    if _newclass:
        class_info = staticmethod(_helpers.ImageHandle_class_info)
    else:
        class_info = _helpers.ImageHandle_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_helpers.ImageHandle____class_destructor__)
    else:
        ___class_destructor__ = _helpers.ImageHandle____class_destructor__

    def get_class_info(self):
        return _helpers.ImageHandle_get_class_info(self)
ImageHandle_swigregister = _helpers.ImageHandle_swigregister
ImageHandle_swigregister(ImageHandle)

def ImageHandle_get_default_image():
    return _helpers.ImageHandle_get_default_image()
ImageHandle_get_default_image = _helpers.ImageHandle_get_default_image

def ImageHandle_get_empty_handle():
    return _helpers.ImageHandle_get_empty_handle()
ImageHandle_get_empty_handle = _helpers.ImageHandle_get_empty_handle

def ImageHandle_class_info():
    return _helpers.ImageHandle_class_info()
ImageHandle_class_info = _helpers.ImageHandle_class_info

def ImageHandle____class_destructor__(instance, is_array):
    return _helpers.ImageHandle____class_destructor__(instance, is_array)
ImageHandle____class_destructor__ = _helpers.ImageHandle____class_destructor__

class ImageMap(framework.ResourceData):
    __swig_setmethods__ = {}
    for _s in [framework.ResourceData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageMap, name, value)
    __swig_getmethods__ = {}
    for _s in [framework.ResourceData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageMap, name)
    __repr__ = _swig_repr
    CHANNEL_LUMINANCE = _helpers.ImageMap_CHANNEL_LUMINANCE
    CHANNEL_R = _helpers.ImageMap_CHANNEL_R
    CHANNEL_G = _helpers.ImageMap_CHANNEL_G
    CHANNEL_B = _helpers.ImageMap_CHANNEL_B
    CHANNEL_A = _helpers.ImageMap_CHANNEL_A
    CHANNEL_Z = _helpers.ImageMap_CHANNEL_Z
    CHANNEL_MAX = _helpers.ImageMap_CHANNEL_MAX
    CHANNEL_COUNT = _helpers.ImageMap_CHANNEL_COUNT
    CHANNEL_CUSTOM = _helpers.ImageMap_CHANNEL_CUSTOM
    if _newclass:
        get_default_imagemap = staticmethod(_helpers.ImageMap_get_default_imagemap)
    else:
        get_default_imagemap = _helpers.ImageMap_get_default_imagemap

    def __init__(self, *args):
        this = _helpers.new_ImageMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_ImageMap
    __del__ = lambda self: None

    def add_channel(self, *args):
        return _helpers.ImageMap_add_channel(self, *args)

    def get_channels(self):
        return _helpers.ImageMap_get_channels(self)

    def set_auto_check_uniformity(self, flag):
        return _helpers.ImageMap_set_auto_check_uniformity(self, flag)

    def get_auto_check_uniformity(self):
        return _helpers.ImageMap_get_auto_check_uniformity(self)

    def get_channel(self, id):
        return _helpers.ImageMap_get_channel(self, id)

    def get_custom_channel_count(self):
        return _helpers.ImageMap_get_custom_channel_count(self)

    def get_channel_index_by_name(self, name):
        return _helpers.ImageMap_get_channel_index_by_name(self, name)

    def get_channel_by_name(self, name):
        return _helpers.ImageMap_get_channel_by_name(self, name)

    def get_red_channel(self):
        return _helpers.ImageMap_get_red_channel(self)

    def get_green_channel(self):
        return _helpers.ImageMap_get_green_channel(self)

    def get_blue_channel(self):
        return _helpers.ImageMap_get_blue_channel(self)

    def get_alpha_channel(self):
        return _helpers.ImageMap_get_alpha_channel(self)

    def get_luminance_channel(self):
        return _helpers.ImageMap_get_luminance_channel(self)

    def set_depth(self, depth, bit_depth, bit_type):
        return _helpers.ImageMap_set_depth(self, depth, bit_depth, bit_type)

    def get_depth(self):
        return _helpers.ImageMap_get_depth(self)

    def get_bit_depth(self):
        return _helpers.ImageMap_get_bit_depth(self)

    def get_bit_type(self):
        return _helpers.ImageMap_get_bit_type(self)

    def get_u_repeat_mode(self):
        return _helpers.ImageMap_get_u_repeat_mode(self)

    def get_v_repeat_mode(self):
        return _helpers.ImageMap_get_v_repeat_mode(self)

    def set_repeat_mode(self, u_mode, v_mode):
        return _helpers.ImageMap_set_repeat_mode(self, u_mode, v_mode)

    def get_channel_count(self):
        return _helpers.ImageMap_get_channel_count(self)

    def get_tile_size(self):
        return _helpers.ImageMap_get_tile_size(self)

    def get_sorted_tiles(self, *args):
        return _helpers.ImageMap_get_sorted_tiles(self, *args)

    def get_dirty_tiles(self, region, sorted_tiles, dirtiness_flag, items_count):
        return _helpers.ImageMap_get_dirty_tiles(self, region, sorted_tiles, dirtiness_flag, items_count)

    def get_clean_tiles(self, region, tiles, items_count):
        return _helpers.ImageMap_get_clean_tiles(self, region, tiles, items_count)

    def get_dirty_pixel_count(self, region):
        return _helpers.ImageMap_get_dirty_pixel_count(self, region)

    def is_luminance_alpha(self):
        return _helpers.ImageMap_is_luminance_alpha(self)

    def is_rgb(self):
        return _helpers.ImageMap_is_rgb(self)

    def is_rgba(self):
        return _helpers.ImageMap_is_rgba(self)

    def has_alpha(self):
        return _helpers.ImageMap_has_alpha(self)

    def has_one_clean_tile(self):
        return _helpers.ImageMap_has_one_clean_tile(self)

    def set_one_clean_tile(self):
        return _helpers.ImageMap_set_one_clean_tile(self)

    def remove_all_channels(self):
        return _helpers.ImageMap_remove_all_channels(self)

    def reset(self):
        return _helpers.ImageMap_reset(self)

    def finalize(self, context, region, set_clean=True):
        return _helpers.ImageMap_finalize(self, context, region, set_clean)

    def compute_image_edges(self, context, region):
        return _helpers.ImageMap_compute_image_edges(self, context, region)

    def get_pixel_nearest(self, *args):
        return _helpers.ImageMap_get_pixel_nearest(self, *args)

    def get_pixel_bilinear(self, *args):
        return _helpers.ImageMap_get_pixel_bilinear(self, *args)

    def create_buffer_rgba(self, context, region, out_buffer, channel_size, x_mode, y_mode):
        return _helpers.ImageMap_create_buffer_rgba(self, context, region, out_buffer, channel_size, x_mode, y_mode)

    def get_rgba_channels(self, channels_vector):
        return _helpers.ImageMap_get_rgba_channels(self, channels_vector)

    def fill_from_buffer_rgba(self, region, in_buffer, process_region_edges=True):
        return _helpers.ImageMap_fill_from_buffer_rgba(self, region, in_buffer, process_region_edges)

    def fill_channels_from_buffer(self, region, channel_count, in_buffer, process_region_edges=True):
        return _helpers.ImageMap_fill_channels_from_buffer(self, region, channel_count, in_buffer, process_region_edges)

    def fill_clean_data(self, src, region):
        return _helpers.ImageMap_fill_clean_data(self, src, region)

    def set_data(self, *args):
        return _helpers.ImageMap_set_data(self, *args)

    def make_half(self, context, up_image, region):
        return _helpers.ImageMap_make_half(self, context, up_image, region)

    def invalidate_all(self):
        return _helpers.ImageMap_invalidate_all(self)

    def invalidate_channels(self, channel_names):
        return _helpers.ImageMap_invalidate_channels(self, channel_names)

    def copy_channel_list(self, src):
        return _helpers.ImageMap_copy_channel_list(self, src)

    def update_custom_channels(self, to_remove, to_add):
        return _helpers.ImageMap_update_custom_channels(self, to_remove, to_add)

    def dirty_border(self, region):
        return _helpers.ImageMap_dirty_border(self, region)

    def on_update_visible(self, old_region, new_region):
        return _helpers.ImageMap_on_update_visible(self, old_region, new_region)

    def get_memory_size(self):
        return _helpers.ImageMap_get_memory_size(self)

    def get_stats(self, stats):
        return _helpers.ImageMap_get_stats(self, stats)

    def move_data(self, offset_x, offset_y):
        return _helpers.ImageMap_move_data(self, offset_x, offset_y)

    def copy_data(self, src, offset_x, offset_y, region=None):
        return _helpers.ImageMap_copy_data(self, src, offset_x, offset_y, region)

    def create_tiles(self, region, visible_only=False):
        return _helpers.ImageMap_create_tiles(self, region, visible_only)

    def fill_rgba_from_channels(self, src, channel_names, offset_x, offset_y, region):
        return _helpers.ImageMap_fill_rgba_from_channels(self, src, channel_names, offset_x, offset_y, region)

    def get_bounding_box(self, *args):
        return _helpers.ImageMap_get_bounding_box(self, *args)

    def get_tiles_bounding_box(self, bbox):
        return _helpers.ImageMap_get_tiles_bounding_box(self, bbox)

    def set_bounding_box(self, bbox):
        return _helpers.ImageMap_set_bounding_box(self, bbox)

    def process_visible(self, ctx, process, user_data=None, region=None):
        return _helpers.ImageMap_process_visible(self, ctx, process, user_data, region)

    def blit_visible(self, *args):
        return _helpers.ImageMap_blit_visible(self, *args)

    def blit(self, *args):
        return _helpers.ImageMap_blit(self, *args)

    def blit_bucket_aligned(self, *args):
        return _helpers.ImageMap_blit_bucket_aligned(self, *args)

    def get_theoric_tile_count(self):
        return _helpers.ImageMap_get_theoric_tile_count(self)

    def create_data(self, region, depth, bit_depth, bit_type, tile_size):
        return _helpers.ImageMap_create_data(self, region, depth, bit_depth, bit_type, tile_size)

    def create_rgba_channels(self, region):
        return _helpers.ImageMap_create_rgba_channels(self, region)

    def fill_from(self, src, src_data_region, dest_data_region, app):
        return _helpers.ImageMap_fill_from(self, src, src_data_region, dest_data_region, app)

    def init(self, depth, bit_depth, bit_type, tile_size):
        return _helpers.ImageMap_init(self, depth, bit_depth, bit_type, tile_size)
    if _newclass:
        class_info = staticmethod(_helpers.ImageMap_class_info)
    else:
        class_info = _helpers.ImageMap_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_helpers.ImageMap____class_destructor__)
    else:
        ___class_destructor__ = _helpers.ImageMap____class_destructor__

    def get_class_info(self):
        return _helpers.ImageMap_get_class_info(self)
ImageMap_swigregister = _helpers.ImageMap_swigregister
ImageMap_swigregister(ImageMap)

def ImageMap_get_default_imagemap(*args):
    return _helpers.ImageMap_get_default_imagemap(*args)
ImageMap_get_default_imagemap = _helpers.ImageMap_get_default_imagemap

def ImageMap_class_info():
    return _helpers.ImageMap_class_info()
ImageMap_class_info = _helpers.ImageMap_class_info

def ImageMap____class_destructor__(instance, is_array):
    return _helpers.ImageMap____class_destructor__(instance, is_array)
ImageMap____class_destructor__ = _helpers.ImageMap____class_destructor__

class ImagePixel(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImagePixel, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImagePixel, name)
    __repr__ = _swig_repr
    BIT_TYPE_NULL = _helpers.ImagePixel_BIT_TYPE_NULL
    BIT_TYPE_INT = _helpers.ImagePixel_BIT_TYPE_INT
    BIT_TYPE_FLOAT = _helpers.ImagePixel_BIT_TYPE_FLOAT
    BIT_TYPE_MAX = _helpers.ImagePixel_BIT_TYPE_MAX
    BIT_TYPE_COUNT = _helpers.ImagePixel_BIT_TYPE_COUNT
    BIT_DEPTH_NULL = _helpers.ImagePixel_BIT_DEPTH_NULL
    BIT_DEPTH_8 = _helpers.ImagePixel_BIT_DEPTH_8
    BIT_DEPTH_16 = _helpers.ImagePixel_BIT_DEPTH_16
    BIT_DEPTH_32 = _helpers.ImagePixel_BIT_DEPTH_32
    BIT_DEPTH_MAX = _helpers.ImagePixel_BIT_DEPTH_MAX
    BIT_DEPTH_COUNT = _helpers.ImagePixel_BIT_DEPTH_COUNT
    if _newclass:
        get_bit_depth_name = staticmethod(_helpers.ImagePixel_get_bit_depth_name)
    else:
        get_bit_depth_name = _helpers.ImagePixel_get_bit_depth_name
    DEPTH_NONE = _helpers.ImagePixel_DEPTH_NONE
    DEPTH_LUMINANCE = _helpers.ImagePixel_DEPTH_LUMINANCE
    DEPTH_LUMINANCE_ALPHA = _helpers.ImagePixel_DEPTH_LUMINANCE_ALPHA
    DEPTH_RGB = _helpers.ImagePixel_DEPTH_RGB
    DEPTH_RGBA = _helpers.ImagePixel_DEPTH_RGBA
    DEPTH_MAX = _helpers.ImagePixel_DEPTH_MAX
    DEPTH_COUNT = _helpers.ImagePixel_DEPTH_COUNT
    if _newclass:
        get_depth_name = staticmethod(_helpers.ImagePixel_get_depth_name)
    else:
        get_depth_name = _helpers.ImagePixel_get_depth_name
    REPEAT = _helpers.ImagePixel_REPEAT
    CLAMP = _helpers.ImagePixel_CLAMP
    RESET = _helpers.ImagePixel_RESET
    DEFAULT = _helpers.ImagePixel_DEFAULT
    BLIT_MODE_REPLACE = _helpers.ImagePixel_BLIT_MODE_REPLACE
    BLIT_MODE_ADD = _helpers.ImagePixel_BLIT_MODE_ADD
    BLIT_MODE_SUBTRACT = _helpers.ImagePixel_BLIT_MODE_SUBTRACT
    BLIT_MODE_MULTIPLY = _helpers.ImagePixel_BLIT_MODE_MULTIPLY
    BLIT_MODE_DIVIDE = _helpers.ImagePixel_BLIT_MODE_DIVIDE
    BLIT_MODE_MAX = _helpers.ImagePixel_BLIT_MODE_MAX
    if _newclass:
        DEFAULT_COLOR_MIN_DELTA = staticmethod(_helpers.ImagePixel_DEFAULT_COLOR_MIN_DELTA)
    else:
        DEFAULT_COLOR_MIN_DELTA = _helpers.ImagePixel_DEFAULT_COLOR_MIN_DELTA
    if _newclass:
        class_info = staticmethod(_helpers.ImagePixel_class_info)
    else:
        class_info = _helpers.ImagePixel_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_helpers.ImagePixel____class_destructor__)
    else:
        ___class_destructor__ = _helpers.ImagePixel____class_destructor__

    def get_class_info(self):
        return _helpers.ImagePixel_get_class_info(self)

    def __init__(self):
        this = _helpers.new_ImagePixel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_ImagePixel
    __del__ = lambda self: None
ImagePixel_swigregister = _helpers.ImagePixel_swigregister
ImagePixel_swigregister(ImagePixel)

def ImagePixel_get_bit_depth_name(value):
    return _helpers.ImagePixel_get_bit_depth_name(value)
ImagePixel_get_bit_depth_name = _helpers.ImagePixel_get_bit_depth_name

def ImagePixel_get_depth_name(value):
    return _helpers.ImagePixel_get_depth_name(value)
ImagePixel_get_depth_name = _helpers.ImagePixel_get_depth_name

def ImagePixel_DEFAULT_COLOR_MIN_DELTA():
    return _helpers.ImagePixel_DEFAULT_COLOR_MIN_DELTA()
ImagePixel_DEFAULT_COLOR_MIN_DELTA = _helpers.ImagePixel_DEFAULT_COLOR_MIN_DELTA

def ImagePixel_class_info():
    return _helpers.ImagePixel_class_info()
ImagePixel_class_info = _helpers.ImagePixel_class_info

def ImagePixel____class_destructor__(instance, is_array):
    return _helpers.ImagePixel____class_destructor__(instance, is_array)
ImagePixel____class_destructor__ = _helpers.ImagePixel____class_destructor__

class ImageCanvas(framework.ResourceData):
    __swig_setmethods__ = {}
    for _s in [framework.ResourceData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageCanvas, name, value)
    __swig_getmethods__ = {}
    for _s in [framework.ResourceData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageCanvas, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _helpers.new_ImageCanvas(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_ImageCanvas
    __del__ = lambda self: None

    def create_image(self, *args):
        return _helpers.ImageCanvas_create_image(self, *args)

    def clear(self, *args):
        return _helpers.ImageCanvas_clear(self, *args)

    def dirty_image(self):
        return _helpers.ImageCanvas_dirty_image(self)

    def dirty_channels(self, channel_names):
        return _helpers.ImageCanvas_dirty_channels(self, channel_names)

    def update_custom_channels(self, to_remove, to_add):
        return _helpers.ImageCanvas_update_custom_channels(self, to_remove, to_add)

    def dirty_border(self, region):
        return _helpers.ImageCanvas_dirty_border(self, region)

    def on_update_visible(self, old_region, new_region):
        return _helpers.ImageCanvas_on_update_visible(self, old_region, new_region)

    def get_x(self):
        return _helpers.ImageCanvas_get_x(self)

    def get_y(self):
        return _helpers.ImageCanvas_get_y(self)

    def get_width(self):
        return _helpers.ImageCanvas_get_width(self)

    def get_height(self):
        return _helpers.ImageCanvas_get_height(self)

    def get_tile_size(self):
        return _helpers.ImageCanvas_get_tile_size(self)

    def get_canvas(self):
        return _helpers.ImageCanvas_get_canvas(self)

    def get_visible_window(self):
        return _helpers.ImageCanvas_get_visible_window(self)

    def get_visible_windows(self):
        return _helpers.ImageCanvas_get_visible_windows(self)

    def get_data_windows(self):
        return _helpers.ImageCanvas_get_data_windows(self)

    def get_pixel_nearest(self, context, eval_ctx, color):
        return _helpers.ImageCanvas_get_pixel_nearest(self, context, eval_ctx, color)

    def get_pixel_bilinear(self, context, eval_ctx, color):
        return _helpers.ImageCanvas_get_pixel_bilinear(self, context, eval_ctx, color)

    def get_pixel_mipmap_trilinear(self, context, eval_ctx, color, display_mipmap_level):
        return _helpers.ImageCanvas_get_pixel_mipmap_trilinear(self, context, eval_ctx, color, display_mipmap_level)

    def get_pixel_mipmap_ewa(self, context, eval_ctx, color, anisotropy_factor, display_mipmap_level):
        return _helpers.ImageCanvas_get_pixel_mipmap_ewa(self, context, eval_ctx, color, anisotropy_factor, display_mipmap_level)

    def get_pixel_ewa(self, context, eval_ctx, color, anisotropy_factor, display_mipmap_level):
        return _helpers.ImageCanvas_get_pixel_ewa(self, context, eval_ctx, color, anisotropy_factor, display_mipmap_level)

    def finalize(self, set_clean=True):
        return _helpers.ImageCanvas_finalize(self, set_clean)

    def compute_image_edges(self):
        return _helpers.ImageCanvas_compute_image_edges(self)

    def update_mip_canvas(self):
        return _helpers.ImageCanvas_update_mip_canvas(self)

    def set_canvas(self, *args):
        return _helpers.ImageCanvas_set_canvas(self, *args)

    def get_image(self):
        return _helpers.ImageCanvas_get_image(self)

    def get_map(self, *args):
        return _helpers.ImageCanvas_get_map(self, *args)

    def get_theoric_tile_count(self):
        return _helpers.ImageCanvas_get_theoric_tile_count(self)

    def move_data(self, offset_x, offset_y):
        return _helpers.ImageCanvas_move_data(self, offset_x, offset_y)

    def create_from(self, src, offset_x=0, offset_y=0, region=None, channel_names=None):
        return _helpers.ImageCanvas_create_from(self, src, offset_x, offset_y, region, channel_names)

    def copy_from(self, src):
        return _helpers.ImageCanvas_copy_from(self, src)

    def fill_clean_data(self, src, region):
        return _helpers.ImageCanvas_fill_clean_data(self, src, region)

    def blit_visible(self, *args):
        return _helpers.ImageCanvas_blit_visible(self, *args)

    def process_visible(self, ctx, process, user_data=None, region=None):
        return _helpers.ImageCanvas_process_visible(self, ctx, process, user_data, region)
    if _newclass:
        resize = staticmethod(_helpers.ImageCanvas_resize)
    else:
        resize = _helpers.ImageCanvas_resize

    def get_memory_size(self):
        return _helpers.ImageCanvas_get_memory_size(self)

    def compute_pixel_ray_intersection(self, x, y, ray, intersection):
        return _helpers.ImageCanvas_compute_pixel_ray_intersection(self, x, y, ray, intersection)
    if _newclass:
        compute_uv_ray_intersection_x = staticmethod(_helpers.ImageCanvas_compute_uv_ray_intersection_x)
    else:
        compute_uv_ray_intersection_x = _helpers.ImageCanvas_compute_uv_ray_intersection_x
    if _newclass:
        compute_uv_ray_intersection_y = staticmethod(_helpers.ImageCanvas_compute_uv_ray_intersection_y)
    else:
        compute_uv_ray_intersection_y = _helpers.ImageCanvas_compute_uv_ray_intersection_y
    if _newclass:
        compute_uv_ray_intersection_z = staticmethod(_helpers.ImageCanvas_compute_uv_ray_intersection_z)
    else:
        compute_uv_ray_intersection_z = _helpers.ImageCanvas_compute_uv_ray_intersection_z
    if _newclass:
        compute_uv_ray_intersection_plus_x = staticmethod(_helpers.ImageCanvas_compute_uv_ray_intersection_plus_x)
    else:
        compute_uv_ray_intersection_plus_x = _helpers.ImageCanvas_compute_uv_ray_intersection_plus_x
    if _newclass:
        compute_uv_ray_intersection_plus_y = staticmethod(_helpers.ImageCanvas_compute_uv_ray_intersection_plus_y)
    else:
        compute_uv_ray_intersection_plus_y = _helpers.ImageCanvas_compute_uv_ray_intersection_plus_y
    if _newclass:
        compute_uv_ray_intersection_plus_z = staticmethod(_helpers.ImageCanvas_compute_uv_ray_intersection_plus_z)
    else:
        compute_uv_ray_intersection_plus_z = _helpers.ImageCanvas_compute_uv_ray_intersection_plus_z

    def get_pyramid(self):
        return _helpers.ImageCanvas_get_pyramid(self)

    def get_clean_maps(self):
        return _helpers.ImageCanvas_get_clean_maps(self)

    def is_invalid(self):
        return _helpers.ImageCanvas_is_invalid(self)

    def invalidate(self, *args):
        return _helpers.ImageCanvas_invalidate(self, *args)

    def is_dirty(self):
        return _helpers.ImageCanvas_is_dirty(self)

    def remove_dirtiness_flag(self):
        return _helpers.ImageCanvas_remove_dirtiness_flag(self)

    def get_meta_data(self):
        return _helpers.ImageCanvas_get_meta_data(self)

    def add_meta_data(self, name, values):
        return _helpers.ImageCanvas_add_meta_data(self, name, values)

    def try_lock(self):
        return _helpers.ImageCanvas_try_lock(self)

    def lock(self):
        return _helpers.ImageCanvas_lock(self)

    def unlock(self):
        return _helpers.ImageCanvas_unlock(self)
    if _newclass:
        class_info = staticmethod(_helpers.ImageCanvas_class_info)
    else:
        class_info = _helpers.ImageCanvas_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_helpers.ImageCanvas____class_destructor__)
    else:
        ___class_destructor__ = _helpers.ImageCanvas____class_destructor__

    def get_class_info(self):
        return _helpers.ImageCanvas_get_class_info(self)
ImageCanvas_swigregister = _helpers.ImageCanvas_swigregister
ImageCanvas_swigregister(ImageCanvas)

def ImageCanvas_resize(*args):
    return _helpers.ImageCanvas_resize(*args)
ImageCanvas_resize = _helpers.ImageCanvas_resize

def ImageCanvas_compute_uv_ray_intersection_x(u, v, du, dv, ray, intersection):
    return _helpers.ImageCanvas_compute_uv_ray_intersection_x(u, v, du, dv, ray, intersection)
ImageCanvas_compute_uv_ray_intersection_x = _helpers.ImageCanvas_compute_uv_ray_intersection_x

def ImageCanvas_compute_uv_ray_intersection_y(u, v, du, dv, ray, intersection):
    return _helpers.ImageCanvas_compute_uv_ray_intersection_y(u, v, du, dv, ray, intersection)
ImageCanvas_compute_uv_ray_intersection_y = _helpers.ImageCanvas_compute_uv_ray_intersection_y

def ImageCanvas_compute_uv_ray_intersection_z(u, v, du, dv, ray, intersection):
    return _helpers.ImageCanvas_compute_uv_ray_intersection_z(u, v, du, dv, ray, intersection)
ImageCanvas_compute_uv_ray_intersection_z = _helpers.ImageCanvas_compute_uv_ray_intersection_z

def ImageCanvas_compute_uv_ray_intersection_plus_x(u, v, du, dv, ray, intersection):
    return _helpers.ImageCanvas_compute_uv_ray_intersection_plus_x(u, v, du, dv, ray, intersection)
ImageCanvas_compute_uv_ray_intersection_plus_x = _helpers.ImageCanvas_compute_uv_ray_intersection_plus_x

def ImageCanvas_compute_uv_ray_intersection_plus_y(u, v, du, dv, ray, intersection):
    return _helpers.ImageCanvas_compute_uv_ray_intersection_plus_y(u, v, du, dv, ray, intersection)
ImageCanvas_compute_uv_ray_intersection_plus_y = _helpers.ImageCanvas_compute_uv_ray_intersection_plus_y

def ImageCanvas_compute_uv_ray_intersection_plus_z(u, v, du, dv, ray, intersection):
    return _helpers.ImageCanvas_compute_uv_ray_intersection_plus_z(u, v, du, dv, ray, intersection)
ImageCanvas_compute_uv_ray_intersection_plus_z = _helpers.ImageCanvas_compute_uv_ray_intersection_plus_z

def ImageCanvas_class_info():
    return _helpers.ImageCanvas_class_info()
ImageCanvas_class_info = _helpers.ImageCanvas_class_info

def ImageCanvas____class_destructor__(instance, is_array):
    return _helpers.ImageCanvas____class_destructor__(instance, is_array)
ImageCanvas____class_destructor__ = _helpers.ImageCanvas____class_destructor__

class ImageHelperBitmap(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageHelperBitmap, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageHelperBitmap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _helpers.new_ImageHelperBitmap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_ImageHelperBitmap
    __del__ = lambda self: None

    def get_buffer(self):
        return _helpers.ImageHelperBitmap_get_buffer(self)

    def get_width(self):
        return _helpers.ImageHelperBitmap_get_width(self)

    def get_height(self):
        return _helpers.ImageHelperBitmap_get_height(self)

    def get_depth(self):
        return _helpers.ImageHelperBitmap_get_depth(self)

    def clear(self):
        return _helpers.ImageHelperBitmap_clear(self)

    def create(self, width, height, depth):
        return _helpers.ImageHelperBitmap_create(self, width, height, depth)

    def is_empty(self):
        return _helpers.ImageHelperBitmap_is_empty(self)
    if _newclass:
        class_info = staticmethod(_helpers.ImageHelperBitmap_class_info)
    else:
        class_info = _helpers.ImageHelperBitmap_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_helpers.ImageHelperBitmap____class_destructor__)
    else:
        ___class_destructor__ = _helpers.ImageHelperBitmap____class_destructor__

    def get_class_info(self):
        return _helpers.ImageHelperBitmap_get_class_info(self)
ImageHelperBitmap_swigregister = _helpers.ImageHelperBitmap_swigregister
ImageHelperBitmap_swigregister(ImageHelperBitmap)

def ImageHelperBitmap_class_info():
    return _helpers.ImageHelperBitmap_class_info()
ImageHelperBitmap_class_info = _helpers.ImageHelperBitmap_class_info

def ImageHelperBitmap____class_destructor__(instance, is_array):
    return _helpers.ImageHelperBitmap____class_destructor__(instance, is_array)
ImageHelperBitmap____class_destructor__ = _helpers.ImageHelperBitmap____class_destructor__

class ImageHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageHelper, name)
    __repr__ = _swig_repr
    if _newclass:
        create_bitmap = staticmethod(_helpers.ImageHelper_create_bitmap)
    else:
        create_bitmap = _helpers.ImageHelper_create_bitmap

    def __init__(self):
        this = _helpers.new_ImageHelper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_ImageHelper
    __del__ = lambda self: None
ImageHelper_swigregister = _helpers.ImageHelper_swigregister
ImageHelper_swigregister(ImageHelper)

def ImageHelper_create_bitmap(bitmap, image, x0, y0, w, h, channels):
    return _helpers.ImageHelper_create_bitmap(bitmap, image, x0, y0, w, h, channels)
ImageHelper_create_bitmap = _helpers.ImageHelper_create_bitmap

class ImageIOFileFormat(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageIOFileFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageIOFileFormat, name)
    __repr__ = _swig_repr
    SAVE_OPEN_EXR_16 = _helpers.ImageIOFileFormat_SAVE_OPEN_EXR_16
    SAVE_OPEN_EXR_32 = _helpers.ImageIOFileFormat_SAVE_OPEN_EXR_32
    SAVE_JPEG = _helpers.ImageIOFileFormat_SAVE_JPEG
    SAVE_BITMAP = _helpers.ImageIOFileFormat_SAVE_BITMAP
    SAVE_TARGA = _helpers.ImageIOFileFormat_SAVE_TARGA
    SAVE_PNG_8 = _helpers.ImageIOFileFormat_SAVE_PNG_8
    SAVE_PNG_16 = _helpers.ImageIOFileFormat_SAVE_PNG_16
    SAVE_TIFF_8 = _helpers.ImageIOFileFormat_SAVE_TIFF_8
    SAVE_TIFF_16 = _helpers.ImageIOFileFormat_SAVE_TIFF_16
    SAVE_TIFF_32 = _helpers.ImageIOFileFormat_SAVE_TIFF_32
    SAVE_COUNT = _helpers.ImageIOFileFormat_SAVE_COUNT
    SAVE_UNKNOWN = _helpers.ImageIOFileFormat_SAVE_UNKNOWN
    DEFAULT_COMPRESSION = _helpers.ImageIOFileFormat_DEFAULT_COMPRESSION
    FIRST_COMPRESSION = _helpers.ImageIOFileFormat_FIRST_COMPRESSION
    NO_COMPRESSION = _helpers.ImageIOFileFormat_NO_COMPRESSION
    RLE_COMPRESSION = _helpers.ImageIOFileFormat_RLE_COMPRESSION
    ZIPS_COMPRESSION = _helpers.ImageIOFileFormat_ZIPS_COMPRESSION
    ZIP_COMPRESSION = _helpers.ImageIOFileFormat_ZIP_COMPRESSION
    PIZ_COMPRESSION = _helpers.ImageIOFileFormat_PIZ_COMPRESSION
    PXR24_COMPRESSION = _helpers.ImageIOFileFormat_PXR24_COMPRESSION
    B44_COMPRESSION = _helpers.ImageIOFileFormat_B44_COMPRESSION
    B44A_COMPRESSION = _helpers.ImageIOFileFormat_B44A_COMPRESSION
    DWAA_COMPRESSION = _helpers.ImageIOFileFormat_DWAA_COMPRESSION
    DWAB_COMPRESSION = _helpers.ImageIOFileFormat_DWAB_COMPRESSION
    COMPRESSION_COUNT = _helpers.ImageIOFileFormat_COMPRESSION_COUNT
    if _newclass:
        get_compression_name = staticmethod(_helpers.ImageIOFileFormat_get_compression_name)
    else:
        get_compression_name = _helpers.ImageIOFileFormat_get_compression_name
    if _newclass:
        get_save_name = staticmethod(_helpers.ImageIOFileFormat_get_save_name)
    else:
        get_save_name = _helpers.ImageIOFileFormat_get_save_name
    LOAD_OPEN_EXR = _helpers.ImageIOFileFormat_LOAD_OPEN_EXR
    LOAD_JPEG = _helpers.ImageIOFileFormat_LOAD_JPEG
    LOAD_BITMAP = _helpers.ImageIOFileFormat_LOAD_BITMAP
    LOAD_TARGA = _helpers.ImageIOFileFormat_LOAD_TARGA
    LOAD_PNG = _helpers.ImageIOFileFormat_LOAD_PNG
    LOAD_TIFF = _helpers.ImageIOFileFormat_LOAD_TIFF
    LOAD_TX = _helpers.ImageIOFileFormat_LOAD_TX
    LOAD_HDR = _helpers.ImageIOFileFormat_LOAD_HDR
    LOAD_COUNT = _helpers.ImageIOFileFormat_LOAD_COUNT
    LOAD_UNKNOWN = _helpers.ImageIOFileFormat_LOAD_UNKNOWN
    if _newclass:
        get_bytes_per_channel = staticmethod(_helpers.ImageIOFileFormat_get_bytes_per_channel)
    else:
        get_bytes_per_channel = _helpers.ImageIOFileFormat_get_bytes_per_channel
    if _newclass:
        get_load_name = staticmethod(_helpers.ImageIOFileFormat_get_load_name)
    else:
        get_load_name = _helpers.ImageIOFileFormat_get_load_name
    if _newclass:
        get_short_name = staticmethod(_helpers.ImageIOFileFormat_get_short_name)
    else:
        get_short_name = _helpers.ImageIOFileFormat_get_short_name
    if _newclass:
        get_save_from_short_name = staticmethod(_helpers.ImageIOFileFormat_get_save_from_short_name)
    else:
        get_save_from_short_name = _helpers.ImageIOFileFormat_get_save_from_short_name
    if _newclass:
        get_save_extensions = staticmethod(_helpers.ImageIOFileFormat_get_save_extensions)
    else:
        get_save_extensions = _helpers.ImageIOFileFormat_get_save_extensions
    if _newclass:
        get_load_extensions = staticmethod(_helpers.ImageIOFileFormat_get_load_extensions)
    else:
        get_load_extensions = _helpers.ImageIOFileFormat_get_load_extensions
    if _newclass:
        get_extension_file_filters_for_save_file = staticmethod(_helpers.ImageIOFileFormat_get_extension_file_filters_for_save_file)
    else:
        get_extension_file_filters_for_save_file = _helpers.ImageIOFileFormat_get_extension_file_filters_for_save_file
    if _newclass:
        get_extension_file_filters_for_open_file = staticmethod(_helpers.ImageIOFileFormat_get_extension_file_filters_for_open_file)
    else:
        get_extension_file_filters_for_open_file = _helpers.ImageIOFileFormat_get_extension_file_filters_for_open_file
    if _newclass:
        get_supported_extensions = staticmethod(_helpers.ImageIOFileFormat_get_supported_extensions)
    else:
        get_supported_extensions = _helpers.ImageIOFileFormat_get_supported_extensions
    if _newclass:
        construct_layer_file_name = staticmethod(_helpers.ImageIOFileFormat_construct_layer_file_name)
    else:
        construct_layer_file_name = _helpers.ImageIOFileFormat_construct_layer_file_name
    if _newclass:
        construct_tile_file_name = staticmethod(_helpers.ImageIOFileFormat_construct_tile_file_name)
    else:
        construct_tile_file_name = _helpers.ImageIOFileFormat_construct_tile_file_name
    if _newclass:
        class_info = staticmethod(_helpers.ImageIOFileFormat_class_info)
    else:
        class_info = _helpers.ImageIOFileFormat_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_helpers.ImageIOFileFormat____class_destructor__)
    else:
        ___class_destructor__ = _helpers.ImageIOFileFormat____class_destructor__

    def get_class_info(self):
        return _helpers.ImageIOFileFormat_get_class_info(self)

    def __init__(self):
        this = _helpers.new_ImageIOFileFormat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_ImageIOFileFormat
    __del__ = lambda self: None
ImageIOFileFormat_swigregister = _helpers.ImageIOFileFormat_swigregister
ImageIOFileFormat_swigregister(ImageIOFileFormat)

def ImageIOFileFormat_get_compression_name(compression_format):
    return _helpers.ImageIOFileFormat_get_compression_name(compression_format)
ImageIOFileFormat_get_compression_name = _helpers.ImageIOFileFormat_get_compression_name

def ImageIOFileFormat_get_save_name(file_format):
    return _helpers.ImageIOFileFormat_get_save_name(file_format)
ImageIOFileFormat_get_save_name = _helpers.ImageIOFileFormat_get_save_name

def ImageIOFileFormat_get_bytes_per_channel(file_format):
    return _helpers.ImageIOFileFormat_get_bytes_per_channel(file_format)
ImageIOFileFormat_get_bytes_per_channel = _helpers.ImageIOFileFormat_get_bytes_per_channel

def ImageIOFileFormat_get_load_name(file_format):
    return _helpers.ImageIOFileFormat_get_load_name(file_format)
ImageIOFileFormat_get_load_name = _helpers.ImageIOFileFormat_get_load_name

def ImageIOFileFormat_get_short_name(file_format):
    return _helpers.ImageIOFileFormat_get_short_name(file_format)
ImageIOFileFormat_get_short_name = _helpers.ImageIOFileFormat_get_short_name

def ImageIOFileFormat_get_save_from_short_name(sname):
    return _helpers.ImageIOFileFormat_get_save_from_short_name(sname)
ImageIOFileFormat_get_save_from_short_name = _helpers.ImageIOFileFormat_get_save_from_short_name

def ImageIOFileFormat_get_save_extensions(file_format):
    return _helpers.ImageIOFileFormat_get_save_extensions(file_format)
ImageIOFileFormat_get_save_extensions = _helpers.ImageIOFileFormat_get_save_extensions

def ImageIOFileFormat_get_load_extensions(file_format):
    return _helpers.ImageIOFileFormat_get_load_extensions(file_format)
ImageIOFileFormat_get_load_extensions = _helpers.ImageIOFileFormat_get_load_extensions

def ImageIOFileFormat_get_extension_file_filters_for_save_file():
    return _helpers.ImageIOFileFormat_get_extension_file_filters_for_save_file()
ImageIOFileFormat_get_extension_file_filters_for_save_file = _helpers.ImageIOFileFormat_get_extension_file_filters_for_save_file

def ImageIOFileFormat_get_extension_file_filters_for_open_file():
    return _helpers.ImageIOFileFormat_get_extension_file_filters_for_open_file()
ImageIOFileFormat_get_extension_file_filters_for_open_file = _helpers.ImageIOFileFormat_get_extension_file_filters_for_open_file

def ImageIOFileFormat_get_supported_extensions():
    return _helpers.ImageIOFileFormat_get_supported_extensions()
ImageIOFileFormat_get_supported_extensions = _helpers.ImageIOFileFormat_get_supported_extensions

def ImageIOFileFormat_construct_layer_file_name(filename, layer_name):
    return _helpers.ImageIOFileFormat_construct_layer_file_name(filename, layer_name)
ImageIOFileFormat_construct_layer_file_name = _helpers.ImageIOFileFormat_construct_layer_file_name

def ImageIOFileFormat_construct_tile_file_name(filename, count, idx):
    return _helpers.ImageIOFileFormat_construct_tile_file_name(filename, count, idx)
ImageIOFileFormat_construct_tile_file_name = _helpers.ImageIOFileFormat_construct_tile_file_name

def ImageIOFileFormat_class_info():
    return _helpers.ImageIOFileFormat_class_info()
ImageIOFileFormat_class_info = _helpers.ImageIOFileFormat_class_info

def ImageIOFileFormat____class_destructor__(instance, is_array):
    return _helpers.ImageIOFileFormat____class_destructor__(instance, is_array)
ImageIOFileFormat____class_destructor__ = _helpers.ImageIOFileFormat____class_destructor__

class ImageHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["visible_window"] = _helpers.ImageHeader_visible_window_set
    __swig_getmethods__["visible_window"] = _helpers.ImageHeader_visible_window_get
    if _newclass:
        visible_window = _swig_property(_helpers.ImageHeader_visible_window_get, _helpers.ImageHeader_visible_window_set)
    __swig_setmethods__["data_window"] = _helpers.ImageHeader_data_window_set
    __swig_getmethods__["data_window"] = _helpers.ImageHeader_data_window_get
    if _newclass:
        data_window = _swig_property(_helpers.ImageHeader_data_window_get, _helpers.ImageHeader_data_window_set)
    __swig_setmethods__["channel_count"] = _helpers.ImageHeader_channel_count_set
    __swig_getmethods__["channel_count"] = _helpers.ImageHeader_channel_count_get
    if _newclass:
        channel_count = _swig_property(_helpers.ImageHeader_channel_count_get, _helpers.ImageHeader_channel_count_set)
    __swig_setmethods__["channel_names"] = _helpers.ImageHeader_channel_names_set
    __swig_getmethods__["channel_names"] = _helpers.ImageHeader_channel_names_get
    if _newclass:
        channel_names = _swig_property(_helpers.ImageHeader_channel_names_get, _helpers.ImageHeader_channel_names_set)
    __swig_setmethods__["is_tiled"] = _helpers.ImageHeader_is_tiled_set
    __swig_getmethods__["is_tiled"] = _helpers.ImageHeader_is_tiled_get
    if _newclass:
        is_tiled = _swig_property(_helpers.ImageHeader_is_tiled_get, _helpers.ImageHeader_is_tiled_set)
    __swig_setmethods__["color_space"] = _helpers.ImageHeader_color_space_set
    __swig_getmethods__["color_space"] = _helpers.ImageHeader_color_space_get
    if _newclass:
        color_space = _swig_property(_helpers.ImageHeader_color_space_get, _helpers.ImageHeader_color_space_set)
    __swig_setmethods__["comment"] = _helpers.ImageHeader_comment_set
    __swig_getmethods__["comment"] = _helpers.ImageHeader_comment_get
    if _newclass:
        comment = _swig_property(_helpers.ImageHeader_comment_get, _helpers.ImageHeader_comment_set)
    __swig_setmethods__["compression_method"] = _helpers.ImageHeader_compression_method_set
    __swig_getmethods__["compression_method"] = _helpers.ImageHeader_compression_method_get
    if _newclass:
        compression_method = _swig_property(_helpers.ImageHeader_compression_method_get, _helpers.ImageHeader_compression_method_set)

    def __init__(self):
        this = _helpers.new_ImageHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_ImageHeader
    __del__ = lambda self: None
ImageHeader_swigregister = _helpers.ImageHeader_swigregister
ImageHeader_swigregister(ImageHeader)

class ImageLoadOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageLoadOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageLoadOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _helpers.new_ImageLoadOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["file_color_space"] = _helpers.ImageLoadOptions_file_color_space_set
    __swig_getmethods__["file_color_space"] = _helpers.ImageLoadOptions_file_color_space_get
    if _newclass:
        file_color_space = _swig_property(_helpers.ImageLoadOptions_file_color_space_get, _helpers.ImageLoadOptions_file_color_space_set)
    __swig_setmethods__["pre_multiply"] = _helpers.ImageLoadOptions_pre_multiply_set
    __swig_getmethods__["pre_multiply"] = _helpers.ImageLoadOptions_pre_multiply_get
    if _newclass:
        pre_multiply = _swig_property(_helpers.ImageLoadOptions_pre_multiply_get, _helpers.ImageLoadOptions_pre_multiply_set)
    __swig_setmethods__["single_channel_file_behavior"] = _helpers.ImageLoadOptions_single_channel_file_behavior_set
    __swig_getmethods__["single_channel_file_behavior"] = _helpers.ImageLoadOptions_single_channel_file_behavior_get
    if _newclass:
        single_channel_file_behavior = _swig_property(_helpers.ImageLoadOptions_single_channel_file_behavior_get, _helpers.ImageLoadOptions_single_channel_file_behavior_set)
    __swig_setmethods__["with_alpha"] = _helpers.ImageLoadOptions_with_alpha_set
    __swig_getmethods__["with_alpha"] = _helpers.ImageLoadOptions_with_alpha_get
    if _newclass:
        with_alpha = _swig_property(_helpers.ImageLoadOptions_with_alpha_get, _helpers.ImageLoadOptions_with_alpha_set)
    __swig_setmethods__["rgba_channels"] = _helpers.ImageLoadOptions_rgba_channels_set
    __swig_getmethods__["rgba_channels"] = _helpers.ImageLoadOptions_rgba_channels_get
    if _newclass:
        rgba_channels = _swig_property(_helpers.ImageLoadOptions_rgba_channels_get, _helpers.ImageLoadOptions_rgba_channels_set)
    __swig_destroy__ = _helpers.delete_ImageLoadOptions
    __del__ = lambda self: None
ImageLoadOptions_swigregister = _helpers.ImageLoadOptions_swigregister
ImageLoadOptions_swigregister(ImageLoadOptions)

class ImageSaveOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSaveOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSaveOptions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _helpers.new_ImageSaveOptions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def is_file_exr(self):
        return _helpers.ImageSaveOptions_is_file_exr(self)
    __swig_setmethods__["aspect_ratio"] = _helpers.ImageSaveOptions_aspect_ratio_set
    __swig_getmethods__["aspect_ratio"] = _helpers.ImageSaveOptions_aspect_ratio_get
    if _newclass:
        aspect_ratio = _swig_property(_helpers.ImageSaveOptions_aspect_ratio_get, _helpers.ImageSaveOptions_aspect_ratio_set)
    __swig_setmethods__["file_color_space"] = _helpers.ImageSaveOptions_file_color_space_set
    __swig_getmethods__["file_color_space"] = _helpers.ImageSaveOptions_file_color_space_get
    if _newclass:
        file_color_space = _swig_property(_helpers.ImageSaveOptions_file_color_space_get, _helpers.ImageSaveOptions_file_color_space_set)
    __swig_setmethods__["rgba_channels"] = _helpers.ImageSaveOptions_rgba_channels_set
    __swig_getmethods__["rgba_channels"] = _helpers.ImageSaveOptions_rgba_channels_get
    if _newclass:
        rgba_channels = _swig_property(_helpers.ImageSaveOptions_rgba_channels_get, _helpers.ImageSaveOptions_rgba_channels_set)
    __swig_setmethods__["format"] = _helpers.ImageSaveOptions_format_set
    __swig_getmethods__["format"] = _helpers.ImageSaveOptions_format_get
    if _newclass:
        format = _swig_property(_helpers.ImageSaveOptions_format_get, _helpers.ImageSaveOptions_format_set)
    __swig_setmethods__["custom_metadata"] = _helpers.ImageSaveOptions_custom_metadata_set
    __swig_getmethods__["custom_metadata"] = _helpers.ImageSaveOptions_custom_metadata_get
    if _newclass:
        custom_metadata = _swig_property(_helpers.ImageSaveOptions_custom_metadata_get, _helpers.ImageSaveOptions_custom_metadata_set)
    __swig_setmethods__["compress_pref"] = _helpers.ImageSaveOptions_compress_pref_set
    __swig_getmethods__["compress_pref"] = _helpers.ImageSaveOptions_compress_pref_get
    if _newclass:
        compress_pref = _swig_property(_helpers.ImageSaveOptions_compress_pref_get, _helpers.ImageSaveOptions_compress_pref_set)

    def fill_metadata(self, object_name, metadata, add=True):
        return _helpers.ImageSaveOptions_fill_metadata(self, object_name, metadata, add)

    def add_image_canvas_meta_data(self, image_canvas):
        return _helpers.ImageSaveOptions_add_image_canvas_meta_data(self, image_canvas)
    __swig_destroy__ = _helpers.delete_ImageSaveOptions
    __del__ = lambda self: None
ImageSaveOptions_swigregister = _helpers.ImageSaveOptions_swigregister
ImageSaveOptions_swigregister(ImageSaveOptions)

class ImageIO(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageIO, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageIO, name)
    __repr__ = _swig_repr
    SAVING_STATUS_OK = _helpers.ImageIO_SAVING_STATUS_OK
    SAVING_STATUS_NO_DATA = _helpers.ImageIO_SAVING_STATUS_NO_DATA
    SAVING_STATUS_CREATION_ERROR = _helpers.ImageIO_SAVING_STATUS_CREATION_ERROR
    SAVING_STATUS_WRITE_ERROR = _helpers.ImageIO_SAVING_STATUS_WRITE_ERROR
    SAVING_STATUS_COUNT = _helpers.ImageIO_SAVING_STATUS_COUNT
    if _newclass:
        init = staticmethod(_helpers.ImageIO_init)
    else:
        init = _helpers.ImageIO_init
    if _newclass:
        get_image_specs = staticmethod(_helpers.ImageIO_get_image_specs)
    else:
        get_image_specs = _helpers.ImageIO_get_image_specs
    if _newclass:
        get_color_space_from_file = staticmethod(_helpers.ImageIO_get_color_space_from_file)
    else:
        get_color_space_from_file = _helpers.ImageIO_get_color_space_from_file
    if _newclass:
        load_image = staticmethod(_helpers.ImageIO_load_image)
    else:
        load_image = _helpers.ImageIO_load_image
    if _newclass:
        save = staticmethod(_helpers.ImageIO_save)
    else:
        save = _helpers.ImageIO_save
    if _newclass:
        save_image = staticmethod(_helpers.ImageIO_save_image)
    else:
        save_image = _helpers.ImageIO_save_image
    if _newclass:
        class_info = staticmethod(_helpers.ImageIO_class_info)
    else:
        class_info = _helpers.ImageIO_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_helpers.ImageIO____class_destructor__)
    else:
        ___class_destructor__ = _helpers.ImageIO____class_destructor__

    def get_class_info(self):
        return _helpers.ImageIO_get_class_info(self)

    def __init__(self):
        this = _helpers.new_ImageIO()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_ImageIO
    __del__ = lambda self: None
ImageIO_swigregister = _helpers.ImageIO_swigregister
ImageIO_swigregister(ImageIO)

def ImageIO_init(of_app):
    return _helpers.ImageIO_init(of_app)
ImageIO_init = _helpers.ImageIO_init

def ImageIO_get_image_specs(filename, specs):
    return _helpers.ImageIO_get_image_specs(filename, specs)
ImageIO_get_image_specs = _helpers.ImageIO_get_image_specs

def ImageIO_get_color_space_from_file(filename):
    return _helpers.ImageIO_get_color_space_from_file(filename)
ImageIO_get_color_space_from_file = _helpers.ImageIO_get_color_space_from_file

def ImageIO_load_image(*args):
    return _helpers.ImageIO_load_image(*args)
ImageIO_load_image = _helpers.ImageIO_load_image

def ImageIO_save(filename, options, image, of_app=None, progress_bar=None, data_render_region=None):
    return _helpers.ImageIO_save(filename, options, image, of_app, progress_bar, data_render_region)
ImageIO_save = _helpers.ImageIO_save

def ImageIO_save_image(*args):
    return _helpers.ImageIO_save_image(*args)
ImageIO_save_image = _helpers.ImageIO_save_image

def ImageIO_class_info():
    return _helpers.ImageIO_class_info()
ImageIO_class_info = _helpers.ImageIO_class_info

def ImageIO____class_destructor__(instance, is_array):
    return _helpers.ImageIO____class_destructor__(instance, is_array)
ImageIO____class_destructor__ = _helpers.ImageIO____class_destructor__

class ColorIO(base.EventObject):
    __swig_setmethods__ = {}
    for _s in [base.EventObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorIO, name, value)
    __swig_getmethods__ = {}
    for _s in [base.EventObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorIO, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        init = staticmethod(_helpers.ColorIO_init)
    else:
        init = _helpers.ColorIO_init
    if _newclass:
        destroy = staticmethod(_helpers.ColorIO_destroy)
    else:
        destroy = _helpers.ColorIO_destroy
    if _newclass:
        update_file_config_path = staticmethod(_helpers.ColorIO_update_file_config_path)
    else:
        update_file_config_path = _helpers.ColorIO_update_file_config_path
    if _newclass:
        load_config = staticmethod(_helpers.ColorIO_load_config)
    else:
        load_config = _helpers.ColorIO_load_config
    if _newclass:
        save_config = staticmethod(_helpers.ColorIO_save_config)
    else:
        save_config = _helpers.ColorIO_save_config
    if _newclass:
        convert_buffer = staticmethod(_helpers.ColorIO_convert_buffer)
    else:
        convert_buffer = _helpers.ColorIO_convert_buffer
    if _newclass:
        convert_buffers = staticmethod(_helpers.ColorIO_convert_buffers)
    else:
        convert_buffers = _helpers.ColorIO_convert_buffers
    if _newclass:
        convert_CDL_buffers = staticmethod(_helpers.ColorIO_convert_CDL_buffers)
    else:
        convert_CDL_buffers = _helpers.ColorIO_convert_CDL_buffers
    if _newclass:
        get_color_space_names = staticmethod(_helpers.ColorIO_get_color_space_names)
    else:
        get_color_space_names = _helpers.ColorIO_get_color_space_names
    if _newclass:
        get_display_color_space_names = staticmethod(_helpers.ColorIO_get_display_color_space_names)
    else:
        get_display_color_space_names = _helpers.ColorIO_get_display_color_space_names
    if _newclass:
        get_color_space_from_display_color_space = staticmethod(_helpers.ColorIO_get_color_space_from_display_color_space)
    else:
        get_color_space_from_display_color_space = _helpers.ColorIO_get_color_space_from_display_color_space
    if _newclass:
        get_display_view = staticmethod(_helpers.ColorIO_get_display_view)
    else:
        get_display_view = _helpers.ColorIO_get_display_view
    if _newclass:
        get_instance = staticmethod(_helpers.ColorIO_get_instance)
    else:
        get_instance = _helpers.ColorIO_get_instance
    if _newclass:
        get_ROLE_SCENE_LINEAR = staticmethod(_helpers.ColorIO_get_ROLE_SCENE_LINEAR)
    else:
        get_ROLE_SCENE_LINEAR = _helpers.ColorIO_get_ROLE_SCENE_LINEAR
    if _newclass:
        get_default_color_space_name = staticmethod(_helpers.ColorIO_get_default_color_space_name)
    else:
        get_default_color_space_name = _helpers.ColorIO_get_default_color_space_name
    if _newclass:
        get_default_color_picker_space_name = staticmethod(_helpers.ColorIO_get_default_color_picker_space_name)
    else:
        get_default_color_picker_space_name = _helpers.ColorIO_get_default_color_picker_space_name
    if _newclass:
        get_color_space_name = staticmethod(_helpers.ColorIO_get_color_space_name)
    else:
        get_color_space_name = _helpers.ColorIO_get_color_space_name
    if _newclass:
        get_color_space_index = staticmethod(_helpers.ColorIO_get_color_space_index)
    else:
        get_color_space_index = _helpers.ColorIO_get_color_space_index
    if _newclass:
        get_full_color_space_name = staticmethod(_helpers.ColorIO_get_full_color_space_name)
    else:
        get_full_color_space_name = _helpers.ColorIO_get_full_color_space_name
    if _newclass:
        get_default_CDL_name = staticmethod(_helpers.ColorIO_get_default_CDL_name)
    else:
        get_default_CDL_name = _helpers.ColorIO_get_default_CDL_name
    if _newclass:
        get_CDL_name = staticmethod(_helpers.ColorIO_get_CDL_name)
    else:
        get_CDL_name = _helpers.ColorIO_get_CDL_name
    if _newclass:
        get_CDL_index = staticmethod(_helpers.ColorIO_get_CDL_index)
    else:
        get_CDL_index = _helpers.ColorIO_get_CDL_index
    if _newclass:
        get_role_color_space = staticmethod(_helpers.ColorIO_get_role_color_space)
    else:
        get_role_color_space = _helpers.ColorIO_get_role_color_space

    def get_default_color_space_from_ext(self, extension):
        return _helpers.ColorIO_get_default_color_space_from_ext(self, extension)

    def get_color_space_tag_count(self):
        return _helpers.ColorIO_get_color_space_tag_count(self)

    def get_color_space_tag(self, i):
        return _helpers.ColorIO_get_color_space_tag(self, i)
    __swig_setmethods__["s_default_scene_linear"] = _helpers.ColorIO_s_default_scene_linear_set
    __swig_getmethods__["s_default_scene_linear"] = _helpers.ColorIO_s_default_scene_linear_get
    if _newclass:
        s_default_scene_linear = _swig_property(_helpers.ColorIO_s_default_scene_linear_get, _helpers.ColorIO_s_default_scene_linear_set)
    __swig_setmethods__["s_default_color_picking"] = _helpers.ColorIO_s_default_color_picking_set
    __swig_getmethods__["s_default_color_picking"] = _helpers.ColorIO_s_default_color_picking_get
    if _newclass:
        s_default_color_picking = _swig_property(_helpers.ColorIO_s_default_color_picking_get, _helpers.ColorIO_s_default_color_picking_set)
    if _newclass:
        class_info = staticmethod(_helpers.ColorIO_class_info)
    else:
        class_info = _helpers.ColorIO_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_helpers.ColorIO____class_destructor__)
    else:
        ___class_destructor__ = _helpers.ColorIO____class_destructor__

    def get_class_info(self):
        return _helpers.ColorIO_get_class_info(self)
    __swig_destroy__ = _helpers.delete_ColorIO
    __del__ = lambda self: None
ColorIO_swigregister = _helpers.ColorIO_swigregister
ColorIO_swigregister(ColorIO)
cvar = _helpers.cvar
EVT_ID_ROLE_SCENE_LINEAR_CHANGED = cvar.EVT_ID_ROLE_SCENE_LINEAR_CHANGED
EVT_ID_COLORIO_MANAGER_LUT_LIST_CHANGED = cvar.EVT_ID_COLORIO_MANAGER_LUT_LIST_CHANGED
EVT_ID_COLORIO_MANAGER_CDL_LIST_CHANGED = cvar.EVT_ID_COLORIO_MANAGER_CDL_LIST_CHANGED
EVT_ID_COLORIO_COLOR_SPACE_BY_EXTENSION_CHANGED = cvar.EVT_ID_COLORIO_COLOR_SPACE_BY_EXTENSION_CHANGED

def ColorIO_init(of_app):
    return _helpers.ColorIO_init(of_app)
ColorIO_init = _helpers.ColorIO_init

def ColorIO_destroy():
    return _helpers.ColorIO_destroy()
ColorIO_destroy = _helpers.ColorIO_destroy

def ColorIO_update_file_config_path():
    return _helpers.ColorIO_update_file_config_path()
ColorIO_update_file_config_path = _helpers.ColorIO_update_file_config_path

def ColorIO_load_config(preferences):
    return _helpers.ColorIO_load_config(preferences)
ColorIO_load_config = _helpers.ColorIO_load_config

def ColorIO_save_config(preferences):
    return _helpers.ColorIO_save_config(preferences)
ColorIO_save_config = _helpers.ColorIO_save_config

def ColorIO_convert_buffer(buffer, width, height, channel_count, to_space, from_space):
    return _helpers.ColorIO_convert_buffer(buffer, width, height, channel_count, to_space, from_space)
ColorIO_convert_buffer = _helpers.ColorIO_convert_buffer

def ColorIO_convert_buffers(r_buffer, g_buffer, b_buffer, a_buffer, width, height, to_space, from_space):
    return _helpers.ColorIO_convert_buffers(r_buffer, g_buffer, b_buffer, a_buffer, width, height, to_space, from_space)
ColorIO_convert_buffers = _helpers.ColorIO_convert_buffers

def ColorIO_convert_CDL_buffers(r_buffer, g_buffer, b_buffer, a_buffer, width, height, to_space, from_space):
    return _helpers.ColorIO_convert_CDL_buffers(r_buffer, g_buffer, b_buffer, a_buffer, width, height, to_space, from_space)
ColorIO_convert_CDL_buffers = _helpers.ColorIO_convert_CDL_buffers

def ColorIO_get_color_space_names():
    return _helpers.ColorIO_get_color_space_names()
ColorIO_get_color_space_names = _helpers.ColorIO_get_color_space_names

def ColorIO_get_display_color_space_names():
    return _helpers.ColorIO_get_display_color_space_names()
ColorIO_get_display_color_space_names = _helpers.ColorIO_get_display_color_space_names

def ColorIO_get_color_space_from_display_color_space(name):
    return _helpers.ColorIO_get_color_space_from_display_color_space(name)
ColorIO_get_color_space_from_display_color_space = _helpers.ColorIO_get_color_space_from_display_color_space

def ColorIO_get_display_view(display_color_space, display, view):
    return _helpers.ColorIO_get_display_view(display_color_space, display, view)
ColorIO_get_display_view = _helpers.ColorIO_get_display_view

def ColorIO_get_instance():
    return _helpers.ColorIO_get_instance()
ColorIO_get_instance = _helpers.ColorIO_get_instance

def ColorIO_get_ROLE_SCENE_LINEAR():
    return _helpers.ColorIO_get_ROLE_SCENE_LINEAR()
ColorIO_get_ROLE_SCENE_LINEAR = _helpers.ColorIO_get_ROLE_SCENE_LINEAR

def ColorIO_get_default_color_space_name():
    return _helpers.ColorIO_get_default_color_space_name()
ColorIO_get_default_color_space_name = _helpers.ColorIO_get_default_color_space_name

def ColorIO_get_default_color_picker_space_name():
    return _helpers.ColorIO_get_default_color_picker_space_name()
ColorIO_get_default_color_picker_space_name = _helpers.ColorIO_get_default_color_picker_space_name

def ColorIO_get_color_space_name(id):
    return _helpers.ColorIO_get_color_space_name(id)
ColorIO_get_color_space_name = _helpers.ColorIO_get_color_space_name

def ColorIO_get_color_space_index(name):
    return _helpers.ColorIO_get_color_space_index(name)
ColorIO_get_color_space_index = _helpers.ColorIO_get_color_space_index

def ColorIO_get_full_color_space_name(name):
    return _helpers.ColorIO_get_full_color_space_name(name)
ColorIO_get_full_color_space_name = _helpers.ColorIO_get_full_color_space_name

def ColorIO_get_default_CDL_name():
    return _helpers.ColorIO_get_default_CDL_name()
ColorIO_get_default_CDL_name = _helpers.ColorIO_get_default_CDL_name

def ColorIO_get_CDL_name(id):
    return _helpers.ColorIO_get_CDL_name(id)
ColorIO_get_CDL_name = _helpers.ColorIO_get_CDL_name

def ColorIO_get_CDL_index(name):
    return _helpers.ColorIO_get_CDL_index(name)
ColorIO_get_CDL_index = _helpers.ColorIO_get_CDL_index

def ColorIO_get_role_color_space(index):
    return _helpers.ColorIO_get_role_color_space(index)
ColorIO_get_role_color_space = _helpers.ColorIO_get_role_color_space

def ColorIO_class_info():
    return _helpers.ColorIO_class_info()
ColorIO_class_info = _helpers.ColorIO_class_info

def ColorIO____class_destructor__(instance, is_array):
    return _helpers.ColorIO____class_destructor__(instance, is_array)
ColorIO____class_destructor__ = _helpers.ColorIO____class_destructor__

class IOHelpers(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOHelpers, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOHelpers, name)
    __repr__ = _swig_repr
    if _newclass:
        create_particles = staticmethod(_helpers.IOHelpers_create_particles)
    else:
        create_particles = _helpers.IOHelpers_create_particles
    if _newclass:
        set_particles = staticmethod(_helpers.IOHelpers_set_particles)
    else:
        set_particles = _helpers.IOHelpers_set_particles
    if _newclass:
        set_particles_properties = staticmethod(_helpers.IOHelpers_set_particles_properties)
    else:
        set_particles_properties = _helpers.IOHelpers_set_particles_properties
    if _newclass:
        decimate_particles = staticmethod(_helpers.IOHelpers_decimate_particles)
    else:
        decimate_particles = _helpers.IOHelpers_decimate_particles
    if _newclass:
        move_particles_relative = staticmethod(_helpers.IOHelpers_move_particles_relative)
    else:
        move_particles_relative = _helpers.IOHelpers_move_particles_relative
    if _newclass:
        move_particles_absolute = staticmethod(_helpers.IOHelpers_move_particles_absolute)
    else:
        move_particles_absolute = _helpers.IOHelpers_move_particles_absolute
    if _newclass:
        add_particles = staticmethod(_helpers.IOHelpers_add_particles)
    else:
        add_particles = _helpers.IOHelpers_add_particles
    EDIT_PROPERTY_MODE_SET = _helpers.IOHelpers_EDIT_PROPERTY_MODE_SET
    EDIT_PROPERTY_MODE_ADD = _helpers.IOHelpers_EDIT_PROPERTY_MODE_ADD
    EDIT_PROPERTY_MODE_MUL = _helpers.IOHelpers_EDIT_PROPERTY_MODE_MUL
    EDIT_PROPERTY_MODE_CLEAR = _helpers.IOHelpers_EDIT_PROPERTY_MODE_CLEAR
    EDIT_PROPERTY_MODE_DEFAULT = _helpers.IOHelpers_EDIT_PROPERTY_MODE_DEFAULT
    EDIT_PROPERTY_MODE_MUL_QUAT = _helpers.IOHelpers_EDIT_PROPERTY_MODE_MUL_QUAT
    EDIT_PROPERTY_MODE_COUNT = _helpers.IOHelpers_EDIT_PROPERTY_MODE_COUNT
    if _newclass:
        edit_particles_property = staticmethod(_helpers.IOHelpers_edit_particles_property)
    else:
        edit_particles_property = _helpers.IOHelpers_edit_particles_property
    if _newclass:
        set_particles_property_values = staticmethod(_helpers.IOHelpers_set_particles_property_values)
    else:
        set_particles_property_values = _helpers.IOHelpers_set_particles_property_values
    if _newclass:
        create_particles_property = staticmethod(_helpers.IOHelpers_create_particles_property)
    else:
        create_particles_property = _helpers.IOHelpers_create_particles_property
    if _newclass:
        rename_particles_property = staticmethod(_helpers.IOHelpers_rename_particles_property)
    else:
        rename_particles_property = _helpers.IOHelpers_rename_particles_property
    if _newclass:
        delete_particles_properties = staticmethod(_helpers.IOHelpers_delete_particles_properties)
    else:
        delete_particles_properties = _helpers.IOHelpers_delete_particles_properties
    if _newclass:
        get_particles_property = staticmethod(_helpers.IOHelpers_get_particles_property)
    else:
        get_particles_property = _helpers.IOHelpers_get_particles_property
    if _newclass:
        create_polymesh = staticmethod(_helpers.IOHelpers_create_polymesh)
    else:
        create_polymesh = _helpers.IOHelpers_create_polymesh
    if _newclass:
        save_image = staticmethod(_helpers.IOHelpers_save_image)
    else:
        save_image = _helpers.IOHelpers_save_image
    if _newclass:
        import_geometry = staticmethod(_helpers.IOHelpers_import_geometry)
    else:
        import_geometry = _helpers.IOHelpers_import_geometry
    if _newclass:
        import_geometries = staticmethod(_helpers.IOHelpers_import_geometries)
    else:
        import_geometries = _helpers.IOHelpers_import_geometries
    if _newclass:
        export_geometry = staticmethod(_helpers.IOHelpers_export_geometry)
    else:
        export_geometry = _helpers.IOHelpers_export_geometry
    if _newclass:
        import_volume = staticmethod(_helpers.IOHelpers_import_volume)
    else:
        import_volume = _helpers.IOHelpers_import_volume
    if _newclass:
        import_volumes = staticmethod(_helpers.IOHelpers_import_volumes)
    else:
        import_volumes = _helpers.IOHelpers_import_volumes
    if _newclass:
        import_image = staticmethod(_helpers.IOHelpers_import_image)
    else:
        import_image = _helpers.IOHelpers_import_image
    if _newclass:
        import_images = staticmethod(_helpers.IOHelpers_import_images)
    else:
        import_images = _helpers.IOHelpers_import_images
    if _newclass:
        import_texture = staticmethod(_helpers.IOHelpers_import_texture)
    else:
        import_texture = _helpers.IOHelpers_import_texture
    if _newclass:
        import_textures = staticmethod(_helpers.IOHelpers_import_textures)
    else:
        import_textures = _helpers.IOHelpers_import_textures
    if _newclass:
        export_render_archive = staticmethod(_helpers.IOHelpers_export_render_archive)
    else:
        export_render_archive = _helpers.IOHelpers_export_render_archive
    if _newclass:
        export_context_as_project = staticmethod(_helpers.IOHelpers_export_context_as_project)
    else:
        export_context_as_project = _helpers.IOHelpers_export_context_as_project
    if _newclass:
        export_context_as_project_with_dependencies = staticmethod(_helpers.IOHelpers_export_context_as_project_with_dependencies)
    else:
        export_context_as_project_with_dependencies = _helpers.IOHelpers_export_context_as_project_with_dependencies
    if _newclass:
        reference_export_context = staticmethod(_helpers.IOHelpers_reference_export_context)
    else:
        reference_export_context = _helpers.IOHelpers_reference_export_context
    if _newclass:
        reload_resources = staticmethod(_helpers.IOHelpers_reload_resources)
    else:
        reload_resources = _helpers.IOHelpers_reload_resources
    if _newclass:
        resync_resources = staticmethod(_helpers.IOHelpers_resync_resources)
    else:
        resync_resources = _helpers.IOHelpers_resync_resources
    if _newclass:
        import_scene = staticmethod(_helpers.IOHelpers_import_scene)
    else:
        import_scene = _helpers.IOHelpers_import_scene
    if _newclass:
        import_project = staticmethod(_helpers.IOHelpers_import_project)
    else:
        import_project = _helpers.IOHelpers_import_project
    if _newclass:
        reference_asset = staticmethod(_helpers.IOHelpers_reference_asset)
    else:
        reference_asset = _helpers.IOHelpers_reference_asset
    if _newclass:
        reference_file = staticmethod(_helpers.IOHelpers_reference_file)
    else:
        reference_file = _helpers.IOHelpers_reference_file
    if _newclass:
        reference_files = staticmethod(_helpers.IOHelpers_reference_files)
    else:
        reference_files = _helpers.IOHelpers_reference_files
    if _newclass:
        reference_make_local = staticmethod(_helpers.IOHelpers_reference_make_local)
    else:
        reference_make_local = _helpers.IOHelpers_reference_make_local
    if _newclass:
        export_to_alembic = staticmethod(_helpers.IOHelpers_export_to_alembic)
    else:
        export_to_alembic = _helpers.IOHelpers_export_to_alembic
    if _newclass:
        save_icon = staticmethod(_helpers.IOHelpers_save_icon)
    else:
        save_icon = _helpers.IOHelpers_save_icon
    if _newclass:
        extract_shading_layer = staticmethod(_helpers.IOHelpers_extract_shading_layer)
    else:
        extract_shading_layer = _helpers.IOHelpers_extract_shading_layer
    if _newclass:
        pick_item = staticmethod(_helpers.IOHelpers_pick_item)
    else:
        pick_item = _helpers.IOHelpers_pick_item
    if _newclass:
        pick_items = staticmethod(_helpers.IOHelpers_pick_items)
    else:
        pick_items = _helpers.IOHelpers_pick_items
    if _newclass:
        pick_object = staticmethod(_helpers.IOHelpers_pick_object)
    else:
        pick_object = _helpers.IOHelpers_pick_object
    if _newclass:
        pick_objects = staticmethod(_helpers.IOHelpers_pick_objects)
    else:
        pick_objects = _helpers.IOHelpers_pick_objects
    if _newclass:
        pick_context = staticmethod(_helpers.IOHelpers_pick_context)
    else:
        pick_context = _helpers.IOHelpers_pick_context
    if _newclass:
        pick_contexts = staticmethod(_helpers.IOHelpers_pick_contexts)
    else:
        pick_contexts = _helpers.IOHelpers_pick_contexts
    if _newclass:
        class_info = staticmethod(_helpers.IOHelpers_class_info)
    else:
        class_info = _helpers.IOHelpers_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_helpers.IOHelpers____class_destructor__)
    else:
        ___class_destructor__ = _helpers.IOHelpers____class_destructor__

    def get_class_info(self):
        return _helpers.IOHelpers_get_class_info(self)

    def __init__(self):
        this = _helpers.new_IOHelpers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_IOHelpers
    __del__ = lambda self: None
IOHelpers_swigregister = _helpers.IOHelpers_swigregister
IOHelpers_swigregister(IOHelpers)

def IOHelpers_create_particles(*args):
    return _helpers.IOHelpers_create_particles(*args)
IOHelpers_create_particles = _helpers.IOHelpers_create_particles

def IOHelpers_set_particles(*args):
    return _helpers.IOHelpers_set_particles(*args)
IOHelpers_set_particles = _helpers.IOHelpers_set_particles

def IOHelpers_set_particles_properties(*args):
    return _helpers.IOHelpers_set_particles_properties(*args)
IOHelpers_set_particles_properties = _helpers.IOHelpers_set_particles_properties

def IOHelpers_decimate_particles(object, indices):
    return _helpers.IOHelpers_decimate_particles(object, indices)
IOHelpers_decimate_particles = _helpers.IOHelpers_decimate_particles

def IOHelpers_move_particles_relative(object, indices, delta, space):
    return _helpers.IOHelpers_move_particles_relative(object, indices, delta, space)
IOHelpers_move_particles_relative = _helpers.IOHelpers_move_particles_relative

def IOHelpers_move_particles_absolute(object, indices, positions):
    return _helpers.IOHelpers_move_particles_absolute(object, indices, positions)
IOHelpers_move_particles_absolute = _helpers.IOHelpers_move_particles_absolute

def IOHelpers_add_particles(*args):
    return _helpers.IOHelpers_add_particles(*args)
IOHelpers_add_particles = _helpers.IOHelpers_add_particles

def IOHelpers_edit_particles_property(object, property, indices, mode, value):
    return _helpers.IOHelpers_edit_particles_property(object, property, indices, mode, value)
IOHelpers_edit_particles_property = _helpers.IOHelpers_edit_particles_property

def IOHelpers_set_particles_property_values(object, property, type, dim, indices, values):
    return _helpers.IOHelpers_set_particles_property_values(object, property, type, dim, indices, values)
IOHelpers_set_particles_property_values = _helpers.IOHelpers_set_particles_property_values

def IOHelpers_create_particles_property(object, property, type, dim, value):
    return _helpers.IOHelpers_create_particles_property(object, property, type, dim, value)
IOHelpers_create_particles_property = _helpers.IOHelpers_create_particles_property

def IOHelpers_rename_particles_property(object, property, name):
    return _helpers.IOHelpers_rename_particles_property(object, property, name)
IOHelpers_rename_particles_property = _helpers.IOHelpers_rename_particles_property

def IOHelpers_delete_particles_properties(object, properties):
    return _helpers.IOHelpers_delete_particles_properties(object, properties)
IOHelpers_delete_particles_properties = _helpers.IOHelpers_delete_particles_properties

def IOHelpers_get_particles_property(object, property_name, index):
    return _helpers.IOHelpers_get_particles_property(object, property_name, index)
IOHelpers_get_particles_property = _helpers.IOHelpers_get_particles_property

def IOHelpers_create_polymesh(app, name, vertices, faces_vertex_count, faces_definition, shading_groups, sg_face_association):
    return _helpers.IOHelpers_create_polymesh(app, name, vertices, faces_vertex_count, faces_definition, shading_groups, sg_face_association)
IOHelpers_create_polymesh = _helpers.IOHelpers_create_polymesh

def IOHelpers_save_image(*args):
    return _helpers.IOHelpers_save_image(*args)
IOHelpers_save_image = _helpers.IOHelpers_save_image

def IOHelpers_import_geometry(*args):
    return _helpers.IOHelpers_import_geometry(*args)
IOHelpers_import_geometry = _helpers.IOHelpers_import_geometry

def IOHelpers_import_geometries(*args):
    return _helpers.IOHelpers_import_geometries(*args)
IOHelpers_import_geometries = _helpers.IOHelpers_import_geometries

def IOHelpers_export_geometry(app, filename, geometries):
    return _helpers.IOHelpers_export_geometry(app, filename, geometries)
IOHelpers_export_geometry = _helpers.IOHelpers_export_geometry

def IOHelpers_import_volume(*args):
    return _helpers.IOHelpers_import_volume(*args)
IOHelpers_import_volume = _helpers.IOHelpers_import_volume

def IOHelpers_import_volumes(*args):
    return _helpers.IOHelpers_import_volumes(*args)
IOHelpers_import_volumes = _helpers.IOHelpers_import_volumes

def IOHelpers_import_image(*args):
    return _helpers.IOHelpers_import_image(*args)
IOHelpers_import_image = _helpers.IOHelpers_import_image

def IOHelpers_import_images(*args):
    return _helpers.IOHelpers_import_images(*args)
IOHelpers_import_images = _helpers.IOHelpers_import_images

def IOHelpers_import_texture(*args):
    return _helpers.IOHelpers_import_texture(*args)
IOHelpers_import_texture = _helpers.IOHelpers_import_texture

def IOHelpers_import_textures(*args):
    return _helpers.IOHelpers_import_textures(*args)
IOHelpers_import_textures = _helpers.IOHelpers_import_textures

def IOHelpers_export_render_archive(app, filename):
    return _helpers.IOHelpers_export_render_archive(app, filename)
IOHelpers_export_render_archive = _helpers.IOHelpers_export_render_archive

def IOHelpers_export_context_as_project(app, context, filename):
    return _helpers.IOHelpers_export_context_as_project(app, context, filename)
IOHelpers_export_context_as_project = _helpers.IOHelpers_export_context_as_project

def IOHelpers_export_context_as_project_with_dependencies(app, context, filename):
    return _helpers.IOHelpers_export_context_as_project_with_dependencies(app, context, filename)
IOHelpers_export_context_as_project_with_dependencies = _helpers.IOHelpers_export_context_as_project_with_dependencies

def IOHelpers_reference_export_context(app, context, filename):
    return _helpers.IOHelpers_reference_export_context(app, context, filename)
IOHelpers_reference_export_context = _helpers.IOHelpers_reference_export_context

def IOHelpers_reload_resources(app):
    return _helpers.IOHelpers_reload_resources(app)
IOHelpers_reload_resources = _helpers.IOHelpers_reload_resources

def IOHelpers_resync_resources(app):
    return _helpers.IOHelpers_resync_resources(app)
IOHelpers_resync_resources = _helpers.IOHelpers_resync_resources

def IOHelpers_import_scene(*args):
    return _helpers.IOHelpers_import_scene(*args)
IOHelpers_import_scene = _helpers.IOHelpers_import_scene

def IOHelpers_import_project(*args):
    return _helpers.IOHelpers_import_project(*args)
IOHelpers_import_project = _helpers.IOHelpers_import_project

def IOHelpers_reference_asset(*args):
    return _helpers.IOHelpers_reference_asset(*args)
IOHelpers_reference_asset = _helpers.IOHelpers_reference_asset

def IOHelpers_reference_file(*args):
    return _helpers.IOHelpers_reference_file(*args)
IOHelpers_reference_file = _helpers.IOHelpers_reference_file

def IOHelpers_reference_files(working_context, filenames, refs):
    return _helpers.IOHelpers_reference_files(working_context, filenames, refs)
IOHelpers_reference_files = _helpers.IOHelpers_reference_files

def IOHelpers_reference_make_local(*args):
    return _helpers.IOHelpers_reference_make_local(*args)
IOHelpers_reference_make_local = _helpers.IOHelpers_reference_make_local

def IOHelpers_export_to_alembic(options):
    return _helpers.IOHelpers_export_to_alembic(options)
IOHelpers_export_to_alembic = _helpers.IOHelpers_export_to_alembic

def IOHelpers_save_icon(cls, filename, size=128):
    return _helpers.IOHelpers_save_icon(cls, filename, size)
IOHelpers_save_icon = _helpers.IOHelpers_save_icon

def IOHelpers_extract_shading_layer(*args):
    return _helpers.IOHelpers_extract_shading_layer(*args)
IOHelpers_extract_shading_layer = _helpers.IOHelpers_extract_shading_layer

def IOHelpers_pick_item(*args):
    return _helpers.IOHelpers_pick_item(*args)
IOHelpers_pick_item = _helpers.IOHelpers_pick_item

def IOHelpers_pick_items(*args):
    return _helpers.IOHelpers_pick_items(*args)
IOHelpers_pick_items = _helpers.IOHelpers_pick_items

def IOHelpers_pick_object(*args):
    return _helpers.IOHelpers_pick_object(*args)
IOHelpers_pick_object = _helpers.IOHelpers_pick_object

def IOHelpers_pick_objects(*args):
    return _helpers.IOHelpers_pick_objects(*args)
IOHelpers_pick_objects = _helpers.IOHelpers_pick_objects

def IOHelpers_pick_context(*args):
    return _helpers.IOHelpers_pick_context(*args)
IOHelpers_pick_context = _helpers.IOHelpers_pick_context

def IOHelpers_pick_contexts(*args):
    return _helpers.IOHelpers_pick_contexts(*args)
IOHelpers_pick_contexts = _helpers.IOHelpers_pick_contexts

def IOHelpers_class_info():
    return _helpers.IOHelpers_class_info()
IOHelpers_class_info = _helpers.IOHelpers_class_info

def IOHelpers____class_destructor__(instance, is_array):
    return _helpers.IOHelpers____class_destructor__(instance, is_array)
IOHelpers____class_destructor__ = _helpers.IOHelpers____class_destructor__

class AbcObjectUpdateData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbcObjectUpdateData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbcObjectUpdateData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["is_valid"] = _helpers.AbcObjectUpdateData_is_valid_set
    __swig_getmethods__["is_valid"] = _helpers.AbcObjectUpdateData_is_valid_get
    if _newclass:
        is_valid = _swig_property(_helpers.AbcObjectUpdateData_is_valid_get, _helpers.AbcObjectUpdateData_is_valid_set)
    __swig_setmethods__["timestamps"] = _helpers.AbcObjectUpdateData_timestamps_set
    __swig_getmethods__["timestamps"] = _helpers.AbcObjectUpdateData_timestamps_get
    if _newclass:
        timestamps = _swig_property(_helpers.AbcObjectUpdateData_timestamps_get, _helpers.AbcObjectUpdateData_timestamps_set)
    __swig_setmethods__["hash_key"] = _helpers.AbcObjectUpdateData_hash_key_set
    __swig_getmethods__["hash_key"] = _helpers.AbcObjectUpdateData_hash_key_get
    if _newclass:
        hash_key = _swig_property(_helpers.AbcObjectUpdateData_hash_key_get, _helpers.AbcObjectUpdateData_hash_key_set)
    __swig_setmethods__["property_hash_key"] = _helpers.AbcObjectUpdateData_property_hash_key_set
    __swig_getmethods__["property_hash_key"] = _helpers.AbcObjectUpdateData_property_hash_key_get
    if _newclass:
        property_hash_key = _swig_property(_helpers.AbcObjectUpdateData_property_hash_key_get, _helpers.AbcObjectUpdateData_property_hash_key_set)
    __swig_setmethods__["pivot_data"] = _helpers.AbcObjectUpdateData_pivot_data_set
    __swig_getmethods__["pivot_data"] = _helpers.AbcObjectUpdateData_pivot_data_get
    if _newclass:
        pivot_data = _swig_property(_helpers.AbcObjectUpdateData_pivot_data_get, _helpers.AbcObjectUpdateData_pivot_data_set)
    __swig_setmethods__["deformation_type"] = _helpers.AbcObjectUpdateData_deformation_type_set
    __swig_getmethods__["deformation_type"] = _helpers.AbcObjectUpdateData_deformation_type_get
    if _newclass:
        deformation_type = _swig_property(_helpers.AbcObjectUpdateData_deformation_type_get, _helpers.AbcObjectUpdateData_deformation_type_set)
    __swig_setmethods__["animation_frame_count"] = _helpers.AbcObjectUpdateData_animation_frame_count_set
    __swig_getmethods__["animation_frame_count"] = _helpers.AbcObjectUpdateData_animation_frame_count_get
    if _newclass:
        animation_frame_count = _swig_property(_helpers.AbcObjectUpdateData_animation_frame_count_get, _helpers.AbcObjectUpdateData_animation_frame_count_set)
    __swig_setmethods__["deformation_frame_count"] = _helpers.AbcObjectUpdateData_deformation_frame_count_set
    __swig_getmethods__["deformation_frame_count"] = _helpers.AbcObjectUpdateData_deformation_frame_count_get
    if _newclass:
        deformation_frame_count = _swig_property(_helpers.AbcObjectUpdateData_deformation_frame_count_get, _helpers.AbcObjectUpdateData_deformation_frame_count_set)
    __swig_setmethods__["animation_range"] = _helpers.AbcObjectUpdateData_animation_range_set
    __swig_getmethods__["animation_range"] = _helpers.AbcObjectUpdateData_animation_range_get
    if _newclass:
        animation_range = _swig_property(_helpers.AbcObjectUpdateData_animation_range_get, _helpers.AbcObjectUpdateData_animation_range_set)
    __swig_setmethods__["deformation_range"] = _helpers.AbcObjectUpdateData_deformation_range_set
    __swig_getmethods__["deformation_range"] = _helpers.AbcObjectUpdateData_deformation_range_get
    if _newclass:
        deformation_range = _swig_property(_helpers.AbcObjectUpdateData_deformation_range_get, _helpers.AbcObjectUpdateData_deformation_range_set)

    def __init__(self):
        this = _helpers.new_AbcObjectUpdateData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_AbcObjectUpdateData
    __del__ = lambda self: None
AbcObjectUpdateData_swigregister = _helpers.AbcObjectUpdateData_swigregister
AbcObjectUpdateData_swigregister(AbcObjectUpdateData)

class ObjectToUpdateInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectToUpdateInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectToUpdateInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filenames"] = _helpers.ObjectToUpdateInfo_filenames_set
    __swig_getmethods__["filenames"] = _helpers.ObjectToUpdateInfo_filenames_get
    if _newclass:
        filenames = _swig_property(_helpers.ObjectToUpdateInfo_filenames_get, _helpers.ObjectToUpdateInfo_filenames_set)
    __swig_setmethods__["object_name"] = _helpers.ObjectToUpdateInfo_object_name_set
    __swig_getmethods__["object_name"] = _helpers.ObjectToUpdateInfo_object_name_get
    if _newclass:
        object_name = _swig_property(_helpers.ObjectToUpdateInfo_object_name_get, _helpers.ObjectToUpdateInfo_object_name_set)
    __swig_setmethods__["old_timestamps"] = _helpers.ObjectToUpdateInfo_old_timestamps_set
    __swig_getmethods__["old_timestamps"] = _helpers.ObjectToUpdateInfo_old_timestamps_get
    if _newclass:
        old_timestamps = _swig_property(_helpers.ObjectToUpdateInfo_old_timestamps_get, _helpers.ObjectToUpdateInfo_old_timestamps_set)
    __swig_setmethods__["silent"] = _helpers.ObjectToUpdateInfo_silent_set
    __swig_getmethods__["silent"] = _helpers.ObjectToUpdateInfo_silent_get
    if _newclass:
        silent = _swig_property(_helpers.ObjectToUpdateInfo_silent_get, _helpers.ObjectToUpdateInfo_silent_set)
    __swig_setmethods__["asleep"] = _helpers.ObjectToUpdateInfo_asleep_set
    __swig_getmethods__["asleep"] = _helpers.ObjectToUpdateInfo_asleep_get
    if _newclass:
        asleep = _swig_property(_helpers.ObjectToUpdateInfo_asleep_get, _helpers.ObjectToUpdateInfo_asleep_set)
    __swig_setmethods__["object_ptr"] = _helpers.ObjectToUpdateInfo_object_ptr_set
    __swig_getmethods__["object_ptr"] = _helpers.ObjectToUpdateInfo_object_ptr_get
    if _newclass:
        object_ptr = _swig_property(_helpers.ObjectToUpdateInfo_object_ptr_get, _helpers.ObjectToUpdateInfo_object_ptr_set)
    __swig_setmethods__["callback"] = _helpers.ObjectToUpdateInfo_callback_set
    __swig_getmethods__["callback"] = _helpers.ObjectToUpdateInfo_callback_get
    if _newclass:
        callback = _swig_property(_helpers.ObjectToUpdateInfo_callback_get, _helpers.ObjectToUpdateInfo_callback_set)

    def __init__(self):
        this = _helpers.new_ObjectToUpdateInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_ObjectToUpdateInfo
    __del__ = lambda self: None
ObjectToUpdateInfo_swigregister = _helpers.ObjectToUpdateInfo_swigregister
ObjectToUpdateInfo_swigregister(ObjectToUpdateInfo)

class AbcScene(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbcScene, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbcScene, name)
    __repr__ = _swig_repr
    MODE_IMPORT = _helpers.AbcScene_MODE_IMPORT
    MODE_REFERENCE = _helpers.AbcScene_MODE_REFERENCE
    if _newclass:
        load = staticmethod(_helpers.AbcScene_load)
    else:
        load = _helpers.AbcScene_load
    if _newclass:
        get_object_children = staticmethod(_helpers.AbcScene_get_object_children)
    else:
        get_object_children = _helpers.AbcScene_get_object_children
    if _newclass:
        get_root_name = staticmethod(_helpers.AbcScene_get_root_name)
    else:
        get_root_name = _helpers.AbcScene_get_root_name
    if _newclass:
        load_reference = staticmethod(_helpers.AbcScene_load_reference)
    else:
        load_reference = _helpers.AbcScene_load_reference
    if _newclass:
        get_objects_data = staticmethod(_helpers.AbcScene_get_objects_data)
    else:
        get_objects_data = _helpers.AbcScene_get_objects_data
    if _newclass:
        add_object_for_update = staticmethod(_helpers.AbcScene_add_object_for_update)
    else:
        add_object_for_update = _helpers.AbcScene_add_object_for_update
    if _newclass:
        update_objects = staticmethod(_helpers.AbcScene_update_objects)
    else:
        update_objects = _helpers.AbcScene_update_objects
    if _newclass:
        register_directives = staticmethod(_helpers.AbcScene_register_directives)
    else:
        register_directives = _helpers.AbcScene_register_directives
    if _newclass:
        export_context = staticmethod(_helpers.AbcScene_export_context)
    else:
        export_context = _helpers.AbcScene_export_context
    if _newclass:
        export_objects = staticmethod(_helpers.AbcScene_export_objects)
    else:
        export_objects = _helpers.AbcScene_export_objects
    if _newclass:
        export_3d_layer = staticmethod(_helpers.AbcScene_export_3d_layer)
    else:
        export_3d_layer = _helpers.AbcScene_export_3d_layer

    def __init__(self):
        this = _helpers.new_AbcScene()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_AbcScene
    __del__ = lambda self: None
AbcScene_swigregister = _helpers.AbcScene_swigregister
AbcScene_swigregister(AbcScene)

def AbcScene_load(filename, current_context, mode, progress_bar=None):
    return _helpers.AbcScene_load(filename, current_context, mode, progress_bar)
AbcScene_load = _helpers.AbcScene_load

def AbcScene_get_object_children(filenames, app, object_path, children_names):
    return _helpers.AbcScene_get_object_children(filenames, app, object_path, children_names)
AbcScene_get_object_children = _helpers.AbcScene_get_object_children

def AbcScene_get_root_name(filenames, app, root_name):
    return _helpers.AbcScene_get_root_name(filenames, app, root_name)
AbcScene_get_root_name = _helpers.AbcScene_get_root_name

def AbcScene_load_reference(*args):
    return _helpers.AbcScene_load_reference(*args)
AbcScene_load_reference = _helpers.AbcScene_load_reference

def AbcScene_get_objects_data(filenames, object_names, pivot_modes, object_data, progress_bar):
    return _helpers.AbcScene_get_objects_data(filenames, object_names, pivot_modes, object_data, progress_bar)
AbcScene_get_objects_data = _helpers.AbcScene_get_objects_data

def AbcScene_add_object_for_update(filenames, object_name, old_timestamps, object, cb, silent, asleep=False):
    return _helpers.AbcScene_add_object_for_update(filenames, object_name, old_timestamps, object, cb, silent, asleep)
AbcScene_add_object_for_update = _helpers.AbcScene_add_object_for_update

def AbcScene_update_objects(data):
    return _helpers.AbcScene_update_objects(data)
AbcScene_update_objects = _helpers.AbcScene_update_objects

def AbcScene_register_directives(app):
    return _helpers.AbcScene_register_directives(app)
AbcScene_register_directives = _helpers.AbcScene_register_directives

def AbcScene_export_context(options):
    return _helpers.AbcScene_export_context(options)
AbcScene_export_context = _helpers.AbcScene_export_context

def AbcScene_export_objects(objects, options):
    return _helpers.AbcScene_export_objects(objects, options)
AbcScene_export_objects = _helpers.AbcScene_export_objects

def AbcScene_export_3d_layer(options):
    return _helpers.AbcScene_export_3d_layer(options)
AbcScene_export_3d_layer = _helpers.AbcScene_export_3d_layer

class AbcExportOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbcExportOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbcExportOptions, name)
    __repr__ = _swig_repr
    EXPORT_MODE_CONTEXT = _helpers.AbcExportOptions_EXPORT_MODE_CONTEXT
    EXPORT_MODE_SELECTION = _helpers.AbcExportOptions_EXPORT_MODE_SELECTION
    EXPORT_MODE_3D_LAYER = _helpers.AbcExportOptions_EXPORT_MODE_3D_LAYER
    EXPORT_MODE_PROJECT = _helpers.AbcExportOptions_EXPORT_MODE_PROJECT
    EXPORT_MODE_COUNT = _helpers.AbcExportOptions_EXPORT_MODE_COUNT
    PIVOT_MODE_NONE = _helpers.AbcExportOptions_PIVOT_MODE_NONE
    PIVOT_MODE_BAKE_GLOBAL_MATRICES = _helpers.AbcExportOptions_PIVOT_MODE_BAKE_GLOBAL_MATRICES
    PIVOT_MODE_BAKE_ALL_GLOBAL_MATRICES = _helpers.AbcExportOptions_PIVOT_MODE_BAKE_ALL_GLOBAL_MATRICES
    PIVOT_MODE_MISSING_PARENTS = _helpers.AbcExportOptions_PIVOT_MODE_MISSING_PARENTS
    PIVOT_MODE_ADD_EXTRA_XFORMS = _helpers.AbcExportOptions_PIVOT_MODE_ADD_EXTRA_XFORMS
    PIVOT_MODE_COUNT = _helpers.AbcExportOptions_PIVOT_MODE_COUNT
    SUBDIV_MODE_NONE = _helpers.AbcExportOptions_SUBDIV_MODE_NONE
    SUBDIV_MODE_FLAG = _helpers.AbcExportOptions_SUBDIV_MODE_FLAG
    SUBDIV_MODE_BAKE = _helpers.AbcExportOptions_SUBDIV_MODE_BAKE
    SUBDIV_MODE_COUNT = _helpers.AbcExportOptions_SUBDIV_MODE_COUNT
    FRAME_RANGE_MODE_CURRENT_FRAME = _helpers.AbcExportOptions_FRAME_RANGE_MODE_CURRENT_FRAME
    FRAME_RANGE_MODE_TIMELINE = _helpers.AbcExportOptions_FRAME_RANGE_MODE_TIMELINE
    FRAME_RANGE_MODE_CUSTOM_RANGE = _helpers.AbcExportOptions_FRAME_RANGE_MODE_CUSTOM_RANGE
    FRAME_RANGE_MODE_COUNT = _helpers.AbcExportOptions_FRAME_RANGE_MODE_COUNT
    SCATTERER_EXPORT_MODE_GEOMETRIES = _helpers.AbcExportOptions_SCATTERER_EXPORT_MODE_GEOMETRIES
    SCATTERER_EXPORT_MODE_BOUNDING_BOXES = _helpers.AbcExportOptions_SCATTERER_EXPORT_MODE_BOUNDING_BOXES
    SCATTERER_EXPORT_MODE_COUNT = _helpers.AbcExportOptions_SCATTERER_EXPORT_MODE_COUNT
    PropertiesCompatibilityMode_Default = _helpers.AbcExportOptions_PropertiesCompatibilityMode_Default
    PropertiesCompatibilityMode_Houdini = _helpers.AbcExportOptions_PropertiesCompatibilityMode_Houdini
    PropertiesCompatibilityMode_HoudiniAndKatana = _helpers.AbcExportOptions_PropertiesCompatibilityMode_HoudiniAndKatana
    PropertiesCompatibilityMode_Count = _helpers.AbcExportOptions_PropertiesCompatibilityMode_Count
    if _newclass:
        get_fill_sparse_properties = staticmethod(_helpers.AbcExportOptions_get_fill_sparse_properties)
    else:
        get_fill_sparse_properties = _helpers.AbcExportOptions_get_fill_sparse_properties
    if _newclass:
        get_promote_to_geometry_parameter = staticmethod(_helpers.AbcExportOptions_get_promote_to_geometry_parameter)
    else:
        get_promote_to_geometry_parameter = _helpers.AbcExportOptions_get_promote_to_geometry_parameter
    if _newclass:
        get_bake_indexed_properties = staticmethod(_helpers.AbcExportOptions_get_bake_indexed_properties)
    else:
        get_bake_indexed_properties = _helpers.AbcExportOptions_get_bake_indexed_properties

    def __init__(self, app):
        this = _helpers.new_AbcExportOptions(app)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["application"] = _helpers.AbcExportOptions_application_set
    __swig_getmethods__["application"] = _helpers.AbcExportOptions_application_get
    if _newclass:
        application = _swig_property(_helpers.AbcExportOptions_application_get, _helpers.AbcExportOptions_application_set)
    __swig_setmethods__["progress_bar"] = _helpers.AbcExportOptions_progress_bar_set
    __swig_getmethods__["progress_bar"] = _helpers.AbcExportOptions_progress_bar_get
    if _newclass:
        progress_bar = _swig_property(_helpers.AbcExportOptions_progress_bar_get, _helpers.AbcExportOptions_progress_bar_set)
    __swig_setmethods__["filename"] = _helpers.AbcExportOptions_filename_set
    __swig_getmethods__["filename"] = _helpers.AbcExportOptions_filename_get
    if _newclass:
        filename = _swig_property(_helpers.AbcExportOptions_filename_get, _helpers.AbcExportOptions_filename_set)
    __swig_setmethods__["export_mode"] = _helpers.AbcExportOptions_export_mode_set
    __swig_getmethods__["export_mode"] = _helpers.AbcExportOptions_export_mode_get
    if _newclass:
        export_mode = _swig_property(_helpers.AbcExportOptions_export_mode_get, _helpers.AbcExportOptions_export_mode_set)
    __swig_setmethods__["context"] = _helpers.AbcExportOptions_context_set
    __swig_getmethods__["context"] = _helpers.AbcExportOptions_context_get
    if _newclass:
        context = _swig_property(_helpers.AbcExportOptions_context_get, _helpers.AbcExportOptions_context_set)
    __swig_setmethods__["layer_3d"] = _helpers.AbcExportOptions_layer_3d_set
    __swig_getmethods__["layer_3d"] = _helpers.AbcExportOptions_layer_3d_get
    if _newclass:
        layer_3d = _swig_property(_helpers.AbcExportOptions_layer_3d_get, _helpers.AbcExportOptions_layer_3d_set)
    __swig_setmethods__["object_list"] = _helpers.AbcExportOptions_object_list_set
    __swig_getmethods__["object_list"] = _helpers.AbcExportOptions_object_list_get
    if _newclass:
        object_list = _swig_property(_helpers.AbcExportOptions_object_list_get, _helpers.AbcExportOptions_object_list_set)
    __swig_setmethods__["pivot_mode"] = _helpers.AbcExportOptions_pivot_mode_set
    __swig_getmethods__["pivot_mode"] = _helpers.AbcExportOptions_pivot_mode_get
    if _newclass:
        pivot_mode = _swig_property(_helpers.AbcExportOptions_pivot_mode_get, _helpers.AbcExportOptions_pivot_mode_set)
    __swig_setmethods__["frame_range_mode"] = _helpers.AbcExportOptions_frame_range_mode_set
    __swig_getmethods__["frame_range_mode"] = _helpers.AbcExportOptions_frame_range_mode_get
    if _newclass:
        frame_range_mode = _swig_property(_helpers.AbcExportOptions_frame_range_mode_get, _helpers.AbcExportOptions_frame_range_mode_set)
    __swig_setmethods__["frame_range"] = _helpers.AbcExportOptions_frame_range_set
    __swig_getmethods__["frame_range"] = _helpers.AbcExportOptions_frame_range_get
    if _newclass:
        frame_range = _swig_property(_helpers.AbcExportOptions_frame_range_get, _helpers.AbcExportOptions_frame_range_set)
    __swig_setmethods__["transfer_source_data"] = _helpers.AbcExportOptions_transfer_source_data_set
    __swig_getmethods__["transfer_source_data"] = _helpers.AbcExportOptions_transfer_source_data_get
    if _newclass:
        transfer_source_data = _swig_property(_helpers.AbcExportOptions_transfer_source_data_get, _helpers.AbcExportOptions_transfer_source_data_set)
    __swig_setmethods__["restrict_to_clarisse_frame_range"] = _helpers.AbcExportOptions_restrict_to_clarisse_frame_range_set
    __swig_getmethods__["restrict_to_clarisse_frame_range"] = _helpers.AbcExportOptions_restrict_to_clarisse_frame_range_get
    if _newclass:
        restrict_to_clarisse_frame_range = _swig_property(_helpers.AbcExportOptions_restrict_to_clarisse_frame_range_get, _helpers.AbcExportOptions_restrict_to_clarisse_frame_range_set)
    __swig_setmethods__["export_one_frame_per_file"] = _helpers.AbcExportOptions_export_one_frame_per_file_set
    __swig_getmethods__["export_one_frame_per_file"] = _helpers.AbcExportOptions_export_one_frame_per_file_get
    if _newclass:
        export_one_frame_per_file = _swig_property(_helpers.AbcExportOptions_export_one_frame_per_file_get, _helpers.AbcExportOptions_export_one_frame_per_file_set)
    __swig_setmethods__["export_combiners"] = _helpers.AbcExportOptions_export_combiners_set
    __swig_getmethods__["export_combiners"] = _helpers.AbcExportOptions_export_combiners_get
    if _newclass:
        export_combiners = _swig_property(_helpers.AbcExportOptions_export_combiners_get, _helpers.AbcExportOptions_export_combiners_set)
    __swig_setmethods__["export_scatterers"] = _helpers.AbcExportOptions_export_scatterers_set
    __swig_getmethods__["export_scatterers"] = _helpers.AbcExportOptions_export_scatterers_get
    if _newclass:
        export_scatterers = _swig_property(_helpers.AbcExportOptions_export_scatterers_get, _helpers.AbcExportOptions_export_scatterers_set)
    __swig_setmethods__["scatterer_export_mode"] = _helpers.AbcExportOptions_scatterer_export_mode_set
    __swig_getmethods__["scatterer_export_mode"] = _helpers.AbcExportOptions_scatterer_export_mode_get
    if _newclass:
        scatterer_export_mode = _swig_property(_helpers.AbcExportOptions_scatterer_export_mode_get, _helpers.AbcExportOptions_scatterer_export_mode_set)
    __swig_setmethods__["export_properties"] = _helpers.AbcExportOptions_export_properties_set
    __swig_getmethods__["export_properties"] = _helpers.AbcExportOptions_export_properties_get
    if _newclass:
        export_properties = _swig_property(_helpers.AbcExportOptions_export_properties_get, _helpers.AbcExportOptions_export_properties_set)
    __swig_setmethods__["fill_sparse_properties"] = _helpers.AbcExportOptions_fill_sparse_properties_set
    __swig_getmethods__["fill_sparse_properties"] = _helpers.AbcExportOptions_fill_sparse_properties_get
    if _newclass:
        fill_sparse_properties = _swig_property(_helpers.AbcExportOptions_fill_sparse_properties_get, _helpers.AbcExportOptions_fill_sparse_properties_set)
    __swig_setmethods__["promote_to_geometry_parameter"] = _helpers.AbcExportOptions_promote_to_geometry_parameter_set
    __swig_getmethods__["promote_to_geometry_parameter"] = _helpers.AbcExportOptions_promote_to_geometry_parameter_get
    if _newclass:
        promote_to_geometry_parameter = _swig_property(_helpers.AbcExportOptions_promote_to_geometry_parameter_get, _helpers.AbcExportOptions_promote_to_geometry_parameter_set)
    __swig_setmethods__["bake_indexed_properties"] = _helpers.AbcExportOptions_bake_indexed_properties_set
    __swig_getmethods__["bake_indexed_properties"] = _helpers.AbcExportOptions_bake_indexed_properties_get
    if _newclass:
        bake_indexed_properties = _swig_property(_helpers.AbcExportOptions_bake_indexed_properties_get, _helpers.AbcExportOptions_bake_indexed_properties_set)
    __swig_destroy__ = _helpers.delete_AbcExportOptions
    __del__ = lambda self: None
AbcExportOptions_swigregister = _helpers.AbcExportOptions_swigregister
AbcExportOptions_swigregister(AbcExportOptions)

def AbcExportOptions_get_fill_sparse_properties(mode):
    return _helpers.AbcExportOptions_get_fill_sparse_properties(mode)
AbcExportOptions_get_fill_sparse_properties = _helpers.AbcExportOptions_get_fill_sparse_properties

def AbcExportOptions_get_promote_to_geometry_parameter(mode):
    return _helpers.AbcExportOptions_get_promote_to_geometry_parameter(mode)
AbcExportOptions_get_promote_to_geometry_parameter = _helpers.AbcExportOptions_get_promote_to_geometry_parameter

def AbcExportOptions_get_bake_indexed_properties(mode):
    return _helpers.AbcExportOptions_get_bake_indexed_properties(mode)
AbcExportOptions_get_bake_indexed_properties = _helpers.AbcExportOptions_get_bake_indexed_properties

class ImageIOTextureStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageIOTextureStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageIOTextureStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        get_texture_stream = staticmethod(_helpers.ImageIOTextureStream_get_texture_stream)
    else:
        get_texture_stream = _helpers.ImageIOTextureStream_get_texture_stream
    if _newclass:
        destroy = staticmethod(_helpers.ImageIOTextureStream_destroy)
    else:
        destroy = _helpers.ImageIOTextureStream_destroy
    __swig_destroy__ = _helpers.delete_ImageIOTextureStream
    __del__ = lambda self: None

    def evaluate(self, filename, eval_ctx, repeat_u, repeat_v, filtering, mipmaps, result):
        return _helpers.ImageIOTextureStream_evaluate(self, filename, eval_ctx, repeat_u, repeat_v, filtering, mipmaps, result)
    if _newclass:
        set_cache_size = staticmethod(_helpers.ImageIOTextureStream_set_cache_size)
    else:
        set_cache_size = _helpers.ImageIOTextureStream_set_cache_size
    if _newclass:
        get_cache_size = staticmethod(_helpers.ImageIOTextureStream_get_cache_size)
    else:
        get_cache_size = _helpers.ImageIOTextureStream_get_cache_size

    def get_peak_cache_memory(self):
        return _helpers.ImageIOTextureStream_get_peak_cache_memory(self)

    def get_stats(self, log_level=1):
        return _helpers.ImageIOTextureStream_get_stats(self, log_level)

    def invalidate(self, filename):
        return _helpers.ImageIOTextureStream_invalidate(self, filename)

    def invalidate_all(self, force=False):
        return _helpers.ImageIOTextureStream_invalidate_all(self, force)

    def get_oiio_texture_system(self):
        return _helpers.ImageIOTextureStream_get_oiio_texture_system(self)

    def get_image_size(self, filename):
        return _helpers.ImageIOTextureStream_get_image_size(self, filename)

    def get_memory_size(self):
        return _helpers.ImageIOTextureStream_get_memory_size(self)

    def clear(self):
        return _helpers.ImageIOTextureStream_clear(self)
ImageIOTextureStream_swigregister = _helpers.ImageIOTextureStream_swigregister
ImageIOTextureStream_swigregister(ImageIOTextureStream)

def ImageIOTextureStream_get_texture_stream():
    return _helpers.ImageIOTextureStream_get_texture_stream()
ImageIOTextureStream_get_texture_stream = _helpers.ImageIOTextureStream_get_texture_stream

def ImageIOTextureStream_destroy():
    return _helpers.ImageIOTextureStream_destroy()
ImageIOTextureStream_destroy = _helpers.ImageIOTextureStream_destroy

def ImageIOTextureStream_set_cache_size(size):
    return _helpers.ImageIOTextureStream_set_cache_size(size)
ImageIOTextureStream_set_cache_size = _helpers.ImageIOTextureStream_set_cache_size

def ImageIOTextureStream_get_cache_size():
    return _helpers.ImageIOTextureStream_get_cache_size()
ImageIOTextureStream_get_cache_size = _helpers.ImageIOTextureStream_get_cache_size

class IOHelpersDisplayDriver(base.CoreBaseObject):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOHelpersDisplayDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOHelpersDisplayDriver, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IOHelpersDisplayDriver:
            _self = None
        else:
            _self = self
        this = _helpers.new_IOHelpersDisplayDriver(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_IOHelpersDisplayDriver
    __del__ = lambda self: None

    def connect(self, image):
        return _helpers.IOHelpersDisplayDriver_connect(self, image)

    def disconnect(self):
        return _helpers.IOHelpersDisplayDriver_disconnect(self)

    def is_connected(self):
        return _helpers.IOHelpersDisplayDriver_is_connected(self)

    def get_image(self):
        return _helpers.IOHelpersDisplayDriver_get_image(self)

    def on_image_level_update(self, quality, image):
        return _helpers.IOHelpersDisplayDriver_on_image_level_update(self, quality, image)

    def on_init_render(self, init_data):
        return _helpers.IOHelpersDisplayDriver_on_init_render(self, init_data)

    def on_highlight_region(self, regions):
        return _helpers.IOHelpersDisplayDriver_on_highlight_region(self, regions)

    def on_draw_region(self, progress_image, regions):
        return _helpers.IOHelpersDisplayDriver_on_draw_region(self, progress_image, regions)

    def on_end_render(self):
        return _helpers.IOHelpersDisplayDriver_on_end_render(self)

    def on_progress_update(self, progress):
        return _helpers.IOHelpersDisplayDriver_on_progress_update(self, progress)
    if _newclass:
        class_info = staticmethod(_helpers.IOHelpersDisplayDriver_class_info)
    else:
        class_info = _helpers.IOHelpersDisplayDriver_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_helpers.IOHelpersDisplayDriver____class_destructor__)
    else:
        ___class_destructor__ = _helpers.IOHelpersDisplayDriver____class_destructor__

    def get_class_info(self):
        return _helpers.IOHelpersDisplayDriver_get_class_info(self)
    def __disown__(self):
        self.this.disown()
        _helpers.disown_IOHelpersDisplayDriver(self)
        return weakref_proxy(self)
IOHelpersDisplayDriver_swigregister = _helpers.IOHelpersDisplayDriver_swigregister
IOHelpersDisplayDriver_swigregister(IOHelpersDisplayDriver)

def IOHelpersDisplayDriver_class_info():
    return _helpers.IOHelpersDisplayDriver_class_info()
IOHelpersDisplayDriver_class_info = _helpers.IOHelpersDisplayDriver_class_info

def IOHelpersDisplayDriver____class_destructor__(instance, is_array):
    return _helpers.IOHelpersDisplayDriver____class_destructor__(instance, is_array)
IOHelpersDisplayDriver____class_destructor__ = _helpers.IOHelpersDisplayDriver____class_destructor__

class SdkHelpers(base.CoreBaseType):
    __swig_setmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SdkHelpers, name, value)
    __swig_getmethods__ = {}
    for _s in [base.CoreBaseType]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SdkHelpers, name)
    __repr__ = _swig_repr
    if _newclass:
        group_items_selected = staticmethod(_helpers.SdkHelpers_group_items_selected)
    else:
        group_items_selected = _helpers.SdkHelpers_group_items_selected
    if _newclass:
        combine_items_selected = staticmethod(_helpers.SdkHelpers_combine_items_selected)
    else:
        combine_items_selected = _helpers.SdkHelpers_combine_items_selected
    if _newclass:
        create_shading_layer_for_items_selected = staticmethod(_helpers.SdkHelpers_create_shading_layer_for_items_selected)
    else:
        create_shading_layer_for_items_selected = _helpers.SdkHelpers_create_shading_layer_for_items_selected
    if _newclass:
        delete_items_selected = staticmethod(_helpers.SdkHelpers_delete_items_selected)
    else:
        delete_items_selected = _helpers.SdkHelpers_delete_items_selected
    if _newclass:
        trash_items_selected = staticmethod(_helpers.SdkHelpers_trash_items_selected)
    else:
        trash_items_selected = _helpers.SdkHelpers_trash_items_selected
    if _newclass:
        instantiate_items_selected = staticmethod(_helpers.SdkHelpers_instantiate_items_selected)
    else:
        instantiate_items_selected = _helpers.SdkHelpers_instantiate_items_selected
    if _newclass:
        copy_items_selected = staticmethod(_helpers.SdkHelpers_copy_items_selected)
    else:
        copy_items_selected = _helpers.SdkHelpers_copy_items_selected
    if _newclass:
        paste = staticmethod(_helpers.SdkHelpers_paste)
    else:
        paste = _helpers.SdkHelpers_paste
    if _newclass:
        cut_items_selected = staticmethod(_helpers.SdkHelpers_cut_items_selected)
    else:
        cut_items_selected = _helpers.SdkHelpers_cut_items_selected
    if _newclass:
        make_local_items_selected = staticmethod(_helpers.SdkHelpers_make_local_items_selected)
    else:
        make_local_items_selected = _helpers.SdkHelpers_make_local_items_selected
    if _newclass:
        make_instance_items_selected = staticmethod(_helpers.SdkHelpers_make_instance_items_selected)
    else:
        make_instance_items_selected = _helpers.SdkHelpers_make_instance_items_selected
    if _newclass:
        toggle_items_selected_display = staticmethod(_helpers.SdkHelpers_toggle_items_selected_display)
    else:
        toggle_items_selected_display = _helpers.SdkHelpers_toggle_items_selected_display
    if _newclass:
        enable_disable_items_selected = staticmethod(_helpers.SdkHelpers_enable_disable_items_selected)
    else:
        enable_disable_items_selected = _helpers.SdkHelpers_enable_disable_items_selected
    if _newclass:
        isolate_items_selected = staticmethod(_helpers.SdkHelpers_isolate_items_selected)
    else:
        isolate_items_selected = _helpers.SdkHelpers_isolate_items_selected
    if _newclass:
        isolate_more_items_selected = staticmethod(_helpers.SdkHelpers_isolate_more_items_selected)
    else:
        isolate_more_items_selected = _helpers.SdkHelpers_isolate_more_items_selected
    if _newclass:
        isolate_less_items_selected = staticmethod(_helpers.SdkHelpers_isolate_less_items_selected)
    else:
        isolate_less_items_selected = _helpers.SdkHelpers_isolate_less_items_selected
    if _newclass:
        isolate_swap_items_selected = staticmethod(_helpers.SdkHelpers_isolate_swap_items_selected)
    else:
        isolate_swap_items_selected = _helpers.SdkHelpers_isolate_swap_items_selected
    if _newclass:
        colortag_items_selected = staticmethod(_helpers.SdkHelpers_colortag_items_selected)
    else:
        colortag_items_selected = _helpers.SdkHelpers_colortag_items_selected
    if _newclass:
        center_objects_pivots_items_selected = staticmethod(_helpers.SdkHelpers_center_objects_pivots_items_selected)
    else:
        center_objects_pivots_items_selected = _helpers.SdkHelpers_center_objects_pivots_items_selected
    if _newclass:
        reset_pivots_items_selected = staticmethod(_helpers.SdkHelpers_reset_pivots_items_selected)
    else:
        reset_pivots_items_selected = _helpers.SdkHelpers_reset_pivots_items_selected
    if _newclass:
        remove_offsets_items_selected = staticmethod(_helpers.SdkHelpers_remove_offsets_items_selected)
    else:
        remove_offsets_items_selected = _helpers.SdkHelpers_remove_offsets_items_selected
    if _newclass:
        record_offsets_items_selected = staticmethod(_helpers.SdkHelpers_record_offsets_items_selected)
    else:
        record_offsets_items_selected = _helpers.SdkHelpers_record_offsets_items_selected
    if _newclass:
        reset_transforms_items_selected = staticmethod(_helpers.SdkHelpers_reset_transforms_items_selected)
    else:
        reset_transforms_items_selected = _helpers.SdkHelpers_reset_transforms_items_selected
    if _newclass:
        group_items = staticmethod(_helpers.SdkHelpers_group_items)
    else:
        group_items = _helpers.SdkHelpers_group_items
    if _newclass:
        combine_items = staticmethod(_helpers.SdkHelpers_combine_items)
    else:
        combine_items = _helpers.SdkHelpers_combine_items
    if _newclass:
        create_shading_layer_for_items = staticmethod(_helpers.SdkHelpers_create_shading_layer_for_items)
    else:
        create_shading_layer_for_items = _helpers.SdkHelpers_create_shading_layer_for_items
    if _newclass:
        delete_items = staticmethod(_helpers.SdkHelpers_delete_items)
    else:
        delete_items = _helpers.SdkHelpers_delete_items
    if _newclass:
        trash_items = staticmethod(_helpers.SdkHelpers_trash_items)
    else:
        trash_items = _helpers.SdkHelpers_trash_items
    if _newclass:
        instantiate_items = staticmethod(_helpers.SdkHelpers_instantiate_items)
    else:
        instantiate_items = _helpers.SdkHelpers_instantiate_items
    if _newclass:
        copy_items = staticmethod(_helpers.SdkHelpers_copy_items)
    else:
        copy_items = _helpers.SdkHelpers_copy_items
    if _newclass:
        cut_items = staticmethod(_helpers.SdkHelpers_cut_items)
    else:
        cut_items = _helpers.SdkHelpers_cut_items
    if _newclass:
        make_local_items = staticmethod(_helpers.SdkHelpers_make_local_items)
    else:
        make_local_items = _helpers.SdkHelpers_make_local_items
    if _newclass:
        make_instance_items = staticmethod(_helpers.SdkHelpers_make_instance_items)
    else:
        make_instance_items = _helpers.SdkHelpers_make_instance_items
    if _newclass:
        toggle_items_display = staticmethod(_helpers.SdkHelpers_toggle_items_display)
    else:
        toggle_items_display = _helpers.SdkHelpers_toggle_items_display
    if _newclass:
        enable_disable_items = staticmethod(_helpers.SdkHelpers_enable_disable_items)
    else:
        enable_disable_items = _helpers.SdkHelpers_enable_disable_items
    if _newclass:
        colortag_items = staticmethod(_helpers.SdkHelpers_colortag_items)
    else:
        colortag_items = _helpers.SdkHelpers_colortag_items
    if _newclass:
        isolate_items = staticmethod(_helpers.SdkHelpers_isolate_items)
    else:
        isolate_items = _helpers.SdkHelpers_isolate_items
    if _newclass:
        center_objects_pivots = staticmethod(_helpers.SdkHelpers_center_objects_pivots)
    else:
        center_objects_pivots = _helpers.SdkHelpers_center_objects_pivots
    if _newclass:
        reset_pivots = staticmethod(_helpers.SdkHelpers_reset_pivots)
    else:
        reset_pivots = _helpers.SdkHelpers_reset_pivots
    if _newclass:
        remove_offsets = staticmethod(_helpers.SdkHelpers_remove_offsets)
    else:
        remove_offsets = _helpers.SdkHelpers_remove_offsets
    if _newclass:
        record_offsets = staticmethod(_helpers.SdkHelpers_record_offsets)
    else:
        record_offsets = _helpers.SdkHelpers_record_offsets
    if _newclass:
        reset_transforms = staticmethod(_helpers.SdkHelpers_reset_transforms)
    else:
        reset_transforms = _helpers.SdkHelpers_reset_transforms
    if _newclass:
        contextualize_items = staticmethod(_helpers.SdkHelpers_contextualize_items)
    else:
        contextualize_items = _helpers.SdkHelpers_contextualize_items
    if _newclass:
        create_context = staticmethod(_helpers.SdkHelpers_create_context)
    else:
        create_context = _helpers.SdkHelpers_create_context
    if _newclass:
        export_context_as_reference = staticmethod(_helpers.SdkHelpers_export_context_as_reference)
    else:
        export_context_as_reference = _helpers.SdkHelpers_export_context_as_reference
    if _newclass:
        revert_items_overrides = staticmethod(_helpers.SdkHelpers_revert_items_overrides)
    else:
        revert_items_overrides = _helpers.SdkHelpers_revert_items_overrides
    if _newclass:
        revert_sub_items_overrides = staticmethod(_helpers.SdkHelpers_revert_sub_items_overrides)
    else:
        revert_sub_items_overrides = _helpers.SdkHelpers_revert_sub_items_overrides
    if _newclass:
        log_item_usage = staticmethod(_helpers.SdkHelpers_log_item_usage)
    else:
        log_item_usage = _helpers.SdkHelpers_log_item_usage
    if _newclass:
        class_info = staticmethod(_helpers.SdkHelpers_class_info)
    else:
        class_info = _helpers.SdkHelpers_class_info
    if _newclass:
        ___class_destructor__ = staticmethod(_helpers.SdkHelpers____class_destructor__)
    else:
        ___class_destructor__ = _helpers.SdkHelpers____class_destructor__

    def get_class_info(self):
        return _helpers.SdkHelpers_get_class_info(self)

    def __init__(self):
        this = _helpers.new_SdkHelpers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _helpers.delete_SdkHelpers
    __del__ = lambda self: None
SdkHelpers_swigregister = _helpers.SdkHelpers_swigregister
SdkHelpers_swigregister(SdkHelpers)

def SdkHelpers_group_items_selected(app):
    return _helpers.SdkHelpers_group_items_selected(app)
SdkHelpers_group_items_selected = _helpers.SdkHelpers_group_items_selected

def SdkHelpers_combine_items_selected(app, mode=0):
    return _helpers.SdkHelpers_combine_items_selected(app, mode)
SdkHelpers_combine_items_selected = _helpers.SdkHelpers_combine_items_selected

def SdkHelpers_create_shading_layer_for_items_selected(app, creation_mode):
    return _helpers.SdkHelpers_create_shading_layer_for_items_selected(app, creation_mode)
SdkHelpers_create_shading_layer_for_items_selected = _helpers.SdkHelpers_create_shading_layer_for_items_selected

def SdkHelpers_delete_items_selected(app):
    return _helpers.SdkHelpers_delete_items_selected(app)
SdkHelpers_delete_items_selected = _helpers.SdkHelpers_delete_items_selected

def SdkHelpers_trash_items_selected(app):
    return _helpers.SdkHelpers_trash_items_selected(app)
SdkHelpers_trash_items_selected = _helpers.SdkHelpers_trash_items_selected

def SdkHelpers_instantiate_items_selected(app):
    return _helpers.SdkHelpers_instantiate_items_selected(app)
SdkHelpers_instantiate_items_selected = _helpers.SdkHelpers_instantiate_items_selected

def SdkHelpers_copy_items_selected(app):
    return _helpers.SdkHelpers_copy_items_selected(app)
SdkHelpers_copy_items_selected = _helpers.SdkHelpers_copy_items_selected

def SdkHelpers_paste(app):
    return _helpers.SdkHelpers_paste(app)
SdkHelpers_paste = _helpers.SdkHelpers_paste

def SdkHelpers_cut_items_selected(app):
    return _helpers.SdkHelpers_cut_items_selected(app)
SdkHelpers_cut_items_selected = _helpers.SdkHelpers_cut_items_selected

def SdkHelpers_make_local_items_selected(app):
    return _helpers.SdkHelpers_make_local_items_selected(app)
SdkHelpers_make_local_items_selected = _helpers.SdkHelpers_make_local_items_selected

def SdkHelpers_make_instance_items_selected(app, source):
    return _helpers.SdkHelpers_make_instance_items_selected(app, source)
SdkHelpers_make_instance_items_selected = _helpers.SdkHelpers_make_instance_items_selected

def SdkHelpers_toggle_items_selected_display(app, display):
    return _helpers.SdkHelpers_toggle_items_selected_display(app, display)
SdkHelpers_toggle_items_selected_display = _helpers.SdkHelpers_toggle_items_selected_display

def SdkHelpers_enable_disable_items_selected(app, disable):
    return _helpers.SdkHelpers_enable_disable_items_selected(app, disable)
SdkHelpers_enable_disable_items_selected = _helpers.SdkHelpers_enable_disable_items_selected

def SdkHelpers_isolate_items_selected(app):
    return _helpers.SdkHelpers_isolate_items_selected(app)
SdkHelpers_isolate_items_selected = _helpers.SdkHelpers_isolate_items_selected

def SdkHelpers_isolate_more_items_selected(app):
    return _helpers.SdkHelpers_isolate_more_items_selected(app)
SdkHelpers_isolate_more_items_selected = _helpers.SdkHelpers_isolate_more_items_selected

def SdkHelpers_isolate_less_items_selected(app):
    return _helpers.SdkHelpers_isolate_less_items_selected(app)
SdkHelpers_isolate_less_items_selected = _helpers.SdkHelpers_isolate_less_items_selected

def SdkHelpers_isolate_swap_items_selected(app):
    return _helpers.SdkHelpers_isolate_swap_items_selected(app)
SdkHelpers_isolate_swap_items_selected = _helpers.SdkHelpers_isolate_swap_items_selected

def SdkHelpers_colortag_items_selected(app, tag):
    return _helpers.SdkHelpers_colortag_items_selected(app, tag)
SdkHelpers_colortag_items_selected = _helpers.SdkHelpers_colortag_items_selected

def SdkHelpers_center_objects_pivots_items_selected(app, rest_on_ground):
    return _helpers.SdkHelpers_center_objects_pivots_items_selected(app, rest_on_ground)
SdkHelpers_center_objects_pivots_items_selected = _helpers.SdkHelpers_center_objects_pivots_items_selected

def SdkHelpers_reset_pivots_items_selected(app, use_translate_offset):
    return _helpers.SdkHelpers_reset_pivots_items_selected(app, use_translate_offset)
SdkHelpers_reset_pivots_items_selected = _helpers.SdkHelpers_reset_pivots_items_selected

def SdkHelpers_remove_offsets_items_selected(app):
    return _helpers.SdkHelpers_remove_offsets_items_selected(app)
SdkHelpers_remove_offsets_items_selected = _helpers.SdkHelpers_remove_offsets_items_selected

def SdkHelpers_record_offsets_items_selected(app):
    return _helpers.SdkHelpers_record_offsets_items_selected(app)
SdkHelpers_record_offsets_items_selected = _helpers.SdkHelpers_record_offsets_items_selected

def SdkHelpers_reset_transforms_items_selected(app):
    return _helpers.SdkHelpers_reset_transforms_items_selected(app)
SdkHelpers_reset_transforms_items_selected = _helpers.SdkHelpers_reset_transforms_items_selected

def SdkHelpers_group_items(app, working_context, selection):
    return _helpers.SdkHelpers_group_items(app, working_context, selection)
SdkHelpers_group_items = _helpers.SdkHelpers_group_items

def SdkHelpers_combine_items(app, working_context, selection, mode=0):
    return _helpers.SdkHelpers_combine_items(app, working_context, selection, mode)
SdkHelpers_combine_items = _helpers.SdkHelpers_combine_items

def SdkHelpers_create_shading_layer_for_items(app, working_context, selection, creation_mode):
    return _helpers.SdkHelpers_create_shading_layer_for_items(app, working_context, selection, creation_mode)
SdkHelpers_create_shading_layer_for_items = _helpers.SdkHelpers_create_shading_layer_for_items

def SdkHelpers_delete_items(app, selection):
    return _helpers.SdkHelpers_delete_items(app, selection)
SdkHelpers_delete_items = _helpers.SdkHelpers_delete_items

def SdkHelpers_trash_items(app, selection):
    return _helpers.SdkHelpers_trash_items(app, selection)
SdkHelpers_trash_items = _helpers.SdkHelpers_trash_items

def SdkHelpers_instantiate_items(app, selection, selection_slot):
    return _helpers.SdkHelpers_instantiate_items(app, selection, selection_slot)
SdkHelpers_instantiate_items = _helpers.SdkHelpers_instantiate_items

def SdkHelpers_copy_items(app, selection, include_dependencies=False):
    return _helpers.SdkHelpers_copy_items(app, selection, include_dependencies)
SdkHelpers_copy_items = _helpers.SdkHelpers_copy_items

def SdkHelpers_cut_items(app, selection):
    return _helpers.SdkHelpers_cut_items(app, selection)
SdkHelpers_cut_items = _helpers.SdkHelpers_cut_items

def SdkHelpers_make_local_items(app, selection):
    return _helpers.SdkHelpers_make_local_items(app, selection)
SdkHelpers_make_local_items = _helpers.SdkHelpers_make_local_items

def SdkHelpers_make_instance_items(app, selection, source):
    return _helpers.SdkHelpers_make_instance_items(app, selection, source)
SdkHelpers_make_instance_items = _helpers.SdkHelpers_make_instance_items

def SdkHelpers_toggle_items_display(app, selection, display):
    return _helpers.SdkHelpers_toggle_items_display(app, selection, display)
SdkHelpers_toggle_items_display = _helpers.SdkHelpers_toggle_items_display

def SdkHelpers_enable_disable_items(app, selection, disable):
    return _helpers.SdkHelpers_enable_disable_items(app, selection, disable)
SdkHelpers_enable_disable_items = _helpers.SdkHelpers_enable_disable_items

def SdkHelpers_colortag_items(app, selection, tag):
    return _helpers.SdkHelpers_colortag_items(app, selection, tag)
SdkHelpers_colortag_items = _helpers.SdkHelpers_colortag_items

def SdkHelpers_isolate_items(app, selection, mode):
    return _helpers.SdkHelpers_isolate_items(app, selection, mode)
SdkHelpers_isolate_items = _helpers.SdkHelpers_isolate_items

def SdkHelpers_center_objects_pivots(app, selection, rest_on_ground):
    return _helpers.SdkHelpers_center_objects_pivots(app, selection, rest_on_ground)
SdkHelpers_center_objects_pivots = _helpers.SdkHelpers_center_objects_pivots

def SdkHelpers_reset_pivots(app, selection, use_translate_offset):
    return _helpers.SdkHelpers_reset_pivots(app, selection, use_translate_offset)
SdkHelpers_reset_pivots = _helpers.SdkHelpers_reset_pivots

def SdkHelpers_remove_offsets(app, selection):
    return _helpers.SdkHelpers_remove_offsets(app, selection)
SdkHelpers_remove_offsets = _helpers.SdkHelpers_remove_offsets

def SdkHelpers_record_offsets(app, selection):
    return _helpers.SdkHelpers_record_offsets(app, selection)
SdkHelpers_record_offsets = _helpers.SdkHelpers_record_offsets

def SdkHelpers_reset_transforms(app, selection):
    return _helpers.SdkHelpers_reset_transforms(app, selection)
SdkHelpers_reset_transforms = _helpers.SdkHelpers_reset_transforms

def SdkHelpers_contextualize_items(*args):
    return _helpers.SdkHelpers_contextualize_items(*args)
SdkHelpers_contextualize_items = _helpers.SdkHelpers_contextualize_items

def SdkHelpers_create_context(app, working_context):
    return _helpers.SdkHelpers_create_context(app, working_context)
SdkHelpers_create_context = _helpers.SdkHelpers_create_context

def SdkHelpers_export_context_as_reference(app, context, filename):
    return _helpers.SdkHelpers_export_context_as_reference(app, context, filename)
SdkHelpers_export_context_as_reference = _helpers.SdkHelpers_export_context_as_reference

def SdkHelpers_revert_items_overrides(*args):
    return _helpers.SdkHelpers_revert_items_overrides(*args)
SdkHelpers_revert_items_overrides = _helpers.SdkHelpers_revert_items_overrides

def SdkHelpers_revert_sub_items_overrides(*args):
    return _helpers.SdkHelpers_revert_sub_items_overrides(*args)
SdkHelpers_revert_sub_items_overrides = _helpers.SdkHelpers_revert_sub_items_overrides

def SdkHelpers_log_item_usage(items, log_msg):
    return _helpers.SdkHelpers_log_item_usage(items, log_msg)
SdkHelpers_log_item_usage = _helpers.SdkHelpers_log_item_usage

def SdkHelpers_class_info():
    return _helpers.SdkHelpers_class_info()
SdkHelpers_class_info = _helpers.SdkHelpers_class_info

def SdkHelpers____class_destructor__(instance, is_array):
    return _helpers.SdkHelpers____class_destructor__(instance, is_array)
SdkHelpers____class_destructor__ = _helpers.SdkHelpers____class_destructor__

# This file is compatible with both classic and new-style classes.


